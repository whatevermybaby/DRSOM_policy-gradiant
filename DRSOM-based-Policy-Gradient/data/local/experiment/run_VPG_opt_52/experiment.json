{
  "_snapshotter": {
    "_snapshot_dir": "/home/lw/shanshu/DRSOM-based-Policy-Gradient/data/local/experiment/run_VPG_opt_52",
    "_snapshot_mode": "last",
    "_snapshot_gap": 1,
    "$type": "garage.experiment.snapshotter.Snapshotter"
  },
  "_has_setup": true,
  "_plot": false,
  "_seed": 100,
  "_train_args": {
    "n_epochs": 100,
    "batch_size": 50000.0,
    "plot": false,
    "store_episodes": false,
    "pause_for_plot": false,
    "start_epoch": 0,
    "$type": "garage.trainer.TrainArgs"
  },
  "_stats": {
    "total_epoch": 0,
    "total_itr": 0,
    "total_env_steps": 0,
    "last_episode": "None",
    "$type": "garage.trainer.ExperimentStats"
  },
  "_algo": {
    "env_spec": {
      "max_episode_length": 1000,
      "input_space": {
        "dtype": "dtype('float32')",
        "bounded_below": "array([ True])",
        "bounded_above": "array([ True])",
        "_shape": [
          1
        ],
        "low": "array([-1.], dtype=float32)",
        "high": "array([1.], dtype=float32)",
        "low_repr": "-1.0",
        "high_repr": "1.0",
        "_np_random": "None",
        "$type": "akro.box.Box"
      },
      "output_space": {
        "dtype": "dtype('float32')",
        "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
        "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
        "_shape": [
          11
        ],
        "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
        "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
        "low_repr": "-inf",
        "high_repr": "inf",
        "_np_random": "None",
        "$type": "akro.box.Box"
      },
      "$type": "garage._environment.EnvSpec"
    },
    "policy": {
      "training": true,
      "_parameters": {},
      "_buffers": {},
      "_non_persistent_buffers_set": [],
      "_backward_hooks": {},
      "_forward_hooks": {},
      "_forward_pre_hooks": {},
      "_state_dict_hooks": {},
      "_load_state_dict_pre_hooks": {},
      "_modules": {
        "_module": {
          "training": true,
          "_parameters": {
            "_init_std": {
              "$type": "torch.nn.parameter.Parameter"
            }
          },
          "_buffers": {
            "min_std_param": {
              "$type": "torch.Tensor"
            }
          },
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_mean_module": {
              "training": true,
              "_parameters": {},
              "_buffers": {},
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_layers": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "0": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 11.0,
                          "out_features": 32,
                          "$type": "torch.nn.modules.linear.Linear"
                        },
                        "non_linearity": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                          "$type": "garage.torch._functions.NonLinearity"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    },
                    "1": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 32,
                          "out_features": 32,
                          "$type": "torch.nn.modules.linear.Linear"
                        },
                        "non_linearity": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                          "$type": "garage.torch._functions.NonLinearity"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    }
                  },
                  "$type": "torch.nn.modules.container.ModuleList"
                },
                "_output_layers": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "0": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 32,
                          "out_features": 1.0,
                          "$type": "torch.nn.modules.linear.Linear"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    }
                  },
                  "$type": "torch.nn.modules.container.ModuleList"
                }
              },
              "_output_dim": 1.0,
              "$type": "garage.torch.modules.mlp_module.MLPModule"
            }
          },
          "_input_dim": 11.0,
          "_hidden_sizes": [
            32,
            32
          ],
          "_action_dim": 1.0,
          "_learn_std": true,
          "_std_hidden_sizes": [
            32,
            32
          ],
          "_min_std": 1e-06,
          "_max_std": "None",
          "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
          "_std_hidden_w_init": {
            "$type": "builtins.function"
          },
          "_std_hidden_b_init": {
            "$type": "builtins.function"
          },
          "_std_output_nonlinearity": "None",
          "_std_output_w_init": {
            "$type": "builtins.function"
          },
          "_std_parameterization": "exp",
          "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
          "_hidden_w_init": {
            "$type": "builtins.function"
          },
          "_hidden_b_init": {
            "$type": "builtins.function"
          },
          "_output_nonlinearity": "None",
          "_output_w_init": {
            "$type": "builtins.function"
          },
          "_output_b_init": {
            "$type": "builtins.function"
          },
          "_layer_normalization": false,
          "_norm_dist_class": {
            "$typename": "torch.distributions.normal.Normal"
          },
          "_min_std_param": {
            "$type": "torch.Tensor"
          },
          "_max_std_param": "None",
          "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
        }
      },
      "_env_spec": {
        "max_episode_length": 1000,
        "input_space": {
          "dtype": "dtype('float32')",
          "bounded_below": "array([ True])",
          "bounded_above": "array([ True])",
          "_shape": [
            1
          ],
          "low": "array([-1.], dtype=float32)",
          "high": "array([1.], dtype=float32)",
          "low_repr": "-1.0",
          "high_repr": "1.0",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "output_space": {
          "dtype": "dtype('float32')",
          "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
          "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
          "_shape": [
            11
          ],
          "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
          "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
          "low_repr": "-inf",
          "high_repr": "inf",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "$type": "garage._environment.EnvSpec"
      },
      "_name": "GaussianMLPPolicy",
      "_obs_dim": 11.0,
      "_action_dim": 1.0,
      "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
    },
    "_sampler": {
      "_factory": {
        "n_workers": 28,
        "_seed": "None",
        "_max_episode_length": 500,
        "_worker_class": {
          "$typename": "garage.sampler.default_worker.DefaultWorker"
        },
        "_worker_args": {},
        "$type": "garage.sampler.worker_factory.WorkerFactory"
      },
      "_agents": [
        {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_module": {
              "training": true,
              "_parameters": {
                "_init_std": {
                  "$type": "torch.nn.parameter.Parameter"
                }
              },
              "_buffers": {
                "min_std_param": {
                  "$type": "torch.Tensor"
                }
              },
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_mean_module": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 11.0,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    },
                    "_output_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 1.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    }
                  },
                  "_output_dim": 1.0,
                  "$type": "garage.torch.modules.mlp_module.MLPModule"
                }
              },
              "_input_dim": 11.0,
              "_hidden_sizes": [
                32,
                32
              ],
              "_action_dim": 1.0,
              "_learn_std": true,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_min_std": 1e-06,
              "_max_std": "None",
              "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
              "_std_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_std_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": "None",
              "_std_output_w_init": {
                "$type": "builtins.function"
              },
              "_std_parameterization": "exp",
              "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
              "_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_output_nonlinearity": "None",
              "_output_w_init": {
                "$type": "builtins.function"
              },
              "_output_b_init": {
                "$type": "builtins.function"
              },
              "_layer_normalization": false,
              "_norm_dist_class": {
                "$typename": "torch.distributions.normal.Normal"
              },
              "_min_std_param": {
                "$type": "torch.Tensor"
              },
              "_max_std_param": "None",
              "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
            }
          },
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
        },
        {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_module": {
              "training": true,
              "_parameters": {
                "_init_std": {
                  "$type": "torch.nn.parameter.Parameter"
                }
              },
              "_buffers": {
                "min_std_param": {
                  "$type": "torch.Tensor"
                }
              },
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_mean_module": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 11.0,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    },
                    "_output_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 1.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    }
                  },
                  "_output_dim": 1.0,
                  "$type": "garage.torch.modules.mlp_module.MLPModule"
                }
              },
              "_input_dim": 11.0,
              "_hidden_sizes": [
                32,
                32
              ],
              "_action_dim": 1.0,
              "_learn_std": true,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_min_std": 1e-06,
              "_max_std": "None",
              "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
              "_std_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_std_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": "None",
              "_std_output_w_init": {
                "$type": "builtins.function"
              },
              "_std_parameterization": "exp",
              "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
              "_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_output_nonlinearity": "None",
              "_output_w_init": {
                "$type": "builtins.function"
              },
              "_output_b_init": {
                "$type": "builtins.function"
              },
              "_layer_normalization": false,
              "_norm_dist_class": {
                "$typename": "torch.distributions.normal.Normal"
              },
              "_min_std_param": {
                "$type": "torch.Tensor"
              },
              "_max_std_param": "None",
              "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
            }
          },
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
        },
        {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_module": {
              "training": true,
              "_parameters": {
                "_init_std": {
                  "$type": "torch.nn.parameter.Parameter"
                }
              },
              "_buffers": {
                "min_std_param": {
                  "$type": "torch.Tensor"
                }
              },
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_mean_module": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 11.0,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    },
                    "_output_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 1.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    }
                  },
                  "_output_dim": 1.0,
                  "$type": "garage.torch.modules.mlp_module.MLPModule"
                }
              },
              "_input_dim": 11.0,
              "_hidden_sizes": [
                32,
                32
              ],
              "_action_dim": 1.0,
              "_learn_std": true,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_min_std": 1e-06,
              "_max_std": "None",
              "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
              "_std_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_std_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": "None",
              "_std_output_w_init": {
                "$type": "builtins.function"
              },
              "_std_parameterization": "exp",
              "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
              "_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_output_nonlinearity": "None",
              "_output_w_init": {
                "$type": "builtins.function"
              },
              "_output_b_init": {
                "$type": "builtins.function"
              },
              "_layer_normalization": false,
              "_norm_dist_class": {
                "$typename": "torch.distributions.normal.Normal"
              },
              "_min_std_param": {
                "$type": "torch.Tensor"
              },
              "_max_std_param": "None",
              "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
            }
          },
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
        },
        {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_module": {
              "training": true,
              "_parameters": {
                "_init_std": {
                  "$type": "torch.nn.parameter.Parameter"
                }
              },
              "_buffers": {
                "min_std_param": {
                  "$type": "torch.Tensor"
                }
              },
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_mean_module": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 11.0,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    },
                    "_output_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 1.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    }
                  },
                  "_output_dim": 1.0,
                  "$type": "garage.torch.modules.mlp_module.MLPModule"
                }
              },
              "_input_dim": 11.0,
              "_hidden_sizes": [
                32,
                32
              ],
              "_action_dim": 1.0,
              "_learn_std": true,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_min_std": 1e-06,
              "_max_std": "None",
              "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
              "_std_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_std_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": "None",
              "_std_output_w_init": {
                "$type": "builtins.function"
              },
              "_std_parameterization": "exp",
              "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
              "_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_output_nonlinearity": "None",
              "_output_w_init": {
                "$type": "builtins.function"
              },
              "_output_b_init": {
                "$type": "builtins.function"
              },
              "_layer_normalization": false,
              "_norm_dist_class": {
                "$typename": "torch.distributions.normal.Normal"
              },
              "_min_std_param": {
                "$type": "torch.Tensor"
              },
              "_max_std_param": "None",
              "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
            }
          },
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
        },
        {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_module": {
              "training": true,
              "_parameters": {
                "_init_std": {
                  "$type": "torch.nn.parameter.Parameter"
                }
              },
              "_buffers": {
                "min_std_param": {
                  "$type": "torch.Tensor"
                }
              },
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_mean_module": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 11.0,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    },
                    "_output_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 1.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    }
                  },
                  "_output_dim": 1.0,
                  "$type": "garage.torch.modules.mlp_module.MLPModule"
                }
              },
              "_input_dim": 11.0,
              "_hidden_sizes": [
                32,
                32
              ],
              "_action_dim": 1.0,
              "_learn_std": true,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_min_std": 1e-06,
              "_max_std": "None",
              "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
              "_std_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_std_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": "None",
              "_std_output_w_init": {
                "$type": "builtins.function"
              },
              "_std_parameterization": "exp",
              "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
              "_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_output_nonlinearity": "None",
              "_output_w_init": {
                "$type": "builtins.function"
              },
              "_output_b_init": {
                "$type": "builtins.function"
              },
              "_layer_normalization": false,
              "_norm_dist_class": {
                "$typename": "torch.distributions.normal.Normal"
              },
              "_min_std_param": {
                "$type": "torch.Tensor"
              },
              "_max_std_param": "None",
              "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
            }
          },
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
        },
        {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_module": {
              "training": true,
              "_parameters": {
                "_init_std": {
                  "$type": "torch.nn.parameter.Parameter"
                }
              },
              "_buffers": {
                "min_std_param": {
                  "$type": "torch.Tensor"
                }
              },
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_mean_module": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 11.0,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    },
                    "_output_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 1.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    }
                  },
                  "_output_dim": 1.0,
                  "$type": "garage.torch.modules.mlp_module.MLPModule"
                }
              },
              "_input_dim": 11.0,
              "_hidden_sizes": [
                32,
                32
              ],
              "_action_dim": 1.0,
              "_learn_std": true,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_min_std": 1e-06,
              "_max_std": "None",
              "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
              "_std_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_std_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": "None",
              "_std_output_w_init": {
                "$type": "builtins.function"
              },
              "_std_parameterization": "exp",
              "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
              "_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_output_nonlinearity": "None",
              "_output_w_init": {
                "$type": "builtins.function"
              },
              "_output_b_init": {
                "$type": "builtins.function"
              },
              "_layer_normalization": false,
              "_norm_dist_class": {
                "$typename": "torch.distributions.normal.Normal"
              },
              "_min_std_param": {
                "$type": "torch.Tensor"
              },
              "_max_std_param": "None",
              "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
            }
          },
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
        },
        {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_module": {
              "training": true,
              "_parameters": {
                "_init_std": {
                  "$type": "torch.nn.parameter.Parameter"
                }
              },
              "_buffers": {
                "min_std_param": {
                  "$type": "torch.Tensor"
                }
              },
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_mean_module": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 11.0,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    },
                    "_output_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 1.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    }
                  },
                  "_output_dim": 1.0,
                  "$type": "garage.torch.modules.mlp_module.MLPModule"
                }
              },
              "_input_dim": 11.0,
              "_hidden_sizes": [
                32,
                32
              ],
              "_action_dim": 1.0,
              "_learn_std": true,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_min_std": 1e-06,
              "_max_std": "None",
              "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
              "_std_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_std_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": "None",
              "_std_output_w_init": {
                "$type": "builtins.function"
              },
              "_std_parameterization": "exp",
              "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
              "_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_output_nonlinearity": "None",
              "_output_w_init": {
                "$type": "builtins.function"
              },
              "_output_b_init": {
                "$type": "builtins.function"
              },
              "_layer_normalization": false,
              "_norm_dist_class": {
                "$typename": "torch.distributions.normal.Normal"
              },
              "_min_std_param": {
                "$type": "torch.Tensor"
              },
              "_max_std_param": "None",
              "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
            }
          },
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
        },
        {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_module": {
              "training": true,
              "_parameters": {
                "_init_std": {
                  "$type": "torch.nn.parameter.Parameter"
                }
              },
              "_buffers": {
                "min_std_param": {
                  "$type": "torch.Tensor"
                }
              },
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_mean_module": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 11.0,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    },
                    "_output_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 1.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    }
                  },
                  "_output_dim": 1.0,
                  "$type": "garage.torch.modules.mlp_module.MLPModule"
                }
              },
              "_input_dim": 11.0,
              "_hidden_sizes": [
                32,
                32
              ],
              "_action_dim": 1.0,
              "_learn_std": true,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_min_std": 1e-06,
              "_max_std": "None",
              "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
              "_std_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_std_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": "None",
              "_std_output_w_init": {
                "$type": "builtins.function"
              },
              "_std_parameterization": "exp",
              "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
              "_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_output_nonlinearity": "None",
              "_output_w_init": {
                "$type": "builtins.function"
              },
              "_output_b_init": {
                "$type": "builtins.function"
              },
              "_layer_normalization": false,
              "_norm_dist_class": {
                "$typename": "torch.distributions.normal.Normal"
              },
              "_min_std_param": {
                "$type": "torch.Tensor"
              },
              "_max_std_param": "None",
              "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
            }
          },
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
        },
        {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_module": {
              "training": true,
              "_parameters": {
                "_init_std": {
                  "$type": "torch.nn.parameter.Parameter"
                }
              },
              "_buffers": {
                "min_std_param": {
                  "$type": "torch.Tensor"
                }
              },
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_mean_module": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 11.0,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    },
                    "_output_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 1.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    }
                  },
                  "_output_dim": 1.0,
                  "$type": "garage.torch.modules.mlp_module.MLPModule"
                }
              },
              "_input_dim": 11.0,
              "_hidden_sizes": [
                32,
                32
              ],
              "_action_dim": 1.0,
              "_learn_std": true,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_min_std": 1e-06,
              "_max_std": "None",
              "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
              "_std_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_std_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": "None",
              "_std_output_w_init": {
                "$type": "builtins.function"
              },
              "_std_parameterization": "exp",
              "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
              "_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_output_nonlinearity": "None",
              "_output_w_init": {
                "$type": "builtins.function"
              },
              "_output_b_init": {
                "$type": "builtins.function"
              },
              "_layer_normalization": false,
              "_norm_dist_class": {
                "$typename": "torch.distributions.normal.Normal"
              },
              "_min_std_param": {
                "$type": "torch.Tensor"
              },
              "_max_std_param": "None",
              "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
            }
          },
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
        },
        {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_module": {
              "training": true,
              "_parameters": {
                "_init_std": {
                  "$type": "torch.nn.parameter.Parameter"
                }
              },
              "_buffers": {
                "min_std_param": {
                  "$type": "torch.Tensor"
                }
              },
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_mean_module": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 11.0,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    },
                    "_output_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 1.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    }
                  },
                  "_output_dim": 1.0,
                  "$type": "garage.torch.modules.mlp_module.MLPModule"
                }
              },
              "_input_dim": 11.0,
              "_hidden_sizes": [
                32,
                32
              ],
              "_action_dim": 1.0,
              "_learn_std": true,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_min_std": 1e-06,
              "_max_std": "None",
              "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
              "_std_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_std_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": "None",
              "_std_output_w_init": {
                "$type": "builtins.function"
              },
              "_std_parameterization": "exp",
              "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
              "_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_output_nonlinearity": "None",
              "_output_w_init": {
                "$type": "builtins.function"
              },
              "_output_b_init": {
                "$type": "builtins.function"
              },
              "_layer_normalization": false,
              "_norm_dist_class": {
                "$typename": "torch.distributions.normal.Normal"
              },
              "_min_std_param": {
                "$type": "torch.Tensor"
              },
              "_max_std_param": "None",
              "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
            }
          },
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
        },
        {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_module": {
              "training": true,
              "_parameters": {
                "_init_std": {
                  "$type": "torch.nn.parameter.Parameter"
                }
              },
              "_buffers": {
                "min_std_param": {
                  "$type": "torch.Tensor"
                }
              },
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_mean_module": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 11.0,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    },
                    "_output_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 1.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    }
                  },
                  "_output_dim": 1.0,
                  "$type": "garage.torch.modules.mlp_module.MLPModule"
                }
              },
              "_input_dim": 11.0,
              "_hidden_sizes": [
                32,
                32
              ],
              "_action_dim": 1.0,
              "_learn_std": true,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_min_std": 1e-06,
              "_max_std": "None",
              "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
              "_std_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_std_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": "None",
              "_std_output_w_init": {
                "$type": "builtins.function"
              },
              "_std_parameterization": "exp",
              "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
              "_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_output_nonlinearity": "None",
              "_output_w_init": {
                "$type": "builtins.function"
              },
              "_output_b_init": {
                "$type": "builtins.function"
              },
              "_layer_normalization": false,
              "_norm_dist_class": {
                "$typename": "torch.distributions.normal.Normal"
              },
              "_min_std_param": {
                "$type": "torch.Tensor"
              },
              "_max_std_param": "None",
              "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
            }
          },
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
        },
        {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_module": {
              "training": true,
              "_parameters": {
                "_init_std": {
                  "$type": "torch.nn.parameter.Parameter"
                }
              },
              "_buffers": {
                "min_std_param": {
                  "$type": "torch.Tensor"
                }
              },
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_mean_module": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 11.0,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    },
                    "_output_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 1.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    }
                  },
                  "_output_dim": 1.0,
                  "$type": "garage.torch.modules.mlp_module.MLPModule"
                }
              },
              "_input_dim": 11.0,
              "_hidden_sizes": [
                32,
                32
              ],
              "_action_dim": 1.0,
              "_learn_std": true,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_min_std": 1e-06,
              "_max_std": "None",
              "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
              "_std_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_std_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": "None",
              "_std_output_w_init": {
                "$type": "builtins.function"
              },
              "_std_parameterization": "exp",
              "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
              "_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_output_nonlinearity": "None",
              "_output_w_init": {
                "$type": "builtins.function"
              },
              "_output_b_init": {
                "$type": "builtins.function"
              },
              "_layer_normalization": false,
              "_norm_dist_class": {
                "$typename": "torch.distributions.normal.Normal"
              },
              "_min_std_param": {
                "$type": "torch.Tensor"
              },
              "_max_std_param": "None",
              "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
            }
          },
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
        },
        {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_module": {
              "training": true,
              "_parameters": {
                "_init_std": {
                  "$type": "torch.nn.parameter.Parameter"
                }
              },
              "_buffers": {
                "min_std_param": {
                  "$type": "torch.Tensor"
                }
              },
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_mean_module": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 11.0,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    },
                    "_output_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 1.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    }
                  },
                  "_output_dim": 1.0,
                  "$type": "garage.torch.modules.mlp_module.MLPModule"
                }
              },
              "_input_dim": 11.0,
              "_hidden_sizes": [
                32,
                32
              ],
              "_action_dim": 1.0,
              "_learn_std": true,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_min_std": 1e-06,
              "_max_std": "None",
              "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
              "_std_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_std_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": "None",
              "_std_output_w_init": {
                "$type": "builtins.function"
              },
              "_std_parameterization": "exp",
              "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
              "_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_output_nonlinearity": "None",
              "_output_w_init": {
                "$type": "builtins.function"
              },
              "_output_b_init": {
                "$type": "builtins.function"
              },
              "_layer_normalization": false,
              "_norm_dist_class": {
                "$typename": "torch.distributions.normal.Normal"
              },
              "_min_std_param": {
                "$type": "torch.Tensor"
              },
              "_max_std_param": "None",
              "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
            }
          },
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
        },
        {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_module": {
              "training": true,
              "_parameters": {
                "_init_std": {
                  "$type": "torch.nn.parameter.Parameter"
                }
              },
              "_buffers": {
                "min_std_param": {
                  "$type": "torch.Tensor"
                }
              },
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_mean_module": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 11.0,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    },
                    "_output_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 1.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    }
                  },
                  "_output_dim": 1.0,
                  "$type": "garage.torch.modules.mlp_module.MLPModule"
                }
              },
              "_input_dim": 11.0,
              "_hidden_sizes": [
                32,
                32
              ],
              "_action_dim": 1.0,
              "_learn_std": true,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_min_std": 1e-06,
              "_max_std": "None",
              "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
              "_std_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_std_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": "None",
              "_std_output_w_init": {
                "$type": "builtins.function"
              },
              "_std_parameterization": "exp",
              "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
              "_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_output_nonlinearity": "None",
              "_output_w_init": {
                "$type": "builtins.function"
              },
              "_output_b_init": {
                "$type": "builtins.function"
              },
              "_layer_normalization": false,
              "_norm_dist_class": {
                "$typename": "torch.distributions.normal.Normal"
              },
              "_min_std_param": {
                "$type": "torch.Tensor"
              },
              "_max_std_param": "None",
              "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
            }
          },
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
        },
        {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_module": {
              "training": true,
              "_parameters": {
                "_init_std": {
                  "$type": "torch.nn.parameter.Parameter"
                }
              },
              "_buffers": {
                "min_std_param": {
                  "$type": "torch.Tensor"
                }
              },
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_mean_module": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 11.0,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    },
                    "_output_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 1.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    }
                  },
                  "_output_dim": 1.0,
                  "$type": "garage.torch.modules.mlp_module.MLPModule"
                }
              },
              "_input_dim": 11.0,
              "_hidden_sizes": [
                32,
                32
              ],
              "_action_dim": 1.0,
              "_learn_std": true,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_min_std": 1e-06,
              "_max_std": "None",
              "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
              "_std_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_std_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": "None",
              "_std_output_w_init": {
                "$type": "builtins.function"
              },
              "_std_parameterization": "exp",
              "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
              "_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_output_nonlinearity": "None",
              "_output_w_init": {
                "$type": "builtins.function"
              },
              "_output_b_init": {
                "$type": "builtins.function"
              },
              "_layer_normalization": false,
              "_norm_dist_class": {
                "$typename": "torch.distributions.normal.Normal"
              },
              "_min_std_param": {
                "$type": "torch.Tensor"
              },
              "_max_std_param": "None",
              "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
            }
          },
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
        },
        {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_module": {
              "training": true,
              "_parameters": {
                "_init_std": {
                  "$type": "torch.nn.parameter.Parameter"
                }
              },
              "_buffers": {
                "min_std_param": {
                  "$type": "torch.Tensor"
                }
              },
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_mean_module": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 11.0,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    },
                    "_output_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 1.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    }
                  },
                  "_output_dim": 1.0,
                  "$type": "garage.torch.modules.mlp_module.MLPModule"
                }
              },
              "_input_dim": 11.0,
              "_hidden_sizes": [
                32,
                32
              ],
              "_action_dim": 1.0,
              "_learn_std": true,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_min_std": 1e-06,
              "_max_std": "None",
              "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
              "_std_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_std_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": "None",
              "_std_output_w_init": {
                "$type": "builtins.function"
              },
              "_std_parameterization": "exp",
              "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
              "_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_output_nonlinearity": "None",
              "_output_w_init": {
                "$type": "builtins.function"
              },
              "_output_b_init": {
                "$type": "builtins.function"
              },
              "_layer_normalization": false,
              "_norm_dist_class": {
                "$typename": "torch.distributions.normal.Normal"
              },
              "_min_std_param": {
                "$type": "torch.Tensor"
              },
              "_max_std_param": "None",
              "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
            }
          },
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
        },
        {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_module": {
              "training": true,
              "_parameters": {
                "_init_std": {
                  "$type": "torch.nn.parameter.Parameter"
                }
              },
              "_buffers": {
                "min_std_param": {
                  "$type": "torch.Tensor"
                }
              },
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_mean_module": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 11.0,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    },
                    "_output_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 1.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    }
                  },
                  "_output_dim": 1.0,
                  "$type": "garage.torch.modules.mlp_module.MLPModule"
                }
              },
              "_input_dim": 11.0,
              "_hidden_sizes": [
                32,
                32
              ],
              "_action_dim": 1.0,
              "_learn_std": true,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_min_std": 1e-06,
              "_max_std": "None",
              "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
              "_std_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_std_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": "None",
              "_std_output_w_init": {
                "$type": "builtins.function"
              },
              "_std_parameterization": "exp",
              "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
              "_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_output_nonlinearity": "None",
              "_output_w_init": {
                "$type": "builtins.function"
              },
              "_output_b_init": {
                "$type": "builtins.function"
              },
              "_layer_normalization": false,
              "_norm_dist_class": {
                "$typename": "torch.distributions.normal.Normal"
              },
              "_min_std_param": {
                "$type": "torch.Tensor"
              },
              "_max_std_param": "None",
              "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
            }
          },
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
        },
        {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_module": {
              "training": true,
              "_parameters": {
                "_init_std": {
                  "$type": "torch.nn.parameter.Parameter"
                }
              },
              "_buffers": {
                "min_std_param": {
                  "$type": "torch.Tensor"
                }
              },
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_mean_module": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 11.0,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    },
                    "_output_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 1.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    }
                  },
                  "_output_dim": 1.0,
                  "$type": "garage.torch.modules.mlp_module.MLPModule"
                }
              },
              "_input_dim": 11.0,
              "_hidden_sizes": [
                32,
                32
              ],
              "_action_dim": 1.0,
              "_learn_std": true,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_min_std": 1e-06,
              "_max_std": "None",
              "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
              "_std_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_std_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": "None",
              "_std_output_w_init": {
                "$type": "builtins.function"
              },
              "_std_parameterization": "exp",
              "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
              "_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_output_nonlinearity": "None",
              "_output_w_init": {
                "$type": "builtins.function"
              },
              "_output_b_init": {
                "$type": "builtins.function"
              },
              "_layer_normalization": false,
              "_norm_dist_class": {
                "$typename": "torch.distributions.normal.Normal"
              },
              "_min_std_param": {
                "$type": "torch.Tensor"
              },
              "_max_std_param": "None",
              "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
            }
          },
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
        },
        {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_module": {
              "training": true,
              "_parameters": {
                "_init_std": {
                  "$type": "torch.nn.parameter.Parameter"
                }
              },
              "_buffers": {
                "min_std_param": {
                  "$type": "torch.Tensor"
                }
              },
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_mean_module": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 11.0,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    },
                    "_output_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 1.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    }
                  },
                  "_output_dim": 1.0,
                  "$type": "garage.torch.modules.mlp_module.MLPModule"
                }
              },
              "_input_dim": 11.0,
              "_hidden_sizes": [
                32,
                32
              ],
              "_action_dim": 1.0,
              "_learn_std": true,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_min_std": 1e-06,
              "_max_std": "None",
              "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
              "_std_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_std_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": "None",
              "_std_output_w_init": {
                "$type": "builtins.function"
              },
              "_std_parameterization": "exp",
              "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
              "_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_output_nonlinearity": "None",
              "_output_w_init": {
                "$type": "builtins.function"
              },
              "_output_b_init": {
                "$type": "builtins.function"
              },
              "_layer_normalization": false,
              "_norm_dist_class": {
                "$typename": "torch.distributions.normal.Normal"
              },
              "_min_std_param": {
                "$type": "torch.Tensor"
              },
              "_max_std_param": "None",
              "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
            }
          },
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
        },
        {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_module": {
              "training": true,
              "_parameters": {
                "_init_std": {
                  "$type": "torch.nn.parameter.Parameter"
                }
              },
              "_buffers": {
                "min_std_param": {
                  "$type": "torch.Tensor"
                }
              },
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_mean_module": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 11.0,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    },
                    "_output_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 1.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    }
                  },
                  "_output_dim": 1.0,
                  "$type": "garage.torch.modules.mlp_module.MLPModule"
                }
              },
              "_input_dim": 11.0,
              "_hidden_sizes": [
                32,
                32
              ],
              "_action_dim": 1.0,
              "_learn_std": true,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_min_std": 1e-06,
              "_max_std": "None",
              "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
              "_std_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_std_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": "None",
              "_std_output_w_init": {
                "$type": "builtins.function"
              },
              "_std_parameterization": "exp",
              "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
              "_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_output_nonlinearity": "None",
              "_output_w_init": {
                "$type": "builtins.function"
              },
              "_output_b_init": {
                "$type": "builtins.function"
              },
              "_layer_normalization": false,
              "_norm_dist_class": {
                "$typename": "torch.distributions.normal.Normal"
              },
              "_min_std_param": {
                "$type": "torch.Tensor"
              },
              "_max_std_param": "None",
              "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
            }
          },
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
        },
        {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_module": {
              "training": true,
              "_parameters": {
                "_init_std": {
                  "$type": "torch.nn.parameter.Parameter"
                }
              },
              "_buffers": {
                "min_std_param": {
                  "$type": "torch.Tensor"
                }
              },
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_mean_module": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 11.0,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    },
                    "_output_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 1.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    }
                  },
                  "_output_dim": 1.0,
                  "$type": "garage.torch.modules.mlp_module.MLPModule"
                }
              },
              "_input_dim": 11.0,
              "_hidden_sizes": [
                32,
                32
              ],
              "_action_dim": 1.0,
              "_learn_std": true,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_min_std": 1e-06,
              "_max_std": "None",
              "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
              "_std_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_std_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": "None",
              "_std_output_w_init": {
                "$type": "builtins.function"
              },
              "_std_parameterization": "exp",
              "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
              "_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_output_nonlinearity": "None",
              "_output_w_init": {
                "$type": "builtins.function"
              },
              "_output_b_init": {
                "$type": "builtins.function"
              },
              "_layer_normalization": false,
              "_norm_dist_class": {
                "$typename": "torch.distributions.normal.Normal"
              },
              "_min_std_param": {
                "$type": "torch.Tensor"
              },
              "_max_std_param": "None",
              "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
            }
          },
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
        },
        {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_module": {
              "training": true,
              "_parameters": {
                "_init_std": {
                  "$type": "torch.nn.parameter.Parameter"
                }
              },
              "_buffers": {
                "min_std_param": {
                  "$type": "torch.Tensor"
                }
              },
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_mean_module": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 11.0,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    },
                    "_output_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 1.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    }
                  },
                  "_output_dim": 1.0,
                  "$type": "garage.torch.modules.mlp_module.MLPModule"
                }
              },
              "_input_dim": 11.0,
              "_hidden_sizes": [
                32,
                32
              ],
              "_action_dim": 1.0,
              "_learn_std": true,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_min_std": 1e-06,
              "_max_std": "None",
              "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
              "_std_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_std_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": "None",
              "_std_output_w_init": {
                "$type": "builtins.function"
              },
              "_std_parameterization": "exp",
              "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
              "_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_output_nonlinearity": "None",
              "_output_w_init": {
                "$type": "builtins.function"
              },
              "_output_b_init": {
                "$type": "builtins.function"
              },
              "_layer_normalization": false,
              "_norm_dist_class": {
                "$typename": "torch.distributions.normal.Normal"
              },
              "_min_std_param": {
                "$type": "torch.Tensor"
              },
              "_max_std_param": "None",
              "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
            }
          },
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
        },
        {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_module": {
              "training": true,
              "_parameters": {
                "_init_std": {
                  "$type": "torch.nn.parameter.Parameter"
                }
              },
              "_buffers": {
                "min_std_param": {
                  "$type": "torch.Tensor"
                }
              },
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_mean_module": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 11.0,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    },
                    "_output_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 1.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    }
                  },
                  "_output_dim": 1.0,
                  "$type": "garage.torch.modules.mlp_module.MLPModule"
                }
              },
              "_input_dim": 11.0,
              "_hidden_sizes": [
                32,
                32
              ],
              "_action_dim": 1.0,
              "_learn_std": true,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_min_std": 1e-06,
              "_max_std": "None",
              "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
              "_std_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_std_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": "None",
              "_std_output_w_init": {
                "$type": "builtins.function"
              },
              "_std_parameterization": "exp",
              "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
              "_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_output_nonlinearity": "None",
              "_output_w_init": {
                "$type": "builtins.function"
              },
              "_output_b_init": {
                "$type": "builtins.function"
              },
              "_layer_normalization": false,
              "_norm_dist_class": {
                "$typename": "torch.distributions.normal.Normal"
              },
              "_min_std_param": {
                "$type": "torch.Tensor"
              },
              "_max_std_param": "None",
              "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
            }
          },
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
        },
        {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_module": {
              "training": true,
              "_parameters": {
                "_init_std": {
                  "$type": "torch.nn.parameter.Parameter"
                }
              },
              "_buffers": {
                "min_std_param": {
                  "$type": "torch.Tensor"
                }
              },
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_mean_module": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 11.0,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    },
                    "_output_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 1.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    }
                  },
                  "_output_dim": 1.0,
                  "$type": "garage.torch.modules.mlp_module.MLPModule"
                }
              },
              "_input_dim": 11.0,
              "_hidden_sizes": [
                32,
                32
              ],
              "_action_dim": 1.0,
              "_learn_std": true,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_min_std": 1e-06,
              "_max_std": "None",
              "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
              "_std_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_std_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": "None",
              "_std_output_w_init": {
                "$type": "builtins.function"
              },
              "_std_parameterization": "exp",
              "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
              "_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_output_nonlinearity": "None",
              "_output_w_init": {
                "$type": "builtins.function"
              },
              "_output_b_init": {
                "$type": "builtins.function"
              },
              "_layer_normalization": false,
              "_norm_dist_class": {
                "$typename": "torch.distributions.normal.Normal"
              },
              "_min_std_param": {
                "$type": "torch.Tensor"
              },
              "_max_std_param": "None",
              "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
            }
          },
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
        },
        {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_module": {
              "training": true,
              "_parameters": {
                "_init_std": {
                  "$type": "torch.nn.parameter.Parameter"
                }
              },
              "_buffers": {
                "min_std_param": {
                  "$type": "torch.Tensor"
                }
              },
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_mean_module": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 11.0,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    },
                    "_output_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 1.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    }
                  },
                  "_output_dim": 1.0,
                  "$type": "garage.torch.modules.mlp_module.MLPModule"
                }
              },
              "_input_dim": 11.0,
              "_hidden_sizes": [
                32,
                32
              ],
              "_action_dim": 1.0,
              "_learn_std": true,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_min_std": 1e-06,
              "_max_std": "None",
              "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
              "_std_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_std_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": "None",
              "_std_output_w_init": {
                "$type": "builtins.function"
              },
              "_std_parameterization": "exp",
              "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
              "_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_output_nonlinearity": "None",
              "_output_w_init": {
                "$type": "builtins.function"
              },
              "_output_b_init": {
                "$type": "builtins.function"
              },
              "_layer_normalization": false,
              "_norm_dist_class": {
                "$typename": "torch.distributions.normal.Normal"
              },
              "_min_std_param": {
                "$type": "torch.Tensor"
              },
              "_max_std_param": "None",
              "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
            }
          },
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
        },
        {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_module": {
              "training": true,
              "_parameters": {
                "_init_std": {
                  "$type": "torch.nn.parameter.Parameter"
                }
              },
              "_buffers": {
                "min_std_param": {
                  "$type": "torch.Tensor"
                }
              },
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_mean_module": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 11.0,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    },
                    "_output_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 1.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    }
                  },
                  "_output_dim": 1.0,
                  "$type": "garage.torch.modules.mlp_module.MLPModule"
                }
              },
              "_input_dim": 11.0,
              "_hidden_sizes": [
                32,
                32
              ],
              "_action_dim": 1.0,
              "_learn_std": true,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_min_std": 1e-06,
              "_max_std": "None",
              "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
              "_std_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_std_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": "None",
              "_std_output_w_init": {
                "$type": "builtins.function"
              },
              "_std_parameterization": "exp",
              "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
              "_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_output_nonlinearity": "None",
              "_output_w_init": {
                "$type": "builtins.function"
              },
              "_output_b_init": {
                "$type": "builtins.function"
              },
              "_layer_normalization": false,
              "_norm_dist_class": {
                "$typename": "torch.distributions.normal.Normal"
              },
              "_min_std_param": {
                "$type": "torch.Tensor"
              },
              "_max_std_param": "None",
              "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
            }
          },
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
        },
        {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_module": {
              "training": true,
              "_parameters": {
                "_init_std": {
                  "$type": "torch.nn.parameter.Parameter"
                }
              },
              "_buffers": {
                "min_std_param": {
                  "$type": "torch.Tensor"
                }
              },
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_mean_module": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 11.0,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    },
                    "_output_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 1.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    }
                  },
                  "_output_dim": 1.0,
                  "$type": "garage.torch.modules.mlp_module.MLPModule"
                }
              },
              "_input_dim": 11.0,
              "_hidden_sizes": [
                32,
                32
              ],
              "_action_dim": 1.0,
              "_learn_std": true,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_min_std": 1e-06,
              "_max_std": "None",
              "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
              "_std_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_std_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": "None",
              "_std_output_w_init": {
                "$type": "builtins.function"
              },
              "_std_parameterization": "exp",
              "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
              "_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_output_nonlinearity": "None",
              "_output_w_init": {
                "$type": "builtins.function"
              },
              "_output_b_init": {
                "$type": "builtins.function"
              },
              "_layer_normalization": false,
              "_norm_dist_class": {
                "$typename": "torch.distributions.normal.Normal"
              },
              "_min_std_param": {
                "$type": "torch.Tensor"
              },
              "_max_std_param": "None",
              "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
            }
          },
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
        },
        {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_module": {
              "training": true,
              "_parameters": {
                "_init_std": {
                  "$type": "torch.nn.parameter.Parameter"
                }
              },
              "_buffers": {
                "min_std_param": {
                  "$type": "torch.Tensor"
                }
              },
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_mean_module": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 11.0,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    },
                    "_output_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 1.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    }
                  },
                  "_output_dim": 1.0,
                  "$type": "garage.torch.modules.mlp_module.MLPModule"
                }
              },
              "_input_dim": 11.0,
              "_hidden_sizes": [
                32,
                32
              ],
              "_action_dim": 1.0,
              "_learn_std": true,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_min_std": 1e-06,
              "_max_std": "None",
              "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
              "_std_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_std_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": "None",
              "_std_output_w_init": {
                "$type": "builtins.function"
              },
              "_std_parameterization": "exp",
              "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
              "_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_output_nonlinearity": "None",
              "_output_w_init": {
                "$type": "builtins.function"
              },
              "_output_b_init": {
                "$type": "builtins.function"
              },
              "_layer_normalization": false,
              "_norm_dist_class": {
                "$typename": "torch.distributions.normal.Normal"
              },
              "_min_std_param": {
                "$type": "torch.Tensor"
              },
              "_max_std_param": "None",
              "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
            }
          },
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
        }
      ],
      "_envs": [
        {
          "_env": {
            "_env": {
              "env": {
                "env": {
                  "env": {
                    "env": {
                      "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                      "model": "<mujoco._structs.MjModel object at 0x7f5b04bb2830>",
                      "data": "<mujoco._structs.MjData object at 0x7f5b0418c730>",
                      "init_qpos": "array([0., 0., 0.])",
                      "init_qvel": "array([0., 0., 0.])",
                      "_viewers": {},
                      "frame_skip": 5,
                      "viewer": "None",
                      "observation_space": {
                        "dtype": "dtype('float64')",
                        "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "_shape": [
                          11
                        ],
                        "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                        "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                        "low_repr": "-inf",
                        "high_repr": "inf",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "action_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True])",
                        "bounded_above": "array([ True])",
                        "_shape": [
                          1
                        ],
                        "low": "array([-1.], dtype=float32)",
                        "high": "array([1.], dtype=float32)",
                        "low_repr": "-1.0",
                        "high_repr": "1.0",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "render_mode": "None",
                      "renderer": {
                        "no_returns_render": [
                          "human"
                        ],
                        "single_render": [
                          "single_rgb_array",
                          "single_depth_array",
                          "single_state_pixels"
                        ],
                        "mode": "None",
                        "render": {
                          "$type": "functools.partial"
                        },
                        "render_list": [],
                        "$type": "gym.utils.renderer.Renderer"
                      },
                      "_ezpickle_args": [],
                      "_ezpickle_kwargs": {},
                      "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                    },
                    "_action_space": "None",
                    "_observation_space": "None",
                    "_reward_range": "None",
                    "_metadata": "None",
                    "new_step_api": true,
                    "checked_reset": false,
                    "checked_step": false,
                    "checked_render": false,
                    "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": false,
                  "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "_has_reset": false,
                "_disable_render_order_enforcing": false,
                "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "_max_episode_steps": 1000,
              "_elapsed_steps": "None",
              "$type": "gym.wrappers.time_limit.TimeLimit"
            },
            "_max_episode_length": 1000,
            "_render_modes": [
              "human",
              "rgb_array",
              "depth_array",
              "single_rgb_array",
              "single_depth_array"
            ],
            "_step_cnt": "None",
            "_visualize": false,
            "_action_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_env_info": "None",
            "$type": "garage.envs.gym_env.GymEnv"
          },
          "_scale_reward": 1.0,
          "_normalize_obs": false,
          "_normalize_reward": false,
          "_expected_action_scale": 1.0,
          "_flatten_obs": true,
          "_obs_alpha": 0.001,
          "_obs_mean": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
          "_obs_var": "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])",
          "_reward_alpha": 0.001,
          "_reward_mean": 0.0,
          "_reward_var": 1.0,
          "$type": "garage.envs.normalized_env.NormalizedEnv"
        },
        {
          "_env": {
            "_env": {
              "env": {
                "env": {
                  "env": {
                    "env": {
                      "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                      "model": "<mujoco._structs.MjModel object at 0x7f5b048d3df0>",
                      "data": "<mujoco._structs.MjData object at 0x7f5b0419c770>",
                      "init_qpos": "array([0., 0., 0.])",
                      "init_qvel": "array([0., 0., 0.])",
                      "_viewers": {},
                      "frame_skip": 5,
                      "viewer": "None",
                      "observation_space": {
                        "dtype": "dtype('float64')",
                        "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "_shape": [
                          11
                        ],
                        "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                        "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                        "low_repr": "-inf",
                        "high_repr": "inf",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "action_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True])",
                        "bounded_above": "array([ True])",
                        "_shape": [
                          1
                        ],
                        "low": "array([-1.], dtype=float32)",
                        "high": "array([1.], dtype=float32)",
                        "low_repr": "-1.0",
                        "high_repr": "1.0",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "render_mode": "None",
                      "renderer": {
                        "no_returns_render": [
                          "human"
                        ],
                        "single_render": [
                          "single_rgb_array",
                          "single_depth_array",
                          "single_state_pixels"
                        ],
                        "mode": "None",
                        "render": {
                          "$type": "functools.partial"
                        },
                        "render_list": [],
                        "$type": "gym.utils.renderer.Renderer"
                      },
                      "_ezpickle_args": [],
                      "_ezpickle_kwargs": {},
                      "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                    },
                    "_action_space": "None",
                    "_observation_space": "None",
                    "_reward_range": "None",
                    "_metadata": "None",
                    "new_step_api": true,
                    "checked_reset": false,
                    "checked_step": false,
                    "checked_render": false,
                    "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": false,
                  "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "_has_reset": false,
                "_disable_render_order_enforcing": false,
                "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "_max_episode_steps": 1000,
              "_elapsed_steps": "None",
              "$type": "gym.wrappers.time_limit.TimeLimit"
            },
            "_max_episode_length": 1000,
            "_render_modes": [
              "human",
              "rgb_array",
              "depth_array",
              "single_rgb_array",
              "single_depth_array"
            ],
            "_step_cnt": "None",
            "_visualize": false,
            "_action_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_env_info": "None",
            "$type": "garage.envs.gym_env.GymEnv"
          },
          "_scale_reward": 1.0,
          "_normalize_obs": false,
          "_normalize_reward": false,
          "_expected_action_scale": 1.0,
          "_flatten_obs": true,
          "_obs_alpha": 0.001,
          "_obs_mean": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
          "_obs_var": "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])",
          "_reward_alpha": 0.001,
          "_reward_mean": 0.0,
          "_reward_var": 1.0,
          "$type": "garage.envs.normalized_env.NormalizedEnv"
        },
        {
          "_env": {
            "_env": {
              "env": {
                "env": {
                  "env": {
                    "env": {
                      "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                      "model": "<mujoco._structs.MjModel object at 0x7f5aff90bef0>",
                      "data": "<mujoco._structs.MjData object at 0x7f5aff90bf30>",
                      "init_qpos": "array([0., 0., 0.])",
                      "init_qvel": "array([0., 0., 0.])",
                      "_viewers": {},
                      "frame_skip": 5,
                      "viewer": "None",
                      "observation_space": {
                        "dtype": "dtype('float64')",
                        "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "_shape": [
                          11
                        ],
                        "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                        "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                        "low_repr": "-inf",
                        "high_repr": "inf",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "action_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True])",
                        "bounded_above": "array([ True])",
                        "_shape": [
                          1
                        ],
                        "low": "array([-1.], dtype=float32)",
                        "high": "array([1.], dtype=float32)",
                        "low_repr": "-1.0",
                        "high_repr": "1.0",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "render_mode": "None",
                      "renderer": {
                        "no_returns_render": [
                          "human"
                        ],
                        "single_render": [
                          "single_rgb_array",
                          "single_depth_array",
                          "single_state_pixels"
                        ],
                        "mode": "None",
                        "render": {
                          "$type": "functools.partial"
                        },
                        "render_list": [],
                        "$type": "gym.utils.renderer.Renderer"
                      },
                      "_ezpickle_args": [],
                      "_ezpickle_kwargs": {},
                      "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                    },
                    "_action_space": "None",
                    "_observation_space": "None",
                    "_reward_range": "None",
                    "_metadata": "None",
                    "new_step_api": true,
                    "checked_reset": false,
                    "checked_step": false,
                    "checked_render": false,
                    "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": false,
                  "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "_has_reset": false,
                "_disable_render_order_enforcing": false,
                "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "_max_episode_steps": 1000,
              "_elapsed_steps": "None",
              "$type": "gym.wrappers.time_limit.TimeLimit"
            },
            "_max_episode_length": 1000,
            "_render_modes": [
              "human",
              "rgb_array",
              "depth_array",
              "single_rgb_array",
              "single_depth_array"
            ],
            "_step_cnt": "None",
            "_visualize": false,
            "_action_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_env_info": "None",
            "$type": "garage.envs.gym_env.GymEnv"
          },
          "_scale_reward": 1.0,
          "_normalize_obs": false,
          "_normalize_reward": false,
          "_expected_action_scale": 1.0,
          "_flatten_obs": true,
          "_obs_alpha": 0.001,
          "_obs_mean": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
          "_obs_var": "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])",
          "_reward_alpha": 0.001,
          "_reward_mean": 0.0,
          "_reward_var": 1.0,
          "$type": "garage.envs.normalized_env.NormalizedEnv"
        },
        {
          "_env": {
            "_env": {
              "env": {
                "env": {
                  "env": {
                    "env": {
                      "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                      "model": "<mujoco._structs.MjModel object at 0x7f5aff7e29b0>",
                      "data": "<mujoco._structs.MjData object at 0x7f5aff7e29f0>",
                      "init_qpos": "array([0., 0., 0.])",
                      "init_qvel": "array([0., 0., 0.])",
                      "_viewers": {},
                      "frame_skip": 5,
                      "viewer": "None",
                      "observation_space": {
                        "dtype": "dtype('float64')",
                        "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "_shape": [
                          11
                        ],
                        "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                        "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                        "low_repr": "-inf",
                        "high_repr": "inf",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "action_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True])",
                        "bounded_above": "array([ True])",
                        "_shape": [
                          1
                        ],
                        "low": "array([-1.], dtype=float32)",
                        "high": "array([1.], dtype=float32)",
                        "low_repr": "-1.0",
                        "high_repr": "1.0",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "render_mode": "None",
                      "renderer": {
                        "no_returns_render": [
                          "human"
                        ],
                        "single_render": [
                          "single_rgb_array",
                          "single_depth_array",
                          "single_state_pixels"
                        ],
                        "mode": "None",
                        "render": {
                          "$type": "functools.partial"
                        },
                        "render_list": [],
                        "$type": "gym.utils.renderer.Renderer"
                      },
                      "_ezpickle_args": [],
                      "_ezpickle_kwargs": {},
                      "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                    },
                    "_action_space": "None",
                    "_observation_space": "None",
                    "_reward_range": "None",
                    "_metadata": "None",
                    "new_step_api": true,
                    "checked_reset": false,
                    "checked_step": false,
                    "checked_render": false,
                    "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": false,
                  "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "_has_reset": false,
                "_disable_render_order_enforcing": false,
                "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "_max_episode_steps": 1000,
              "_elapsed_steps": "None",
              "$type": "gym.wrappers.time_limit.TimeLimit"
            },
            "_max_episode_length": 1000,
            "_render_modes": [
              "human",
              "rgb_array",
              "depth_array",
              "single_rgb_array",
              "single_depth_array"
            ],
            "_step_cnt": "None",
            "_visualize": false,
            "_action_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_env_info": "None",
            "$type": "garage.envs.gym_env.GymEnv"
          },
          "_scale_reward": 1.0,
          "_normalize_obs": false,
          "_normalize_reward": false,
          "_expected_action_scale": 1.0,
          "_flatten_obs": true,
          "_obs_alpha": 0.001,
          "_obs_mean": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
          "_obs_var": "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])",
          "_reward_alpha": 0.001,
          "_reward_mean": 0.0,
          "_reward_var": 1.0,
          "$type": "garage.envs.normalized_env.NormalizedEnv"
        },
        {
          "_env": {
            "_env": {
              "env": {
                "env": {
                  "env": {
                    "env": {
                      "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                      "model": "<mujoco._structs.MjModel object at 0x7f5aff818470>",
                      "data": "<mujoco._structs.MjData object at 0x7f5aff8184b0>",
                      "init_qpos": "array([0., 0., 0.])",
                      "init_qvel": "array([0., 0., 0.])",
                      "_viewers": {},
                      "frame_skip": 5,
                      "viewer": "None",
                      "observation_space": {
                        "dtype": "dtype('float64')",
                        "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "_shape": [
                          11
                        ],
                        "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                        "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                        "low_repr": "-inf",
                        "high_repr": "inf",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "action_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True])",
                        "bounded_above": "array([ True])",
                        "_shape": [
                          1
                        ],
                        "low": "array([-1.], dtype=float32)",
                        "high": "array([1.], dtype=float32)",
                        "low_repr": "-1.0",
                        "high_repr": "1.0",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "render_mode": "None",
                      "renderer": {
                        "no_returns_render": [
                          "human"
                        ],
                        "single_render": [
                          "single_rgb_array",
                          "single_depth_array",
                          "single_state_pixels"
                        ],
                        "mode": "None",
                        "render": {
                          "$type": "functools.partial"
                        },
                        "render_list": [],
                        "$type": "gym.utils.renderer.Renderer"
                      },
                      "_ezpickle_args": [],
                      "_ezpickle_kwargs": {},
                      "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                    },
                    "_action_space": "None",
                    "_observation_space": "None",
                    "_reward_range": "None",
                    "_metadata": "None",
                    "new_step_api": true,
                    "checked_reset": false,
                    "checked_step": false,
                    "checked_render": false,
                    "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": false,
                  "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "_has_reset": false,
                "_disable_render_order_enforcing": false,
                "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "_max_episode_steps": 1000,
              "_elapsed_steps": "None",
              "$type": "gym.wrappers.time_limit.TimeLimit"
            },
            "_max_episode_length": 1000,
            "_render_modes": [
              "human",
              "rgb_array",
              "depth_array",
              "single_rgb_array",
              "single_depth_array"
            ],
            "_step_cnt": "None",
            "_visualize": false,
            "_action_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_env_info": "None",
            "$type": "garage.envs.gym_env.GymEnv"
          },
          "_scale_reward": 1.0,
          "_normalize_obs": false,
          "_normalize_reward": false,
          "_expected_action_scale": 1.0,
          "_flatten_obs": true,
          "_obs_alpha": 0.001,
          "_obs_mean": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
          "_obs_var": "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])",
          "_reward_alpha": 0.001,
          "_reward_mean": 0.0,
          "_reward_var": 1.0,
          "$type": "garage.envs.normalized_env.NormalizedEnv"
        },
        {
          "_env": {
            "_env": {
              "env": {
                "env": {
                  "env": {
                    "env": {
                      "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                      "model": "<mujoco._structs.MjModel object at 0x7f5aff818f30>",
                      "data": "<mujoco._structs.MjData object at 0x7f5aff818f70>",
                      "init_qpos": "array([0., 0., 0.])",
                      "init_qvel": "array([0., 0., 0.])",
                      "_viewers": {},
                      "frame_skip": 5,
                      "viewer": "None",
                      "observation_space": {
                        "dtype": "dtype('float64')",
                        "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "_shape": [
                          11
                        ],
                        "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                        "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                        "low_repr": "-inf",
                        "high_repr": "inf",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "action_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True])",
                        "bounded_above": "array([ True])",
                        "_shape": [
                          1
                        ],
                        "low": "array([-1.], dtype=float32)",
                        "high": "array([1.], dtype=float32)",
                        "low_repr": "-1.0",
                        "high_repr": "1.0",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "render_mode": "None",
                      "renderer": {
                        "no_returns_render": [
                          "human"
                        ],
                        "single_render": [
                          "single_rgb_array",
                          "single_depth_array",
                          "single_state_pixels"
                        ],
                        "mode": "None",
                        "render": {
                          "$type": "functools.partial"
                        },
                        "render_list": [],
                        "$type": "gym.utils.renderer.Renderer"
                      },
                      "_ezpickle_args": [],
                      "_ezpickle_kwargs": {},
                      "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                    },
                    "_action_space": "None",
                    "_observation_space": "None",
                    "_reward_range": "None",
                    "_metadata": "None",
                    "new_step_api": true,
                    "checked_reset": false,
                    "checked_step": false,
                    "checked_render": false,
                    "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": false,
                  "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "_has_reset": false,
                "_disable_render_order_enforcing": false,
                "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "_max_episode_steps": 1000,
              "_elapsed_steps": "None",
              "$type": "gym.wrappers.time_limit.TimeLimit"
            },
            "_max_episode_length": 1000,
            "_render_modes": [
              "human",
              "rgb_array",
              "depth_array",
              "single_rgb_array",
              "single_depth_array"
            ],
            "_step_cnt": "None",
            "_visualize": false,
            "_action_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_env_info": "None",
            "$type": "garage.envs.gym_env.GymEnv"
          },
          "_scale_reward": 1.0,
          "_normalize_obs": false,
          "_normalize_reward": false,
          "_expected_action_scale": 1.0,
          "_flatten_obs": true,
          "_obs_alpha": 0.001,
          "_obs_mean": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
          "_obs_var": "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])",
          "_reward_alpha": 0.001,
          "_reward_mean": 0.0,
          "_reward_var": 1.0,
          "$type": "garage.envs.normalized_env.NormalizedEnv"
        },
        {
          "_env": {
            "_env": {
              "env": {
                "env": {
                  "env": {
                    "env": {
                      "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                      "model": "<mujoco._structs.MjModel object at 0x7f5aff77da30>",
                      "data": "<mujoco._structs.MjData object at 0x7f5aff77da70>",
                      "init_qpos": "array([0., 0., 0.])",
                      "init_qvel": "array([0., 0., 0.])",
                      "_viewers": {},
                      "frame_skip": 5,
                      "viewer": "None",
                      "observation_space": {
                        "dtype": "dtype('float64')",
                        "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "_shape": [
                          11
                        ],
                        "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                        "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                        "low_repr": "-inf",
                        "high_repr": "inf",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "action_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True])",
                        "bounded_above": "array([ True])",
                        "_shape": [
                          1
                        ],
                        "low": "array([-1.], dtype=float32)",
                        "high": "array([1.], dtype=float32)",
                        "low_repr": "-1.0",
                        "high_repr": "1.0",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "render_mode": "None",
                      "renderer": {
                        "no_returns_render": [
                          "human"
                        ],
                        "single_render": [
                          "single_rgb_array",
                          "single_depth_array",
                          "single_state_pixels"
                        ],
                        "mode": "None",
                        "render": {
                          "$type": "functools.partial"
                        },
                        "render_list": [],
                        "$type": "gym.utils.renderer.Renderer"
                      },
                      "_ezpickle_args": [],
                      "_ezpickle_kwargs": {},
                      "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                    },
                    "_action_space": "None",
                    "_observation_space": "None",
                    "_reward_range": "None",
                    "_metadata": "None",
                    "new_step_api": true,
                    "checked_reset": false,
                    "checked_step": false,
                    "checked_render": false,
                    "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": false,
                  "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "_has_reset": false,
                "_disable_render_order_enforcing": false,
                "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "_max_episode_steps": 1000,
              "_elapsed_steps": "None",
              "$type": "gym.wrappers.time_limit.TimeLimit"
            },
            "_max_episode_length": 1000,
            "_render_modes": [
              "human",
              "rgb_array",
              "depth_array",
              "single_rgb_array",
              "single_depth_array"
            ],
            "_step_cnt": "None",
            "_visualize": false,
            "_action_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_env_info": "None",
            "$type": "garage.envs.gym_env.GymEnv"
          },
          "_scale_reward": 1.0,
          "_normalize_obs": false,
          "_normalize_reward": false,
          "_expected_action_scale": 1.0,
          "_flatten_obs": true,
          "_obs_alpha": 0.001,
          "_obs_mean": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
          "_obs_var": "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])",
          "_reward_alpha": 0.001,
          "_reward_mean": 0.0,
          "_reward_var": 1.0,
          "$type": "garage.envs.normalized_env.NormalizedEnv"
        },
        {
          "_env": {
            "_env": {
              "env": {
                "env": {
                  "env": {
                    "env": {
                      "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                      "model": "<mujoco._structs.MjModel object at 0x7f5aff7334f0>",
                      "data": "<mujoco._structs.MjData object at 0x7f5aff733530>",
                      "init_qpos": "array([0., 0., 0.])",
                      "init_qvel": "array([0., 0., 0.])",
                      "_viewers": {},
                      "frame_skip": 5,
                      "viewer": "None",
                      "observation_space": {
                        "dtype": "dtype('float64')",
                        "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "_shape": [
                          11
                        ],
                        "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                        "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                        "low_repr": "-inf",
                        "high_repr": "inf",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "action_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True])",
                        "bounded_above": "array([ True])",
                        "_shape": [
                          1
                        ],
                        "low": "array([-1.], dtype=float32)",
                        "high": "array([1.], dtype=float32)",
                        "low_repr": "-1.0",
                        "high_repr": "1.0",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "render_mode": "None",
                      "renderer": {
                        "no_returns_render": [
                          "human"
                        ],
                        "single_render": [
                          "single_rgb_array",
                          "single_depth_array",
                          "single_state_pixels"
                        ],
                        "mode": "None",
                        "render": {
                          "$type": "functools.partial"
                        },
                        "render_list": [],
                        "$type": "gym.utils.renderer.Renderer"
                      },
                      "_ezpickle_args": [],
                      "_ezpickle_kwargs": {},
                      "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                    },
                    "_action_space": "None",
                    "_observation_space": "None",
                    "_reward_range": "None",
                    "_metadata": "None",
                    "new_step_api": true,
                    "checked_reset": false,
                    "checked_step": false,
                    "checked_render": false,
                    "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": false,
                  "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "_has_reset": false,
                "_disable_render_order_enforcing": false,
                "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "_max_episode_steps": 1000,
              "_elapsed_steps": "None",
              "$type": "gym.wrappers.time_limit.TimeLimit"
            },
            "_max_episode_length": 1000,
            "_render_modes": [
              "human",
              "rgb_array",
              "depth_array",
              "single_rgb_array",
              "single_depth_array"
            ],
            "_step_cnt": "None",
            "_visualize": false,
            "_action_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_env_info": "None",
            "$type": "garage.envs.gym_env.GymEnv"
          },
          "_scale_reward": 1.0,
          "_normalize_obs": false,
          "_normalize_reward": false,
          "_expected_action_scale": 1.0,
          "_flatten_obs": true,
          "_obs_alpha": 0.001,
          "_obs_mean": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
          "_obs_var": "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])",
          "_reward_alpha": 0.001,
          "_reward_mean": 0.0,
          "_reward_var": 1.0,
          "$type": "garage.envs.normalized_env.NormalizedEnv"
        },
        {
          "_env": {
            "_env": {
              "env": {
                "env": {
                  "env": {
                    "env": {
                      "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                      "model": "<mujoco._structs.MjModel object at 0x7f5aff733fb0>",
                      "data": "<mujoco._structs.MjData object at 0x7f5aff6ff030>",
                      "init_qpos": "array([0., 0., 0.])",
                      "init_qvel": "array([0., 0., 0.])",
                      "_viewers": {},
                      "frame_skip": 5,
                      "viewer": "None",
                      "observation_space": {
                        "dtype": "dtype('float64')",
                        "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "_shape": [
                          11
                        ],
                        "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                        "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                        "low_repr": "-inf",
                        "high_repr": "inf",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "action_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True])",
                        "bounded_above": "array([ True])",
                        "_shape": [
                          1
                        ],
                        "low": "array([-1.], dtype=float32)",
                        "high": "array([1.], dtype=float32)",
                        "low_repr": "-1.0",
                        "high_repr": "1.0",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "render_mode": "None",
                      "renderer": {
                        "no_returns_render": [
                          "human"
                        ],
                        "single_render": [
                          "single_rgb_array",
                          "single_depth_array",
                          "single_state_pixels"
                        ],
                        "mode": "None",
                        "render": {
                          "$type": "functools.partial"
                        },
                        "render_list": [],
                        "$type": "gym.utils.renderer.Renderer"
                      },
                      "_ezpickle_args": [],
                      "_ezpickle_kwargs": {},
                      "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                    },
                    "_action_space": "None",
                    "_observation_space": "None",
                    "_reward_range": "None",
                    "_metadata": "None",
                    "new_step_api": true,
                    "checked_reset": false,
                    "checked_step": false,
                    "checked_render": false,
                    "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": false,
                  "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "_has_reset": false,
                "_disable_render_order_enforcing": false,
                "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "_max_episode_steps": 1000,
              "_elapsed_steps": "None",
              "$type": "gym.wrappers.time_limit.TimeLimit"
            },
            "_max_episode_length": 1000,
            "_render_modes": [
              "human",
              "rgb_array",
              "depth_array",
              "single_rgb_array",
              "single_depth_array"
            ],
            "_step_cnt": "None",
            "_visualize": false,
            "_action_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_env_info": "None",
            "$type": "garage.envs.gym_env.GymEnv"
          },
          "_scale_reward": 1.0,
          "_normalize_obs": false,
          "_normalize_reward": false,
          "_expected_action_scale": 1.0,
          "_flatten_obs": true,
          "_obs_alpha": 0.001,
          "_obs_mean": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
          "_obs_var": "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])",
          "_reward_alpha": 0.001,
          "_reward_mean": 0.0,
          "_reward_var": 1.0,
          "$type": "garage.envs.normalized_env.NormalizedEnv"
        },
        {
          "_env": {
            "_env": {
              "env": {
                "env": {
                  "env": {
                    "env": {
                      "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                      "model": "<mujoco._structs.MjModel object at 0x7f5aff6ffab0>",
                      "data": "<mujoco._structs.MjData object at 0x7f5aff6ffaf0>",
                      "init_qpos": "array([0., 0., 0.])",
                      "init_qvel": "array([0., 0., 0.])",
                      "_viewers": {},
                      "frame_skip": 5,
                      "viewer": "None",
                      "observation_space": {
                        "dtype": "dtype('float64')",
                        "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "_shape": [
                          11
                        ],
                        "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                        "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                        "low_repr": "-inf",
                        "high_repr": "inf",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "action_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True])",
                        "bounded_above": "array([ True])",
                        "_shape": [
                          1
                        ],
                        "low": "array([-1.], dtype=float32)",
                        "high": "array([1.], dtype=float32)",
                        "low_repr": "-1.0",
                        "high_repr": "1.0",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "render_mode": "None",
                      "renderer": {
                        "no_returns_render": [
                          "human"
                        ],
                        "single_render": [
                          "single_rgb_array",
                          "single_depth_array",
                          "single_state_pixels"
                        ],
                        "mode": "None",
                        "render": {
                          "$type": "functools.partial"
                        },
                        "render_list": [],
                        "$type": "gym.utils.renderer.Renderer"
                      },
                      "_ezpickle_args": [],
                      "_ezpickle_kwargs": {},
                      "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                    },
                    "_action_space": "None",
                    "_observation_space": "None",
                    "_reward_range": "None",
                    "_metadata": "None",
                    "new_step_api": true,
                    "checked_reset": false,
                    "checked_step": false,
                    "checked_render": false,
                    "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": false,
                  "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "_has_reset": false,
                "_disable_render_order_enforcing": false,
                "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "_max_episode_steps": 1000,
              "_elapsed_steps": "None",
              "$type": "gym.wrappers.time_limit.TimeLimit"
            },
            "_max_episode_length": 1000,
            "_render_modes": [
              "human",
              "rgb_array",
              "depth_array",
              "single_rgb_array",
              "single_depth_array"
            ],
            "_step_cnt": "None",
            "_visualize": false,
            "_action_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_env_info": "None",
            "$type": "garage.envs.gym_env.GymEnv"
          },
          "_scale_reward": 1.0,
          "_normalize_obs": false,
          "_normalize_reward": false,
          "_expected_action_scale": 1.0,
          "_flatten_obs": true,
          "_obs_alpha": 0.001,
          "_obs_mean": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
          "_obs_var": "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])",
          "_reward_alpha": 0.001,
          "_reward_mean": 0.0,
          "_reward_var": 1.0,
          "$type": "garage.envs.normalized_env.NormalizedEnv"
        },
        {
          "_env": {
            "_env": {
              "env": {
                "env": {
                  "env": {
                    "env": {
                      "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                      "model": "<mujoco._structs.MjModel object at 0x7f5aff6ff7b0>",
                      "data": "<mujoco._structs.MjData object at 0x7f5aff6ff270>",
                      "init_qpos": "array([0., 0., 0.])",
                      "init_qvel": "array([0., 0., 0.])",
                      "_viewers": {},
                      "frame_skip": 5,
                      "viewer": "None",
                      "observation_space": {
                        "dtype": "dtype('float64')",
                        "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "_shape": [
                          11
                        ],
                        "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                        "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                        "low_repr": "-inf",
                        "high_repr": "inf",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "action_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True])",
                        "bounded_above": "array([ True])",
                        "_shape": [
                          1
                        ],
                        "low": "array([-1.], dtype=float32)",
                        "high": "array([1.], dtype=float32)",
                        "low_repr": "-1.0",
                        "high_repr": "1.0",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "render_mode": "None",
                      "renderer": {
                        "no_returns_render": [
                          "human"
                        ],
                        "single_render": [
                          "single_rgb_array",
                          "single_depth_array",
                          "single_state_pixels"
                        ],
                        "mode": "None",
                        "render": {
                          "$type": "functools.partial"
                        },
                        "render_list": [],
                        "$type": "gym.utils.renderer.Renderer"
                      },
                      "_ezpickle_args": [],
                      "_ezpickle_kwargs": {},
                      "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                    },
                    "_action_space": "None",
                    "_observation_space": "None",
                    "_reward_range": "None",
                    "_metadata": "None",
                    "new_step_api": true,
                    "checked_reset": false,
                    "checked_step": false,
                    "checked_render": false,
                    "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": false,
                  "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "_has_reset": false,
                "_disable_render_order_enforcing": false,
                "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "_max_episode_steps": 1000,
              "_elapsed_steps": "None",
              "$type": "gym.wrappers.time_limit.TimeLimit"
            },
            "_max_episode_length": 1000,
            "_render_modes": [
              "human",
              "rgb_array",
              "depth_array",
              "single_rgb_array",
              "single_depth_array"
            ],
            "_step_cnt": "None",
            "_visualize": false,
            "_action_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_env_info": "None",
            "$type": "garage.envs.gym_env.GymEnv"
          },
          "_scale_reward": 1.0,
          "_normalize_obs": false,
          "_normalize_reward": false,
          "_expected_action_scale": 1.0,
          "_flatten_obs": true,
          "_obs_alpha": 0.001,
          "_obs_mean": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
          "_obs_var": "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])",
          "_reward_alpha": 0.001,
          "_reward_mean": 0.0,
          "_reward_var": 1.0,
          "$type": "garage.envs.normalized_env.NormalizedEnv"
        },
        {
          "_env": {
            "_env": {
              "env": {
                "env": {
                  "env": {
                    "env": {
                      "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                      "model": "<mujoco._structs.MjModel object at 0x7f5aff818230>",
                      "data": "<mujoco._structs.MjData object at 0x7f5aff818c30>",
                      "init_qpos": "array([0., 0., 0.])",
                      "init_qvel": "array([0., 0., 0.])",
                      "_viewers": {},
                      "frame_skip": 5,
                      "viewer": "None",
                      "observation_space": {
                        "dtype": "dtype('float64')",
                        "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "_shape": [
                          11
                        ],
                        "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                        "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                        "low_repr": "-inf",
                        "high_repr": "inf",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "action_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True])",
                        "bounded_above": "array([ True])",
                        "_shape": [
                          1
                        ],
                        "low": "array([-1.], dtype=float32)",
                        "high": "array([1.], dtype=float32)",
                        "low_repr": "-1.0",
                        "high_repr": "1.0",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "render_mode": "None",
                      "renderer": {
                        "no_returns_render": [
                          "human"
                        ],
                        "single_render": [
                          "single_rgb_array",
                          "single_depth_array",
                          "single_state_pixels"
                        ],
                        "mode": "None",
                        "render": {
                          "$type": "functools.partial"
                        },
                        "render_list": [],
                        "$type": "gym.utils.renderer.Renderer"
                      },
                      "_ezpickle_args": [],
                      "_ezpickle_kwargs": {},
                      "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                    },
                    "_action_space": "None",
                    "_observation_space": "None",
                    "_reward_range": "None",
                    "_metadata": "None",
                    "new_step_api": true,
                    "checked_reset": false,
                    "checked_step": false,
                    "checked_render": false,
                    "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": false,
                  "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "_has_reset": false,
                "_disable_render_order_enforcing": false,
                "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "_max_episode_steps": 1000,
              "_elapsed_steps": "None",
              "$type": "gym.wrappers.time_limit.TimeLimit"
            },
            "_max_episode_length": 1000,
            "_render_modes": [
              "human",
              "rgb_array",
              "depth_array",
              "single_rgb_array",
              "single_depth_array"
            ],
            "_step_cnt": "None",
            "_visualize": false,
            "_action_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_env_info": "None",
            "$type": "garage.envs.gym_env.GymEnv"
          },
          "_scale_reward": 1.0,
          "_normalize_obs": false,
          "_normalize_reward": false,
          "_expected_action_scale": 1.0,
          "_flatten_obs": true,
          "_obs_alpha": 0.001,
          "_obs_mean": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
          "_obs_var": "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])",
          "_reward_alpha": 0.001,
          "_reward_mean": 0.0,
          "_reward_var": 1.0,
          "$type": "garage.envs.normalized_env.NormalizedEnv"
        },
        {
          "_env": {
            "_env": {
              "env": {
                "env": {
                  "env": {
                    "env": {
                      "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                      "model": "<mujoco._structs.MjModel object at 0x7f5affd6b3b0>",
                      "data": "<mujoco._structs.MjData object at 0x7f5b041c9b30>",
                      "init_qpos": "array([0., 0., 0.])",
                      "init_qvel": "array([0., 0., 0.])",
                      "_viewers": {},
                      "frame_skip": 5,
                      "viewer": "None",
                      "observation_space": {
                        "dtype": "dtype('float64')",
                        "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "_shape": [
                          11
                        ],
                        "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                        "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                        "low_repr": "-inf",
                        "high_repr": "inf",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "action_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True])",
                        "bounded_above": "array([ True])",
                        "_shape": [
                          1
                        ],
                        "low": "array([-1.], dtype=float32)",
                        "high": "array([1.], dtype=float32)",
                        "low_repr": "-1.0",
                        "high_repr": "1.0",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "render_mode": "None",
                      "renderer": {
                        "no_returns_render": [
                          "human"
                        ],
                        "single_render": [
                          "single_rgb_array",
                          "single_depth_array",
                          "single_state_pixels"
                        ],
                        "mode": "None",
                        "render": {
                          "$type": "functools.partial"
                        },
                        "render_list": [],
                        "$type": "gym.utils.renderer.Renderer"
                      },
                      "_ezpickle_args": [],
                      "_ezpickle_kwargs": {},
                      "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                    },
                    "_action_space": "None",
                    "_observation_space": "None",
                    "_reward_range": "None",
                    "_metadata": "None",
                    "new_step_api": true,
                    "checked_reset": false,
                    "checked_step": false,
                    "checked_render": false,
                    "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": false,
                  "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "_has_reset": false,
                "_disable_render_order_enforcing": false,
                "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "_max_episode_steps": 1000,
              "_elapsed_steps": "None",
              "$type": "gym.wrappers.time_limit.TimeLimit"
            },
            "_max_episode_length": 1000,
            "_render_modes": [
              "human",
              "rgb_array",
              "depth_array",
              "single_rgb_array",
              "single_depth_array"
            ],
            "_step_cnt": "None",
            "_visualize": false,
            "_action_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_env_info": "None",
            "$type": "garage.envs.gym_env.GymEnv"
          },
          "_scale_reward": 1.0,
          "_normalize_obs": false,
          "_normalize_reward": false,
          "_expected_action_scale": 1.0,
          "_flatten_obs": true,
          "_obs_alpha": 0.001,
          "_obs_mean": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
          "_obs_var": "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])",
          "_reward_alpha": 0.001,
          "_reward_mean": 0.0,
          "_reward_var": 1.0,
          "$type": "garage.envs.normalized_env.NormalizedEnv"
        },
        {
          "_env": {
            "_env": {
              "env": {
                "env": {
                  "env": {
                    "env": {
                      "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                      "model": "<mujoco._structs.MjModel object at 0x7f5aff6cc830>",
                      "data": "<mujoco._structs.MjData object at 0x7f5aff6cc870>",
                      "init_qpos": "array([0., 0., 0.])",
                      "init_qvel": "array([0., 0., 0.])",
                      "_viewers": {},
                      "frame_skip": 5,
                      "viewer": "None",
                      "observation_space": {
                        "dtype": "dtype('float64')",
                        "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "_shape": [
                          11
                        ],
                        "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                        "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                        "low_repr": "-inf",
                        "high_repr": "inf",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "action_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True])",
                        "bounded_above": "array([ True])",
                        "_shape": [
                          1
                        ],
                        "low": "array([-1.], dtype=float32)",
                        "high": "array([1.], dtype=float32)",
                        "low_repr": "-1.0",
                        "high_repr": "1.0",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "render_mode": "None",
                      "renderer": {
                        "no_returns_render": [
                          "human"
                        ],
                        "single_render": [
                          "single_rgb_array",
                          "single_depth_array",
                          "single_state_pixels"
                        ],
                        "mode": "None",
                        "render": {
                          "$type": "functools.partial"
                        },
                        "render_list": [],
                        "$type": "gym.utils.renderer.Renderer"
                      },
                      "_ezpickle_args": [],
                      "_ezpickle_kwargs": {},
                      "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                    },
                    "_action_space": "None",
                    "_observation_space": "None",
                    "_reward_range": "None",
                    "_metadata": "None",
                    "new_step_api": true,
                    "checked_reset": false,
                    "checked_step": false,
                    "checked_render": false,
                    "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": false,
                  "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "_has_reset": false,
                "_disable_render_order_enforcing": false,
                "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "_max_episode_steps": 1000,
              "_elapsed_steps": "None",
              "$type": "gym.wrappers.time_limit.TimeLimit"
            },
            "_max_episode_length": 1000,
            "_render_modes": [
              "human",
              "rgb_array",
              "depth_array",
              "single_rgb_array",
              "single_depth_array"
            ],
            "_step_cnt": "None",
            "_visualize": false,
            "_action_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_env_info": "None",
            "$type": "garage.envs.gym_env.GymEnv"
          },
          "_scale_reward": 1.0,
          "_normalize_obs": false,
          "_normalize_reward": false,
          "_expected_action_scale": 1.0,
          "_flatten_obs": true,
          "_obs_alpha": 0.001,
          "_obs_mean": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
          "_obs_var": "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])",
          "_reward_alpha": 0.001,
          "_reward_mean": 0.0,
          "_reward_var": 1.0,
          "$type": "garage.envs.normalized_env.NormalizedEnv"
        },
        {
          "_env": {
            "_env": {
              "env": {
                "env": {
                  "env": {
                    "env": {
                      "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                      "model": "<mujoco._structs.MjModel object at 0x7f5aff7de2f0>",
                      "data": "<mujoco._structs.MjData object at 0x7f5aff7de330>",
                      "init_qpos": "array([0., 0., 0.])",
                      "init_qvel": "array([0., 0., 0.])",
                      "_viewers": {},
                      "frame_skip": 5,
                      "viewer": "None",
                      "observation_space": {
                        "dtype": "dtype('float64')",
                        "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "_shape": [
                          11
                        ],
                        "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                        "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                        "low_repr": "-inf",
                        "high_repr": "inf",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "action_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True])",
                        "bounded_above": "array([ True])",
                        "_shape": [
                          1
                        ],
                        "low": "array([-1.], dtype=float32)",
                        "high": "array([1.], dtype=float32)",
                        "low_repr": "-1.0",
                        "high_repr": "1.0",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "render_mode": "None",
                      "renderer": {
                        "no_returns_render": [
                          "human"
                        ],
                        "single_render": [
                          "single_rgb_array",
                          "single_depth_array",
                          "single_state_pixels"
                        ],
                        "mode": "None",
                        "render": {
                          "$type": "functools.partial"
                        },
                        "render_list": [],
                        "$type": "gym.utils.renderer.Renderer"
                      },
                      "_ezpickle_args": [],
                      "_ezpickle_kwargs": {},
                      "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                    },
                    "_action_space": "None",
                    "_observation_space": "None",
                    "_reward_range": "None",
                    "_metadata": "None",
                    "new_step_api": true,
                    "checked_reset": false,
                    "checked_step": false,
                    "checked_render": false,
                    "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": false,
                  "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "_has_reset": false,
                "_disable_render_order_enforcing": false,
                "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "_max_episode_steps": 1000,
              "_elapsed_steps": "None",
              "$type": "gym.wrappers.time_limit.TimeLimit"
            },
            "_max_episode_length": 1000,
            "_render_modes": [
              "human",
              "rgb_array",
              "depth_array",
              "single_rgb_array",
              "single_depth_array"
            ],
            "_step_cnt": "None",
            "_visualize": false,
            "_action_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_env_info": "None",
            "$type": "garage.envs.gym_env.GymEnv"
          },
          "_scale_reward": 1.0,
          "_normalize_obs": false,
          "_normalize_reward": false,
          "_expected_action_scale": 1.0,
          "_flatten_obs": true,
          "_obs_alpha": 0.001,
          "_obs_mean": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
          "_obs_var": "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])",
          "_reward_alpha": 0.001,
          "_reward_mean": 0.0,
          "_reward_var": 1.0,
          "$type": "garage.envs.normalized_env.NormalizedEnv"
        },
        {
          "_env": {
            "_env": {
              "env": {
                "env": {
                  "env": {
                    "env": {
                      "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                      "model": "<mujoco._structs.MjModel object at 0x7f5aff7dedf0>",
                      "data": "<mujoco._structs.MjData object at 0x7f5aff7dee30>",
                      "init_qpos": "array([0., 0., 0.])",
                      "init_qvel": "array([0., 0., 0.])",
                      "_viewers": {},
                      "frame_skip": 5,
                      "viewer": "None",
                      "observation_space": {
                        "dtype": "dtype('float64')",
                        "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "_shape": [
                          11
                        ],
                        "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                        "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                        "low_repr": "-inf",
                        "high_repr": "inf",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "action_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True])",
                        "bounded_above": "array([ True])",
                        "_shape": [
                          1
                        ],
                        "low": "array([-1.], dtype=float32)",
                        "high": "array([1.], dtype=float32)",
                        "low_repr": "-1.0",
                        "high_repr": "1.0",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "render_mode": "None",
                      "renderer": {
                        "no_returns_render": [
                          "human"
                        ],
                        "single_render": [
                          "single_rgb_array",
                          "single_depth_array",
                          "single_state_pixels"
                        ],
                        "mode": "None",
                        "render": {
                          "$type": "functools.partial"
                        },
                        "render_list": [],
                        "$type": "gym.utils.renderer.Renderer"
                      },
                      "_ezpickle_args": [],
                      "_ezpickle_kwargs": {},
                      "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                    },
                    "_action_space": "None",
                    "_observation_space": "None",
                    "_reward_range": "None",
                    "_metadata": "None",
                    "new_step_api": true,
                    "checked_reset": false,
                    "checked_step": false,
                    "checked_render": false,
                    "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": false,
                  "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "_has_reset": false,
                "_disable_render_order_enforcing": false,
                "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "_max_episode_steps": 1000,
              "_elapsed_steps": "None",
              "$type": "gym.wrappers.time_limit.TimeLimit"
            },
            "_max_episode_length": 1000,
            "_render_modes": [
              "human",
              "rgb_array",
              "depth_array",
              "single_rgb_array",
              "single_depth_array"
            ],
            "_step_cnt": "None",
            "_visualize": false,
            "_action_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_env_info": "None",
            "$type": "garage.envs.gym_env.GymEnv"
          },
          "_scale_reward": 1.0,
          "_normalize_obs": false,
          "_normalize_reward": false,
          "_expected_action_scale": 1.0,
          "_flatten_obs": true,
          "_obs_alpha": 0.001,
          "_obs_mean": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
          "_obs_var": "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])",
          "_reward_alpha": 0.001,
          "_reward_mean": 0.0,
          "_reward_var": 1.0,
          "$type": "garage.envs.normalized_env.NormalizedEnv"
        },
        {
          "_env": {
            "_env": {
              "env": {
                "env": {
                  "env": {
                    "env": {
                      "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                      "model": "<mujoco._structs.MjModel object at 0x7f5aff61f930>",
                      "data": "<mujoco._structs.MjData object at 0x7f5aff61f970>",
                      "init_qpos": "array([0., 0., 0.])",
                      "init_qvel": "array([0., 0., 0.])",
                      "_viewers": {},
                      "frame_skip": 5,
                      "viewer": "None",
                      "observation_space": {
                        "dtype": "dtype('float64')",
                        "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "_shape": [
                          11
                        ],
                        "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                        "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                        "low_repr": "-inf",
                        "high_repr": "inf",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "action_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True])",
                        "bounded_above": "array([ True])",
                        "_shape": [
                          1
                        ],
                        "low": "array([-1.], dtype=float32)",
                        "high": "array([1.], dtype=float32)",
                        "low_repr": "-1.0",
                        "high_repr": "1.0",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "render_mode": "None",
                      "renderer": {
                        "no_returns_render": [
                          "human"
                        ],
                        "single_render": [
                          "single_rgb_array",
                          "single_depth_array",
                          "single_state_pixels"
                        ],
                        "mode": "None",
                        "render": {
                          "$type": "functools.partial"
                        },
                        "render_list": [],
                        "$type": "gym.utils.renderer.Renderer"
                      },
                      "_ezpickle_args": [],
                      "_ezpickle_kwargs": {},
                      "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                    },
                    "_action_space": "None",
                    "_observation_space": "None",
                    "_reward_range": "None",
                    "_metadata": "None",
                    "new_step_api": true,
                    "checked_reset": false,
                    "checked_step": false,
                    "checked_render": false,
                    "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": false,
                  "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "_has_reset": false,
                "_disable_render_order_enforcing": false,
                "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "_max_episode_steps": 1000,
              "_elapsed_steps": "None",
              "$type": "gym.wrappers.time_limit.TimeLimit"
            },
            "_max_episode_length": 1000,
            "_render_modes": [
              "human",
              "rgb_array",
              "depth_array",
              "single_rgb_array",
              "single_depth_array"
            ],
            "_step_cnt": "None",
            "_visualize": false,
            "_action_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_env_info": "None",
            "$type": "garage.envs.gym_env.GymEnv"
          },
          "_scale_reward": 1.0,
          "_normalize_obs": false,
          "_normalize_reward": false,
          "_expected_action_scale": 1.0,
          "_flatten_obs": true,
          "_obs_alpha": 0.001,
          "_obs_mean": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
          "_obs_var": "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])",
          "_reward_alpha": 0.001,
          "_reward_mean": 0.0,
          "_reward_var": 1.0,
          "$type": "garage.envs.normalized_env.NormalizedEnv"
        },
        {
          "_env": {
            "_env": {
              "env": {
                "env": {
                  "env": {
                    "env": {
                      "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                      "model": "<mujoco._structs.MjModel object at 0x7f5aff653470>",
                      "data": "<mujoco._structs.MjData object at 0x7f5aff6534b0>",
                      "init_qpos": "array([0., 0., 0.])",
                      "init_qvel": "array([0., 0., 0.])",
                      "_viewers": {},
                      "frame_skip": 5,
                      "viewer": "None",
                      "observation_space": {
                        "dtype": "dtype('float64')",
                        "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "_shape": [
                          11
                        ],
                        "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                        "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                        "low_repr": "-inf",
                        "high_repr": "inf",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "action_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True])",
                        "bounded_above": "array([ True])",
                        "_shape": [
                          1
                        ],
                        "low": "array([-1.], dtype=float32)",
                        "high": "array([1.], dtype=float32)",
                        "low_repr": "-1.0",
                        "high_repr": "1.0",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "render_mode": "None",
                      "renderer": {
                        "no_returns_render": [
                          "human"
                        ],
                        "single_render": [
                          "single_rgb_array",
                          "single_depth_array",
                          "single_state_pixels"
                        ],
                        "mode": "None",
                        "render": {
                          "$type": "functools.partial"
                        },
                        "render_list": [],
                        "$type": "gym.utils.renderer.Renderer"
                      },
                      "_ezpickle_args": [],
                      "_ezpickle_kwargs": {},
                      "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                    },
                    "_action_space": "None",
                    "_observation_space": "None",
                    "_reward_range": "None",
                    "_metadata": "None",
                    "new_step_api": true,
                    "checked_reset": false,
                    "checked_step": false,
                    "checked_render": false,
                    "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": false,
                  "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "_has_reset": false,
                "_disable_render_order_enforcing": false,
                "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "_max_episode_steps": 1000,
              "_elapsed_steps": "None",
              "$type": "gym.wrappers.time_limit.TimeLimit"
            },
            "_max_episode_length": 1000,
            "_render_modes": [
              "human",
              "rgb_array",
              "depth_array",
              "single_rgb_array",
              "single_depth_array"
            ],
            "_step_cnt": "None",
            "_visualize": false,
            "_action_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_env_info": "None",
            "$type": "garage.envs.gym_env.GymEnv"
          },
          "_scale_reward": 1.0,
          "_normalize_obs": false,
          "_normalize_reward": false,
          "_expected_action_scale": 1.0,
          "_flatten_obs": true,
          "_obs_alpha": 0.001,
          "_obs_mean": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
          "_obs_var": "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])",
          "_reward_alpha": 0.001,
          "_reward_mean": 0.0,
          "_reward_var": 1.0,
          "$type": "garage.envs.normalized_env.NormalizedEnv"
        },
        {
          "_env": {
            "_env": {
              "env": {
                "env": {
                  "env": {
                    "env": {
                      "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                      "model": "<mujoco._structs.MjModel object at 0x7f5aff653f70>",
                      "data": "<mujoco._structs.MjData object at 0x7f5aff653fb0>",
                      "init_qpos": "array([0., 0., 0.])",
                      "init_qvel": "array([0., 0., 0.])",
                      "_viewers": {},
                      "frame_skip": 5,
                      "viewer": "None",
                      "observation_space": {
                        "dtype": "dtype('float64')",
                        "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "_shape": [
                          11
                        ],
                        "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                        "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                        "low_repr": "-inf",
                        "high_repr": "inf",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "action_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True])",
                        "bounded_above": "array([ True])",
                        "_shape": [
                          1
                        ],
                        "low": "array([-1.], dtype=float32)",
                        "high": "array([1.], dtype=float32)",
                        "low_repr": "-1.0",
                        "high_repr": "1.0",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "render_mode": "None",
                      "renderer": {
                        "no_returns_render": [
                          "human"
                        ],
                        "single_render": [
                          "single_rgb_array",
                          "single_depth_array",
                          "single_state_pixels"
                        ],
                        "mode": "None",
                        "render": {
                          "$type": "functools.partial"
                        },
                        "render_list": [],
                        "$type": "gym.utils.renderer.Renderer"
                      },
                      "_ezpickle_args": [],
                      "_ezpickle_kwargs": {},
                      "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                    },
                    "_action_space": "None",
                    "_observation_space": "None",
                    "_reward_range": "None",
                    "_metadata": "None",
                    "new_step_api": true,
                    "checked_reset": false,
                    "checked_step": false,
                    "checked_render": false,
                    "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": false,
                  "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "_has_reset": false,
                "_disable_render_order_enforcing": false,
                "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "_max_episode_steps": 1000,
              "_elapsed_steps": "None",
              "$type": "gym.wrappers.time_limit.TimeLimit"
            },
            "_max_episode_length": 1000,
            "_render_modes": [
              "human",
              "rgb_array",
              "depth_array",
              "single_rgb_array",
              "single_depth_array"
            ],
            "_step_cnt": "None",
            "_visualize": false,
            "_action_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_env_info": "None",
            "$type": "garage.envs.gym_env.GymEnv"
          },
          "_scale_reward": 1.0,
          "_normalize_obs": false,
          "_normalize_reward": false,
          "_expected_action_scale": 1.0,
          "_flatten_obs": true,
          "_obs_alpha": 0.001,
          "_obs_mean": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
          "_obs_var": "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])",
          "_reward_alpha": 0.001,
          "_reward_mean": 0.0,
          "_reward_var": 1.0,
          "$type": "garage.envs.normalized_env.NormalizedEnv"
        },
        {
          "_env": {
            "_env": {
              "env": {
                "env": {
                  "env": {
                    "env": {
                      "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                      "model": "<mujoco._structs.MjModel object at 0x7f5aff5b8ab0>",
                      "data": "<mujoco._structs.MjData object at 0x7f5aff5b8af0>",
                      "init_qpos": "array([0., 0., 0.])",
                      "init_qvel": "array([0., 0., 0.])",
                      "_viewers": {},
                      "frame_skip": 5,
                      "viewer": "None",
                      "observation_space": {
                        "dtype": "dtype('float64')",
                        "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "_shape": [
                          11
                        ],
                        "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                        "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                        "low_repr": "-inf",
                        "high_repr": "inf",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "action_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True])",
                        "bounded_above": "array([ True])",
                        "_shape": [
                          1
                        ],
                        "low": "array([-1.], dtype=float32)",
                        "high": "array([1.], dtype=float32)",
                        "low_repr": "-1.0",
                        "high_repr": "1.0",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "render_mode": "None",
                      "renderer": {
                        "no_returns_render": [
                          "human"
                        ],
                        "single_render": [
                          "single_rgb_array",
                          "single_depth_array",
                          "single_state_pixels"
                        ],
                        "mode": "None",
                        "render": {
                          "$type": "functools.partial"
                        },
                        "render_list": [],
                        "$type": "gym.utils.renderer.Renderer"
                      },
                      "_ezpickle_args": [],
                      "_ezpickle_kwargs": {},
                      "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                    },
                    "_action_space": "None",
                    "_observation_space": "None",
                    "_reward_range": "None",
                    "_metadata": "None",
                    "new_step_api": true,
                    "checked_reset": false,
                    "checked_step": false,
                    "checked_render": false,
                    "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": false,
                  "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "_has_reset": false,
                "_disable_render_order_enforcing": false,
                "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "_max_episode_steps": 1000,
              "_elapsed_steps": "None",
              "$type": "gym.wrappers.time_limit.TimeLimit"
            },
            "_max_episode_length": 1000,
            "_render_modes": [
              "human",
              "rgb_array",
              "depth_array",
              "single_rgb_array",
              "single_depth_array"
            ],
            "_step_cnt": "None",
            "_visualize": false,
            "_action_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_env_info": "None",
            "$type": "garage.envs.gym_env.GymEnv"
          },
          "_scale_reward": 1.0,
          "_normalize_obs": false,
          "_normalize_reward": false,
          "_expected_action_scale": 1.0,
          "_flatten_obs": true,
          "_obs_alpha": 0.001,
          "_obs_mean": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
          "_obs_var": "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])",
          "_reward_alpha": 0.001,
          "_reward_mean": 0.0,
          "_reward_var": 1.0,
          "$type": "garage.envs.normalized_env.NormalizedEnv"
        },
        {
          "_env": {
            "_env": {
              "env": {
                "env": {
                  "env": {
                    "env": {
                      "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                      "model": "<mujoco._structs.MjModel object at 0x7f5aff56e5f0>",
                      "data": "<mujoco._structs.MjData object at 0x7f5aff56e630>",
                      "init_qpos": "array([0., 0., 0.])",
                      "init_qvel": "array([0., 0., 0.])",
                      "_viewers": {},
                      "frame_skip": 5,
                      "viewer": "None",
                      "observation_space": {
                        "dtype": "dtype('float64')",
                        "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "_shape": [
                          11
                        ],
                        "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                        "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                        "low_repr": "-inf",
                        "high_repr": "inf",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "action_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True])",
                        "bounded_above": "array([ True])",
                        "_shape": [
                          1
                        ],
                        "low": "array([-1.], dtype=float32)",
                        "high": "array([1.], dtype=float32)",
                        "low_repr": "-1.0",
                        "high_repr": "1.0",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "render_mode": "None",
                      "renderer": {
                        "no_returns_render": [
                          "human"
                        ],
                        "single_render": [
                          "single_rgb_array",
                          "single_depth_array",
                          "single_state_pixels"
                        ],
                        "mode": "None",
                        "render": {
                          "$type": "functools.partial"
                        },
                        "render_list": [],
                        "$type": "gym.utils.renderer.Renderer"
                      },
                      "_ezpickle_args": [],
                      "_ezpickle_kwargs": {},
                      "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                    },
                    "_action_space": "None",
                    "_observation_space": "None",
                    "_reward_range": "None",
                    "_metadata": "None",
                    "new_step_api": true,
                    "checked_reset": false,
                    "checked_step": false,
                    "checked_render": false,
                    "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": false,
                  "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "_has_reset": false,
                "_disable_render_order_enforcing": false,
                "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "_max_episode_steps": 1000,
              "_elapsed_steps": "None",
              "$type": "gym.wrappers.time_limit.TimeLimit"
            },
            "_max_episode_length": 1000,
            "_render_modes": [
              "human",
              "rgb_array",
              "depth_array",
              "single_rgb_array",
              "single_depth_array"
            ],
            "_step_cnt": "None",
            "_visualize": false,
            "_action_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_env_info": "None",
            "$type": "garage.envs.gym_env.GymEnv"
          },
          "_scale_reward": 1.0,
          "_normalize_obs": false,
          "_normalize_reward": false,
          "_expected_action_scale": 1.0,
          "_flatten_obs": true,
          "_obs_alpha": 0.001,
          "_obs_mean": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
          "_obs_var": "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])",
          "_reward_alpha": 0.001,
          "_reward_mean": 0.0,
          "_reward_var": 1.0,
          "$type": "garage.envs.normalized_env.NormalizedEnv"
        },
        {
          "_env": {
            "_env": {
              "env": {
                "env": {
                  "env": {
                    "env": {
                      "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                      "model": "<mujoco._structs.MjModel object at 0x7f5aff56e130>",
                      "data": "<mujoco._structs.MjData object at 0x7f5aff56e2f0>",
                      "init_qpos": "array([0., 0., 0.])",
                      "init_qvel": "array([0., 0., 0.])",
                      "_viewers": {},
                      "frame_skip": 5,
                      "viewer": "None",
                      "observation_space": {
                        "dtype": "dtype('float64')",
                        "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "_shape": [
                          11
                        ],
                        "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                        "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                        "low_repr": "-inf",
                        "high_repr": "inf",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "action_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True])",
                        "bounded_above": "array([ True])",
                        "_shape": [
                          1
                        ],
                        "low": "array([-1.], dtype=float32)",
                        "high": "array([1.], dtype=float32)",
                        "low_repr": "-1.0",
                        "high_repr": "1.0",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "render_mode": "None",
                      "renderer": {
                        "no_returns_render": [
                          "human"
                        ],
                        "single_render": [
                          "single_rgb_array",
                          "single_depth_array",
                          "single_state_pixels"
                        ],
                        "mode": "None",
                        "render": {
                          "$type": "functools.partial"
                        },
                        "render_list": [],
                        "$type": "gym.utils.renderer.Renderer"
                      },
                      "_ezpickle_args": [],
                      "_ezpickle_kwargs": {},
                      "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                    },
                    "_action_space": "None",
                    "_observation_space": "None",
                    "_reward_range": "None",
                    "_metadata": "None",
                    "new_step_api": true,
                    "checked_reset": false,
                    "checked_step": false,
                    "checked_render": false,
                    "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": false,
                  "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "_has_reset": false,
                "_disable_render_order_enforcing": false,
                "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "_max_episode_steps": 1000,
              "_elapsed_steps": "None",
              "$type": "gym.wrappers.time_limit.TimeLimit"
            },
            "_max_episode_length": 1000,
            "_render_modes": [
              "human",
              "rgb_array",
              "depth_array",
              "single_rgb_array",
              "single_depth_array"
            ],
            "_step_cnt": "None",
            "_visualize": false,
            "_action_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_env_info": "None",
            "$type": "garage.envs.gym_env.GymEnv"
          },
          "_scale_reward": 1.0,
          "_normalize_obs": false,
          "_normalize_reward": false,
          "_expected_action_scale": 1.0,
          "_flatten_obs": true,
          "_obs_alpha": 0.001,
          "_obs_mean": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
          "_obs_var": "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])",
          "_reward_alpha": 0.001,
          "_reward_mean": 0.0,
          "_reward_var": 1.0,
          "$type": "garage.envs.normalized_env.NormalizedEnv"
        },
        {
          "_env": {
            "_env": {
              "env": {
                "env": {
                  "env": {
                    "env": {
                      "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                      "model": "<mujoco._structs.MjModel object at 0x7f5aff61fbb0>",
                      "data": "<mujoco._structs.MjData object at 0x7f5aff61f6b0>",
                      "init_qpos": "array([0., 0., 0.])",
                      "init_qvel": "array([0., 0., 0.])",
                      "_viewers": {},
                      "frame_skip": 5,
                      "viewer": "None",
                      "observation_space": {
                        "dtype": "dtype('float64')",
                        "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "_shape": [
                          11
                        ],
                        "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                        "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                        "low_repr": "-inf",
                        "high_repr": "inf",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "action_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True])",
                        "bounded_above": "array([ True])",
                        "_shape": [
                          1
                        ],
                        "low": "array([-1.], dtype=float32)",
                        "high": "array([1.], dtype=float32)",
                        "low_repr": "-1.0",
                        "high_repr": "1.0",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "render_mode": "None",
                      "renderer": {
                        "no_returns_render": [
                          "human"
                        ],
                        "single_render": [
                          "single_rgb_array",
                          "single_depth_array",
                          "single_state_pixels"
                        ],
                        "mode": "None",
                        "render": {
                          "$type": "functools.partial"
                        },
                        "render_list": [],
                        "$type": "gym.utils.renderer.Renderer"
                      },
                      "_ezpickle_args": [],
                      "_ezpickle_kwargs": {},
                      "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                    },
                    "_action_space": "None",
                    "_observation_space": "None",
                    "_reward_range": "None",
                    "_metadata": "None",
                    "new_step_api": true,
                    "checked_reset": false,
                    "checked_step": false,
                    "checked_render": false,
                    "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": false,
                  "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "_has_reset": false,
                "_disable_render_order_enforcing": false,
                "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "_max_episode_steps": 1000,
              "_elapsed_steps": "None",
              "$type": "gym.wrappers.time_limit.TimeLimit"
            },
            "_max_episode_length": 1000,
            "_render_modes": [
              "human",
              "rgb_array",
              "depth_array",
              "single_rgb_array",
              "single_depth_array"
            ],
            "_step_cnt": "None",
            "_visualize": false,
            "_action_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_env_info": "None",
            "$type": "garage.envs.gym_env.GymEnv"
          },
          "_scale_reward": 1.0,
          "_normalize_obs": false,
          "_normalize_reward": false,
          "_expected_action_scale": 1.0,
          "_flatten_obs": true,
          "_obs_alpha": 0.001,
          "_obs_mean": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
          "_obs_var": "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])",
          "_reward_alpha": 0.001,
          "_reward_mean": 0.0,
          "_reward_var": 1.0,
          "$type": "garage.envs.normalized_env.NormalizedEnv"
        },
        {
          "_env": {
            "_env": {
              "env": {
                "env": {
                  "env": {
                    "env": {
                      "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                      "model": "<mujoco._structs.MjModel object at 0x7f5aff6cc3b0>",
                      "data": "<mujoco._structs.MjData object at 0x7f5aff6cc5f0>",
                      "init_qpos": "array([0., 0., 0.])",
                      "init_qvel": "array([0., 0., 0.])",
                      "_viewers": {},
                      "frame_skip": 5,
                      "viewer": "None",
                      "observation_space": {
                        "dtype": "dtype('float64')",
                        "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "_shape": [
                          11
                        ],
                        "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                        "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                        "low_repr": "-inf",
                        "high_repr": "inf",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "action_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True])",
                        "bounded_above": "array([ True])",
                        "_shape": [
                          1
                        ],
                        "low": "array([-1.], dtype=float32)",
                        "high": "array([1.], dtype=float32)",
                        "low_repr": "-1.0",
                        "high_repr": "1.0",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "render_mode": "None",
                      "renderer": {
                        "no_returns_render": [
                          "human"
                        ],
                        "single_render": [
                          "single_rgb_array",
                          "single_depth_array",
                          "single_state_pixels"
                        ],
                        "mode": "None",
                        "render": {
                          "$type": "functools.partial"
                        },
                        "render_list": [],
                        "$type": "gym.utils.renderer.Renderer"
                      },
                      "_ezpickle_args": [],
                      "_ezpickle_kwargs": {},
                      "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                    },
                    "_action_space": "None",
                    "_observation_space": "None",
                    "_reward_range": "None",
                    "_metadata": "None",
                    "new_step_api": true,
                    "checked_reset": false,
                    "checked_step": false,
                    "checked_render": false,
                    "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": false,
                  "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "_has_reset": false,
                "_disable_render_order_enforcing": false,
                "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "_max_episode_steps": 1000,
              "_elapsed_steps": "None",
              "$type": "gym.wrappers.time_limit.TimeLimit"
            },
            "_max_episode_length": 1000,
            "_render_modes": [
              "human",
              "rgb_array",
              "depth_array",
              "single_rgb_array",
              "single_depth_array"
            ],
            "_step_cnt": "None",
            "_visualize": false,
            "_action_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_env_info": "None",
            "$type": "garage.envs.gym_env.GymEnv"
          },
          "_scale_reward": 1.0,
          "_normalize_obs": false,
          "_normalize_reward": false,
          "_expected_action_scale": 1.0,
          "_flatten_obs": true,
          "_obs_alpha": 0.001,
          "_obs_mean": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
          "_obs_var": "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])",
          "_reward_alpha": 0.001,
          "_reward_mean": 0.0,
          "_reward_var": 1.0,
          "$type": "garage.envs.normalized_env.NormalizedEnv"
        },
        {
          "_env": {
            "_env": {
              "env": {
                "env": {
                  "env": {
                    "env": {
                      "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                      "model": "<mujoco._structs.MjModel object at 0x7f5aff5771f0>",
                      "data": "<mujoco._structs.MjData object at 0x7f5aff577230>",
                      "init_qpos": "array([0., 0., 0.])",
                      "init_qvel": "array([0., 0., 0.])",
                      "_viewers": {},
                      "frame_skip": 5,
                      "viewer": "None",
                      "observation_space": {
                        "dtype": "dtype('float64')",
                        "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "_shape": [
                          11
                        ],
                        "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                        "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                        "low_repr": "-inf",
                        "high_repr": "inf",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "action_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True])",
                        "bounded_above": "array([ True])",
                        "_shape": [
                          1
                        ],
                        "low": "array([-1.], dtype=float32)",
                        "high": "array([1.], dtype=float32)",
                        "low_repr": "-1.0",
                        "high_repr": "1.0",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "render_mode": "None",
                      "renderer": {
                        "no_returns_render": [
                          "human"
                        ],
                        "single_render": [
                          "single_rgb_array",
                          "single_depth_array",
                          "single_state_pixels"
                        ],
                        "mode": "None",
                        "render": {
                          "$type": "functools.partial"
                        },
                        "render_list": [],
                        "$type": "gym.utils.renderer.Renderer"
                      },
                      "_ezpickle_args": [],
                      "_ezpickle_kwargs": {},
                      "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                    },
                    "_action_space": "None",
                    "_observation_space": "None",
                    "_reward_range": "None",
                    "_metadata": "None",
                    "new_step_api": true,
                    "checked_reset": false,
                    "checked_step": false,
                    "checked_render": false,
                    "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": false,
                  "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "_has_reset": false,
                "_disable_render_order_enforcing": false,
                "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "_max_episode_steps": 1000,
              "_elapsed_steps": "None",
              "$type": "gym.wrappers.time_limit.TimeLimit"
            },
            "_max_episode_length": 1000,
            "_render_modes": [
              "human",
              "rgb_array",
              "depth_array",
              "single_rgb_array",
              "single_depth_array"
            ],
            "_step_cnt": "None",
            "_visualize": false,
            "_action_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_env_info": "None",
            "$type": "garage.envs.gym_env.GymEnv"
          },
          "_scale_reward": 1.0,
          "_normalize_obs": false,
          "_normalize_reward": false,
          "_expected_action_scale": 1.0,
          "_flatten_obs": true,
          "_obs_alpha": 0.001,
          "_obs_mean": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
          "_obs_var": "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])",
          "_reward_alpha": 0.001,
          "_reward_mean": 0.0,
          "_reward_var": 1.0,
          "$type": "garage.envs.normalized_env.NormalizedEnv"
        },
        {
          "_env": {
            "_env": {
              "env": {
                "env": {
                  "env": {
                    "env": {
                      "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                      "model": "<mujoco._structs.MjModel object at 0x7f5aff577ab0>",
                      "data": "<mujoco._structs.MjData object at 0x7f5aff577af0>",
                      "init_qpos": "array([0., 0., 0.])",
                      "init_qvel": "array([0., 0., 0.])",
                      "_viewers": {},
                      "frame_skip": 5,
                      "viewer": "None",
                      "observation_space": {
                        "dtype": "dtype('float64')",
                        "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "_shape": [
                          11
                        ],
                        "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                        "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                        "low_repr": "-inf",
                        "high_repr": "inf",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "action_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True])",
                        "bounded_above": "array([ True])",
                        "_shape": [
                          1
                        ],
                        "low": "array([-1.], dtype=float32)",
                        "high": "array([1.], dtype=float32)",
                        "low_repr": "-1.0",
                        "high_repr": "1.0",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "render_mode": "None",
                      "renderer": {
                        "no_returns_render": [
                          "human"
                        ],
                        "single_render": [
                          "single_rgb_array",
                          "single_depth_array",
                          "single_state_pixels"
                        ],
                        "mode": "None",
                        "render": {
                          "$type": "functools.partial"
                        },
                        "render_list": [],
                        "$type": "gym.utils.renderer.Renderer"
                      },
                      "_ezpickle_args": [],
                      "_ezpickle_kwargs": {},
                      "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                    },
                    "_action_space": "None",
                    "_observation_space": "None",
                    "_reward_range": "None",
                    "_metadata": "None",
                    "new_step_api": true,
                    "checked_reset": false,
                    "checked_step": false,
                    "checked_render": false,
                    "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": false,
                  "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "_has_reset": false,
                "_disable_render_order_enforcing": false,
                "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "_max_episode_steps": 1000,
              "_elapsed_steps": "None",
              "$type": "gym.wrappers.time_limit.TimeLimit"
            },
            "_max_episode_length": 1000,
            "_render_modes": [
              "human",
              "rgb_array",
              "depth_array",
              "single_rgb_array",
              "single_depth_array"
            ],
            "_step_cnt": "None",
            "_visualize": false,
            "_action_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_env_info": "None",
            "$type": "garage.envs.gym_env.GymEnv"
          },
          "_scale_reward": 1.0,
          "_normalize_obs": false,
          "_normalize_reward": false,
          "_expected_action_scale": 1.0,
          "_flatten_obs": true,
          "_obs_alpha": 0.001,
          "_obs_mean": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
          "_obs_var": "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])",
          "_reward_alpha": 0.001,
          "_reward_mean": 0.0,
          "_reward_var": 1.0,
          "$type": "garage.envs.normalized_env.NormalizedEnv"
        },
        {
          "_env": {
            "_env": {
              "env": {
                "env": {
                  "env": {
                    "env": {
                      "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                      "model": "<mujoco._structs.MjModel object at 0x7f5aff621570>",
                      "data": "<mujoco._structs.MjData object at 0x7f5aff6215b0>",
                      "init_qpos": "array([0., 0., 0.])",
                      "init_qvel": "array([0., 0., 0.])",
                      "_viewers": {},
                      "frame_skip": 5,
                      "viewer": "None",
                      "observation_space": {
                        "dtype": "dtype('float64')",
                        "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "_shape": [
                          11
                        ],
                        "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                        "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                        "low_repr": "-inf",
                        "high_repr": "inf",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "action_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True])",
                        "bounded_above": "array([ True])",
                        "_shape": [
                          1
                        ],
                        "low": "array([-1.], dtype=float32)",
                        "high": "array([1.], dtype=float32)",
                        "low_repr": "-1.0",
                        "high_repr": "1.0",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "render_mode": "None",
                      "renderer": {
                        "no_returns_render": [
                          "human"
                        ],
                        "single_render": [
                          "single_rgb_array",
                          "single_depth_array",
                          "single_state_pixels"
                        ],
                        "mode": "None",
                        "render": {
                          "$type": "functools.partial"
                        },
                        "render_list": [],
                        "$type": "gym.utils.renderer.Renderer"
                      },
                      "_ezpickle_args": [],
                      "_ezpickle_kwargs": {},
                      "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                    },
                    "_action_space": "None",
                    "_observation_space": "None",
                    "_reward_range": "None",
                    "_metadata": "None",
                    "new_step_api": true,
                    "checked_reset": false,
                    "checked_step": false,
                    "checked_render": false,
                    "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": false,
                  "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "_has_reset": false,
                "_disable_render_order_enforcing": false,
                "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "_max_episode_steps": 1000,
              "_elapsed_steps": "None",
              "$type": "gym.wrappers.time_limit.TimeLimit"
            },
            "_max_episode_length": 1000,
            "_render_modes": [
              "human",
              "rgb_array",
              "depth_array",
              "single_rgb_array",
              "single_depth_array"
            ],
            "_step_cnt": "None",
            "_visualize": false,
            "_action_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_env_info": "None",
            "$type": "garage.envs.gym_env.GymEnv"
          },
          "_scale_reward": 1.0,
          "_normalize_obs": false,
          "_normalize_reward": false,
          "_expected_action_scale": 1.0,
          "_flatten_obs": true,
          "_obs_alpha": 0.001,
          "_obs_mean": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
          "_obs_var": "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])",
          "_reward_alpha": 0.001,
          "_reward_mean": 0.0,
          "_reward_var": 1.0,
          "$type": "garage.envs.normalized_env.NormalizedEnv"
        },
        {
          "_env": {
            "_env": {
              "env": {
                "env": {
                  "env": {
                    "env": {
                      "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                      "model": "<mujoco._structs.MjModel object at 0x7f5aff4f50b0>",
                      "data": "<mujoco._structs.MjData object at 0x7f5aff4f50f0>",
                      "init_qpos": "array([0., 0., 0.])",
                      "init_qvel": "array([0., 0., 0.])",
                      "_viewers": {},
                      "frame_skip": 5,
                      "viewer": "None",
                      "observation_space": {
                        "dtype": "dtype('float64')",
                        "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "_shape": [
                          11
                        ],
                        "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                        "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                        "low_repr": "-inf",
                        "high_repr": "inf",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "action_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True])",
                        "bounded_above": "array([ True])",
                        "_shape": [
                          1
                        ],
                        "low": "array([-1.], dtype=float32)",
                        "high": "array([1.], dtype=float32)",
                        "low_repr": "-1.0",
                        "high_repr": "1.0",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "render_mode": "None",
                      "renderer": {
                        "no_returns_render": [
                          "human"
                        ],
                        "single_render": [
                          "single_rgb_array",
                          "single_depth_array",
                          "single_state_pixels"
                        ],
                        "mode": "None",
                        "render": {
                          "$type": "functools.partial"
                        },
                        "render_list": [],
                        "$type": "gym.utils.renderer.Renderer"
                      },
                      "_ezpickle_args": [],
                      "_ezpickle_kwargs": {},
                      "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                    },
                    "_action_space": "None",
                    "_observation_space": "None",
                    "_reward_range": "None",
                    "_metadata": "None",
                    "new_step_api": true,
                    "checked_reset": false,
                    "checked_step": false,
                    "checked_render": false,
                    "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": false,
                  "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "_has_reset": false,
                "_disable_render_order_enforcing": false,
                "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "_max_episode_steps": 1000,
              "_elapsed_steps": "None",
              "$type": "gym.wrappers.time_limit.TimeLimit"
            },
            "_max_episode_length": 1000,
            "_render_modes": [
              "human",
              "rgb_array",
              "depth_array",
              "single_rgb_array",
              "single_depth_array"
            ],
            "_step_cnt": "None",
            "_visualize": false,
            "_action_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_env_info": "None",
            "$type": "garage.envs.gym_env.GymEnv"
          },
          "_scale_reward": 1.0,
          "_normalize_obs": false,
          "_normalize_reward": false,
          "_expected_action_scale": 1.0,
          "_flatten_obs": true,
          "_obs_alpha": 0.001,
          "_obs_mean": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
          "_obs_var": "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])",
          "_reward_alpha": 0.001,
          "_reward_mean": 0.0,
          "_reward_var": 1.0,
          "$type": "garage.envs.normalized_env.NormalizedEnv"
        }
      ],
      "_workers": [
        {
          "_seed": "None",
          "_max_episode_length": 500,
          "_worker_number": 0,
          "agent": {
            "training": true,
            "_parameters": {},
            "_buffers": {},
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_module": {
                "training": true,
                "_parameters": {
                  "_init_std": {
                    "$type": "torch.nn.parameter.Parameter"
                  }
                },
                "_buffers": {
                  "min_std_param": {
                    "$type": "torch.Tensor"
                  }
                },
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_mean_module": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "_layers": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "0": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 11.0,
                                "out_features": 32,
                                "$type": "torch.nn.modules.linear.Linear"
                              },
                              "non_linearity": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                                "$type": "garage.torch._functions.NonLinearity"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          },
                          "1": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 32,
                                "out_features": 32,
                                "$type": "torch.nn.modules.linear.Linear"
                              },
                              "non_linearity": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                                "$type": "garage.torch._functions.NonLinearity"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          }
                        },
                        "$type": "torch.nn.modules.container.ModuleList"
                      },
                      "_output_layers": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "0": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 32,
                                "out_features": 1.0,
                                "$type": "torch.nn.modules.linear.Linear"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          }
                        },
                        "$type": "torch.nn.modules.container.ModuleList"
                      }
                    },
                    "_output_dim": 1.0,
                    "$type": "garage.torch.modules.mlp_module.MLPModule"
                  }
                },
                "_input_dim": 11.0,
                "_hidden_sizes": [
                  32,
                  32
                ],
                "_action_dim": 1.0,
                "_learn_std": true,
                "_std_hidden_sizes": [
                  32,
                  32
                ],
                "_min_std": 1e-06,
                "_max_std": "None",
                "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
                "_std_hidden_w_init": {
                  "$type": "builtins.function"
                },
                "_std_hidden_b_init": {
                  "$type": "builtins.function"
                },
                "_std_output_nonlinearity": "None",
                "_std_output_w_init": {
                  "$type": "builtins.function"
                },
                "_std_parameterization": "exp",
                "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
                "_hidden_w_init": {
                  "$type": "builtins.function"
                },
                "_hidden_b_init": {
                  "$type": "builtins.function"
                },
                "_output_nonlinearity": "None",
                "_output_w_init": {
                  "$type": "builtins.function"
                },
                "_output_b_init": {
                  "$type": "builtins.function"
                },
                "_layer_normalization": false,
                "_norm_dist_class": {
                  "$typename": "torch.distributions.normal.Normal"
                },
                "_min_std_param": {
                  "$type": "torch.Tensor"
                },
                "_max_std_param": "None",
                "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
              }
            },
            "_env_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_name": "GaussianMLPPolicy",
            "_obs_dim": 11.0,
            "_action_dim": 1.0,
            "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
          },
          "env": {
            "_env": {
              "_env": {
                "env": {
                  "env": {
                    "env": {
                      "env": {
                        "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                        "model": "<mujoco._structs.MjModel object at 0x7f5b04bb2830>",
                        "data": "<mujoco._structs.MjData object at 0x7f5b0418c730>",
                        "init_qpos": "array([0., 0., 0.])",
                        "init_qvel": "array([0., 0., 0.])",
                        "_viewers": {},
                        "frame_skip": 5,
                        "viewer": "None",
                        "observation_space": {
                          "dtype": "dtype('float64')",
                          "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                          "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                          "_shape": [
                            11
                          ],
                          "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                          "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                          "low_repr": "-inf",
                          "high_repr": "inf",
                          "_np_random": "None",
                          "$type": "gym.spaces.box.Box"
                        },
                        "action_space": {
                          "dtype": "dtype('float32')",
                          "bounded_below": "array([ True])",
                          "bounded_above": "array([ True])",
                          "_shape": [
                            1
                          ],
                          "low": "array([-1.], dtype=float32)",
                          "high": "array([1.], dtype=float32)",
                          "low_repr": "-1.0",
                          "high_repr": "1.0",
                          "_np_random": "None",
                          "$type": "gym.spaces.box.Box"
                        },
                        "render_mode": "None",
                        "renderer": {
                          "no_returns_render": [
                            "human"
                          ],
                          "single_render": [
                            "single_rgb_array",
                            "single_depth_array",
                            "single_state_pixels"
                          ],
                          "mode": "None",
                          "render": {
                            "$type": "functools.partial"
                          },
                          "render_list": [],
                          "$type": "gym.utils.renderer.Renderer"
                        },
                        "_ezpickle_args": [],
                        "_ezpickle_kwargs": {},
                        "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                      },
                      "_action_space": "None",
                      "_observation_space": "None",
                      "_reward_range": "None",
                      "_metadata": "None",
                      "new_step_api": true,
                      "checked_reset": false,
                      "checked_step": false,
                      "checked_render": false,
                      "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                    },
                    "_action_space": "None",
                    "_observation_space": "None",
                    "_reward_range": "None",
                    "_metadata": "None",
                    "new_step_api": false,
                    "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "_has_reset": false,
                  "_disable_render_order_enforcing": false,
                  "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "_max_episode_steps": 1000,
                "_elapsed_steps": "None",
                "$type": "gym.wrappers.time_limit.TimeLimit"
              },
              "_max_episode_length": 1000,
              "_render_modes": [
                "human",
                "rgb_array",
                "depth_array",
                "single_rgb_array",
                "single_depth_array"
              ],
              "_step_cnt": "None",
              "_visualize": false,
              "_action_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_observation_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_spec": {
                "max_episode_length": 1000,
                "input_space": {
                  "dtype": "dtype('float32')",
                  "bounded_below": "array([ True])",
                  "bounded_above": "array([ True])",
                  "_shape": [
                    1
                  ],
                  "low": "array([-1.], dtype=float32)",
                  "high": "array([1.], dtype=float32)",
                  "low_repr": "-1.0",
                  "high_repr": "1.0",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "output_space": {
                  "dtype": "dtype('float32')",
                  "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                  "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                  "_shape": [
                    11
                  ],
                  "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                  "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                  "low_repr": "-inf",
                  "high_repr": "inf",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "$type": "garage._environment.EnvSpec"
              },
              "_env_info": "None",
              "$type": "garage.envs.gym_env.GymEnv"
            },
            "_scale_reward": 1.0,
            "_normalize_obs": false,
            "_normalize_reward": false,
            "_expected_action_scale": 1.0,
            "_flatten_obs": true,
            "_obs_alpha": 0.001,
            "_obs_mean": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
            "_obs_var": "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])",
            "_reward_alpha": 0.001,
            "_reward_mean": 0.0,
            "_reward_var": 1.0,
            "$type": "garage.envs.normalized_env.NormalizedEnv"
          },
          "_env_steps": [],
          "_observations": [],
          "_last_observations": [],
          "_agent_infos": {},
          "_lengths": [],
          "_prev_obs": "None",
          "_eps_length": 0,
          "_episode_infos": {},
          "$type": "garage.sampler.default_worker.DefaultWorker"
        },
        {
          "_seed": "None",
          "_max_episode_length": 500,
          "_worker_number": 1,
          "agent": {
            "training": true,
            "_parameters": {},
            "_buffers": {},
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_module": {
                "training": true,
                "_parameters": {
                  "_init_std": {
                    "$type": "torch.nn.parameter.Parameter"
                  }
                },
                "_buffers": {
                  "min_std_param": {
                    "$type": "torch.Tensor"
                  }
                },
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_mean_module": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "_layers": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "0": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 11.0,
                                "out_features": 32,
                                "$type": "torch.nn.modules.linear.Linear"
                              },
                              "non_linearity": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                                "$type": "garage.torch._functions.NonLinearity"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          },
                          "1": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 32,
                                "out_features": 32,
                                "$type": "torch.nn.modules.linear.Linear"
                              },
                              "non_linearity": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                                "$type": "garage.torch._functions.NonLinearity"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          }
                        },
                        "$type": "torch.nn.modules.container.ModuleList"
                      },
                      "_output_layers": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "0": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 32,
                                "out_features": 1.0,
                                "$type": "torch.nn.modules.linear.Linear"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          }
                        },
                        "$type": "torch.nn.modules.container.ModuleList"
                      }
                    },
                    "_output_dim": 1.0,
                    "$type": "garage.torch.modules.mlp_module.MLPModule"
                  }
                },
                "_input_dim": 11.0,
                "_hidden_sizes": [
                  32,
                  32
                ],
                "_action_dim": 1.0,
                "_learn_std": true,
                "_std_hidden_sizes": [
                  32,
                  32
                ],
                "_min_std": 1e-06,
                "_max_std": "None",
                "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
                "_std_hidden_w_init": {
                  "$type": "builtins.function"
                },
                "_std_hidden_b_init": {
                  "$type": "builtins.function"
                },
                "_std_output_nonlinearity": "None",
                "_std_output_w_init": {
                  "$type": "builtins.function"
                },
                "_std_parameterization": "exp",
                "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
                "_hidden_w_init": {
                  "$type": "builtins.function"
                },
                "_hidden_b_init": {
                  "$type": "builtins.function"
                },
                "_output_nonlinearity": "None",
                "_output_w_init": {
                  "$type": "builtins.function"
                },
                "_output_b_init": {
                  "$type": "builtins.function"
                },
                "_layer_normalization": false,
                "_norm_dist_class": {
                  "$typename": "torch.distributions.normal.Normal"
                },
                "_min_std_param": {
                  "$type": "torch.Tensor"
                },
                "_max_std_param": "None",
                "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
              }
            },
            "_env_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_name": "GaussianMLPPolicy",
            "_obs_dim": 11.0,
            "_action_dim": 1.0,
            "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
          },
          "env": {
            "_env": {
              "_env": {
                "env": {
                  "env": {
                    "env": {
                      "env": {
                        "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                        "model": "<mujoco._structs.MjModel object at 0x7f5b048d3df0>",
                        "data": "<mujoco._structs.MjData object at 0x7f5b0419c770>",
                        "init_qpos": "array([0., 0., 0.])",
                        "init_qvel": "array([0., 0., 0.])",
                        "_viewers": {},
                        "frame_skip": 5,
                        "viewer": "None",
                        "observation_space": {
                          "dtype": "dtype('float64')",
                          "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                          "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                          "_shape": [
                            11
                          ],
                          "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                          "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                          "low_repr": "-inf",
                          "high_repr": "inf",
                          "_np_random": "None",
                          "$type": "gym.spaces.box.Box"
                        },
                        "action_space": {
                          "dtype": "dtype('float32')",
                          "bounded_below": "array([ True])",
                          "bounded_above": "array([ True])",
                          "_shape": [
                            1
                          ],
                          "low": "array([-1.], dtype=float32)",
                          "high": "array([1.], dtype=float32)",
                          "low_repr": "-1.0",
                          "high_repr": "1.0",
                          "_np_random": "None",
                          "$type": "gym.spaces.box.Box"
                        },
                        "render_mode": "None",
                        "renderer": {
                          "no_returns_render": [
                            "human"
                          ],
                          "single_render": [
                            "single_rgb_array",
                            "single_depth_array",
                            "single_state_pixels"
                          ],
                          "mode": "None",
                          "render": {
                            "$type": "functools.partial"
                          },
                          "render_list": [],
                          "$type": "gym.utils.renderer.Renderer"
                        },
                        "_ezpickle_args": [],
                        "_ezpickle_kwargs": {},
                        "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                      },
                      "_action_space": "None",
                      "_observation_space": "None",
                      "_reward_range": "None",
                      "_metadata": "None",
                      "new_step_api": true,
                      "checked_reset": false,
                      "checked_step": false,
                      "checked_render": false,
                      "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                    },
                    "_action_space": "None",
                    "_observation_space": "None",
                    "_reward_range": "None",
                    "_metadata": "None",
                    "new_step_api": false,
                    "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "_has_reset": false,
                  "_disable_render_order_enforcing": false,
                  "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "_max_episode_steps": 1000,
                "_elapsed_steps": "None",
                "$type": "gym.wrappers.time_limit.TimeLimit"
              },
              "_max_episode_length": 1000,
              "_render_modes": [
                "human",
                "rgb_array",
                "depth_array",
                "single_rgb_array",
                "single_depth_array"
              ],
              "_step_cnt": "None",
              "_visualize": false,
              "_action_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_observation_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_spec": {
                "max_episode_length": 1000,
                "input_space": {
                  "dtype": "dtype('float32')",
                  "bounded_below": "array([ True])",
                  "bounded_above": "array([ True])",
                  "_shape": [
                    1
                  ],
                  "low": "array([-1.], dtype=float32)",
                  "high": "array([1.], dtype=float32)",
                  "low_repr": "-1.0",
                  "high_repr": "1.0",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "output_space": {
                  "dtype": "dtype('float32')",
                  "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                  "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                  "_shape": [
                    11
                  ],
                  "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                  "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                  "low_repr": "-inf",
                  "high_repr": "inf",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "$type": "garage._environment.EnvSpec"
              },
              "_env_info": "None",
              "$type": "garage.envs.gym_env.GymEnv"
            },
            "_scale_reward": 1.0,
            "_normalize_obs": false,
            "_normalize_reward": false,
            "_expected_action_scale": 1.0,
            "_flatten_obs": true,
            "_obs_alpha": 0.001,
            "_obs_mean": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
            "_obs_var": "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])",
            "_reward_alpha": 0.001,
            "_reward_mean": 0.0,
            "_reward_var": 1.0,
            "$type": "garage.envs.normalized_env.NormalizedEnv"
          },
          "_env_steps": [],
          "_observations": [],
          "_last_observations": [],
          "_agent_infos": {},
          "_lengths": [],
          "_prev_obs": "None",
          "_eps_length": 0,
          "_episode_infos": {},
          "$type": "garage.sampler.default_worker.DefaultWorker"
        },
        {
          "_seed": "None",
          "_max_episode_length": 500,
          "_worker_number": 2,
          "agent": {
            "training": true,
            "_parameters": {},
            "_buffers": {},
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_module": {
                "training": true,
                "_parameters": {
                  "_init_std": {
                    "$type": "torch.nn.parameter.Parameter"
                  }
                },
                "_buffers": {
                  "min_std_param": {
                    "$type": "torch.Tensor"
                  }
                },
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_mean_module": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "_layers": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "0": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 11.0,
                                "out_features": 32,
                                "$type": "torch.nn.modules.linear.Linear"
                              },
                              "non_linearity": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                                "$type": "garage.torch._functions.NonLinearity"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          },
                          "1": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 32,
                                "out_features": 32,
                                "$type": "torch.nn.modules.linear.Linear"
                              },
                              "non_linearity": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                                "$type": "garage.torch._functions.NonLinearity"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          }
                        },
                        "$type": "torch.nn.modules.container.ModuleList"
                      },
                      "_output_layers": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "0": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 32,
                                "out_features": 1.0,
                                "$type": "torch.nn.modules.linear.Linear"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          }
                        },
                        "$type": "torch.nn.modules.container.ModuleList"
                      }
                    },
                    "_output_dim": 1.0,
                    "$type": "garage.torch.modules.mlp_module.MLPModule"
                  }
                },
                "_input_dim": 11.0,
                "_hidden_sizes": [
                  32,
                  32
                ],
                "_action_dim": 1.0,
                "_learn_std": true,
                "_std_hidden_sizes": [
                  32,
                  32
                ],
                "_min_std": 1e-06,
                "_max_std": "None",
                "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
                "_std_hidden_w_init": {
                  "$type": "builtins.function"
                },
                "_std_hidden_b_init": {
                  "$type": "builtins.function"
                },
                "_std_output_nonlinearity": "None",
                "_std_output_w_init": {
                  "$type": "builtins.function"
                },
                "_std_parameterization": "exp",
                "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
                "_hidden_w_init": {
                  "$type": "builtins.function"
                },
                "_hidden_b_init": {
                  "$type": "builtins.function"
                },
                "_output_nonlinearity": "None",
                "_output_w_init": {
                  "$type": "builtins.function"
                },
                "_output_b_init": {
                  "$type": "builtins.function"
                },
                "_layer_normalization": false,
                "_norm_dist_class": {
                  "$typename": "torch.distributions.normal.Normal"
                },
                "_min_std_param": {
                  "$type": "torch.Tensor"
                },
                "_max_std_param": "None",
                "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
              }
            },
            "_env_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_name": "GaussianMLPPolicy",
            "_obs_dim": 11.0,
            "_action_dim": 1.0,
            "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
          },
          "env": {
            "_env": {
              "_env": {
                "env": {
                  "env": {
                    "env": {
                      "env": {
                        "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                        "model": "<mujoco._structs.MjModel object at 0x7f5aff90bef0>",
                        "data": "<mujoco._structs.MjData object at 0x7f5aff90bf30>",
                        "init_qpos": "array([0., 0., 0.])",
                        "init_qvel": "array([0., 0., 0.])",
                        "_viewers": {},
                        "frame_skip": 5,
                        "viewer": "None",
                        "observation_space": {
                          "dtype": "dtype('float64')",
                          "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                          "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                          "_shape": [
                            11
                          ],
                          "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                          "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                          "low_repr": "-inf",
                          "high_repr": "inf",
                          "_np_random": "None",
                          "$type": "gym.spaces.box.Box"
                        },
                        "action_space": {
                          "dtype": "dtype('float32')",
                          "bounded_below": "array([ True])",
                          "bounded_above": "array([ True])",
                          "_shape": [
                            1
                          ],
                          "low": "array([-1.], dtype=float32)",
                          "high": "array([1.], dtype=float32)",
                          "low_repr": "-1.0",
                          "high_repr": "1.0",
                          "_np_random": "None",
                          "$type": "gym.spaces.box.Box"
                        },
                        "render_mode": "None",
                        "renderer": {
                          "no_returns_render": [
                            "human"
                          ],
                          "single_render": [
                            "single_rgb_array",
                            "single_depth_array",
                            "single_state_pixels"
                          ],
                          "mode": "None",
                          "render": {
                            "$type": "functools.partial"
                          },
                          "render_list": [],
                          "$type": "gym.utils.renderer.Renderer"
                        },
                        "_ezpickle_args": [],
                        "_ezpickle_kwargs": {},
                        "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                      },
                      "_action_space": "None",
                      "_observation_space": "None",
                      "_reward_range": "None",
                      "_metadata": "None",
                      "new_step_api": true,
                      "checked_reset": false,
                      "checked_step": false,
                      "checked_render": false,
                      "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                    },
                    "_action_space": "None",
                    "_observation_space": "None",
                    "_reward_range": "None",
                    "_metadata": "None",
                    "new_step_api": false,
                    "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "_has_reset": false,
                  "_disable_render_order_enforcing": false,
                  "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "_max_episode_steps": 1000,
                "_elapsed_steps": "None",
                "$type": "gym.wrappers.time_limit.TimeLimit"
              },
              "_max_episode_length": 1000,
              "_render_modes": [
                "human",
                "rgb_array",
                "depth_array",
                "single_rgb_array",
                "single_depth_array"
              ],
              "_step_cnt": "None",
              "_visualize": false,
              "_action_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_observation_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_spec": {
                "max_episode_length": 1000,
                "input_space": {
                  "dtype": "dtype('float32')",
                  "bounded_below": "array([ True])",
                  "bounded_above": "array([ True])",
                  "_shape": [
                    1
                  ],
                  "low": "array([-1.], dtype=float32)",
                  "high": "array([1.], dtype=float32)",
                  "low_repr": "-1.0",
                  "high_repr": "1.0",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "output_space": {
                  "dtype": "dtype('float32')",
                  "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                  "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                  "_shape": [
                    11
                  ],
                  "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                  "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                  "low_repr": "-inf",
                  "high_repr": "inf",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "$type": "garage._environment.EnvSpec"
              },
              "_env_info": "None",
              "$type": "garage.envs.gym_env.GymEnv"
            },
            "_scale_reward": 1.0,
            "_normalize_obs": false,
            "_normalize_reward": false,
            "_expected_action_scale": 1.0,
            "_flatten_obs": true,
            "_obs_alpha": 0.001,
            "_obs_mean": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
            "_obs_var": "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])",
            "_reward_alpha": 0.001,
            "_reward_mean": 0.0,
            "_reward_var": 1.0,
            "$type": "garage.envs.normalized_env.NormalizedEnv"
          },
          "_env_steps": [],
          "_observations": [],
          "_last_observations": [],
          "_agent_infos": {},
          "_lengths": [],
          "_prev_obs": "None",
          "_eps_length": 0,
          "_episode_infos": {},
          "$type": "garage.sampler.default_worker.DefaultWorker"
        },
        {
          "_seed": "None",
          "_max_episode_length": 500,
          "_worker_number": 3,
          "agent": {
            "training": true,
            "_parameters": {},
            "_buffers": {},
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_module": {
                "training": true,
                "_parameters": {
                  "_init_std": {
                    "$type": "torch.nn.parameter.Parameter"
                  }
                },
                "_buffers": {
                  "min_std_param": {
                    "$type": "torch.Tensor"
                  }
                },
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_mean_module": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "_layers": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "0": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 11.0,
                                "out_features": 32,
                                "$type": "torch.nn.modules.linear.Linear"
                              },
                              "non_linearity": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                                "$type": "garage.torch._functions.NonLinearity"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          },
                          "1": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 32,
                                "out_features": 32,
                                "$type": "torch.nn.modules.linear.Linear"
                              },
                              "non_linearity": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                                "$type": "garage.torch._functions.NonLinearity"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          }
                        },
                        "$type": "torch.nn.modules.container.ModuleList"
                      },
                      "_output_layers": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "0": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 32,
                                "out_features": 1.0,
                                "$type": "torch.nn.modules.linear.Linear"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          }
                        },
                        "$type": "torch.nn.modules.container.ModuleList"
                      }
                    },
                    "_output_dim": 1.0,
                    "$type": "garage.torch.modules.mlp_module.MLPModule"
                  }
                },
                "_input_dim": 11.0,
                "_hidden_sizes": [
                  32,
                  32
                ],
                "_action_dim": 1.0,
                "_learn_std": true,
                "_std_hidden_sizes": [
                  32,
                  32
                ],
                "_min_std": 1e-06,
                "_max_std": "None",
                "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
                "_std_hidden_w_init": {
                  "$type": "builtins.function"
                },
                "_std_hidden_b_init": {
                  "$type": "builtins.function"
                },
                "_std_output_nonlinearity": "None",
                "_std_output_w_init": {
                  "$type": "builtins.function"
                },
                "_std_parameterization": "exp",
                "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
                "_hidden_w_init": {
                  "$type": "builtins.function"
                },
                "_hidden_b_init": {
                  "$type": "builtins.function"
                },
                "_output_nonlinearity": "None",
                "_output_w_init": {
                  "$type": "builtins.function"
                },
                "_output_b_init": {
                  "$type": "builtins.function"
                },
                "_layer_normalization": false,
                "_norm_dist_class": {
                  "$typename": "torch.distributions.normal.Normal"
                },
                "_min_std_param": {
                  "$type": "torch.Tensor"
                },
                "_max_std_param": "None",
                "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
              }
            },
            "_env_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_name": "GaussianMLPPolicy",
            "_obs_dim": 11.0,
            "_action_dim": 1.0,
            "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
          },
          "env": {
            "_env": {
              "_env": {
                "env": {
                  "env": {
                    "env": {
                      "env": {
                        "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                        "model": "<mujoco._structs.MjModel object at 0x7f5aff7e29b0>",
                        "data": "<mujoco._structs.MjData object at 0x7f5aff7e29f0>",
                        "init_qpos": "array([0., 0., 0.])",
                        "init_qvel": "array([0., 0., 0.])",
                        "_viewers": {},
                        "frame_skip": 5,
                        "viewer": "None",
                        "observation_space": {
                          "dtype": "dtype('float64')",
                          "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                          "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                          "_shape": [
                            11
                          ],
                          "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                          "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                          "low_repr": "-inf",
                          "high_repr": "inf",
                          "_np_random": "None",
                          "$type": "gym.spaces.box.Box"
                        },
                        "action_space": {
                          "dtype": "dtype('float32')",
                          "bounded_below": "array([ True])",
                          "bounded_above": "array([ True])",
                          "_shape": [
                            1
                          ],
                          "low": "array([-1.], dtype=float32)",
                          "high": "array([1.], dtype=float32)",
                          "low_repr": "-1.0",
                          "high_repr": "1.0",
                          "_np_random": "None",
                          "$type": "gym.spaces.box.Box"
                        },
                        "render_mode": "None",
                        "renderer": {
                          "no_returns_render": [
                            "human"
                          ],
                          "single_render": [
                            "single_rgb_array",
                            "single_depth_array",
                            "single_state_pixels"
                          ],
                          "mode": "None",
                          "render": {
                            "$type": "functools.partial"
                          },
                          "render_list": [],
                          "$type": "gym.utils.renderer.Renderer"
                        },
                        "_ezpickle_args": [],
                        "_ezpickle_kwargs": {},
                        "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                      },
                      "_action_space": "None",
                      "_observation_space": "None",
                      "_reward_range": "None",
                      "_metadata": "None",
                      "new_step_api": true,
                      "checked_reset": false,
                      "checked_step": false,
                      "checked_render": false,
                      "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                    },
                    "_action_space": "None",
                    "_observation_space": "None",
                    "_reward_range": "None",
                    "_metadata": "None",
                    "new_step_api": false,
                    "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "_has_reset": false,
                  "_disable_render_order_enforcing": false,
                  "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "_max_episode_steps": 1000,
                "_elapsed_steps": "None",
                "$type": "gym.wrappers.time_limit.TimeLimit"
              },
              "_max_episode_length": 1000,
              "_render_modes": [
                "human",
                "rgb_array",
                "depth_array",
                "single_rgb_array",
                "single_depth_array"
              ],
              "_step_cnt": "None",
              "_visualize": false,
              "_action_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_observation_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_spec": {
                "max_episode_length": 1000,
                "input_space": {
                  "dtype": "dtype('float32')",
                  "bounded_below": "array([ True])",
                  "bounded_above": "array([ True])",
                  "_shape": [
                    1
                  ],
                  "low": "array([-1.], dtype=float32)",
                  "high": "array([1.], dtype=float32)",
                  "low_repr": "-1.0",
                  "high_repr": "1.0",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "output_space": {
                  "dtype": "dtype('float32')",
                  "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                  "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                  "_shape": [
                    11
                  ],
                  "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                  "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                  "low_repr": "-inf",
                  "high_repr": "inf",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "$type": "garage._environment.EnvSpec"
              },
              "_env_info": "None",
              "$type": "garage.envs.gym_env.GymEnv"
            },
            "_scale_reward": 1.0,
            "_normalize_obs": false,
            "_normalize_reward": false,
            "_expected_action_scale": 1.0,
            "_flatten_obs": true,
            "_obs_alpha": 0.001,
            "_obs_mean": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
            "_obs_var": "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])",
            "_reward_alpha": 0.001,
            "_reward_mean": 0.0,
            "_reward_var": 1.0,
            "$type": "garage.envs.normalized_env.NormalizedEnv"
          },
          "_env_steps": [],
          "_observations": [],
          "_last_observations": [],
          "_agent_infos": {},
          "_lengths": [],
          "_prev_obs": "None",
          "_eps_length": 0,
          "_episode_infos": {},
          "$type": "garage.sampler.default_worker.DefaultWorker"
        },
        {
          "_seed": "None",
          "_max_episode_length": 500,
          "_worker_number": 4,
          "agent": {
            "training": true,
            "_parameters": {},
            "_buffers": {},
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_module": {
                "training": true,
                "_parameters": {
                  "_init_std": {
                    "$type": "torch.nn.parameter.Parameter"
                  }
                },
                "_buffers": {
                  "min_std_param": {
                    "$type": "torch.Tensor"
                  }
                },
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_mean_module": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "_layers": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "0": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 11.0,
                                "out_features": 32,
                                "$type": "torch.nn.modules.linear.Linear"
                              },
                              "non_linearity": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                                "$type": "garage.torch._functions.NonLinearity"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          },
                          "1": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 32,
                                "out_features": 32,
                                "$type": "torch.nn.modules.linear.Linear"
                              },
                              "non_linearity": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                                "$type": "garage.torch._functions.NonLinearity"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          }
                        },
                        "$type": "torch.nn.modules.container.ModuleList"
                      },
                      "_output_layers": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "0": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 32,
                                "out_features": 1.0,
                                "$type": "torch.nn.modules.linear.Linear"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          }
                        },
                        "$type": "torch.nn.modules.container.ModuleList"
                      }
                    },
                    "_output_dim": 1.0,
                    "$type": "garage.torch.modules.mlp_module.MLPModule"
                  }
                },
                "_input_dim": 11.0,
                "_hidden_sizes": [
                  32,
                  32
                ],
                "_action_dim": 1.0,
                "_learn_std": true,
                "_std_hidden_sizes": [
                  32,
                  32
                ],
                "_min_std": 1e-06,
                "_max_std": "None",
                "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
                "_std_hidden_w_init": {
                  "$type": "builtins.function"
                },
                "_std_hidden_b_init": {
                  "$type": "builtins.function"
                },
                "_std_output_nonlinearity": "None",
                "_std_output_w_init": {
                  "$type": "builtins.function"
                },
                "_std_parameterization": "exp",
                "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
                "_hidden_w_init": {
                  "$type": "builtins.function"
                },
                "_hidden_b_init": {
                  "$type": "builtins.function"
                },
                "_output_nonlinearity": "None",
                "_output_w_init": {
                  "$type": "builtins.function"
                },
                "_output_b_init": {
                  "$type": "builtins.function"
                },
                "_layer_normalization": false,
                "_norm_dist_class": {
                  "$typename": "torch.distributions.normal.Normal"
                },
                "_min_std_param": {
                  "$type": "torch.Tensor"
                },
                "_max_std_param": "None",
                "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
              }
            },
            "_env_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_name": "GaussianMLPPolicy",
            "_obs_dim": 11.0,
            "_action_dim": 1.0,
            "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
          },
          "env": {
            "_env": {
              "_env": {
                "env": {
                  "env": {
                    "env": {
                      "env": {
                        "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                        "model": "<mujoco._structs.MjModel object at 0x7f5aff818470>",
                        "data": "<mujoco._structs.MjData object at 0x7f5aff8184b0>",
                        "init_qpos": "array([0., 0., 0.])",
                        "init_qvel": "array([0., 0., 0.])",
                        "_viewers": {},
                        "frame_skip": 5,
                        "viewer": "None",
                        "observation_space": {
                          "dtype": "dtype('float64')",
                          "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                          "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                          "_shape": [
                            11
                          ],
                          "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                          "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                          "low_repr": "-inf",
                          "high_repr": "inf",
                          "_np_random": "None",
                          "$type": "gym.spaces.box.Box"
                        },
                        "action_space": {
                          "dtype": "dtype('float32')",
                          "bounded_below": "array([ True])",
                          "bounded_above": "array([ True])",
                          "_shape": [
                            1
                          ],
                          "low": "array([-1.], dtype=float32)",
                          "high": "array([1.], dtype=float32)",
                          "low_repr": "-1.0",
                          "high_repr": "1.0",
                          "_np_random": "None",
                          "$type": "gym.spaces.box.Box"
                        },
                        "render_mode": "None",
                        "renderer": {
                          "no_returns_render": [
                            "human"
                          ],
                          "single_render": [
                            "single_rgb_array",
                            "single_depth_array",
                            "single_state_pixels"
                          ],
                          "mode": "None",
                          "render": {
                            "$type": "functools.partial"
                          },
                          "render_list": [],
                          "$type": "gym.utils.renderer.Renderer"
                        },
                        "_ezpickle_args": [],
                        "_ezpickle_kwargs": {},
                        "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                      },
                      "_action_space": "None",
                      "_observation_space": "None",
                      "_reward_range": "None",
                      "_metadata": "None",
                      "new_step_api": true,
                      "checked_reset": false,
                      "checked_step": false,
                      "checked_render": false,
                      "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                    },
                    "_action_space": "None",
                    "_observation_space": "None",
                    "_reward_range": "None",
                    "_metadata": "None",
                    "new_step_api": false,
                    "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "_has_reset": false,
                  "_disable_render_order_enforcing": false,
                  "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "_max_episode_steps": 1000,
                "_elapsed_steps": "None",
                "$type": "gym.wrappers.time_limit.TimeLimit"
              },
              "_max_episode_length": 1000,
              "_render_modes": [
                "human",
                "rgb_array",
                "depth_array",
                "single_rgb_array",
                "single_depth_array"
              ],
              "_step_cnt": "None",
              "_visualize": false,
              "_action_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_observation_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_spec": {
                "max_episode_length": 1000,
                "input_space": {
                  "dtype": "dtype('float32')",
                  "bounded_below": "array([ True])",
                  "bounded_above": "array([ True])",
                  "_shape": [
                    1
                  ],
                  "low": "array([-1.], dtype=float32)",
                  "high": "array([1.], dtype=float32)",
                  "low_repr": "-1.0",
                  "high_repr": "1.0",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "output_space": {
                  "dtype": "dtype('float32')",
                  "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                  "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                  "_shape": [
                    11
                  ],
                  "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                  "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                  "low_repr": "-inf",
                  "high_repr": "inf",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "$type": "garage._environment.EnvSpec"
              },
              "_env_info": "None",
              "$type": "garage.envs.gym_env.GymEnv"
            },
            "_scale_reward": 1.0,
            "_normalize_obs": false,
            "_normalize_reward": false,
            "_expected_action_scale": 1.0,
            "_flatten_obs": true,
            "_obs_alpha": 0.001,
            "_obs_mean": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
            "_obs_var": "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])",
            "_reward_alpha": 0.001,
            "_reward_mean": 0.0,
            "_reward_var": 1.0,
            "$type": "garage.envs.normalized_env.NormalizedEnv"
          },
          "_env_steps": [],
          "_observations": [],
          "_last_observations": [],
          "_agent_infos": {},
          "_lengths": [],
          "_prev_obs": "None",
          "_eps_length": 0,
          "_episode_infos": {},
          "$type": "garage.sampler.default_worker.DefaultWorker"
        },
        {
          "_seed": "None",
          "_max_episode_length": 500,
          "_worker_number": 5,
          "agent": {
            "training": true,
            "_parameters": {},
            "_buffers": {},
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_module": {
                "training": true,
                "_parameters": {
                  "_init_std": {
                    "$type": "torch.nn.parameter.Parameter"
                  }
                },
                "_buffers": {
                  "min_std_param": {
                    "$type": "torch.Tensor"
                  }
                },
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_mean_module": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "_layers": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "0": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 11.0,
                                "out_features": 32,
                                "$type": "torch.nn.modules.linear.Linear"
                              },
                              "non_linearity": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                                "$type": "garage.torch._functions.NonLinearity"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          },
                          "1": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 32,
                                "out_features": 32,
                                "$type": "torch.nn.modules.linear.Linear"
                              },
                              "non_linearity": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                                "$type": "garage.torch._functions.NonLinearity"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          }
                        },
                        "$type": "torch.nn.modules.container.ModuleList"
                      },
                      "_output_layers": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "0": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 32,
                                "out_features": 1.0,
                                "$type": "torch.nn.modules.linear.Linear"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          }
                        },
                        "$type": "torch.nn.modules.container.ModuleList"
                      }
                    },
                    "_output_dim": 1.0,
                    "$type": "garage.torch.modules.mlp_module.MLPModule"
                  }
                },
                "_input_dim": 11.0,
                "_hidden_sizes": [
                  32,
                  32
                ],
                "_action_dim": 1.0,
                "_learn_std": true,
                "_std_hidden_sizes": [
                  32,
                  32
                ],
                "_min_std": 1e-06,
                "_max_std": "None",
                "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
                "_std_hidden_w_init": {
                  "$type": "builtins.function"
                },
                "_std_hidden_b_init": {
                  "$type": "builtins.function"
                },
                "_std_output_nonlinearity": "None",
                "_std_output_w_init": {
                  "$type": "builtins.function"
                },
                "_std_parameterization": "exp",
                "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
                "_hidden_w_init": {
                  "$type": "builtins.function"
                },
                "_hidden_b_init": {
                  "$type": "builtins.function"
                },
                "_output_nonlinearity": "None",
                "_output_w_init": {
                  "$type": "builtins.function"
                },
                "_output_b_init": {
                  "$type": "builtins.function"
                },
                "_layer_normalization": false,
                "_norm_dist_class": {
                  "$typename": "torch.distributions.normal.Normal"
                },
                "_min_std_param": {
                  "$type": "torch.Tensor"
                },
                "_max_std_param": "None",
                "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
              }
            },
            "_env_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_name": "GaussianMLPPolicy",
            "_obs_dim": 11.0,
            "_action_dim": 1.0,
            "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
          },
          "env": {
            "_env": {
              "_env": {
                "env": {
                  "env": {
                    "env": {
                      "env": {
                        "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                        "model": "<mujoco._structs.MjModel object at 0x7f5aff818f30>",
                        "data": "<mujoco._structs.MjData object at 0x7f5aff818f70>",
                        "init_qpos": "array([0., 0., 0.])",
                        "init_qvel": "array([0., 0., 0.])",
                        "_viewers": {},
                        "frame_skip": 5,
                        "viewer": "None",
                        "observation_space": {
                          "dtype": "dtype('float64')",
                          "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                          "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                          "_shape": [
                            11
                          ],
                          "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                          "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                          "low_repr": "-inf",
                          "high_repr": "inf",
                          "_np_random": "None",
                          "$type": "gym.spaces.box.Box"
                        },
                        "action_space": {
                          "dtype": "dtype('float32')",
                          "bounded_below": "array([ True])",
                          "bounded_above": "array([ True])",
                          "_shape": [
                            1
                          ],
                          "low": "array([-1.], dtype=float32)",
                          "high": "array([1.], dtype=float32)",
                          "low_repr": "-1.0",
                          "high_repr": "1.0",
                          "_np_random": "None",
                          "$type": "gym.spaces.box.Box"
                        },
                        "render_mode": "None",
                        "renderer": {
                          "no_returns_render": [
                            "human"
                          ],
                          "single_render": [
                            "single_rgb_array",
                            "single_depth_array",
                            "single_state_pixels"
                          ],
                          "mode": "None",
                          "render": {
                            "$type": "functools.partial"
                          },
                          "render_list": [],
                          "$type": "gym.utils.renderer.Renderer"
                        },
                        "_ezpickle_args": [],
                        "_ezpickle_kwargs": {},
                        "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                      },
                      "_action_space": "None",
                      "_observation_space": "None",
                      "_reward_range": "None",
                      "_metadata": "None",
                      "new_step_api": true,
                      "checked_reset": false,
                      "checked_step": false,
                      "checked_render": false,
                      "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                    },
                    "_action_space": "None",
                    "_observation_space": "None",
                    "_reward_range": "None",
                    "_metadata": "None",
                    "new_step_api": false,
                    "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "_has_reset": false,
                  "_disable_render_order_enforcing": false,
                  "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "_max_episode_steps": 1000,
                "_elapsed_steps": "None",
                "$type": "gym.wrappers.time_limit.TimeLimit"
              },
              "_max_episode_length": 1000,
              "_render_modes": [
                "human",
                "rgb_array",
                "depth_array",
                "single_rgb_array",
                "single_depth_array"
              ],
              "_step_cnt": "None",
              "_visualize": false,
              "_action_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_observation_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_spec": {
                "max_episode_length": 1000,
                "input_space": {
                  "dtype": "dtype('float32')",
                  "bounded_below": "array([ True])",
                  "bounded_above": "array([ True])",
                  "_shape": [
                    1
                  ],
                  "low": "array([-1.], dtype=float32)",
                  "high": "array([1.], dtype=float32)",
                  "low_repr": "-1.0",
                  "high_repr": "1.0",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "output_space": {
                  "dtype": "dtype('float32')",
                  "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                  "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                  "_shape": [
                    11
                  ],
                  "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                  "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                  "low_repr": "-inf",
                  "high_repr": "inf",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "$type": "garage._environment.EnvSpec"
              },
              "_env_info": "None",
              "$type": "garage.envs.gym_env.GymEnv"
            },
            "_scale_reward": 1.0,
            "_normalize_obs": false,
            "_normalize_reward": false,
            "_expected_action_scale": 1.0,
            "_flatten_obs": true,
            "_obs_alpha": 0.001,
            "_obs_mean": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
            "_obs_var": "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])",
            "_reward_alpha": 0.001,
            "_reward_mean": 0.0,
            "_reward_var": 1.0,
            "$type": "garage.envs.normalized_env.NormalizedEnv"
          },
          "_env_steps": [],
          "_observations": [],
          "_last_observations": [],
          "_agent_infos": {},
          "_lengths": [],
          "_prev_obs": "None",
          "_eps_length": 0,
          "_episode_infos": {},
          "$type": "garage.sampler.default_worker.DefaultWorker"
        },
        {
          "_seed": "None",
          "_max_episode_length": 500,
          "_worker_number": 6,
          "agent": {
            "training": true,
            "_parameters": {},
            "_buffers": {},
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_module": {
                "training": true,
                "_parameters": {
                  "_init_std": {
                    "$type": "torch.nn.parameter.Parameter"
                  }
                },
                "_buffers": {
                  "min_std_param": {
                    "$type": "torch.Tensor"
                  }
                },
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_mean_module": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "_layers": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "0": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 11.0,
                                "out_features": 32,
                                "$type": "torch.nn.modules.linear.Linear"
                              },
                              "non_linearity": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                                "$type": "garage.torch._functions.NonLinearity"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          },
                          "1": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 32,
                                "out_features": 32,
                                "$type": "torch.nn.modules.linear.Linear"
                              },
                              "non_linearity": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                                "$type": "garage.torch._functions.NonLinearity"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          }
                        },
                        "$type": "torch.nn.modules.container.ModuleList"
                      },
                      "_output_layers": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "0": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 32,
                                "out_features": 1.0,
                                "$type": "torch.nn.modules.linear.Linear"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          }
                        },
                        "$type": "torch.nn.modules.container.ModuleList"
                      }
                    },
                    "_output_dim": 1.0,
                    "$type": "garage.torch.modules.mlp_module.MLPModule"
                  }
                },
                "_input_dim": 11.0,
                "_hidden_sizes": [
                  32,
                  32
                ],
                "_action_dim": 1.0,
                "_learn_std": true,
                "_std_hidden_sizes": [
                  32,
                  32
                ],
                "_min_std": 1e-06,
                "_max_std": "None",
                "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
                "_std_hidden_w_init": {
                  "$type": "builtins.function"
                },
                "_std_hidden_b_init": {
                  "$type": "builtins.function"
                },
                "_std_output_nonlinearity": "None",
                "_std_output_w_init": {
                  "$type": "builtins.function"
                },
                "_std_parameterization": "exp",
                "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
                "_hidden_w_init": {
                  "$type": "builtins.function"
                },
                "_hidden_b_init": {
                  "$type": "builtins.function"
                },
                "_output_nonlinearity": "None",
                "_output_w_init": {
                  "$type": "builtins.function"
                },
                "_output_b_init": {
                  "$type": "builtins.function"
                },
                "_layer_normalization": false,
                "_norm_dist_class": {
                  "$typename": "torch.distributions.normal.Normal"
                },
                "_min_std_param": {
                  "$type": "torch.Tensor"
                },
                "_max_std_param": "None",
                "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
              }
            },
            "_env_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_name": "GaussianMLPPolicy",
            "_obs_dim": 11.0,
            "_action_dim": 1.0,
            "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
          },
          "env": {
            "_env": {
              "_env": {
                "env": {
                  "env": {
                    "env": {
                      "env": {
                        "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                        "model": "<mujoco._structs.MjModel object at 0x7f5aff77da30>",
                        "data": "<mujoco._structs.MjData object at 0x7f5aff77da70>",
                        "init_qpos": "array([0., 0., 0.])",
                        "init_qvel": "array([0., 0., 0.])",
                        "_viewers": {},
                        "frame_skip": 5,
                        "viewer": "None",
                        "observation_space": {
                          "dtype": "dtype('float64')",
                          "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                          "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                          "_shape": [
                            11
                          ],
                          "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                          "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                          "low_repr": "-inf",
                          "high_repr": "inf",
                          "_np_random": "None",
                          "$type": "gym.spaces.box.Box"
                        },
                        "action_space": {
                          "dtype": "dtype('float32')",
                          "bounded_below": "array([ True])",
                          "bounded_above": "array([ True])",
                          "_shape": [
                            1
                          ],
                          "low": "array([-1.], dtype=float32)",
                          "high": "array([1.], dtype=float32)",
                          "low_repr": "-1.0",
                          "high_repr": "1.0",
                          "_np_random": "None",
                          "$type": "gym.spaces.box.Box"
                        },
                        "render_mode": "None",
                        "renderer": {
                          "no_returns_render": [
                            "human"
                          ],
                          "single_render": [
                            "single_rgb_array",
                            "single_depth_array",
                            "single_state_pixels"
                          ],
                          "mode": "None",
                          "render": {
                            "$type": "functools.partial"
                          },
                          "render_list": [],
                          "$type": "gym.utils.renderer.Renderer"
                        },
                        "_ezpickle_args": [],
                        "_ezpickle_kwargs": {},
                        "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                      },
                      "_action_space": "None",
                      "_observation_space": "None",
                      "_reward_range": "None",
                      "_metadata": "None",
                      "new_step_api": true,
                      "checked_reset": false,
                      "checked_step": false,
                      "checked_render": false,
                      "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                    },
                    "_action_space": "None",
                    "_observation_space": "None",
                    "_reward_range": "None",
                    "_metadata": "None",
                    "new_step_api": false,
                    "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "_has_reset": false,
                  "_disable_render_order_enforcing": false,
                  "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "_max_episode_steps": 1000,
                "_elapsed_steps": "None",
                "$type": "gym.wrappers.time_limit.TimeLimit"
              },
              "_max_episode_length": 1000,
              "_render_modes": [
                "human",
                "rgb_array",
                "depth_array",
                "single_rgb_array",
                "single_depth_array"
              ],
              "_step_cnt": "None",
              "_visualize": false,
              "_action_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_observation_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_spec": {
                "max_episode_length": 1000,
                "input_space": {
                  "dtype": "dtype('float32')",
                  "bounded_below": "array([ True])",
                  "bounded_above": "array([ True])",
                  "_shape": [
                    1
                  ],
                  "low": "array([-1.], dtype=float32)",
                  "high": "array([1.], dtype=float32)",
                  "low_repr": "-1.0",
                  "high_repr": "1.0",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "output_space": {
                  "dtype": "dtype('float32')",
                  "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                  "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                  "_shape": [
                    11
                  ],
                  "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                  "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                  "low_repr": "-inf",
                  "high_repr": "inf",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "$type": "garage._environment.EnvSpec"
              },
              "_env_info": "None",
              "$type": "garage.envs.gym_env.GymEnv"
            },
            "_scale_reward": 1.0,
            "_normalize_obs": false,
            "_normalize_reward": false,
            "_expected_action_scale": 1.0,
            "_flatten_obs": true,
            "_obs_alpha": 0.001,
            "_obs_mean": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
            "_obs_var": "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])",
            "_reward_alpha": 0.001,
            "_reward_mean": 0.0,
            "_reward_var": 1.0,
            "$type": "garage.envs.normalized_env.NormalizedEnv"
          },
          "_env_steps": [],
          "_observations": [],
          "_last_observations": [],
          "_agent_infos": {},
          "_lengths": [],
          "_prev_obs": "None",
          "_eps_length": 0,
          "_episode_infos": {},
          "$type": "garage.sampler.default_worker.DefaultWorker"
        },
        {
          "_seed": "None",
          "_max_episode_length": 500,
          "_worker_number": 7,
          "agent": {
            "training": true,
            "_parameters": {},
            "_buffers": {},
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_module": {
                "training": true,
                "_parameters": {
                  "_init_std": {
                    "$type": "torch.nn.parameter.Parameter"
                  }
                },
                "_buffers": {
                  "min_std_param": {
                    "$type": "torch.Tensor"
                  }
                },
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_mean_module": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "_layers": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "0": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 11.0,
                                "out_features": 32,
                                "$type": "torch.nn.modules.linear.Linear"
                              },
                              "non_linearity": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                                "$type": "garage.torch._functions.NonLinearity"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          },
                          "1": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 32,
                                "out_features": 32,
                                "$type": "torch.nn.modules.linear.Linear"
                              },
                              "non_linearity": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                                "$type": "garage.torch._functions.NonLinearity"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          }
                        },
                        "$type": "torch.nn.modules.container.ModuleList"
                      },
                      "_output_layers": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "0": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 32,
                                "out_features": 1.0,
                                "$type": "torch.nn.modules.linear.Linear"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          }
                        },
                        "$type": "torch.nn.modules.container.ModuleList"
                      }
                    },
                    "_output_dim": 1.0,
                    "$type": "garage.torch.modules.mlp_module.MLPModule"
                  }
                },
                "_input_dim": 11.0,
                "_hidden_sizes": [
                  32,
                  32
                ],
                "_action_dim": 1.0,
                "_learn_std": true,
                "_std_hidden_sizes": [
                  32,
                  32
                ],
                "_min_std": 1e-06,
                "_max_std": "None",
                "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
                "_std_hidden_w_init": {
                  "$type": "builtins.function"
                },
                "_std_hidden_b_init": {
                  "$type": "builtins.function"
                },
                "_std_output_nonlinearity": "None",
                "_std_output_w_init": {
                  "$type": "builtins.function"
                },
                "_std_parameterization": "exp",
                "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
                "_hidden_w_init": {
                  "$type": "builtins.function"
                },
                "_hidden_b_init": {
                  "$type": "builtins.function"
                },
                "_output_nonlinearity": "None",
                "_output_w_init": {
                  "$type": "builtins.function"
                },
                "_output_b_init": {
                  "$type": "builtins.function"
                },
                "_layer_normalization": false,
                "_norm_dist_class": {
                  "$typename": "torch.distributions.normal.Normal"
                },
                "_min_std_param": {
                  "$type": "torch.Tensor"
                },
                "_max_std_param": "None",
                "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
              }
            },
            "_env_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_name": "GaussianMLPPolicy",
            "_obs_dim": 11.0,
            "_action_dim": 1.0,
            "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
          },
          "env": {
            "_env": {
              "_env": {
                "env": {
                  "env": {
                    "env": {
                      "env": {
                        "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                        "model": "<mujoco._structs.MjModel object at 0x7f5aff7334f0>",
                        "data": "<mujoco._structs.MjData object at 0x7f5aff733530>",
                        "init_qpos": "array([0., 0., 0.])",
                        "init_qvel": "array([0., 0., 0.])",
                        "_viewers": {},
                        "frame_skip": 5,
                        "viewer": "None",
                        "observation_space": {
                          "dtype": "dtype('float64')",
                          "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                          "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                          "_shape": [
                            11
                          ],
                          "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                          "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                          "low_repr": "-inf",
                          "high_repr": "inf",
                          "_np_random": "None",
                          "$type": "gym.spaces.box.Box"
                        },
                        "action_space": {
                          "dtype": "dtype('float32')",
                          "bounded_below": "array([ True])",
                          "bounded_above": "array([ True])",
                          "_shape": [
                            1
                          ],
                          "low": "array([-1.], dtype=float32)",
                          "high": "array([1.], dtype=float32)",
                          "low_repr": "-1.0",
                          "high_repr": "1.0",
                          "_np_random": "None",
                          "$type": "gym.spaces.box.Box"
                        },
                        "render_mode": "None",
                        "renderer": {
                          "no_returns_render": [
                            "human"
                          ],
                          "single_render": [
                            "single_rgb_array",
                            "single_depth_array",
                            "single_state_pixels"
                          ],
                          "mode": "None",
                          "render": {
                            "$type": "functools.partial"
                          },
                          "render_list": [],
                          "$type": "gym.utils.renderer.Renderer"
                        },
                        "_ezpickle_args": [],
                        "_ezpickle_kwargs": {},
                        "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                      },
                      "_action_space": "None",
                      "_observation_space": "None",
                      "_reward_range": "None",
                      "_metadata": "None",
                      "new_step_api": true,
                      "checked_reset": false,
                      "checked_step": false,
                      "checked_render": false,
                      "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                    },
                    "_action_space": "None",
                    "_observation_space": "None",
                    "_reward_range": "None",
                    "_metadata": "None",
                    "new_step_api": false,
                    "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "_has_reset": false,
                  "_disable_render_order_enforcing": false,
                  "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "_max_episode_steps": 1000,
                "_elapsed_steps": "None",
                "$type": "gym.wrappers.time_limit.TimeLimit"
              },
              "_max_episode_length": 1000,
              "_render_modes": [
                "human",
                "rgb_array",
                "depth_array",
                "single_rgb_array",
                "single_depth_array"
              ],
              "_step_cnt": "None",
              "_visualize": false,
              "_action_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_observation_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_spec": {
                "max_episode_length": 1000,
                "input_space": {
                  "dtype": "dtype('float32')",
                  "bounded_below": "array([ True])",
                  "bounded_above": "array([ True])",
                  "_shape": [
                    1
                  ],
                  "low": "array([-1.], dtype=float32)",
                  "high": "array([1.], dtype=float32)",
                  "low_repr": "-1.0",
                  "high_repr": "1.0",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "output_space": {
                  "dtype": "dtype('float32')",
                  "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                  "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                  "_shape": [
                    11
                  ],
                  "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                  "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                  "low_repr": "-inf",
                  "high_repr": "inf",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "$type": "garage._environment.EnvSpec"
              },
              "_env_info": "None",
              "$type": "garage.envs.gym_env.GymEnv"
            },
            "_scale_reward": 1.0,
            "_normalize_obs": false,
            "_normalize_reward": false,
            "_expected_action_scale": 1.0,
            "_flatten_obs": true,
            "_obs_alpha": 0.001,
            "_obs_mean": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
            "_obs_var": "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])",
            "_reward_alpha": 0.001,
            "_reward_mean": 0.0,
            "_reward_var": 1.0,
            "$type": "garage.envs.normalized_env.NormalizedEnv"
          },
          "_env_steps": [],
          "_observations": [],
          "_last_observations": [],
          "_agent_infos": {},
          "_lengths": [],
          "_prev_obs": "None",
          "_eps_length": 0,
          "_episode_infos": {},
          "$type": "garage.sampler.default_worker.DefaultWorker"
        },
        {
          "_seed": "None",
          "_max_episode_length": 500,
          "_worker_number": 8,
          "agent": {
            "training": true,
            "_parameters": {},
            "_buffers": {},
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_module": {
                "training": true,
                "_parameters": {
                  "_init_std": {
                    "$type": "torch.nn.parameter.Parameter"
                  }
                },
                "_buffers": {
                  "min_std_param": {
                    "$type": "torch.Tensor"
                  }
                },
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_mean_module": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "_layers": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "0": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 11.0,
                                "out_features": 32,
                                "$type": "torch.nn.modules.linear.Linear"
                              },
                              "non_linearity": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                                "$type": "garage.torch._functions.NonLinearity"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          },
                          "1": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 32,
                                "out_features": 32,
                                "$type": "torch.nn.modules.linear.Linear"
                              },
                              "non_linearity": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                                "$type": "garage.torch._functions.NonLinearity"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          }
                        },
                        "$type": "torch.nn.modules.container.ModuleList"
                      },
                      "_output_layers": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "0": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 32,
                                "out_features": 1.0,
                                "$type": "torch.nn.modules.linear.Linear"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          }
                        },
                        "$type": "torch.nn.modules.container.ModuleList"
                      }
                    },
                    "_output_dim": 1.0,
                    "$type": "garage.torch.modules.mlp_module.MLPModule"
                  }
                },
                "_input_dim": 11.0,
                "_hidden_sizes": [
                  32,
                  32
                ],
                "_action_dim": 1.0,
                "_learn_std": true,
                "_std_hidden_sizes": [
                  32,
                  32
                ],
                "_min_std": 1e-06,
                "_max_std": "None",
                "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
                "_std_hidden_w_init": {
                  "$type": "builtins.function"
                },
                "_std_hidden_b_init": {
                  "$type": "builtins.function"
                },
                "_std_output_nonlinearity": "None",
                "_std_output_w_init": {
                  "$type": "builtins.function"
                },
                "_std_parameterization": "exp",
                "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
                "_hidden_w_init": {
                  "$type": "builtins.function"
                },
                "_hidden_b_init": {
                  "$type": "builtins.function"
                },
                "_output_nonlinearity": "None",
                "_output_w_init": {
                  "$type": "builtins.function"
                },
                "_output_b_init": {
                  "$type": "builtins.function"
                },
                "_layer_normalization": false,
                "_norm_dist_class": {
                  "$typename": "torch.distributions.normal.Normal"
                },
                "_min_std_param": {
                  "$type": "torch.Tensor"
                },
                "_max_std_param": "None",
                "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
              }
            },
            "_env_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_name": "GaussianMLPPolicy",
            "_obs_dim": 11.0,
            "_action_dim": 1.0,
            "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
          },
          "env": {
            "_env": {
              "_env": {
                "env": {
                  "env": {
                    "env": {
                      "env": {
                        "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                        "model": "<mujoco._structs.MjModel object at 0x7f5aff733fb0>",
                        "data": "<mujoco._structs.MjData object at 0x7f5aff6ff030>",
                        "init_qpos": "array([0., 0., 0.])",
                        "init_qvel": "array([0., 0., 0.])",
                        "_viewers": {},
                        "frame_skip": 5,
                        "viewer": "None",
                        "observation_space": {
                          "dtype": "dtype('float64')",
                          "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                          "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                          "_shape": [
                            11
                          ],
                          "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                          "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                          "low_repr": "-inf",
                          "high_repr": "inf",
                          "_np_random": "None",
                          "$type": "gym.spaces.box.Box"
                        },
                        "action_space": {
                          "dtype": "dtype('float32')",
                          "bounded_below": "array([ True])",
                          "bounded_above": "array([ True])",
                          "_shape": [
                            1
                          ],
                          "low": "array([-1.], dtype=float32)",
                          "high": "array([1.], dtype=float32)",
                          "low_repr": "-1.0",
                          "high_repr": "1.0",
                          "_np_random": "None",
                          "$type": "gym.spaces.box.Box"
                        },
                        "render_mode": "None",
                        "renderer": {
                          "no_returns_render": [
                            "human"
                          ],
                          "single_render": [
                            "single_rgb_array",
                            "single_depth_array",
                            "single_state_pixels"
                          ],
                          "mode": "None",
                          "render": {
                            "$type": "functools.partial"
                          },
                          "render_list": [],
                          "$type": "gym.utils.renderer.Renderer"
                        },
                        "_ezpickle_args": [],
                        "_ezpickle_kwargs": {},
                        "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                      },
                      "_action_space": "None",
                      "_observation_space": "None",
                      "_reward_range": "None",
                      "_metadata": "None",
                      "new_step_api": true,
                      "checked_reset": false,
                      "checked_step": false,
                      "checked_render": false,
                      "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                    },
                    "_action_space": "None",
                    "_observation_space": "None",
                    "_reward_range": "None",
                    "_metadata": "None",
                    "new_step_api": false,
                    "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "_has_reset": false,
                  "_disable_render_order_enforcing": false,
                  "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "_max_episode_steps": 1000,
                "_elapsed_steps": "None",
                "$type": "gym.wrappers.time_limit.TimeLimit"
              },
              "_max_episode_length": 1000,
              "_render_modes": [
                "human",
                "rgb_array",
                "depth_array",
                "single_rgb_array",
                "single_depth_array"
              ],
              "_step_cnt": "None",
              "_visualize": false,
              "_action_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_observation_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_spec": {
                "max_episode_length": 1000,
                "input_space": {
                  "dtype": "dtype('float32')",
                  "bounded_below": "array([ True])",
                  "bounded_above": "array([ True])",
                  "_shape": [
                    1
                  ],
                  "low": "array([-1.], dtype=float32)",
                  "high": "array([1.], dtype=float32)",
                  "low_repr": "-1.0",
                  "high_repr": "1.0",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "output_space": {
                  "dtype": "dtype('float32')",
                  "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                  "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                  "_shape": [
                    11
                  ],
                  "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                  "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                  "low_repr": "-inf",
                  "high_repr": "inf",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "$type": "garage._environment.EnvSpec"
              },
              "_env_info": "None",
              "$type": "garage.envs.gym_env.GymEnv"
            },
            "_scale_reward": 1.0,
            "_normalize_obs": false,
            "_normalize_reward": false,
            "_expected_action_scale": 1.0,
            "_flatten_obs": true,
            "_obs_alpha": 0.001,
            "_obs_mean": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
            "_obs_var": "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])",
            "_reward_alpha": 0.001,
            "_reward_mean": 0.0,
            "_reward_var": 1.0,
            "$type": "garage.envs.normalized_env.NormalizedEnv"
          },
          "_env_steps": [],
          "_observations": [],
          "_last_observations": [],
          "_agent_infos": {},
          "_lengths": [],
          "_prev_obs": "None",
          "_eps_length": 0,
          "_episode_infos": {},
          "$type": "garage.sampler.default_worker.DefaultWorker"
        },
        {
          "_seed": "None",
          "_max_episode_length": 500,
          "_worker_number": 9,
          "agent": {
            "training": true,
            "_parameters": {},
            "_buffers": {},
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_module": {
                "training": true,
                "_parameters": {
                  "_init_std": {
                    "$type": "torch.nn.parameter.Parameter"
                  }
                },
                "_buffers": {
                  "min_std_param": {
                    "$type": "torch.Tensor"
                  }
                },
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_mean_module": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "_layers": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "0": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 11.0,
                                "out_features": 32,
                                "$type": "torch.nn.modules.linear.Linear"
                              },
                              "non_linearity": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                                "$type": "garage.torch._functions.NonLinearity"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          },
                          "1": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 32,
                                "out_features": 32,
                                "$type": "torch.nn.modules.linear.Linear"
                              },
                              "non_linearity": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                                "$type": "garage.torch._functions.NonLinearity"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          }
                        },
                        "$type": "torch.nn.modules.container.ModuleList"
                      },
                      "_output_layers": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "0": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 32,
                                "out_features": 1.0,
                                "$type": "torch.nn.modules.linear.Linear"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          }
                        },
                        "$type": "torch.nn.modules.container.ModuleList"
                      }
                    },
                    "_output_dim": 1.0,
                    "$type": "garage.torch.modules.mlp_module.MLPModule"
                  }
                },
                "_input_dim": 11.0,
                "_hidden_sizes": [
                  32,
                  32
                ],
                "_action_dim": 1.0,
                "_learn_std": true,
                "_std_hidden_sizes": [
                  32,
                  32
                ],
                "_min_std": 1e-06,
                "_max_std": "None",
                "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
                "_std_hidden_w_init": {
                  "$type": "builtins.function"
                },
                "_std_hidden_b_init": {
                  "$type": "builtins.function"
                },
                "_std_output_nonlinearity": "None",
                "_std_output_w_init": {
                  "$type": "builtins.function"
                },
                "_std_parameterization": "exp",
                "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
                "_hidden_w_init": {
                  "$type": "builtins.function"
                },
                "_hidden_b_init": {
                  "$type": "builtins.function"
                },
                "_output_nonlinearity": "None",
                "_output_w_init": {
                  "$type": "builtins.function"
                },
                "_output_b_init": {
                  "$type": "builtins.function"
                },
                "_layer_normalization": false,
                "_norm_dist_class": {
                  "$typename": "torch.distributions.normal.Normal"
                },
                "_min_std_param": {
                  "$type": "torch.Tensor"
                },
                "_max_std_param": "None",
                "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
              }
            },
            "_env_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_name": "GaussianMLPPolicy",
            "_obs_dim": 11.0,
            "_action_dim": 1.0,
            "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
          },
          "env": {
            "_env": {
              "_env": {
                "env": {
                  "env": {
                    "env": {
                      "env": {
                        "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                        "model": "<mujoco._structs.MjModel object at 0x7f5aff6ffab0>",
                        "data": "<mujoco._structs.MjData object at 0x7f5aff6ffaf0>",
                        "init_qpos": "array([0., 0., 0.])",
                        "init_qvel": "array([0., 0., 0.])",
                        "_viewers": {},
                        "frame_skip": 5,
                        "viewer": "None",
                        "observation_space": {
                          "dtype": "dtype('float64')",
                          "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                          "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                          "_shape": [
                            11
                          ],
                          "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                          "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                          "low_repr": "-inf",
                          "high_repr": "inf",
                          "_np_random": "None",
                          "$type": "gym.spaces.box.Box"
                        },
                        "action_space": {
                          "dtype": "dtype('float32')",
                          "bounded_below": "array([ True])",
                          "bounded_above": "array([ True])",
                          "_shape": [
                            1
                          ],
                          "low": "array([-1.], dtype=float32)",
                          "high": "array([1.], dtype=float32)",
                          "low_repr": "-1.0",
                          "high_repr": "1.0",
                          "_np_random": "None",
                          "$type": "gym.spaces.box.Box"
                        },
                        "render_mode": "None",
                        "renderer": {
                          "no_returns_render": [
                            "human"
                          ],
                          "single_render": [
                            "single_rgb_array",
                            "single_depth_array",
                            "single_state_pixels"
                          ],
                          "mode": "None",
                          "render": {
                            "$type": "functools.partial"
                          },
                          "render_list": [],
                          "$type": "gym.utils.renderer.Renderer"
                        },
                        "_ezpickle_args": [],
                        "_ezpickle_kwargs": {},
                        "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                      },
                      "_action_space": "None",
                      "_observation_space": "None",
                      "_reward_range": "None",
                      "_metadata": "None",
                      "new_step_api": true,
                      "checked_reset": false,
                      "checked_step": false,
                      "checked_render": false,
                      "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                    },
                    "_action_space": "None",
                    "_observation_space": "None",
                    "_reward_range": "None",
                    "_metadata": "None",
                    "new_step_api": false,
                    "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "_has_reset": false,
                  "_disable_render_order_enforcing": false,
                  "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "_max_episode_steps": 1000,
                "_elapsed_steps": "None",
                "$type": "gym.wrappers.time_limit.TimeLimit"
              },
              "_max_episode_length": 1000,
              "_render_modes": [
                "human",
                "rgb_array",
                "depth_array",
                "single_rgb_array",
                "single_depth_array"
              ],
              "_step_cnt": "None",
              "_visualize": false,
              "_action_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_observation_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_spec": {
                "max_episode_length": 1000,
                "input_space": {
                  "dtype": "dtype('float32')",
                  "bounded_below": "array([ True])",
                  "bounded_above": "array([ True])",
                  "_shape": [
                    1
                  ],
                  "low": "array([-1.], dtype=float32)",
                  "high": "array([1.], dtype=float32)",
                  "low_repr": "-1.0",
                  "high_repr": "1.0",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "output_space": {
                  "dtype": "dtype('float32')",
                  "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                  "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                  "_shape": [
                    11
                  ],
                  "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                  "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                  "low_repr": "-inf",
                  "high_repr": "inf",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "$type": "garage._environment.EnvSpec"
              },
              "_env_info": "None",
              "$type": "garage.envs.gym_env.GymEnv"
            },
            "_scale_reward": 1.0,
            "_normalize_obs": false,
            "_normalize_reward": false,
            "_expected_action_scale": 1.0,
            "_flatten_obs": true,
            "_obs_alpha": 0.001,
            "_obs_mean": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
            "_obs_var": "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])",
            "_reward_alpha": 0.001,
            "_reward_mean": 0.0,
            "_reward_var": 1.0,
            "$type": "garage.envs.normalized_env.NormalizedEnv"
          },
          "_env_steps": [],
          "_observations": [],
          "_last_observations": [],
          "_agent_infos": {},
          "_lengths": [],
          "_prev_obs": "None",
          "_eps_length": 0,
          "_episode_infos": {},
          "$type": "garage.sampler.default_worker.DefaultWorker"
        },
        {
          "_seed": "None",
          "_max_episode_length": 500,
          "_worker_number": 10,
          "agent": {
            "training": true,
            "_parameters": {},
            "_buffers": {},
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_module": {
                "training": true,
                "_parameters": {
                  "_init_std": {
                    "$type": "torch.nn.parameter.Parameter"
                  }
                },
                "_buffers": {
                  "min_std_param": {
                    "$type": "torch.Tensor"
                  }
                },
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_mean_module": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "_layers": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "0": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 11.0,
                                "out_features": 32,
                                "$type": "torch.nn.modules.linear.Linear"
                              },
                              "non_linearity": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                                "$type": "garage.torch._functions.NonLinearity"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          },
                          "1": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 32,
                                "out_features": 32,
                                "$type": "torch.nn.modules.linear.Linear"
                              },
                              "non_linearity": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                                "$type": "garage.torch._functions.NonLinearity"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          }
                        },
                        "$type": "torch.nn.modules.container.ModuleList"
                      },
                      "_output_layers": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "0": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 32,
                                "out_features": 1.0,
                                "$type": "torch.nn.modules.linear.Linear"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          }
                        },
                        "$type": "torch.nn.modules.container.ModuleList"
                      }
                    },
                    "_output_dim": 1.0,
                    "$type": "garage.torch.modules.mlp_module.MLPModule"
                  }
                },
                "_input_dim": 11.0,
                "_hidden_sizes": [
                  32,
                  32
                ],
                "_action_dim": 1.0,
                "_learn_std": true,
                "_std_hidden_sizes": [
                  32,
                  32
                ],
                "_min_std": 1e-06,
                "_max_std": "None",
                "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
                "_std_hidden_w_init": {
                  "$type": "builtins.function"
                },
                "_std_hidden_b_init": {
                  "$type": "builtins.function"
                },
                "_std_output_nonlinearity": "None",
                "_std_output_w_init": {
                  "$type": "builtins.function"
                },
                "_std_parameterization": "exp",
                "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
                "_hidden_w_init": {
                  "$type": "builtins.function"
                },
                "_hidden_b_init": {
                  "$type": "builtins.function"
                },
                "_output_nonlinearity": "None",
                "_output_w_init": {
                  "$type": "builtins.function"
                },
                "_output_b_init": {
                  "$type": "builtins.function"
                },
                "_layer_normalization": false,
                "_norm_dist_class": {
                  "$typename": "torch.distributions.normal.Normal"
                },
                "_min_std_param": {
                  "$type": "torch.Tensor"
                },
                "_max_std_param": "None",
                "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
              }
            },
            "_env_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_name": "GaussianMLPPolicy",
            "_obs_dim": 11.0,
            "_action_dim": 1.0,
            "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
          },
          "env": {
            "_env": {
              "_env": {
                "env": {
                  "env": {
                    "env": {
                      "env": {
                        "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                        "model": "<mujoco._structs.MjModel object at 0x7f5aff6ff7b0>",
                        "data": "<mujoco._structs.MjData object at 0x7f5aff6ff270>",
                        "init_qpos": "array([0., 0., 0.])",
                        "init_qvel": "array([0., 0., 0.])",
                        "_viewers": {},
                        "frame_skip": 5,
                        "viewer": "None",
                        "observation_space": {
                          "dtype": "dtype('float64')",
                          "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                          "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                          "_shape": [
                            11
                          ],
                          "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                          "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                          "low_repr": "-inf",
                          "high_repr": "inf",
                          "_np_random": "None",
                          "$type": "gym.spaces.box.Box"
                        },
                        "action_space": {
                          "dtype": "dtype('float32')",
                          "bounded_below": "array([ True])",
                          "bounded_above": "array([ True])",
                          "_shape": [
                            1
                          ],
                          "low": "array([-1.], dtype=float32)",
                          "high": "array([1.], dtype=float32)",
                          "low_repr": "-1.0",
                          "high_repr": "1.0",
                          "_np_random": "None",
                          "$type": "gym.spaces.box.Box"
                        },
                        "render_mode": "None",
                        "renderer": {
                          "no_returns_render": [
                            "human"
                          ],
                          "single_render": [
                            "single_rgb_array",
                            "single_depth_array",
                            "single_state_pixels"
                          ],
                          "mode": "None",
                          "render": {
                            "$type": "functools.partial"
                          },
                          "render_list": [],
                          "$type": "gym.utils.renderer.Renderer"
                        },
                        "_ezpickle_args": [],
                        "_ezpickle_kwargs": {},
                        "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                      },
                      "_action_space": "None",
                      "_observation_space": "None",
                      "_reward_range": "None",
                      "_metadata": "None",
                      "new_step_api": true,
                      "checked_reset": false,
                      "checked_step": false,
                      "checked_render": false,
                      "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                    },
                    "_action_space": "None",
                    "_observation_space": "None",
                    "_reward_range": "None",
                    "_metadata": "None",
                    "new_step_api": false,
                    "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "_has_reset": false,
                  "_disable_render_order_enforcing": false,
                  "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "_max_episode_steps": 1000,
                "_elapsed_steps": "None",
                "$type": "gym.wrappers.time_limit.TimeLimit"
              },
              "_max_episode_length": 1000,
              "_render_modes": [
                "human",
                "rgb_array",
                "depth_array",
                "single_rgb_array",
                "single_depth_array"
              ],
              "_step_cnt": "None",
              "_visualize": false,
              "_action_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_observation_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_spec": {
                "max_episode_length": 1000,
                "input_space": {
                  "dtype": "dtype('float32')",
                  "bounded_below": "array([ True])",
                  "bounded_above": "array([ True])",
                  "_shape": [
                    1
                  ],
                  "low": "array([-1.], dtype=float32)",
                  "high": "array([1.], dtype=float32)",
                  "low_repr": "-1.0",
                  "high_repr": "1.0",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "output_space": {
                  "dtype": "dtype('float32')",
                  "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                  "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                  "_shape": [
                    11
                  ],
                  "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                  "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                  "low_repr": "-inf",
                  "high_repr": "inf",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "$type": "garage._environment.EnvSpec"
              },
              "_env_info": "None",
              "$type": "garage.envs.gym_env.GymEnv"
            },
            "_scale_reward": 1.0,
            "_normalize_obs": false,
            "_normalize_reward": false,
            "_expected_action_scale": 1.0,
            "_flatten_obs": true,
            "_obs_alpha": 0.001,
            "_obs_mean": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
            "_obs_var": "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])",
            "_reward_alpha": 0.001,
            "_reward_mean": 0.0,
            "_reward_var": 1.0,
            "$type": "garage.envs.normalized_env.NormalizedEnv"
          },
          "_env_steps": [],
          "_observations": [],
          "_last_observations": [],
          "_agent_infos": {},
          "_lengths": [],
          "_prev_obs": "None",
          "_eps_length": 0,
          "_episode_infos": {},
          "$type": "garage.sampler.default_worker.DefaultWorker"
        },
        {
          "_seed": "None",
          "_max_episode_length": 500,
          "_worker_number": 11,
          "agent": {
            "training": true,
            "_parameters": {},
            "_buffers": {},
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_module": {
                "training": true,
                "_parameters": {
                  "_init_std": {
                    "$type": "torch.nn.parameter.Parameter"
                  }
                },
                "_buffers": {
                  "min_std_param": {
                    "$type": "torch.Tensor"
                  }
                },
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_mean_module": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "_layers": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "0": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 11.0,
                                "out_features": 32,
                                "$type": "torch.nn.modules.linear.Linear"
                              },
                              "non_linearity": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                                "$type": "garage.torch._functions.NonLinearity"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          },
                          "1": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 32,
                                "out_features": 32,
                                "$type": "torch.nn.modules.linear.Linear"
                              },
                              "non_linearity": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                                "$type": "garage.torch._functions.NonLinearity"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          }
                        },
                        "$type": "torch.nn.modules.container.ModuleList"
                      },
                      "_output_layers": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "0": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 32,
                                "out_features": 1.0,
                                "$type": "torch.nn.modules.linear.Linear"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          }
                        },
                        "$type": "torch.nn.modules.container.ModuleList"
                      }
                    },
                    "_output_dim": 1.0,
                    "$type": "garage.torch.modules.mlp_module.MLPModule"
                  }
                },
                "_input_dim": 11.0,
                "_hidden_sizes": [
                  32,
                  32
                ],
                "_action_dim": 1.0,
                "_learn_std": true,
                "_std_hidden_sizes": [
                  32,
                  32
                ],
                "_min_std": 1e-06,
                "_max_std": "None",
                "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
                "_std_hidden_w_init": {
                  "$type": "builtins.function"
                },
                "_std_hidden_b_init": {
                  "$type": "builtins.function"
                },
                "_std_output_nonlinearity": "None",
                "_std_output_w_init": {
                  "$type": "builtins.function"
                },
                "_std_parameterization": "exp",
                "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
                "_hidden_w_init": {
                  "$type": "builtins.function"
                },
                "_hidden_b_init": {
                  "$type": "builtins.function"
                },
                "_output_nonlinearity": "None",
                "_output_w_init": {
                  "$type": "builtins.function"
                },
                "_output_b_init": {
                  "$type": "builtins.function"
                },
                "_layer_normalization": false,
                "_norm_dist_class": {
                  "$typename": "torch.distributions.normal.Normal"
                },
                "_min_std_param": {
                  "$type": "torch.Tensor"
                },
                "_max_std_param": "None",
                "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
              }
            },
            "_env_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_name": "GaussianMLPPolicy",
            "_obs_dim": 11.0,
            "_action_dim": 1.0,
            "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
          },
          "env": {
            "_env": {
              "_env": {
                "env": {
                  "env": {
                    "env": {
                      "env": {
                        "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                        "model": "<mujoco._structs.MjModel object at 0x7f5aff818230>",
                        "data": "<mujoco._structs.MjData object at 0x7f5aff818c30>",
                        "init_qpos": "array([0., 0., 0.])",
                        "init_qvel": "array([0., 0., 0.])",
                        "_viewers": {},
                        "frame_skip": 5,
                        "viewer": "None",
                        "observation_space": {
                          "dtype": "dtype('float64')",
                          "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                          "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                          "_shape": [
                            11
                          ],
                          "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                          "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                          "low_repr": "-inf",
                          "high_repr": "inf",
                          "_np_random": "None",
                          "$type": "gym.spaces.box.Box"
                        },
                        "action_space": {
                          "dtype": "dtype('float32')",
                          "bounded_below": "array([ True])",
                          "bounded_above": "array([ True])",
                          "_shape": [
                            1
                          ],
                          "low": "array([-1.], dtype=float32)",
                          "high": "array([1.], dtype=float32)",
                          "low_repr": "-1.0",
                          "high_repr": "1.0",
                          "_np_random": "None",
                          "$type": "gym.spaces.box.Box"
                        },
                        "render_mode": "None",
                        "renderer": {
                          "no_returns_render": [
                            "human"
                          ],
                          "single_render": [
                            "single_rgb_array",
                            "single_depth_array",
                            "single_state_pixels"
                          ],
                          "mode": "None",
                          "render": {
                            "$type": "functools.partial"
                          },
                          "render_list": [],
                          "$type": "gym.utils.renderer.Renderer"
                        },
                        "_ezpickle_args": [],
                        "_ezpickle_kwargs": {},
                        "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                      },
                      "_action_space": "None",
                      "_observation_space": "None",
                      "_reward_range": "None",
                      "_metadata": "None",
                      "new_step_api": true,
                      "checked_reset": false,
                      "checked_step": false,
                      "checked_render": false,
                      "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                    },
                    "_action_space": "None",
                    "_observation_space": "None",
                    "_reward_range": "None",
                    "_metadata": "None",
                    "new_step_api": false,
                    "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "_has_reset": false,
                  "_disable_render_order_enforcing": false,
                  "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "_max_episode_steps": 1000,
                "_elapsed_steps": "None",
                "$type": "gym.wrappers.time_limit.TimeLimit"
              },
              "_max_episode_length": 1000,
              "_render_modes": [
                "human",
                "rgb_array",
                "depth_array",
                "single_rgb_array",
                "single_depth_array"
              ],
              "_step_cnt": "None",
              "_visualize": false,
              "_action_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_observation_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_spec": {
                "max_episode_length": 1000,
                "input_space": {
                  "dtype": "dtype('float32')",
                  "bounded_below": "array([ True])",
                  "bounded_above": "array([ True])",
                  "_shape": [
                    1
                  ],
                  "low": "array([-1.], dtype=float32)",
                  "high": "array([1.], dtype=float32)",
                  "low_repr": "-1.0",
                  "high_repr": "1.0",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "output_space": {
                  "dtype": "dtype('float32')",
                  "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                  "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                  "_shape": [
                    11
                  ],
                  "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                  "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                  "low_repr": "-inf",
                  "high_repr": "inf",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "$type": "garage._environment.EnvSpec"
              },
              "_env_info": "None",
              "$type": "garage.envs.gym_env.GymEnv"
            },
            "_scale_reward": 1.0,
            "_normalize_obs": false,
            "_normalize_reward": false,
            "_expected_action_scale": 1.0,
            "_flatten_obs": true,
            "_obs_alpha": 0.001,
            "_obs_mean": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
            "_obs_var": "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])",
            "_reward_alpha": 0.001,
            "_reward_mean": 0.0,
            "_reward_var": 1.0,
            "$type": "garage.envs.normalized_env.NormalizedEnv"
          },
          "_env_steps": [],
          "_observations": [],
          "_last_observations": [],
          "_agent_infos": {},
          "_lengths": [],
          "_prev_obs": "None",
          "_eps_length": 0,
          "_episode_infos": {},
          "$type": "garage.sampler.default_worker.DefaultWorker"
        },
        {
          "_seed": "None",
          "_max_episode_length": 500,
          "_worker_number": 12,
          "agent": {
            "training": true,
            "_parameters": {},
            "_buffers": {},
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_module": {
                "training": true,
                "_parameters": {
                  "_init_std": {
                    "$type": "torch.nn.parameter.Parameter"
                  }
                },
                "_buffers": {
                  "min_std_param": {
                    "$type": "torch.Tensor"
                  }
                },
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_mean_module": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "_layers": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "0": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 11.0,
                                "out_features": 32,
                                "$type": "torch.nn.modules.linear.Linear"
                              },
                              "non_linearity": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                                "$type": "garage.torch._functions.NonLinearity"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          },
                          "1": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 32,
                                "out_features": 32,
                                "$type": "torch.nn.modules.linear.Linear"
                              },
                              "non_linearity": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                                "$type": "garage.torch._functions.NonLinearity"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          }
                        },
                        "$type": "torch.nn.modules.container.ModuleList"
                      },
                      "_output_layers": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "0": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 32,
                                "out_features": 1.0,
                                "$type": "torch.nn.modules.linear.Linear"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          }
                        },
                        "$type": "torch.nn.modules.container.ModuleList"
                      }
                    },
                    "_output_dim": 1.0,
                    "$type": "garage.torch.modules.mlp_module.MLPModule"
                  }
                },
                "_input_dim": 11.0,
                "_hidden_sizes": [
                  32,
                  32
                ],
                "_action_dim": 1.0,
                "_learn_std": true,
                "_std_hidden_sizes": [
                  32,
                  32
                ],
                "_min_std": 1e-06,
                "_max_std": "None",
                "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
                "_std_hidden_w_init": {
                  "$type": "builtins.function"
                },
                "_std_hidden_b_init": {
                  "$type": "builtins.function"
                },
                "_std_output_nonlinearity": "None",
                "_std_output_w_init": {
                  "$type": "builtins.function"
                },
                "_std_parameterization": "exp",
                "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
                "_hidden_w_init": {
                  "$type": "builtins.function"
                },
                "_hidden_b_init": {
                  "$type": "builtins.function"
                },
                "_output_nonlinearity": "None",
                "_output_w_init": {
                  "$type": "builtins.function"
                },
                "_output_b_init": {
                  "$type": "builtins.function"
                },
                "_layer_normalization": false,
                "_norm_dist_class": {
                  "$typename": "torch.distributions.normal.Normal"
                },
                "_min_std_param": {
                  "$type": "torch.Tensor"
                },
                "_max_std_param": "None",
                "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
              }
            },
            "_env_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_name": "GaussianMLPPolicy",
            "_obs_dim": 11.0,
            "_action_dim": 1.0,
            "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
          },
          "env": {
            "_env": {
              "_env": {
                "env": {
                  "env": {
                    "env": {
                      "env": {
                        "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                        "model": "<mujoco._structs.MjModel object at 0x7f5affd6b3b0>",
                        "data": "<mujoco._structs.MjData object at 0x7f5b041c9b30>",
                        "init_qpos": "array([0., 0., 0.])",
                        "init_qvel": "array([0., 0., 0.])",
                        "_viewers": {},
                        "frame_skip": 5,
                        "viewer": "None",
                        "observation_space": {
                          "dtype": "dtype('float64')",
                          "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                          "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                          "_shape": [
                            11
                          ],
                          "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                          "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                          "low_repr": "-inf",
                          "high_repr": "inf",
                          "_np_random": "None",
                          "$type": "gym.spaces.box.Box"
                        },
                        "action_space": {
                          "dtype": "dtype('float32')",
                          "bounded_below": "array([ True])",
                          "bounded_above": "array([ True])",
                          "_shape": [
                            1
                          ],
                          "low": "array([-1.], dtype=float32)",
                          "high": "array([1.], dtype=float32)",
                          "low_repr": "-1.0",
                          "high_repr": "1.0",
                          "_np_random": "None",
                          "$type": "gym.spaces.box.Box"
                        },
                        "render_mode": "None",
                        "renderer": {
                          "no_returns_render": [
                            "human"
                          ],
                          "single_render": [
                            "single_rgb_array",
                            "single_depth_array",
                            "single_state_pixels"
                          ],
                          "mode": "None",
                          "render": {
                            "$type": "functools.partial"
                          },
                          "render_list": [],
                          "$type": "gym.utils.renderer.Renderer"
                        },
                        "_ezpickle_args": [],
                        "_ezpickle_kwargs": {},
                        "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                      },
                      "_action_space": "None",
                      "_observation_space": "None",
                      "_reward_range": "None",
                      "_metadata": "None",
                      "new_step_api": true,
                      "checked_reset": false,
                      "checked_step": false,
                      "checked_render": false,
                      "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                    },
                    "_action_space": "None",
                    "_observation_space": "None",
                    "_reward_range": "None",
                    "_metadata": "None",
                    "new_step_api": false,
                    "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "_has_reset": false,
                  "_disable_render_order_enforcing": false,
                  "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "_max_episode_steps": 1000,
                "_elapsed_steps": "None",
                "$type": "gym.wrappers.time_limit.TimeLimit"
              },
              "_max_episode_length": 1000,
              "_render_modes": [
                "human",
                "rgb_array",
                "depth_array",
                "single_rgb_array",
                "single_depth_array"
              ],
              "_step_cnt": "None",
              "_visualize": false,
              "_action_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_observation_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_spec": {
                "max_episode_length": 1000,
                "input_space": {
                  "dtype": "dtype('float32')",
                  "bounded_below": "array([ True])",
                  "bounded_above": "array([ True])",
                  "_shape": [
                    1
                  ],
                  "low": "array([-1.], dtype=float32)",
                  "high": "array([1.], dtype=float32)",
                  "low_repr": "-1.0",
                  "high_repr": "1.0",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "output_space": {
                  "dtype": "dtype('float32')",
                  "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                  "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                  "_shape": [
                    11
                  ],
                  "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                  "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                  "low_repr": "-inf",
                  "high_repr": "inf",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "$type": "garage._environment.EnvSpec"
              },
              "_env_info": "None",
              "$type": "garage.envs.gym_env.GymEnv"
            },
            "_scale_reward": 1.0,
            "_normalize_obs": false,
            "_normalize_reward": false,
            "_expected_action_scale": 1.0,
            "_flatten_obs": true,
            "_obs_alpha": 0.001,
            "_obs_mean": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
            "_obs_var": "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])",
            "_reward_alpha": 0.001,
            "_reward_mean": 0.0,
            "_reward_var": 1.0,
            "$type": "garage.envs.normalized_env.NormalizedEnv"
          },
          "_env_steps": [],
          "_observations": [],
          "_last_observations": [],
          "_agent_infos": {},
          "_lengths": [],
          "_prev_obs": "None",
          "_eps_length": 0,
          "_episode_infos": {},
          "$type": "garage.sampler.default_worker.DefaultWorker"
        },
        {
          "_seed": "None",
          "_max_episode_length": 500,
          "_worker_number": 13,
          "agent": {
            "training": true,
            "_parameters": {},
            "_buffers": {},
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_module": {
                "training": true,
                "_parameters": {
                  "_init_std": {
                    "$type": "torch.nn.parameter.Parameter"
                  }
                },
                "_buffers": {
                  "min_std_param": {
                    "$type": "torch.Tensor"
                  }
                },
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_mean_module": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "_layers": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "0": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 11.0,
                                "out_features": 32,
                                "$type": "torch.nn.modules.linear.Linear"
                              },
                              "non_linearity": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                                "$type": "garage.torch._functions.NonLinearity"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          },
                          "1": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 32,
                                "out_features": 32,
                                "$type": "torch.nn.modules.linear.Linear"
                              },
                              "non_linearity": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                                "$type": "garage.torch._functions.NonLinearity"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          }
                        },
                        "$type": "torch.nn.modules.container.ModuleList"
                      },
                      "_output_layers": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "0": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 32,
                                "out_features": 1.0,
                                "$type": "torch.nn.modules.linear.Linear"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          }
                        },
                        "$type": "torch.nn.modules.container.ModuleList"
                      }
                    },
                    "_output_dim": 1.0,
                    "$type": "garage.torch.modules.mlp_module.MLPModule"
                  }
                },
                "_input_dim": 11.0,
                "_hidden_sizes": [
                  32,
                  32
                ],
                "_action_dim": 1.0,
                "_learn_std": true,
                "_std_hidden_sizes": [
                  32,
                  32
                ],
                "_min_std": 1e-06,
                "_max_std": "None",
                "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
                "_std_hidden_w_init": {
                  "$type": "builtins.function"
                },
                "_std_hidden_b_init": {
                  "$type": "builtins.function"
                },
                "_std_output_nonlinearity": "None",
                "_std_output_w_init": {
                  "$type": "builtins.function"
                },
                "_std_parameterization": "exp",
                "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
                "_hidden_w_init": {
                  "$type": "builtins.function"
                },
                "_hidden_b_init": {
                  "$type": "builtins.function"
                },
                "_output_nonlinearity": "None",
                "_output_w_init": {
                  "$type": "builtins.function"
                },
                "_output_b_init": {
                  "$type": "builtins.function"
                },
                "_layer_normalization": false,
                "_norm_dist_class": {
                  "$typename": "torch.distributions.normal.Normal"
                },
                "_min_std_param": {
                  "$type": "torch.Tensor"
                },
                "_max_std_param": "None",
                "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
              }
            },
            "_env_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_name": "GaussianMLPPolicy",
            "_obs_dim": 11.0,
            "_action_dim": 1.0,
            "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
          },
          "env": {
            "_env": {
              "_env": {
                "env": {
                  "env": {
                    "env": {
                      "env": {
                        "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                        "model": "<mujoco._structs.MjModel object at 0x7f5aff6cc830>",
                        "data": "<mujoco._structs.MjData object at 0x7f5aff6cc870>",
                        "init_qpos": "array([0., 0., 0.])",
                        "init_qvel": "array([0., 0., 0.])",
                        "_viewers": {},
                        "frame_skip": 5,
                        "viewer": "None",
                        "observation_space": {
                          "dtype": "dtype('float64')",
                          "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                          "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                          "_shape": [
                            11
                          ],
                          "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                          "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                          "low_repr": "-inf",
                          "high_repr": "inf",
                          "_np_random": "None",
                          "$type": "gym.spaces.box.Box"
                        },
                        "action_space": {
                          "dtype": "dtype('float32')",
                          "bounded_below": "array([ True])",
                          "bounded_above": "array([ True])",
                          "_shape": [
                            1
                          ],
                          "low": "array([-1.], dtype=float32)",
                          "high": "array([1.], dtype=float32)",
                          "low_repr": "-1.0",
                          "high_repr": "1.0",
                          "_np_random": "None",
                          "$type": "gym.spaces.box.Box"
                        },
                        "render_mode": "None",
                        "renderer": {
                          "no_returns_render": [
                            "human"
                          ],
                          "single_render": [
                            "single_rgb_array",
                            "single_depth_array",
                            "single_state_pixels"
                          ],
                          "mode": "None",
                          "render": {
                            "$type": "functools.partial"
                          },
                          "render_list": [],
                          "$type": "gym.utils.renderer.Renderer"
                        },
                        "_ezpickle_args": [],
                        "_ezpickle_kwargs": {},
                        "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                      },
                      "_action_space": "None",
                      "_observation_space": "None",
                      "_reward_range": "None",
                      "_metadata": "None",
                      "new_step_api": true,
                      "checked_reset": false,
                      "checked_step": false,
                      "checked_render": false,
                      "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                    },
                    "_action_space": "None",
                    "_observation_space": "None",
                    "_reward_range": "None",
                    "_metadata": "None",
                    "new_step_api": false,
                    "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "_has_reset": false,
                  "_disable_render_order_enforcing": false,
                  "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "_max_episode_steps": 1000,
                "_elapsed_steps": "None",
                "$type": "gym.wrappers.time_limit.TimeLimit"
              },
              "_max_episode_length": 1000,
              "_render_modes": [
                "human",
                "rgb_array",
                "depth_array",
                "single_rgb_array",
                "single_depth_array"
              ],
              "_step_cnt": "None",
              "_visualize": false,
              "_action_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_observation_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_spec": {
                "max_episode_length": 1000,
                "input_space": {
                  "dtype": "dtype('float32')",
                  "bounded_below": "array([ True])",
                  "bounded_above": "array([ True])",
                  "_shape": [
                    1
                  ],
                  "low": "array([-1.], dtype=float32)",
                  "high": "array([1.], dtype=float32)",
                  "low_repr": "-1.0",
                  "high_repr": "1.0",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "output_space": {
                  "dtype": "dtype('float32')",
                  "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                  "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                  "_shape": [
                    11
                  ],
                  "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                  "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                  "low_repr": "-inf",
                  "high_repr": "inf",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "$type": "garage._environment.EnvSpec"
              },
              "_env_info": "None",
              "$type": "garage.envs.gym_env.GymEnv"
            },
            "_scale_reward": 1.0,
            "_normalize_obs": false,
            "_normalize_reward": false,
            "_expected_action_scale": 1.0,
            "_flatten_obs": true,
            "_obs_alpha": 0.001,
            "_obs_mean": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
            "_obs_var": "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])",
            "_reward_alpha": 0.001,
            "_reward_mean": 0.0,
            "_reward_var": 1.0,
            "$type": "garage.envs.normalized_env.NormalizedEnv"
          },
          "_env_steps": [],
          "_observations": [],
          "_last_observations": [],
          "_agent_infos": {},
          "_lengths": [],
          "_prev_obs": "None",
          "_eps_length": 0,
          "_episode_infos": {},
          "$type": "garage.sampler.default_worker.DefaultWorker"
        },
        {
          "_seed": "None",
          "_max_episode_length": 500,
          "_worker_number": 14,
          "agent": {
            "training": true,
            "_parameters": {},
            "_buffers": {},
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_module": {
                "training": true,
                "_parameters": {
                  "_init_std": {
                    "$type": "torch.nn.parameter.Parameter"
                  }
                },
                "_buffers": {
                  "min_std_param": {
                    "$type": "torch.Tensor"
                  }
                },
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_mean_module": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "_layers": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "0": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 11.0,
                                "out_features": 32,
                                "$type": "torch.nn.modules.linear.Linear"
                              },
                              "non_linearity": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                                "$type": "garage.torch._functions.NonLinearity"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          },
                          "1": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 32,
                                "out_features": 32,
                                "$type": "torch.nn.modules.linear.Linear"
                              },
                              "non_linearity": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                                "$type": "garage.torch._functions.NonLinearity"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          }
                        },
                        "$type": "torch.nn.modules.container.ModuleList"
                      },
                      "_output_layers": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "0": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 32,
                                "out_features": 1.0,
                                "$type": "torch.nn.modules.linear.Linear"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          }
                        },
                        "$type": "torch.nn.modules.container.ModuleList"
                      }
                    },
                    "_output_dim": 1.0,
                    "$type": "garage.torch.modules.mlp_module.MLPModule"
                  }
                },
                "_input_dim": 11.0,
                "_hidden_sizes": [
                  32,
                  32
                ],
                "_action_dim": 1.0,
                "_learn_std": true,
                "_std_hidden_sizes": [
                  32,
                  32
                ],
                "_min_std": 1e-06,
                "_max_std": "None",
                "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
                "_std_hidden_w_init": {
                  "$type": "builtins.function"
                },
                "_std_hidden_b_init": {
                  "$type": "builtins.function"
                },
                "_std_output_nonlinearity": "None",
                "_std_output_w_init": {
                  "$type": "builtins.function"
                },
                "_std_parameterization": "exp",
                "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
                "_hidden_w_init": {
                  "$type": "builtins.function"
                },
                "_hidden_b_init": {
                  "$type": "builtins.function"
                },
                "_output_nonlinearity": "None",
                "_output_w_init": {
                  "$type": "builtins.function"
                },
                "_output_b_init": {
                  "$type": "builtins.function"
                },
                "_layer_normalization": false,
                "_norm_dist_class": {
                  "$typename": "torch.distributions.normal.Normal"
                },
                "_min_std_param": {
                  "$type": "torch.Tensor"
                },
                "_max_std_param": "None",
                "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
              }
            },
            "_env_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_name": "GaussianMLPPolicy",
            "_obs_dim": 11.0,
            "_action_dim": 1.0,
            "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
          },
          "env": {
            "_env": {
              "_env": {
                "env": {
                  "env": {
                    "env": {
                      "env": {
                        "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                        "model": "<mujoco._structs.MjModel object at 0x7f5aff7de2f0>",
                        "data": "<mujoco._structs.MjData object at 0x7f5aff7de330>",
                        "init_qpos": "array([0., 0., 0.])",
                        "init_qvel": "array([0., 0., 0.])",
                        "_viewers": {},
                        "frame_skip": 5,
                        "viewer": "None",
                        "observation_space": {
                          "dtype": "dtype('float64')",
                          "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                          "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                          "_shape": [
                            11
                          ],
                          "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                          "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                          "low_repr": "-inf",
                          "high_repr": "inf",
                          "_np_random": "None",
                          "$type": "gym.spaces.box.Box"
                        },
                        "action_space": {
                          "dtype": "dtype('float32')",
                          "bounded_below": "array([ True])",
                          "bounded_above": "array([ True])",
                          "_shape": [
                            1
                          ],
                          "low": "array([-1.], dtype=float32)",
                          "high": "array([1.], dtype=float32)",
                          "low_repr": "-1.0",
                          "high_repr": "1.0",
                          "_np_random": "None",
                          "$type": "gym.spaces.box.Box"
                        },
                        "render_mode": "None",
                        "renderer": {
                          "no_returns_render": [
                            "human"
                          ],
                          "single_render": [
                            "single_rgb_array",
                            "single_depth_array",
                            "single_state_pixels"
                          ],
                          "mode": "None",
                          "render": {
                            "$type": "functools.partial"
                          },
                          "render_list": [],
                          "$type": "gym.utils.renderer.Renderer"
                        },
                        "_ezpickle_args": [],
                        "_ezpickle_kwargs": {},
                        "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                      },
                      "_action_space": "None",
                      "_observation_space": "None",
                      "_reward_range": "None",
                      "_metadata": "None",
                      "new_step_api": true,
                      "checked_reset": false,
                      "checked_step": false,
                      "checked_render": false,
                      "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                    },
                    "_action_space": "None",
                    "_observation_space": "None",
                    "_reward_range": "None",
                    "_metadata": "None",
                    "new_step_api": false,
                    "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "_has_reset": false,
                  "_disable_render_order_enforcing": false,
                  "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "_max_episode_steps": 1000,
                "_elapsed_steps": "None",
                "$type": "gym.wrappers.time_limit.TimeLimit"
              },
              "_max_episode_length": 1000,
              "_render_modes": [
                "human",
                "rgb_array",
                "depth_array",
                "single_rgb_array",
                "single_depth_array"
              ],
              "_step_cnt": "None",
              "_visualize": false,
              "_action_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_observation_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_spec": {
                "max_episode_length": 1000,
                "input_space": {
                  "dtype": "dtype('float32')",
                  "bounded_below": "array([ True])",
                  "bounded_above": "array([ True])",
                  "_shape": [
                    1
                  ],
                  "low": "array([-1.], dtype=float32)",
                  "high": "array([1.], dtype=float32)",
                  "low_repr": "-1.0",
                  "high_repr": "1.0",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "output_space": {
                  "dtype": "dtype('float32')",
                  "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                  "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                  "_shape": [
                    11
                  ],
                  "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                  "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                  "low_repr": "-inf",
                  "high_repr": "inf",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "$type": "garage._environment.EnvSpec"
              },
              "_env_info": "None",
              "$type": "garage.envs.gym_env.GymEnv"
            },
            "_scale_reward": 1.0,
            "_normalize_obs": false,
            "_normalize_reward": false,
            "_expected_action_scale": 1.0,
            "_flatten_obs": true,
            "_obs_alpha": 0.001,
            "_obs_mean": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
            "_obs_var": "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])",
            "_reward_alpha": 0.001,
            "_reward_mean": 0.0,
            "_reward_var": 1.0,
            "$type": "garage.envs.normalized_env.NormalizedEnv"
          },
          "_env_steps": [],
          "_observations": [],
          "_last_observations": [],
          "_agent_infos": {},
          "_lengths": [],
          "_prev_obs": "None",
          "_eps_length": 0,
          "_episode_infos": {},
          "$type": "garage.sampler.default_worker.DefaultWorker"
        },
        {
          "_seed": "None",
          "_max_episode_length": 500,
          "_worker_number": 15,
          "agent": {
            "training": true,
            "_parameters": {},
            "_buffers": {},
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_module": {
                "training": true,
                "_parameters": {
                  "_init_std": {
                    "$type": "torch.nn.parameter.Parameter"
                  }
                },
                "_buffers": {
                  "min_std_param": {
                    "$type": "torch.Tensor"
                  }
                },
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_mean_module": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "_layers": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "0": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 11.0,
                                "out_features": 32,
                                "$type": "torch.nn.modules.linear.Linear"
                              },
                              "non_linearity": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                                "$type": "garage.torch._functions.NonLinearity"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          },
                          "1": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 32,
                                "out_features": 32,
                                "$type": "torch.nn.modules.linear.Linear"
                              },
                              "non_linearity": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                                "$type": "garage.torch._functions.NonLinearity"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          }
                        },
                        "$type": "torch.nn.modules.container.ModuleList"
                      },
                      "_output_layers": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "0": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 32,
                                "out_features": 1.0,
                                "$type": "torch.nn.modules.linear.Linear"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          }
                        },
                        "$type": "torch.nn.modules.container.ModuleList"
                      }
                    },
                    "_output_dim": 1.0,
                    "$type": "garage.torch.modules.mlp_module.MLPModule"
                  }
                },
                "_input_dim": 11.0,
                "_hidden_sizes": [
                  32,
                  32
                ],
                "_action_dim": 1.0,
                "_learn_std": true,
                "_std_hidden_sizes": [
                  32,
                  32
                ],
                "_min_std": 1e-06,
                "_max_std": "None",
                "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
                "_std_hidden_w_init": {
                  "$type": "builtins.function"
                },
                "_std_hidden_b_init": {
                  "$type": "builtins.function"
                },
                "_std_output_nonlinearity": "None",
                "_std_output_w_init": {
                  "$type": "builtins.function"
                },
                "_std_parameterization": "exp",
                "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
                "_hidden_w_init": {
                  "$type": "builtins.function"
                },
                "_hidden_b_init": {
                  "$type": "builtins.function"
                },
                "_output_nonlinearity": "None",
                "_output_w_init": {
                  "$type": "builtins.function"
                },
                "_output_b_init": {
                  "$type": "builtins.function"
                },
                "_layer_normalization": false,
                "_norm_dist_class": {
                  "$typename": "torch.distributions.normal.Normal"
                },
                "_min_std_param": {
                  "$type": "torch.Tensor"
                },
                "_max_std_param": "None",
                "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
              }
            },
            "_env_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_name": "GaussianMLPPolicy",
            "_obs_dim": 11.0,
            "_action_dim": 1.0,
            "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
          },
          "env": {
            "_env": {
              "_env": {
                "env": {
                  "env": {
                    "env": {
                      "env": {
                        "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                        "model": "<mujoco._structs.MjModel object at 0x7f5aff7dedf0>",
                        "data": "<mujoco._structs.MjData object at 0x7f5aff7dee30>",
                        "init_qpos": "array([0., 0., 0.])",
                        "init_qvel": "array([0., 0., 0.])",
                        "_viewers": {},
                        "frame_skip": 5,
                        "viewer": "None",
                        "observation_space": {
                          "dtype": "dtype('float64')",
                          "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                          "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                          "_shape": [
                            11
                          ],
                          "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                          "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                          "low_repr": "-inf",
                          "high_repr": "inf",
                          "_np_random": "None",
                          "$type": "gym.spaces.box.Box"
                        },
                        "action_space": {
                          "dtype": "dtype('float32')",
                          "bounded_below": "array([ True])",
                          "bounded_above": "array([ True])",
                          "_shape": [
                            1
                          ],
                          "low": "array([-1.], dtype=float32)",
                          "high": "array([1.], dtype=float32)",
                          "low_repr": "-1.0",
                          "high_repr": "1.0",
                          "_np_random": "None",
                          "$type": "gym.spaces.box.Box"
                        },
                        "render_mode": "None",
                        "renderer": {
                          "no_returns_render": [
                            "human"
                          ],
                          "single_render": [
                            "single_rgb_array",
                            "single_depth_array",
                            "single_state_pixels"
                          ],
                          "mode": "None",
                          "render": {
                            "$type": "functools.partial"
                          },
                          "render_list": [],
                          "$type": "gym.utils.renderer.Renderer"
                        },
                        "_ezpickle_args": [],
                        "_ezpickle_kwargs": {},
                        "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                      },
                      "_action_space": "None",
                      "_observation_space": "None",
                      "_reward_range": "None",
                      "_metadata": "None",
                      "new_step_api": true,
                      "checked_reset": false,
                      "checked_step": false,
                      "checked_render": false,
                      "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                    },
                    "_action_space": "None",
                    "_observation_space": "None",
                    "_reward_range": "None",
                    "_metadata": "None",
                    "new_step_api": false,
                    "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "_has_reset": false,
                  "_disable_render_order_enforcing": false,
                  "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "_max_episode_steps": 1000,
                "_elapsed_steps": "None",
                "$type": "gym.wrappers.time_limit.TimeLimit"
              },
              "_max_episode_length": 1000,
              "_render_modes": [
                "human",
                "rgb_array",
                "depth_array",
                "single_rgb_array",
                "single_depth_array"
              ],
              "_step_cnt": "None",
              "_visualize": false,
              "_action_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_observation_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_spec": {
                "max_episode_length": 1000,
                "input_space": {
                  "dtype": "dtype('float32')",
                  "bounded_below": "array([ True])",
                  "bounded_above": "array([ True])",
                  "_shape": [
                    1
                  ],
                  "low": "array([-1.], dtype=float32)",
                  "high": "array([1.], dtype=float32)",
                  "low_repr": "-1.0",
                  "high_repr": "1.0",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "output_space": {
                  "dtype": "dtype('float32')",
                  "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                  "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                  "_shape": [
                    11
                  ],
                  "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                  "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                  "low_repr": "-inf",
                  "high_repr": "inf",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "$type": "garage._environment.EnvSpec"
              },
              "_env_info": "None",
              "$type": "garage.envs.gym_env.GymEnv"
            },
            "_scale_reward": 1.0,
            "_normalize_obs": false,
            "_normalize_reward": false,
            "_expected_action_scale": 1.0,
            "_flatten_obs": true,
            "_obs_alpha": 0.001,
            "_obs_mean": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
            "_obs_var": "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])",
            "_reward_alpha": 0.001,
            "_reward_mean": 0.0,
            "_reward_var": 1.0,
            "$type": "garage.envs.normalized_env.NormalizedEnv"
          },
          "_env_steps": [],
          "_observations": [],
          "_last_observations": [],
          "_agent_infos": {},
          "_lengths": [],
          "_prev_obs": "None",
          "_eps_length": 0,
          "_episode_infos": {},
          "$type": "garage.sampler.default_worker.DefaultWorker"
        },
        {
          "_seed": "None",
          "_max_episode_length": 500,
          "_worker_number": 16,
          "agent": {
            "training": true,
            "_parameters": {},
            "_buffers": {},
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_module": {
                "training": true,
                "_parameters": {
                  "_init_std": {
                    "$type": "torch.nn.parameter.Parameter"
                  }
                },
                "_buffers": {
                  "min_std_param": {
                    "$type": "torch.Tensor"
                  }
                },
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_mean_module": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "_layers": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "0": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 11.0,
                                "out_features": 32,
                                "$type": "torch.nn.modules.linear.Linear"
                              },
                              "non_linearity": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                                "$type": "garage.torch._functions.NonLinearity"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          },
                          "1": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 32,
                                "out_features": 32,
                                "$type": "torch.nn.modules.linear.Linear"
                              },
                              "non_linearity": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                                "$type": "garage.torch._functions.NonLinearity"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          }
                        },
                        "$type": "torch.nn.modules.container.ModuleList"
                      },
                      "_output_layers": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "0": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 32,
                                "out_features": 1.0,
                                "$type": "torch.nn.modules.linear.Linear"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          }
                        },
                        "$type": "torch.nn.modules.container.ModuleList"
                      }
                    },
                    "_output_dim": 1.0,
                    "$type": "garage.torch.modules.mlp_module.MLPModule"
                  }
                },
                "_input_dim": 11.0,
                "_hidden_sizes": [
                  32,
                  32
                ],
                "_action_dim": 1.0,
                "_learn_std": true,
                "_std_hidden_sizes": [
                  32,
                  32
                ],
                "_min_std": 1e-06,
                "_max_std": "None",
                "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
                "_std_hidden_w_init": {
                  "$type": "builtins.function"
                },
                "_std_hidden_b_init": {
                  "$type": "builtins.function"
                },
                "_std_output_nonlinearity": "None",
                "_std_output_w_init": {
                  "$type": "builtins.function"
                },
                "_std_parameterization": "exp",
                "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
                "_hidden_w_init": {
                  "$type": "builtins.function"
                },
                "_hidden_b_init": {
                  "$type": "builtins.function"
                },
                "_output_nonlinearity": "None",
                "_output_w_init": {
                  "$type": "builtins.function"
                },
                "_output_b_init": {
                  "$type": "builtins.function"
                },
                "_layer_normalization": false,
                "_norm_dist_class": {
                  "$typename": "torch.distributions.normal.Normal"
                },
                "_min_std_param": {
                  "$type": "torch.Tensor"
                },
                "_max_std_param": "None",
                "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
              }
            },
            "_env_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_name": "GaussianMLPPolicy",
            "_obs_dim": 11.0,
            "_action_dim": 1.0,
            "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
          },
          "env": {
            "_env": {
              "_env": {
                "env": {
                  "env": {
                    "env": {
                      "env": {
                        "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                        "model": "<mujoco._structs.MjModel object at 0x7f5aff61f930>",
                        "data": "<mujoco._structs.MjData object at 0x7f5aff61f970>",
                        "init_qpos": "array([0., 0., 0.])",
                        "init_qvel": "array([0., 0., 0.])",
                        "_viewers": {},
                        "frame_skip": 5,
                        "viewer": "None",
                        "observation_space": {
                          "dtype": "dtype('float64')",
                          "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                          "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                          "_shape": [
                            11
                          ],
                          "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                          "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                          "low_repr": "-inf",
                          "high_repr": "inf",
                          "_np_random": "None",
                          "$type": "gym.spaces.box.Box"
                        },
                        "action_space": {
                          "dtype": "dtype('float32')",
                          "bounded_below": "array([ True])",
                          "bounded_above": "array([ True])",
                          "_shape": [
                            1
                          ],
                          "low": "array([-1.], dtype=float32)",
                          "high": "array([1.], dtype=float32)",
                          "low_repr": "-1.0",
                          "high_repr": "1.0",
                          "_np_random": "None",
                          "$type": "gym.spaces.box.Box"
                        },
                        "render_mode": "None",
                        "renderer": {
                          "no_returns_render": [
                            "human"
                          ],
                          "single_render": [
                            "single_rgb_array",
                            "single_depth_array",
                            "single_state_pixels"
                          ],
                          "mode": "None",
                          "render": {
                            "$type": "functools.partial"
                          },
                          "render_list": [],
                          "$type": "gym.utils.renderer.Renderer"
                        },
                        "_ezpickle_args": [],
                        "_ezpickle_kwargs": {},
                        "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                      },
                      "_action_space": "None",
                      "_observation_space": "None",
                      "_reward_range": "None",
                      "_metadata": "None",
                      "new_step_api": true,
                      "checked_reset": false,
                      "checked_step": false,
                      "checked_render": false,
                      "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                    },
                    "_action_space": "None",
                    "_observation_space": "None",
                    "_reward_range": "None",
                    "_metadata": "None",
                    "new_step_api": false,
                    "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "_has_reset": false,
                  "_disable_render_order_enforcing": false,
                  "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "_max_episode_steps": 1000,
                "_elapsed_steps": "None",
                "$type": "gym.wrappers.time_limit.TimeLimit"
              },
              "_max_episode_length": 1000,
              "_render_modes": [
                "human",
                "rgb_array",
                "depth_array",
                "single_rgb_array",
                "single_depth_array"
              ],
              "_step_cnt": "None",
              "_visualize": false,
              "_action_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_observation_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_spec": {
                "max_episode_length": 1000,
                "input_space": {
                  "dtype": "dtype('float32')",
                  "bounded_below": "array([ True])",
                  "bounded_above": "array([ True])",
                  "_shape": [
                    1
                  ],
                  "low": "array([-1.], dtype=float32)",
                  "high": "array([1.], dtype=float32)",
                  "low_repr": "-1.0",
                  "high_repr": "1.0",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "output_space": {
                  "dtype": "dtype('float32')",
                  "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                  "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                  "_shape": [
                    11
                  ],
                  "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                  "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                  "low_repr": "-inf",
                  "high_repr": "inf",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "$type": "garage._environment.EnvSpec"
              },
              "_env_info": "None",
              "$type": "garage.envs.gym_env.GymEnv"
            },
            "_scale_reward": 1.0,
            "_normalize_obs": false,
            "_normalize_reward": false,
            "_expected_action_scale": 1.0,
            "_flatten_obs": true,
            "_obs_alpha": 0.001,
            "_obs_mean": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
            "_obs_var": "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])",
            "_reward_alpha": 0.001,
            "_reward_mean": 0.0,
            "_reward_var": 1.0,
            "$type": "garage.envs.normalized_env.NormalizedEnv"
          },
          "_env_steps": [],
          "_observations": [],
          "_last_observations": [],
          "_agent_infos": {},
          "_lengths": [],
          "_prev_obs": "None",
          "_eps_length": 0,
          "_episode_infos": {},
          "$type": "garage.sampler.default_worker.DefaultWorker"
        },
        {
          "_seed": "None",
          "_max_episode_length": 500,
          "_worker_number": 17,
          "agent": {
            "training": true,
            "_parameters": {},
            "_buffers": {},
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_module": {
                "training": true,
                "_parameters": {
                  "_init_std": {
                    "$type": "torch.nn.parameter.Parameter"
                  }
                },
                "_buffers": {
                  "min_std_param": {
                    "$type": "torch.Tensor"
                  }
                },
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_mean_module": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "_layers": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "0": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 11.0,
                                "out_features": 32,
                                "$type": "torch.nn.modules.linear.Linear"
                              },
                              "non_linearity": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                                "$type": "garage.torch._functions.NonLinearity"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          },
                          "1": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 32,
                                "out_features": 32,
                                "$type": "torch.nn.modules.linear.Linear"
                              },
                              "non_linearity": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                                "$type": "garage.torch._functions.NonLinearity"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          }
                        },
                        "$type": "torch.nn.modules.container.ModuleList"
                      },
                      "_output_layers": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "0": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 32,
                                "out_features": 1.0,
                                "$type": "torch.nn.modules.linear.Linear"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          }
                        },
                        "$type": "torch.nn.modules.container.ModuleList"
                      }
                    },
                    "_output_dim": 1.0,
                    "$type": "garage.torch.modules.mlp_module.MLPModule"
                  }
                },
                "_input_dim": 11.0,
                "_hidden_sizes": [
                  32,
                  32
                ],
                "_action_dim": 1.0,
                "_learn_std": true,
                "_std_hidden_sizes": [
                  32,
                  32
                ],
                "_min_std": 1e-06,
                "_max_std": "None",
                "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
                "_std_hidden_w_init": {
                  "$type": "builtins.function"
                },
                "_std_hidden_b_init": {
                  "$type": "builtins.function"
                },
                "_std_output_nonlinearity": "None",
                "_std_output_w_init": {
                  "$type": "builtins.function"
                },
                "_std_parameterization": "exp",
                "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
                "_hidden_w_init": {
                  "$type": "builtins.function"
                },
                "_hidden_b_init": {
                  "$type": "builtins.function"
                },
                "_output_nonlinearity": "None",
                "_output_w_init": {
                  "$type": "builtins.function"
                },
                "_output_b_init": {
                  "$type": "builtins.function"
                },
                "_layer_normalization": false,
                "_norm_dist_class": {
                  "$typename": "torch.distributions.normal.Normal"
                },
                "_min_std_param": {
                  "$type": "torch.Tensor"
                },
                "_max_std_param": "None",
                "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
              }
            },
            "_env_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_name": "GaussianMLPPolicy",
            "_obs_dim": 11.0,
            "_action_dim": 1.0,
            "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
          },
          "env": {
            "_env": {
              "_env": {
                "env": {
                  "env": {
                    "env": {
                      "env": {
                        "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                        "model": "<mujoco._structs.MjModel object at 0x7f5aff653470>",
                        "data": "<mujoco._structs.MjData object at 0x7f5aff6534b0>",
                        "init_qpos": "array([0., 0., 0.])",
                        "init_qvel": "array([0., 0., 0.])",
                        "_viewers": {},
                        "frame_skip": 5,
                        "viewer": "None",
                        "observation_space": {
                          "dtype": "dtype('float64')",
                          "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                          "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                          "_shape": [
                            11
                          ],
                          "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                          "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                          "low_repr": "-inf",
                          "high_repr": "inf",
                          "_np_random": "None",
                          "$type": "gym.spaces.box.Box"
                        },
                        "action_space": {
                          "dtype": "dtype('float32')",
                          "bounded_below": "array([ True])",
                          "bounded_above": "array([ True])",
                          "_shape": [
                            1
                          ],
                          "low": "array([-1.], dtype=float32)",
                          "high": "array([1.], dtype=float32)",
                          "low_repr": "-1.0",
                          "high_repr": "1.0",
                          "_np_random": "None",
                          "$type": "gym.spaces.box.Box"
                        },
                        "render_mode": "None",
                        "renderer": {
                          "no_returns_render": [
                            "human"
                          ],
                          "single_render": [
                            "single_rgb_array",
                            "single_depth_array",
                            "single_state_pixels"
                          ],
                          "mode": "None",
                          "render": {
                            "$type": "functools.partial"
                          },
                          "render_list": [],
                          "$type": "gym.utils.renderer.Renderer"
                        },
                        "_ezpickle_args": [],
                        "_ezpickle_kwargs": {},
                        "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                      },
                      "_action_space": "None",
                      "_observation_space": "None",
                      "_reward_range": "None",
                      "_metadata": "None",
                      "new_step_api": true,
                      "checked_reset": false,
                      "checked_step": false,
                      "checked_render": false,
                      "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                    },
                    "_action_space": "None",
                    "_observation_space": "None",
                    "_reward_range": "None",
                    "_metadata": "None",
                    "new_step_api": false,
                    "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "_has_reset": false,
                  "_disable_render_order_enforcing": false,
                  "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "_max_episode_steps": 1000,
                "_elapsed_steps": "None",
                "$type": "gym.wrappers.time_limit.TimeLimit"
              },
              "_max_episode_length": 1000,
              "_render_modes": [
                "human",
                "rgb_array",
                "depth_array",
                "single_rgb_array",
                "single_depth_array"
              ],
              "_step_cnt": "None",
              "_visualize": false,
              "_action_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_observation_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_spec": {
                "max_episode_length": 1000,
                "input_space": {
                  "dtype": "dtype('float32')",
                  "bounded_below": "array([ True])",
                  "bounded_above": "array([ True])",
                  "_shape": [
                    1
                  ],
                  "low": "array([-1.], dtype=float32)",
                  "high": "array([1.], dtype=float32)",
                  "low_repr": "-1.0",
                  "high_repr": "1.0",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "output_space": {
                  "dtype": "dtype('float32')",
                  "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                  "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                  "_shape": [
                    11
                  ],
                  "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                  "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                  "low_repr": "-inf",
                  "high_repr": "inf",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "$type": "garage._environment.EnvSpec"
              },
              "_env_info": "None",
              "$type": "garage.envs.gym_env.GymEnv"
            },
            "_scale_reward": 1.0,
            "_normalize_obs": false,
            "_normalize_reward": false,
            "_expected_action_scale": 1.0,
            "_flatten_obs": true,
            "_obs_alpha": 0.001,
            "_obs_mean": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
            "_obs_var": "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])",
            "_reward_alpha": 0.001,
            "_reward_mean": 0.0,
            "_reward_var": 1.0,
            "$type": "garage.envs.normalized_env.NormalizedEnv"
          },
          "_env_steps": [],
          "_observations": [],
          "_last_observations": [],
          "_agent_infos": {},
          "_lengths": [],
          "_prev_obs": "None",
          "_eps_length": 0,
          "_episode_infos": {},
          "$type": "garage.sampler.default_worker.DefaultWorker"
        },
        {
          "_seed": "None",
          "_max_episode_length": 500,
          "_worker_number": 18,
          "agent": {
            "training": true,
            "_parameters": {},
            "_buffers": {},
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_module": {
                "training": true,
                "_parameters": {
                  "_init_std": {
                    "$type": "torch.nn.parameter.Parameter"
                  }
                },
                "_buffers": {
                  "min_std_param": {
                    "$type": "torch.Tensor"
                  }
                },
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_mean_module": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "_layers": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "0": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 11.0,
                                "out_features": 32,
                                "$type": "torch.nn.modules.linear.Linear"
                              },
                              "non_linearity": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                                "$type": "garage.torch._functions.NonLinearity"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          },
                          "1": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 32,
                                "out_features": 32,
                                "$type": "torch.nn.modules.linear.Linear"
                              },
                              "non_linearity": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                                "$type": "garage.torch._functions.NonLinearity"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          }
                        },
                        "$type": "torch.nn.modules.container.ModuleList"
                      },
                      "_output_layers": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "0": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 32,
                                "out_features": 1.0,
                                "$type": "torch.nn.modules.linear.Linear"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          }
                        },
                        "$type": "torch.nn.modules.container.ModuleList"
                      }
                    },
                    "_output_dim": 1.0,
                    "$type": "garage.torch.modules.mlp_module.MLPModule"
                  }
                },
                "_input_dim": 11.0,
                "_hidden_sizes": [
                  32,
                  32
                ],
                "_action_dim": 1.0,
                "_learn_std": true,
                "_std_hidden_sizes": [
                  32,
                  32
                ],
                "_min_std": 1e-06,
                "_max_std": "None",
                "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
                "_std_hidden_w_init": {
                  "$type": "builtins.function"
                },
                "_std_hidden_b_init": {
                  "$type": "builtins.function"
                },
                "_std_output_nonlinearity": "None",
                "_std_output_w_init": {
                  "$type": "builtins.function"
                },
                "_std_parameterization": "exp",
                "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
                "_hidden_w_init": {
                  "$type": "builtins.function"
                },
                "_hidden_b_init": {
                  "$type": "builtins.function"
                },
                "_output_nonlinearity": "None",
                "_output_w_init": {
                  "$type": "builtins.function"
                },
                "_output_b_init": {
                  "$type": "builtins.function"
                },
                "_layer_normalization": false,
                "_norm_dist_class": {
                  "$typename": "torch.distributions.normal.Normal"
                },
                "_min_std_param": {
                  "$type": "torch.Tensor"
                },
                "_max_std_param": "None",
                "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
              }
            },
            "_env_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_name": "GaussianMLPPolicy",
            "_obs_dim": 11.0,
            "_action_dim": 1.0,
            "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
          },
          "env": {
            "_env": {
              "_env": {
                "env": {
                  "env": {
                    "env": {
                      "env": {
                        "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                        "model": "<mujoco._structs.MjModel object at 0x7f5aff653f70>",
                        "data": "<mujoco._structs.MjData object at 0x7f5aff653fb0>",
                        "init_qpos": "array([0., 0., 0.])",
                        "init_qvel": "array([0., 0., 0.])",
                        "_viewers": {},
                        "frame_skip": 5,
                        "viewer": "None",
                        "observation_space": {
                          "dtype": "dtype('float64')",
                          "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                          "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                          "_shape": [
                            11
                          ],
                          "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                          "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                          "low_repr": "-inf",
                          "high_repr": "inf",
                          "_np_random": "None",
                          "$type": "gym.spaces.box.Box"
                        },
                        "action_space": {
                          "dtype": "dtype('float32')",
                          "bounded_below": "array([ True])",
                          "bounded_above": "array([ True])",
                          "_shape": [
                            1
                          ],
                          "low": "array([-1.], dtype=float32)",
                          "high": "array([1.], dtype=float32)",
                          "low_repr": "-1.0",
                          "high_repr": "1.0",
                          "_np_random": "None",
                          "$type": "gym.spaces.box.Box"
                        },
                        "render_mode": "None",
                        "renderer": {
                          "no_returns_render": [
                            "human"
                          ],
                          "single_render": [
                            "single_rgb_array",
                            "single_depth_array",
                            "single_state_pixels"
                          ],
                          "mode": "None",
                          "render": {
                            "$type": "functools.partial"
                          },
                          "render_list": [],
                          "$type": "gym.utils.renderer.Renderer"
                        },
                        "_ezpickle_args": [],
                        "_ezpickle_kwargs": {},
                        "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                      },
                      "_action_space": "None",
                      "_observation_space": "None",
                      "_reward_range": "None",
                      "_metadata": "None",
                      "new_step_api": true,
                      "checked_reset": false,
                      "checked_step": false,
                      "checked_render": false,
                      "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                    },
                    "_action_space": "None",
                    "_observation_space": "None",
                    "_reward_range": "None",
                    "_metadata": "None",
                    "new_step_api": false,
                    "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "_has_reset": false,
                  "_disable_render_order_enforcing": false,
                  "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "_max_episode_steps": 1000,
                "_elapsed_steps": "None",
                "$type": "gym.wrappers.time_limit.TimeLimit"
              },
              "_max_episode_length": 1000,
              "_render_modes": [
                "human",
                "rgb_array",
                "depth_array",
                "single_rgb_array",
                "single_depth_array"
              ],
              "_step_cnt": "None",
              "_visualize": false,
              "_action_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_observation_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_spec": {
                "max_episode_length": 1000,
                "input_space": {
                  "dtype": "dtype('float32')",
                  "bounded_below": "array([ True])",
                  "bounded_above": "array([ True])",
                  "_shape": [
                    1
                  ],
                  "low": "array([-1.], dtype=float32)",
                  "high": "array([1.], dtype=float32)",
                  "low_repr": "-1.0",
                  "high_repr": "1.0",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "output_space": {
                  "dtype": "dtype('float32')",
                  "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                  "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                  "_shape": [
                    11
                  ],
                  "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                  "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                  "low_repr": "-inf",
                  "high_repr": "inf",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "$type": "garage._environment.EnvSpec"
              },
              "_env_info": "None",
              "$type": "garage.envs.gym_env.GymEnv"
            },
            "_scale_reward": 1.0,
            "_normalize_obs": false,
            "_normalize_reward": false,
            "_expected_action_scale": 1.0,
            "_flatten_obs": true,
            "_obs_alpha": 0.001,
            "_obs_mean": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
            "_obs_var": "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])",
            "_reward_alpha": 0.001,
            "_reward_mean": 0.0,
            "_reward_var": 1.0,
            "$type": "garage.envs.normalized_env.NormalizedEnv"
          },
          "_env_steps": [],
          "_observations": [],
          "_last_observations": [],
          "_agent_infos": {},
          "_lengths": [],
          "_prev_obs": "None",
          "_eps_length": 0,
          "_episode_infos": {},
          "$type": "garage.sampler.default_worker.DefaultWorker"
        },
        {
          "_seed": "None",
          "_max_episode_length": 500,
          "_worker_number": 19,
          "agent": {
            "training": true,
            "_parameters": {},
            "_buffers": {},
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_module": {
                "training": true,
                "_parameters": {
                  "_init_std": {
                    "$type": "torch.nn.parameter.Parameter"
                  }
                },
                "_buffers": {
                  "min_std_param": {
                    "$type": "torch.Tensor"
                  }
                },
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_mean_module": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "_layers": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "0": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 11.0,
                                "out_features": 32,
                                "$type": "torch.nn.modules.linear.Linear"
                              },
                              "non_linearity": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                                "$type": "garage.torch._functions.NonLinearity"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          },
                          "1": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 32,
                                "out_features": 32,
                                "$type": "torch.nn.modules.linear.Linear"
                              },
                              "non_linearity": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                                "$type": "garage.torch._functions.NonLinearity"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          }
                        },
                        "$type": "torch.nn.modules.container.ModuleList"
                      },
                      "_output_layers": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "0": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 32,
                                "out_features": 1.0,
                                "$type": "torch.nn.modules.linear.Linear"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          }
                        },
                        "$type": "torch.nn.modules.container.ModuleList"
                      }
                    },
                    "_output_dim": 1.0,
                    "$type": "garage.torch.modules.mlp_module.MLPModule"
                  }
                },
                "_input_dim": 11.0,
                "_hidden_sizes": [
                  32,
                  32
                ],
                "_action_dim": 1.0,
                "_learn_std": true,
                "_std_hidden_sizes": [
                  32,
                  32
                ],
                "_min_std": 1e-06,
                "_max_std": "None",
                "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
                "_std_hidden_w_init": {
                  "$type": "builtins.function"
                },
                "_std_hidden_b_init": {
                  "$type": "builtins.function"
                },
                "_std_output_nonlinearity": "None",
                "_std_output_w_init": {
                  "$type": "builtins.function"
                },
                "_std_parameterization": "exp",
                "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
                "_hidden_w_init": {
                  "$type": "builtins.function"
                },
                "_hidden_b_init": {
                  "$type": "builtins.function"
                },
                "_output_nonlinearity": "None",
                "_output_w_init": {
                  "$type": "builtins.function"
                },
                "_output_b_init": {
                  "$type": "builtins.function"
                },
                "_layer_normalization": false,
                "_norm_dist_class": {
                  "$typename": "torch.distributions.normal.Normal"
                },
                "_min_std_param": {
                  "$type": "torch.Tensor"
                },
                "_max_std_param": "None",
                "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
              }
            },
            "_env_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_name": "GaussianMLPPolicy",
            "_obs_dim": 11.0,
            "_action_dim": 1.0,
            "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
          },
          "env": {
            "_env": {
              "_env": {
                "env": {
                  "env": {
                    "env": {
                      "env": {
                        "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                        "model": "<mujoco._structs.MjModel object at 0x7f5aff5b8ab0>",
                        "data": "<mujoco._structs.MjData object at 0x7f5aff5b8af0>",
                        "init_qpos": "array([0., 0., 0.])",
                        "init_qvel": "array([0., 0., 0.])",
                        "_viewers": {},
                        "frame_skip": 5,
                        "viewer": "None",
                        "observation_space": {
                          "dtype": "dtype('float64')",
                          "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                          "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                          "_shape": [
                            11
                          ],
                          "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                          "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                          "low_repr": "-inf",
                          "high_repr": "inf",
                          "_np_random": "None",
                          "$type": "gym.spaces.box.Box"
                        },
                        "action_space": {
                          "dtype": "dtype('float32')",
                          "bounded_below": "array([ True])",
                          "bounded_above": "array([ True])",
                          "_shape": [
                            1
                          ],
                          "low": "array([-1.], dtype=float32)",
                          "high": "array([1.], dtype=float32)",
                          "low_repr": "-1.0",
                          "high_repr": "1.0",
                          "_np_random": "None",
                          "$type": "gym.spaces.box.Box"
                        },
                        "render_mode": "None",
                        "renderer": {
                          "no_returns_render": [
                            "human"
                          ],
                          "single_render": [
                            "single_rgb_array",
                            "single_depth_array",
                            "single_state_pixels"
                          ],
                          "mode": "None",
                          "render": {
                            "$type": "functools.partial"
                          },
                          "render_list": [],
                          "$type": "gym.utils.renderer.Renderer"
                        },
                        "_ezpickle_args": [],
                        "_ezpickle_kwargs": {},
                        "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                      },
                      "_action_space": "None",
                      "_observation_space": "None",
                      "_reward_range": "None",
                      "_metadata": "None",
                      "new_step_api": true,
                      "checked_reset": false,
                      "checked_step": false,
                      "checked_render": false,
                      "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                    },
                    "_action_space": "None",
                    "_observation_space": "None",
                    "_reward_range": "None",
                    "_metadata": "None",
                    "new_step_api": false,
                    "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "_has_reset": false,
                  "_disable_render_order_enforcing": false,
                  "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "_max_episode_steps": 1000,
                "_elapsed_steps": "None",
                "$type": "gym.wrappers.time_limit.TimeLimit"
              },
              "_max_episode_length": 1000,
              "_render_modes": [
                "human",
                "rgb_array",
                "depth_array",
                "single_rgb_array",
                "single_depth_array"
              ],
              "_step_cnt": "None",
              "_visualize": false,
              "_action_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_observation_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_spec": {
                "max_episode_length": 1000,
                "input_space": {
                  "dtype": "dtype('float32')",
                  "bounded_below": "array([ True])",
                  "bounded_above": "array([ True])",
                  "_shape": [
                    1
                  ],
                  "low": "array([-1.], dtype=float32)",
                  "high": "array([1.], dtype=float32)",
                  "low_repr": "-1.0",
                  "high_repr": "1.0",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "output_space": {
                  "dtype": "dtype('float32')",
                  "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                  "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                  "_shape": [
                    11
                  ],
                  "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                  "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                  "low_repr": "-inf",
                  "high_repr": "inf",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "$type": "garage._environment.EnvSpec"
              },
              "_env_info": "None",
              "$type": "garage.envs.gym_env.GymEnv"
            },
            "_scale_reward": 1.0,
            "_normalize_obs": false,
            "_normalize_reward": false,
            "_expected_action_scale": 1.0,
            "_flatten_obs": true,
            "_obs_alpha": 0.001,
            "_obs_mean": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
            "_obs_var": "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])",
            "_reward_alpha": 0.001,
            "_reward_mean": 0.0,
            "_reward_var": 1.0,
            "$type": "garage.envs.normalized_env.NormalizedEnv"
          },
          "_env_steps": [],
          "_observations": [],
          "_last_observations": [],
          "_agent_infos": {},
          "_lengths": [],
          "_prev_obs": "None",
          "_eps_length": 0,
          "_episode_infos": {},
          "$type": "garage.sampler.default_worker.DefaultWorker"
        },
        {
          "_seed": "None",
          "_max_episode_length": 500,
          "_worker_number": 20,
          "agent": {
            "training": true,
            "_parameters": {},
            "_buffers": {},
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_module": {
                "training": true,
                "_parameters": {
                  "_init_std": {
                    "$type": "torch.nn.parameter.Parameter"
                  }
                },
                "_buffers": {
                  "min_std_param": {
                    "$type": "torch.Tensor"
                  }
                },
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_mean_module": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "_layers": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "0": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 11.0,
                                "out_features": 32,
                                "$type": "torch.nn.modules.linear.Linear"
                              },
                              "non_linearity": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                                "$type": "garage.torch._functions.NonLinearity"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          },
                          "1": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 32,
                                "out_features": 32,
                                "$type": "torch.nn.modules.linear.Linear"
                              },
                              "non_linearity": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                                "$type": "garage.torch._functions.NonLinearity"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          }
                        },
                        "$type": "torch.nn.modules.container.ModuleList"
                      },
                      "_output_layers": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "0": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 32,
                                "out_features": 1.0,
                                "$type": "torch.nn.modules.linear.Linear"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          }
                        },
                        "$type": "torch.nn.modules.container.ModuleList"
                      }
                    },
                    "_output_dim": 1.0,
                    "$type": "garage.torch.modules.mlp_module.MLPModule"
                  }
                },
                "_input_dim": 11.0,
                "_hidden_sizes": [
                  32,
                  32
                ],
                "_action_dim": 1.0,
                "_learn_std": true,
                "_std_hidden_sizes": [
                  32,
                  32
                ],
                "_min_std": 1e-06,
                "_max_std": "None",
                "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
                "_std_hidden_w_init": {
                  "$type": "builtins.function"
                },
                "_std_hidden_b_init": {
                  "$type": "builtins.function"
                },
                "_std_output_nonlinearity": "None",
                "_std_output_w_init": {
                  "$type": "builtins.function"
                },
                "_std_parameterization": "exp",
                "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
                "_hidden_w_init": {
                  "$type": "builtins.function"
                },
                "_hidden_b_init": {
                  "$type": "builtins.function"
                },
                "_output_nonlinearity": "None",
                "_output_w_init": {
                  "$type": "builtins.function"
                },
                "_output_b_init": {
                  "$type": "builtins.function"
                },
                "_layer_normalization": false,
                "_norm_dist_class": {
                  "$typename": "torch.distributions.normal.Normal"
                },
                "_min_std_param": {
                  "$type": "torch.Tensor"
                },
                "_max_std_param": "None",
                "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
              }
            },
            "_env_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_name": "GaussianMLPPolicy",
            "_obs_dim": 11.0,
            "_action_dim": 1.0,
            "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
          },
          "env": {
            "_env": {
              "_env": {
                "env": {
                  "env": {
                    "env": {
                      "env": {
                        "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                        "model": "<mujoco._structs.MjModel object at 0x7f5aff56e5f0>",
                        "data": "<mujoco._structs.MjData object at 0x7f5aff56e630>",
                        "init_qpos": "array([0., 0., 0.])",
                        "init_qvel": "array([0., 0., 0.])",
                        "_viewers": {},
                        "frame_skip": 5,
                        "viewer": "None",
                        "observation_space": {
                          "dtype": "dtype('float64')",
                          "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                          "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                          "_shape": [
                            11
                          ],
                          "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                          "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                          "low_repr": "-inf",
                          "high_repr": "inf",
                          "_np_random": "None",
                          "$type": "gym.spaces.box.Box"
                        },
                        "action_space": {
                          "dtype": "dtype('float32')",
                          "bounded_below": "array([ True])",
                          "bounded_above": "array([ True])",
                          "_shape": [
                            1
                          ],
                          "low": "array([-1.], dtype=float32)",
                          "high": "array([1.], dtype=float32)",
                          "low_repr": "-1.0",
                          "high_repr": "1.0",
                          "_np_random": "None",
                          "$type": "gym.spaces.box.Box"
                        },
                        "render_mode": "None",
                        "renderer": {
                          "no_returns_render": [
                            "human"
                          ],
                          "single_render": [
                            "single_rgb_array",
                            "single_depth_array",
                            "single_state_pixels"
                          ],
                          "mode": "None",
                          "render": {
                            "$type": "functools.partial"
                          },
                          "render_list": [],
                          "$type": "gym.utils.renderer.Renderer"
                        },
                        "_ezpickle_args": [],
                        "_ezpickle_kwargs": {},
                        "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                      },
                      "_action_space": "None",
                      "_observation_space": "None",
                      "_reward_range": "None",
                      "_metadata": "None",
                      "new_step_api": true,
                      "checked_reset": false,
                      "checked_step": false,
                      "checked_render": false,
                      "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                    },
                    "_action_space": "None",
                    "_observation_space": "None",
                    "_reward_range": "None",
                    "_metadata": "None",
                    "new_step_api": false,
                    "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "_has_reset": false,
                  "_disable_render_order_enforcing": false,
                  "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "_max_episode_steps": 1000,
                "_elapsed_steps": "None",
                "$type": "gym.wrappers.time_limit.TimeLimit"
              },
              "_max_episode_length": 1000,
              "_render_modes": [
                "human",
                "rgb_array",
                "depth_array",
                "single_rgb_array",
                "single_depth_array"
              ],
              "_step_cnt": "None",
              "_visualize": false,
              "_action_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_observation_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_spec": {
                "max_episode_length": 1000,
                "input_space": {
                  "dtype": "dtype('float32')",
                  "bounded_below": "array([ True])",
                  "bounded_above": "array([ True])",
                  "_shape": [
                    1
                  ],
                  "low": "array([-1.], dtype=float32)",
                  "high": "array([1.], dtype=float32)",
                  "low_repr": "-1.0",
                  "high_repr": "1.0",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "output_space": {
                  "dtype": "dtype('float32')",
                  "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                  "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                  "_shape": [
                    11
                  ],
                  "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                  "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                  "low_repr": "-inf",
                  "high_repr": "inf",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "$type": "garage._environment.EnvSpec"
              },
              "_env_info": "None",
              "$type": "garage.envs.gym_env.GymEnv"
            },
            "_scale_reward": 1.0,
            "_normalize_obs": false,
            "_normalize_reward": false,
            "_expected_action_scale": 1.0,
            "_flatten_obs": true,
            "_obs_alpha": 0.001,
            "_obs_mean": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
            "_obs_var": "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])",
            "_reward_alpha": 0.001,
            "_reward_mean": 0.0,
            "_reward_var": 1.0,
            "$type": "garage.envs.normalized_env.NormalizedEnv"
          },
          "_env_steps": [],
          "_observations": [],
          "_last_observations": [],
          "_agent_infos": {},
          "_lengths": [],
          "_prev_obs": "None",
          "_eps_length": 0,
          "_episode_infos": {},
          "$type": "garage.sampler.default_worker.DefaultWorker"
        },
        {
          "_seed": "None",
          "_max_episode_length": 500,
          "_worker_number": 21,
          "agent": {
            "training": true,
            "_parameters": {},
            "_buffers": {},
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_module": {
                "training": true,
                "_parameters": {
                  "_init_std": {
                    "$type": "torch.nn.parameter.Parameter"
                  }
                },
                "_buffers": {
                  "min_std_param": {
                    "$type": "torch.Tensor"
                  }
                },
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_mean_module": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "_layers": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "0": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 11.0,
                                "out_features": 32,
                                "$type": "torch.nn.modules.linear.Linear"
                              },
                              "non_linearity": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                                "$type": "garage.torch._functions.NonLinearity"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          },
                          "1": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 32,
                                "out_features": 32,
                                "$type": "torch.nn.modules.linear.Linear"
                              },
                              "non_linearity": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                                "$type": "garage.torch._functions.NonLinearity"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          }
                        },
                        "$type": "torch.nn.modules.container.ModuleList"
                      },
                      "_output_layers": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "0": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 32,
                                "out_features": 1.0,
                                "$type": "torch.nn.modules.linear.Linear"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          }
                        },
                        "$type": "torch.nn.modules.container.ModuleList"
                      }
                    },
                    "_output_dim": 1.0,
                    "$type": "garage.torch.modules.mlp_module.MLPModule"
                  }
                },
                "_input_dim": 11.0,
                "_hidden_sizes": [
                  32,
                  32
                ],
                "_action_dim": 1.0,
                "_learn_std": true,
                "_std_hidden_sizes": [
                  32,
                  32
                ],
                "_min_std": 1e-06,
                "_max_std": "None",
                "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
                "_std_hidden_w_init": {
                  "$type": "builtins.function"
                },
                "_std_hidden_b_init": {
                  "$type": "builtins.function"
                },
                "_std_output_nonlinearity": "None",
                "_std_output_w_init": {
                  "$type": "builtins.function"
                },
                "_std_parameterization": "exp",
                "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
                "_hidden_w_init": {
                  "$type": "builtins.function"
                },
                "_hidden_b_init": {
                  "$type": "builtins.function"
                },
                "_output_nonlinearity": "None",
                "_output_w_init": {
                  "$type": "builtins.function"
                },
                "_output_b_init": {
                  "$type": "builtins.function"
                },
                "_layer_normalization": false,
                "_norm_dist_class": {
                  "$typename": "torch.distributions.normal.Normal"
                },
                "_min_std_param": {
                  "$type": "torch.Tensor"
                },
                "_max_std_param": "None",
                "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
              }
            },
            "_env_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_name": "GaussianMLPPolicy",
            "_obs_dim": 11.0,
            "_action_dim": 1.0,
            "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
          },
          "env": {
            "_env": {
              "_env": {
                "env": {
                  "env": {
                    "env": {
                      "env": {
                        "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                        "model": "<mujoco._structs.MjModel object at 0x7f5aff56e130>",
                        "data": "<mujoco._structs.MjData object at 0x7f5aff56e2f0>",
                        "init_qpos": "array([0., 0., 0.])",
                        "init_qvel": "array([0., 0., 0.])",
                        "_viewers": {},
                        "frame_skip": 5,
                        "viewer": "None",
                        "observation_space": {
                          "dtype": "dtype('float64')",
                          "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                          "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                          "_shape": [
                            11
                          ],
                          "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                          "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                          "low_repr": "-inf",
                          "high_repr": "inf",
                          "_np_random": "None",
                          "$type": "gym.spaces.box.Box"
                        },
                        "action_space": {
                          "dtype": "dtype('float32')",
                          "bounded_below": "array([ True])",
                          "bounded_above": "array([ True])",
                          "_shape": [
                            1
                          ],
                          "low": "array([-1.], dtype=float32)",
                          "high": "array([1.], dtype=float32)",
                          "low_repr": "-1.0",
                          "high_repr": "1.0",
                          "_np_random": "None",
                          "$type": "gym.spaces.box.Box"
                        },
                        "render_mode": "None",
                        "renderer": {
                          "no_returns_render": [
                            "human"
                          ],
                          "single_render": [
                            "single_rgb_array",
                            "single_depth_array",
                            "single_state_pixels"
                          ],
                          "mode": "None",
                          "render": {
                            "$type": "functools.partial"
                          },
                          "render_list": [],
                          "$type": "gym.utils.renderer.Renderer"
                        },
                        "_ezpickle_args": [],
                        "_ezpickle_kwargs": {},
                        "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                      },
                      "_action_space": "None",
                      "_observation_space": "None",
                      "_reward_range": "None",
                      "_metadata": "None",
                      "new_step_api": true,
                      "checked_reset": false,
                      "checked_step": false,
                      "checked_render": false,
                      "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                    },
                    "_action_space": "None",
                    "_observation_space": "None",
                    "_reward_range": "None",
                    "_metadata": "None",
                    "new_step_api": false,
                    "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "_has_reset": false,
                  "_disable_render_order_enforcing": false,
                  "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "_max_episode_steps": 1000,
                "_elapsed_steps": "None",
                "$type": "gym.wrappers.time_limit.TimeLimit"
              },
              "_max_episode_length": 1000,
              "_render_modes": [
                "human",
                "rgb_array",
                "depth_array",
                "single_rgb_array",
                "single_depth_array"
              ],
              "_step_cnt": "None",
              "_visualize": false,
              "_action_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_observation_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_spec": {
                "max_episode_length": 1000,
                "input_space": {
                  "dtype": "dtype('float32')",
                  "bounded_below": "array([ True])",
                  "bounded_above": "array([ True])",
                  "_shape": [
                    1
                  ],
                  "low": "array([-1.], dtype=float32)",
                  "high": "array([1.], dtype=float32)",
                  "low_repr": "-1.0",
                  "high_repr": "1.0",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "output_space": {
                  "dtype": "dtype('float32')",
                  "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                  "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                  "_shape": [
                    11
                  ],
                  "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                  "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                  "low_repr": "-inf",
                  "high_repr": "inf",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "$type": "garage._environment.EnvSpec"
              },
              "_env_info": "None",
              "$type": "garage.envs.gym_env.GymEnv"
            },
            "_scale_reward": 1.0,
            "_normalize_obs": false,
            "_normalize_reward": false,
            "_expected_action_scale": 1.0,
            "_flatten_obs": true,
            "_obs_alpha": 0.001,
            "_obs_mean": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
            "_obs_var": "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])",
            "_reward_alpha": 0.001,
            "_reward_mean": 0.0,
            "_reward_var": 1.0,
            "$type": "garage.envs.normalized_env.NormalizedEnv"
          },
          "_env_steps": [],
          "_observations": [],
          "_last_observations": [],
          "_agent_infos": {},
          "_lengths": [],
          "_prev_obs": "None",
          "_eps_length": 0,
          "_episode_infos": {},
          "$type": "garage.sampler.default_worker.DefaultWorker"
        },
        {
          "_seed": "None",
          "_max_episode_length": 500,
          "_worker_number": 22,
          "agent": {
            "training": true,
            "_parameters": {},
            "_buffers": {},
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_module": {
                "training": true,
                "_parameters": {
                  "_init_std": {
                    "$type": "torch.nn.parameter.Parameter"
                  }
                },
                "_buffers": {
                  "min_std_param": {
                    "$type": "torch.Tensor"
                  }
                },
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_mean_module": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "_layers": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "0": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 11.0,
                                "out_features": 32,
                                "$type": "torch.nn.modules.linear.Linear"
                              },
                              "non_linearity": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                                "$type": "garage.torch._functions.NonLinearity"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          },
                          "1": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 32,
                                "out_features": 32,
                                "$type": "torch.nn.modules.linear.Linear"
                              },
                              "non_linearity": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                                "$type": "garage.torch._functions.NonLinearity"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          }
                        },
                        "$type": "torch.nn.modules.container.ModuleList"
                      },
                      "_output_layers": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "0": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 32,
                                "out_features": 1.0,
                                "$type": "torch.nn.modules.linear.Linear"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          }
                        },
                        "$type": "torch.nn.modules.container.ModuleList"
                      }
                    },
                    "_output_dim": 1.0,
                    "$type": "garage.torch.modules.mlp_module.MLPModule"
                  }
                },
                "_input_dim": 11.0,
                "_hidden_sizes": [
                  32,
                  32
                ],
                "_action_dim": 1.0,
                "_learn_std": true,
                "_std_hidden_sizes": [
                  32,
                  32
                ],
                "_min_std": 1e-06,
                "_max_std": "None",
                "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
                "_std_hidden_w_init": {
                  "$type": "builtins.function"
                },
                "_std_hidden_b_init": {
                  "$type": "builtins.function"
                },
                "_std_output_nonlinearity": "None",
                "_std_output_w_init": {
                  "$type": "builtins.function"
                },
                "_std_parameterization": "exp",
                "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
                "_hidden_w_init": {
                  "$type": "builtins.function"
                },
                "_hidden_b_init": {
                  "$type": "builtins.function"
                },
                "_output_nonlinearity": "None",
                "_output_w_init": {
                  "$type": "builtins.function"
                },
                "_output_b_init": {
                  "$type": "builtins.function"
                },
                "_layer_normalization": false,
                "_norm_dist_class": {
                  "$typename": "torch.distributions.normal.Normal"
                },
                "_min_std_param": {
                  "$type": "torch.Tensor"
                },
                "_max_std_param": "None",
                "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
              }
            },
            "_env_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_name": "GaussianMLPPolicy",
            "_obs_dim": 11.0,
            "_action_dim": 1.0,
            "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
          },
          "env": {
            "_env": {
              "_env": {
                "env": {
                  "env": {
                    "env": {
                      "env": {
                        "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                        "model": "<mujoco._structs.MjModel object at 0x7f5aff61fbb0>",
                        "data": "<mujoco._structs.MjData object at 0x7f5aff61f6b0>",
                        "init_qpos": "array([0., 0., 0.])",
                        "init_qvel": "array([0., 0., 0.])",
                        "_viewers": {},
                        "frame_skip": 5,
                        "viewer": "None",
                        "observation_space": {
                          "dtype": "dtype('float64')",
                          "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                          "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                          "_shape": [
                            11
                          ],
                          "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                          "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                          "low_repr": "-inf",
                          "high_repr": "inf",
                          "_np_random": "None",
                          "$type": "gym.spaces.box.Box"
                        },
                        "action_space": {
                          "dtype": "dtype('float32')",
                          "bounded_below": "array([ True])",
                          "bounded_above": "array([ True])",
                          "_shape": [
                            1
                          ],
                          "low": "array([-1.], dtype=float32)",
                          "high": "array([1.], dtype=float32)",
                          "low_repr": "-1.0",
                          "high_repr": "1.0",
                          "_np_random": "None",
                          "$type": "gym.spaces.box.Box"
                        },
                        "render_mode": "None",
                        "renderer": {
                          "no_returns_render": [
                            "human"
                          ],
                          "single_render": [
                            "single_rgb_array",
                            "single_depth_array",
                            "single_state_pixels"
                          ],
                          "mode": "None",
                          "render": {
                            "$type": "functools.partial"
                          },
                          "render_list": [],
                          "$type": "gym.utils.renderer.Renderer"
                        },
                        "_ezpickle_args": [],
                        "_ezpickle_kwargs": {},
                        "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                      },
                      "_action_space": "None",
                      "_observation_space": "None",
                      "_reward_range": "None",
                      "_metadata": "None",
                      "new_step_api": true,
                      "checked_reset": false,
                      "checked_step": false,
                      "checked_render": false,
                      "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                    },
                    "_action_space": "None",
                    "_observation_space": "None",
                    "_reward_range": "None",
                    "_metadata": "None",
                    "new_step_api": false,
                    "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "_has_reset": false,
                  "_disable_render_order_enforcing": false,
                  "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "_max_episode_steps": 1000,
                "_elapsed_steps": "None",
                "$type": "gym.wrappers.time_limit.TimeLimit"
              },
              "_max_episode_length": 1000,
              "_render_modes": [
                "human",
                "rgb_array",
                "depth_array",
                "single_rgb_array",
                "single_depth_array"
              ],
              "_step_cnt": "None",
              "_visualize": false,
              "_action_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_observation_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_spec": {
                "max_episode_length": 1000,
                "input_space": {
                  "dtype": "dtype('float32')",
                  "bounded_below": "array([ True])",
                  "bounded_above": "array([ True])",
                  "_shape": [
                    1
                  ],
                  "low": "array([-1.], dtype=float32)",
                  "high": "array([1.], dtype=float32)",
                  "low_repr": "-1.0",
                  "high_repr": "1.0",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "output_space": {
                  "dtype": "dtype('float32')",
                  "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                  "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                  "_shape": [
                    11
                  ],
                  "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                  "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                  "low_repr": "-inf",
                  "high_repr": "inf",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "$type": "garage._environment.EnvSpec"
              },
              "_env_info": "None",
              "$type": "garage.envs.gym_env.GymEnv"
            },
            "_scale_reward": 1.0,
            "_normalize_obs": false,
            "_normalize_reward": false,
            "_expected_action_scale": 1.0,
            "_flatten_obs": true,
            "_obs_alpha": 0.001,
            "_obs_mean": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
            "_obs_var": "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])",
            "_reward_alpha": 0.001,
            "_reward_mean": 0.0,
            "_reward_var": 1.0,
            "$type": "garage.envs.normalized_env.NormalizedEnv"
          },
          "_env_steps": [],
          "_observations": [],
          "_last_observations": [],
          "_agent_infos": {},
          "_lengths": [],
          "_prev_obs": "None",
          "_eps_length": 0,
          "_episode_infos": {},
          "$type": "garage.sampler.default_worker.DefaultWorker"
        },
        {
          "_seed": "None",
          "_max_episode_length": 500,
          "_worker_number": 23,
          "agent": {
            "training": true,
            "_parameters": {},
            "_buffers": {},
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_module": {
                "training": true,
                "_parameters": {
                  "_init_std": {
                    "$type": "torch.nn.parameter.Parameter"
                  }
                },
                "_buffers": {
                  "min_std_param": {
                    "$type": "torch.Tensor"
                  }
                },
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_mean_module": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "_layers": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "0": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 11.0,
                                "out_features": 32,
                                "$type": "torch.nn.modules.linear.Linear"
                              },
                              "non_linearity": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                                "$type": "garage.torch._functions.NonLinearity"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          },
                          "1": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 32,
                                "out_features": 32,
                                "$type": "torch.nn.modules.linear.Linear"
                              },
                              "non_linearity": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                                "$type": "garage.torch._functions.NonLinearity"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          }
                        },
                        "$type": "torch.nn.modules.container.ModuleList"
                      },
                      "_output_layers": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "0": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 32,
                                "out_features": 1.0,
                                "$type": "torch.nn.modules.linear.Linear"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          }
                        },
                        "$type": "torch.nn.modules.container.ModuleList"
                      }
                    },
                    "_output_dim": 1.0,
                    "$type": "garage.torch.modules.mlp_module.MLPModule"
                  }
                },
                "_input_dim": 11.0,
                "_hidden_sizes": [
                  32,
                  32
                ],
                "_action_dim": 1.0,
                "_learn_std": true,
                "_std_hidden_sizes": [
                  32,
                  32
                ],
                "_min_std": 1e-06,
                "_max_std": "None",
                "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
                "_std_hidden_w_init": {
                  "$type": "builtins.function"
                },
                "_std_hidden_b_init": {
                  "$type": "builtins.function"
                },
                "_std_output_nonlinearity": "None",
                "_std_output_w_init": {
                  "$type": "builtins.function"
                },
                "_std_parameterization": "exp",
                "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
                "_hidden_w_init": {
                  "$type": "builtins.function"
                },
                "_hidden_b_init": {
                  "$type": "builtins.function"
                },
                "_output_nonlinearity": "None",
                "_output_w_init": {
                  "$type": "builtins.function"
                },
                "_output_b_init": {
                  "$type": "builtins.function"
                },
                "_layer_normalization": false,
                "_norm_dist_class": {
                  "$typename": "torch.distributions.normal.Normal"
                },
                "_min_std_param": {
                  "$type": "torch.Tensor"
                },
                "_max_std_param": "None",
                "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
              }
            },
            "_env_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_name": "GaussianMLPPolicy",
            "_obs_dim": 11.0,
            "_action_dim": 1.0,
            "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
          },
          "env": {
            "_env": {
              "_env": {
                "env": {
                  "env": {
                    "env": {
                      "env": {
                        "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                        "model": "<mujoco._structs.MjModel object at 0x7f5aff6cc3b0>",
                        "data": "<mujoco._structs.MjData object at 0x7f5aff6cc5f0>",
                        "init_qpos": "array([0., 0., 0.])",
                        "init_qvel": "array([0., 0., 0.])",
                        "_viewers": {},
                        "frame_skip": 5,
                        "viewer": "None",
                        "observation_space": {
                          "dtype": "dtype('float64')",
                          "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                          "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                          "_shape": [
                            11
                          ],
                          "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                          "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                          "low_repr": "-inf",
                          "high_repr": "inf",
                          "_np_random": "None",
                          "$type": "gym.spaces.box.Box"
                        },
                        "action_space": {
                          "dtype": "dtype('float32')",
                          "bounded_below": "array([ True])",
                          "bounded_above": "array([ True])",
                          "_shape": [
                            1
                          ],
                          "low": "array([-1.], dtype=float32)",
                          "high": "array([1.], dtype=float32)",
                          "low_repr": "-1.0",
                          "high_repr": "1.0",
                          "_np_random": "None",
                          "$type": "gym.spaces.box.Box"
                        },
                        "render_mode": "None",
                        "renderer": {
                          "no_returns_render": [
                            "human"
                          ],
                          "single_render": [
                            "single_rgb_array",
                            "single_depth_array",
                            "single_state_pixels"
                          ],
                          "mode": "None",
                          "render": {
                            "$type": "functools.partial"
                          },
                          "render_list": [],
                          "$type": "gym.utils.renderer.Renderer"
                        },
                        "_ezpickle_args": [],
                        "_ezpickle_kwargs": {},
                        "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                      },
                      "_action_space": "None",
                      "_observation_space": "None",
                      "_reward_range": "None",
                      "_metadata": "None",
                      "new_step_api": true,
                      "checked_reset": false,
                      "checked_step": false,
                      "checked_render": false,
                      "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                    },
                    "_action_space": "None",
                    "_observation_space": "None",
                    "_reward_range": "None",
                    "_metadata": "None",
                    "new_step_api": false,
                    "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "_has_reset": false,
                  "_disable_render_order_enforcing": false,
                  "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "_max_episode_steps": 1000,
                "_elapsed_steps": "None",
                "$type": "gym.wrappers.time_limit.TimeLimit"
              },
              "_max_episode_length": 1000,
              "_render_modes": [
                "human",
                "rgb_array",
                "depth_array",
                "single_rgb_array",
                "single_depth_array"
              ],
              "_step_cnt": "None",
              "_visualize": false,
              "_action_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_observation_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_spec": {
                "max_episode_length": 1000,
                "input_space": {
                  "dtype": "dtype('float32')",
                  "bounded_below": "array([ True])",
                  "bounded_above": "array([ True])",
                  "_shape": [
                    1
                  ],
                  "low": "array([-1.], dtype=float32)",
                  "high": "array([1.], dtype=float32)",
                  "low_repr": "-1.0",
                  "high_repr": "1.0",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "output_space": {
                  "dtype": "dtype('float32')",
                  "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                  "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                  "_shape": [
                    11
                  ],
                  "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                  "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                  "low_repr": "-inf",
                  "high_repr": "inf",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "$type": "garage._environment.EnvSpec"
              },
              "_env_info": "None",
              "$type": "garage.envs.gym_env.GymEnv"
            },
            "_scale_reward": 1.0,
            "_normalize_obs": false,
            "_normalize_reward": false,
            "_expected_action_scale": 1.0,
            "_flatten_obs": true,
            "_obs_alpha": 0.001,
            "_obs_mean": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
            "_obs_var": "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])",
            "_reward_alpha": 0.001,
            "_reward_mean": 0.0,
            "_reward_var": 1.0,
            "$type": "garage.envs.normalized_env.NormalizedEnv"
          },
          "_env_steps": [],
          "_observations": [],
          "_last_observations": [],
          "_agent_infos": {},
          "_lengths": [],
          "_prev_obs": "None",
          "_eps_length": 0,
          "_episode_infos": {},
          "$type": "garage.sampler.default_worker.DefaultWorker"
        },
        {
          "_seed": "None",
          "_max_episode_length": 500,
          "_worker_number": 24,
          "agent": {
            "training": true,
            "_parameters": {},
            "_buffers": {},
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_module": {
                "training": true,
                "_parameters": {
                  "_init_std": {
                    "$type": "torch.nn.parameter.Parameter"
                  }
                },
                "_buffers": {
                  "min_std_param": {
                    "$type": "torch.Tensor"
                  }
                },
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_mean_module": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "_layers": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "0": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 11.0,
                                "out_features": 32,
                                "$type": "torch.nn.modules.linear.Linear"
                              },
                              "non_linearity": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                                "$type": "garage.torch._functions.NonLinearity"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          },
                          "1": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 32,
                                "out_features": 32,
                                "$type": "torch.nn.modules.linear.Linear"
                              },
                              "non_linearity": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                                "$type": "garage.torch._functions.NonLinearity"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          }
                        },
                        "$type": "torch.nn.modules.container.ModuleList"
                      },
                      "_output_layers": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "0": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 32,
                                "out_features": 1.0,
                                "$type": "torch.nn.modules.linear.Linear"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          }
                        },
                        "$type": "torch.nn.modules.container.ModuleList"
                      }
                    },
                    "_output_dim": 1.0,
                    "$type": "garage.torch.modules.mlp_module.MLPModule"
                  }
                },
                "_input_dim": 11.0,
                "_hidden_sizes": [
                  32,
                  32
                ],
                "_action_dim": 1.0,
                "_learn_std": true,
                "_std_hidden_sizes": [
                  32,
                  32
                ],
                "_min_std": 1e-06,
                "_max_std": "None",
                "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
                "_std_hidden_w_init": {
                  "$type": "builtins.function"
                },
                "_std_hidden_b_init": {
                  "$type": "builtins.function"
                },
                "_std_output_nonlinearity": "None",
                "_std_output_w_init": {
                  "$type": "builtins.function"
                },
                "_std_parameterization": "exp",
                "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
                "_hidden_w_init": {
                  "$type": "builtins.function"
                },
                "_hidden_b_init": {
                  "$type": "builtins.function"
                },
                "_output_nonlinearity": "None",
                "_output_w_init": {
                  "$type": "builtins.function"
                },
                "_output_b_init": {
                  "$type": "builtins.function"
                },
                "_layer_normalization": false,
                "_norm_dist_class": {
                  "$typename": "torch.distributions.normal.Normal"
                },
                "_min_std_param": {
                  "$type": "torch.Tensor"
                },
                "_max_std_param": "None",
                "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
              }
            },
            "_env_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_name": "GaussianMLPPolicy",
            "_obs_dim": 11.0,
            "_action_dim": 1.0,
            "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
          },
          "env": {
            "_env": {
              "_env": {
                "env": {
                  "env": {
                    "env": {
                      "env": {
                        "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                        "model": "<mujoco._structs.MjModel object at 0x7f5aff5771f0>",
                        "data": "<mujoco._structs.MjData object at 0x7f5aff577230>",
                        "init_qpos": "array([0., 0., 0.])",
                        "init_qvel": "array([0., 0., 0.])",
                        "_viewers": {},
                        "frame_skip": 5,
                        "viewer": "None",
                        "observation_space": {
                          "dtype": "dtype('float64')",
                          "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                          "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                          "_shape": [
                            11
                          ],
                          "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                          "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                          "low_repr": "-inf",
                          "high_repr": "inf",
                          "_np_random": "None",
                          "$type": "gym.spaces.box.Box"
                        },
                        "action_space": {
                          "dtype": "dtype('float32')",
                          "bounded_below": "array([ True])",
                          "bounded_above": "array([ True])",
                          "_shape": [
                            1
                          ],
                          "low": "array([-1.], dtype=float32)",
                          "high": "array([1.], dtype=float32)",
                          "low_repr": "-1.0",
                          "high_repr": "1.0",
                          "_np_random": "None",
                          "$type": "gym.spaces.box.Box"
                        },
                        "render_mode": "None",
                        "renderer": {
                          "no_returns_render": [
                            "human"
                          ],
                          "single_render": [
                            "single_rgb_array",
                            "single_depth_array",
                            "single_state_pixels"
                          ],
                          "mode": "None",
                          "render": {
                            "$type": "functools.partial"
                          },
                          "render_list": [],
                          "$type": "gym.utils.renderer.Renderer"
                        },
                        "_ezpickle_args": [],
                        "_ezpickle_kwargs": {},
                        "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                      },
                      "_action_space": "None",
                      "_observation_space": "None",
                      "_reward_range": "None",
                      "_metadata": "None",
                      "new_step_api": true,
                      "checked_reset": false,
                      "checked_step": false,
                      "checked_render": false,
                      "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                    },
                    "_action_space": "None",
                    "_observation_space": "None",
                    "_reward_range": "None",
                    "_metadata": "None",
                    "new_step_api": false,
                    "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "_has_reset": false,
                  "_disable_render_order_enforcing": false,
                  "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "_max_episode_steps": 1000,
                "_elapsed_steps": "None",
                "$type": "gym.wrappers.time_limit.TimeLimit"
              },
              "_max_episode_length": 1000,
              "_render_modes": [
                "human",
                "rgb_array",
                "depth_array",
                "single_rgb_array",
                "single_depth_array"
              ],
              "_step_cnt": "None",
              "_visualize": false,
              "_action_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_observation_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_spec": {
                "max_episode_length": 1000,
                "input_space": {
                  "dtype": "dtype('float32')",
                  "bounded_below": "array([ True])",
                  "bounded_above": "array([ True])",
                  "_shape": [
                    1
                  ],
                  "low": "array([-1.], dtype=float32)",
                  "high": "array([1.], dtype=float32)",
                  "low_repr": "-1.0",
                  "high_repr": "1.0",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "output_space": {
                  "dtype": "dtype('float32')",
                  "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                  "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                  "_shape": [
                    11
                  ],
                  "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                  "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                  "low_repr": "-inf",
                  "high_repr": "inf",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "$type": "garage._environment.EnvSpec"
              },
              "_env_info": "None",
              "$type": "garage.envs.gym_env.GymEnv"
            },
            "_scale_reward": 1.0,
            "_normalize_obs": false,
            "_normalize_reward": false,
            "_expected_action_scale": 1.0,
            "_flatten_obs": true,
            "_obs_alpha": 0.001,
            "_obs_mean": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
            "_obs_var": "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])",
            "_reward_alpha": 0.001,
            "_reward_mean": 0.0,
            "_reward_var": 1.0,
            "$type": "garage.envs.normalized_env.NormalizedEnv"
          },
          "_env_steps": [],
          "_observations": [],
          "_last_observations": [],
          "_agent_infos": {},
          "_lengths": [],
          "_prev_obs": "None",
          "_eps_length": 0,
          "_episode_infos": {},
          "$type": "garage.sampler.default_worker.DefaultWorker"
        },
        {
          "_seed": "None",
          "_max_episode_length": 500,
          "_worker_number": 25,
          "agent": {
            "training": true,
            "_parameters": {},
            "_buffers": {},
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_module": {
                "training": true,
                "_parameters": {
                  "_init_std": {
                    "$type": "torch.nn.parameter.Parameter"
                  }
                },
                "_buffers": {
                  "min_std_param": {
                    "$type": "torch.Tensor"
                  }
                },
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_mean_module": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "_layers": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "0": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 11.0,
                                "out_features": 32,
                                "$type": "torch.nn.modules.linear.Linear"
                              },
                              "non_linearity": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                                "$type": "garage.torch._functions.NonLinearity"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          },
                          "1": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 32,
                                "out_features": 32,
                                "$type": "torch.nn.modules.linear.Linear"
                              },
                              "non_linearity": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                                "$type": "garage.torch._functions.NonLinearity"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          }
                        },
                        "$type": "torch.nn.modules.container.ModuleList"
                      },
                      "_output_layers": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "0": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 32,
                                "out_features": 1.0,
                                "$type": "torch.nn.modules.linear.Linear"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          }
                        },
                        "$type": "torch.nn.modules.container.ModuleList"
                      }
                    },
                    "_output_dim": 1.0,
                    "$type": "garage.torch.modules.mlp_module.MLPModule"
                  }
                },
                "_input_dim": 11.0,
                "_hidden_sizes": [
                  32,
                  32
                ],
                "_action_dim": 1.0,
                "_learn_std": true,
                "_std_hidden_sizes": [
                  32,
                  32
                ],
                "_min_std": 1e-06,
                "_max_std": "None",
                "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
                "_std_hidden_w_init": {
                  "$type": "builtins.function"
                },
                "_std_hidden_b_init": {
                  "$type": "builtins.function"
                },
                "_std_output_nonlinearity": "None",
                "_std_output_w_init": {
                  "$type": "builtins.function"
                },
                "_std_parameterization": "exp",
                "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
                "_hidden_w_init": {
                  "$type": "builtins.function"
                },
                "_hidden_b_init": {
                  "$type": "builtins.function"
                },
                "_output_nonlinearity": "None",
                "_output_w_init": {
                  "$type": "builtins.function"
                },
                "_output_b_init": {
                  "$type": "builtins.function"
                },
                "_layer_normalization": false,
                "_norm_dist_class": {
                  "$typename": "torch.distributions.normal.Normal"
                },
                "_min_std_param": {
                  "$type": "torch.Tensor"
                },
                "_max_std_param": "None",
                "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
              }
            },
            "_env_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_name": "GaussianMLPPolicy",
            "_obs_dim": 11.0,
            "_action_dim": 1.0,
            "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
          },
          "env": {
            "_env": {
              "_env": {
                "env": {
                  "env": {
                    "env": {
                      "env": {
                        "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                        "model": "<mujoco._structs.MjModel object at 0x7f5aff577ab0>",
                        "data": "<mujoco._structs.MjData object at 0x7f5aff577af0>",
                        "init_qpos": "array([0., 0., 0.])",
                        "init_qvel": "array([0., 0., 0.])",
                        "_viewers": {},
                        "frame_skip": 5,
                        "viewer": "None",
                        "observation_space": {
                          "dtype": "dtype('float64')",
                          "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                          "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                          "_shape": [
                            11
                          ],
                          "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                          "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                          "low_repr": "-inf",
                          "high_repr": "inf",
                          "_np_random": "None",
                          "$type": "gym.spaces.box.Box"
                        },
                        "action_space": {
                          "dtype": "dtype('float32')",
                          "bounded_below": "array([ True])",
                          "bounded_above": "array([ True])",
                          "_shape": [
                            1
                          ],
                          "low": "array([-1.], dtype=float32)",
                          "high": "array([1.], dtype=float32)",
                          "low_repr": "-1.0",
                          "high_repr": "1.0",
                          "_np_random": "None",
                          "$type": "gym.spaces.box.Box"
                        },
                        "render_mode": "None",
                        "renderer": {
                          "no_returns_render": [
                            "human"
                          ],
                          "single_render": [
                            "single_rgb_array",
                            "single_depth_array",
                            "single_state_pixels"
                          ],
                          "mode": "None",
                          "render": {
                            "$type": "functools.partial"
                          },
                          "render_list": [],
                          "$type": "gym.utils.renderer.Renderer"
                        },
                        "_ezpickle_args": [],
                        "_ezpickle_kwargs": {},
                        "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                      },
                      "_action_space": "None",
                      "_observation_space": "None",
                      "_reward_range": "None",
                      "_metadata": "None",
                      "new_step_api": true,
                      "checked_reset": false,
                      "checked_step": false,
                      "checked_render": false,
                      "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                    },
                    "_action_space": "None",
                    "_observation_space": "None",
                    "_reward_range": "None",
                    "_metadata": "None",
                    "new_step_api": false,
                    "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "_has_reset": false,
                  "_disable_render_order_enforcing": false,
                  "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "_max_episode_steps": 1000,
                "_elapsed_steps": "None",
                "$type": "gym.wrappers.time_limit.TimeLimit"
              },
              "_max_episode_length": 1000,
              "_render_modes": [
                "human",
                "rgb_array",
                "depth_array",
                "single_rgb_array",
                "single_depth_array"
              ],
              "_step_cnt": "None",
              "_visualize": false,
              "_action_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_observation_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_spec": {
                "max_episode_length": 1000,
                "input_space": {
                  "dtype": "dtype('float32')",
                  "bounded_below": "array([ True])",
                  "bounded_above": "array([ True])",
                  "_shape": [
                    1
                  ],
                  "low": "array([-1.], dtype=float32)",
                  "high": "array([1.], dtype=float32)",
                  "low_repr": "-1.0",
                  "high_repr": "1.0",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "output_space": {
                  "dtype": "dtype('float32')",
                  "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                  "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                  "_shape": [
                    11
                  ],
                  "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                  "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                  "low_repr": "-inf",
                  "high_repr": "inf",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "$type": "garage._environment.EnvSpec"
              },
              "_env_info": "None",
              "$type": "garage.envs.gym_env.GymEnv"
            },
            "_scale_reward": 1.0,
            "_normalize_obs": false,
            "_normalize_reward": false,
            "_expected_action_scale": 1.0,
            "_flatten_obs": true,
            "_obs_alpha": 0.001,
            "_obs_mean": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
            "_obs_var": "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])",
            "_reward_alpha": 0.001,
            "_reward_mean": 0.0,
            "_reward_var": 1.0,
            "$type": "garage.envs.normalized_env.NormalizedEnv"
          },
          "_env_steps": [],
          "_observations": [],
          "_last_observations": [],
          "_agent_infos": {},
          "_lengths": [],
          "_prev_obs": "None",
          "_eps_length": 0,
          "_episode_infos": {},
          "$type": "garage.sampler.default_worker.DefaultWorker"
        },
        {
          "_seed": "None",
          "_max_episode_length": 500,
          "_worker_number": 26,
          "agent": {
            "training": true,
            "_parameters": {},
            "_buffers": {},
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_module": {
                "training": true,
                "_parameters": {
                  "_init_std": {
                    "$type": "torch.nn.parameter.Parameter"
                  }
                },
                "_buffers": {
                  "min_std_param": {
                    "$type": "torch.Tensor"
                  }
                },
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_mean_module": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "_layers": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "0": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 11.0,
                                "out_features": 32,
                                "$type": "torch.nn.modules.linear.Linear"
                              },
                              "non_linearity": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                                "$type": "garage.torch._functions.NonLinearity"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          },
                          "1": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 32,
                                "out_features": 32,
                                "$type": "torch.nn.modules.linear.Linear"
                              },
                              "non_linearity": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                                "$type": "garage.torch._functions.NonLinearity"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          }
                        },
                        "$type": "torch.nn.modules.container.ModuleList"
                      },
                      "_output_layers": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "0": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 32,
                                "out_features": 1.0,
                                "$type": "torch.nn.modules.linear.Linear"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          }
                        },
                        "$type": "torch.nn.modules.container.ModuleList"
                      }
                    },
                    "_output_dim": 1.0,
                    "$type": "garage.torch.modules.mlp_module.MLPModule"
                  }
                },
                "_input_dim": 11.0,
                "_hidden_sizes": [
                  32,
                  32
                ],
                "_action_dim": 1.0,
                "_learn_std": true,
                "_std_hidden_sizes": [
                  32,
                  32
                ],
                "_min_std": 1e-06,
                "_max_std": "None",
                "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
                "_std_hidden_w_init": {
                  "$type": "builtins.function"
                },
                "_std_hidden_b_init": {
                  "$type": "builtins.function"
                },
                "_std_output_nonlinearity": "None",
                "_std_output_w_init": {
                  "$type": "builtins.function"
                },
                "_std_parameterization": "exp",
                "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
                "_hidden_w_init": {
                  "$type": "builtins.function"
                },
                "_hidden_b_init": {
                  "$type": "builtins.function"
                },
                "_output_nonlinearity": "None",
                "_output_w_init": {
                  "$type": "builtins.function"
                },
                "_output_b_init": {
                  "$type": "builtins.function"
                },
                "_layer_normalization": false,
                "_norm_dist_class": {
                  "$typename": "torch.distributions.normal.Normal"
                },
                "_min_std_param": {
                  "$type": "torch.Tensor"
                },
                "_max_std_param": "None",
                "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
              }
            },
            "_env_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_name": "GaussianMLPPolicy",
            "_obs_dim": 11.0,
            "_action_dim": 1.0,
            "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
          },
          "env": {
            "_env": {
              "_env": {
                "env": {
                  "env": {
                    "env": {
                      "env": {
                        "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                        "model": "<mujoco._structs.MjModel object at 0x7f5aff621570>",
                        "data": "<mujoco._structs.MjData object at 0x7f5aff6215b0>",
                        "init_qpos": "array([0., 0., 0.])",
                        "init_qvel": "array([0., 0., 0.])",
                        "_viewers": {},
                        "frame_skip": 5,
                        "viewer": "None",
                        "observation_space": {
                          "dtype": "dtype('float64')",
                          "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                          "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                          "_shape": [
                            11
                          ],
                          "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                          "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                          "low_repr": "-inf",
                          "high_repr": "inf",
                          "_np_random": "None",
                          "$type": "gym.spaces.box.Box"
                        },
                        "action_space": {
                          "dtype": "dtype('float32')",
                          "bounded_below": "array([ True])",
                          "bounded_above": "array([ True])",
                          "_shape": [
                            1
                          ],
                          "low": "array([-1.], dtype=float32)",
                          "high": "array([1.], dtype=float32)",
                          "low_repr": "-1.0",
                          "high_repr": "1.0",
                          "_np_random": "None",
                          "$type": "gym.spaces.box.Box"
                        },
                        "render_mode": "None",
                        "renderer": {
                          "no_returns_render": [
                            "human"
                          ],
                          "single_render": [
                            "single_rgb_array",
                            "single_depth_array",
                            "single_state_pixels"
                          ],
                          "mode": "None",
                          "render": {
                            "$type": "functools.partial"
                          },
                          "render_list": [],
                          "$type": "gym.utils.renderer.Renderer"
                        },
                        "_ezpickle_args": [],
                        "_ezpickle_kwargs": {},
                        "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                      },
                      "_action_space": "None",
                      "_observation_space": "None",
                      "_reward_range": "None",
                      "_metadata": "None",
                      "new_step_api": true,
                      "checked_reset": false,
                      "checked_step": false,
                      "checked_render": false,
                      "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                    },
                    "_action_space": "None",
                    "_observation_space": "None",
                    "_reward_range": "None",
                    "_metadata": "None",
                    "new_step_api": false,
                    "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "_has_reset": false,
                  "_disable_render_order_enforcing": false,
                  "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "_max_episode_steps": 1000,
                "_elapsed_steps": "None",
                "$type": "gym.wrappers.time_limit.TimeLimit"
              },
              "_max_episode_length": 1000,
              "_render_modes": [
                "human",
                "rgb_array",
                "depth_array",
                "single_rgb_array",
                "single_depth_array"
              ],
              "_step_cnt": "None",
              "_visualize": false,
              "_action_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_observation_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_spec": {
                "max_episode_length": 1000,
                "input_space": {
                  "dtype": "dtype('float32')",
                  "bounded_below": "array([ True])",
                  "bounded_above": "array([ True])",
                  "_shape": [
                    1
                  ],
                  "low": "array([-1.], dtype=float32)",
                  "high": "array([1.], dtype=float32)",
                  "low_repr": "-1.0",
                  "high_repr": "1.0",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "output_space": {
                  "dtype": "dtype('float32')",
                  "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                  "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                  "_shape": [
                    11
                  ],
                  "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                  "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                  "low_repr": "-inf",
                  "high_repr": "inf",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "$type": "garage._environment.EnvSpec"
              },
              "_env_info": "None",
              "$type": "garage.envs.gym_env.GymEnv"
            },
            "_scale_reward": 1.0,
            "_normalize_obs": false,
            "_normalize_reward": false,
            "_expected_action_scale": 1.0,
            "_flatten_obs": true,
            "_obs_alpha": 0.001,
            "_obs_mean": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
            "_obs_var": "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])",
            "_reward_alpha": 0.001,
            "_reward_mean": 0.0,
            "_reward_var": 1.0,
            "$type": "garage.envs.normalized_env.NormalizedEnv"
          },
          "_env_steps": [],
          "_observations": [],
          "_last_observations": [],
          "_agent_infos": {},
          "_lengths": [],
          "_prev_obs": "None",
          "_eps_length": 0,
          "_episode_infos": {},
          "$type": "garage.sampler.default_worker.DefaultWorker"
        },
        {
          "_seed": "None",
          "_max_episode_length": 500,
          "_worker_number": 27,
          "agent": {
            "training": true,
            "_parameters": {},
            "_buffers": {},
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_module": {
                "training": true,
                "_parameters": {
                  "_init_std": {
                    "$type": "torch.nn.parameter.Parameter"
                  }
                },
                "_buffers": {
                  "min_std_param": {
                    "$type": "torch.Tensor"
                  }
                },
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_mean_module": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "_layers": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "0": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 11.0,
                                "out_features": 32,
                                "$type": "torch.nn.modules.linear.Linear"
                              },
                              "non_linearity": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                                "$type": "garage.torch._functions.NonLinearity"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          },
                          "1": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 32,
                                "out_features": 32,
                                "$type": "torch.nn.modules.linear.Linear"
                              },
                              "non_linearity": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                                "$type": "garage.torch._functions.NonLinearity"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          }
                        },
                        "$type": "torch.nn.modules.container.ModuleList"
                      },
                      "_output_layers": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "0": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 32,
                                "out_features": 1.0,
                                "$type": "torch.nn.modules.linear.Linear"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          }
                        },
                        "$type": "torch.nn.modules.container.ModuleList"
                      }
                    },
                    "_output_dim": 1.0,
                    "$type": "garage.torch.modules.mlp_module.MLPModule"
                  }
                },
                "_input_dim": 11.0,
                "_hidden_sizes": [
                  32,
                  32
                ],
                "_action_dim": 1.0,
                "_learn_std": true,
                "_std_hidden_sizes": [
                  32,
                  32
                ],
                "_min_std": 1e-06,
                "_max_std": "None",
                "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
                "_std_hidden_w_init": {
                  "$type": "builtins.function"
                },
                "_std_hidden_b_init": {
                  "$type": "builtins.function"
                },
                "_std_output_nonlinearity": "None",
                "_std_output_w_init": {
                  "$type": "builtins.function"
                },
                "_std_parameterization": "exp",
                "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
                "_hidden_w_init": {
                  "$type": "builtins.function"
                },
                "_hidden_b_init": {
                  "$type": "builtins.function"
                },
                "_output_nonlinearity": "None",
                "_output_w_init": {
                  "$type": "builtins.function"
                },
                "_output_b_init": {
                  "$type": "builtins.function"
                },
                "_layer_normalization": false,
                "_norm_dist_class": {
                  "$typename": "torch.distributions.normal.Normal"
                },
                "_min_std_param": {
                  "$type": "torch.Tensor"
                },
                "_max_std_param": "None",
                "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
              }
            },
            "_env_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_name": "GaussianMLPPolicy",
            "_obs_dim": 11.0,
            "_action_dim": 1.0,
            "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
          },
          "env": {
            "_env": {
              "_env": {
                "env": {
                  "env": {
                    "env": {
                      "env": {
                        "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                        "model": "<mujoco._structs.MjModel object at 0x7f5aff4f50b0>",
                        "data": "<mujoco._structs.MjData object at 0x7f5aff4f50f0>",
                        "init_qpos": "array([0., 0., 0.])",
                        "init_qvel": "array([0., 0., 0.])",
                        "_viewers": {},
                        "frame_skip": 5,
                        "viewer": "None",
                        "observation_space": {
                          "dtype": "dtype('float64')",
                          "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                          "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                          "_shape": [
                            11
                          ],
                          "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                          "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                          "low_repr": "-inf",
                          "high_repr": "inf",
                          "_np_random": "None",
                          "$type": "gym.spaces.box.Box"
                        },
                        "action_space": {
                          "dtype": "dtype('float32')",
                          "bounded_below": "array([ True])",
                          "bounded_above": "array([ True])",
                          "_shape": [
                            1
                          ],
                          "low": "array([-1.], dtype=float32)",
                          "high": "array([1.], dtype=float32)",
                          "low_repr": "-1.0",
                          "high_repr": "1.0",
                          "_np_random": "None",
                          "$type": "gym.spaces.box.Box"
                        },
                        "render_mode": "None",
                        "renderer": {
                          "no_returns_render": [
                            "human"
                          ],
                          "single_render": [
                            "single_rgb_array",
                            "single_depth_array",
                            "single_state_pixels"
                          ],
                          "mode": "None",
                          "render": {
                            "$type": "functools.partial"
                          },
                          "render_list": [],
                          "$type": "gym.utils.renderer.Renderer"
                        },
                        "_ezpickle_args": [],
                        "_ezpickle_kwargs": {},
                        "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                      },
                      "_action_space": "None",
                      "_observation_space": "None",
                      "_reward_range": "None",
                      "_metadata": "None",
                      "new_step_api": true,
                      "checked_reset": false,
                      "checked_step": false,
                      "checked_render": false,
                      "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                    },
                    "_action_space": "None",
                    "_observation_space": "None",
                    "_reward_range": "None",
                    "_metadata": "None",
                    "new_step_api": false,
                    "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "_has_reset": false,
                  "_disable_render_order_enforcing": false,
                  "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "_max_episode_steps": 1000,
                "_elapsed_steps": "None",
                "$type": "gym.wrappers.time_limit.TimeLimit"
              },
              "_max_episode_length": 1000,
              "_render_modes": [
                "human",
                "rgb_array",
                "depth_array",
                "single_rgb_array",
                "single_depth_array"
              ],
              "_step_cnt": "None",
              "_visualize": false,
              "_action_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_observation_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "_spec": {
                "max_episode_length": 1000,
                "input_space": {
                  "dtype": "dtype('float32')",
                  "bounded_below": "array([ True])",
                  "bounded_above": "array([ True])",
                  "_shape": [
                    1
                  ],
                  "low": "array([-1.], dtype=float32)",
                  "high": "array([1.], dtype=float32)",
                  "low_repr": "-1.0",
                  "high_repr": "1.0",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "output_space": {
                  "dtype": "dtype('float32')",
                  "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                  "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                  "_shape": [
                    11
                  ],
                  "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                  "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                  "low_repr": "-inf",
                  "high_repr": "inf",
                  "_np_random": "None",
                  "$type": "akro.box.Box"
                },
                "$type": "garage._environment.EnvSpec"
              },
              "_env_info": "None",
              "$type": "garage.envs.gym_env.GymEnv"
            },
            "_scale_reward": 1.0,
            "_normalize_obs": false,
            "_normalize_reward": false,
            "_expected_action_scale": 1.0,
            "_flatten_obs": true,
            "_obs_alpha": 0.001,
            "_obs_mean": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
            "_obs_var": "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])",
            "_reward_alpha": 0.001,
            "_reward_mean": 0.0,
            "_reward_var": 1.0,
            "$type": "garage.envs.normalized_env.NormalizedEnv"
          },
          "_env_steps": [],
          "_observations": [],
          "_last_observations": [],
          "_agent_infos": {},
          "_lengths": [],
          "_prev_obs": "None",
          "_eps_length": 0,
          "_episode_infos": {},
          "$type": "garage.sampler.default_worker.DefaultWorker"
        }
      ],
      "total_env_steps": 0,
      "$type": "garage.sampler.local_sampler.LocalSampler"
    },
    "_discount": 0.99,
    "batch_size": 50000.0,
    "n_timestep": 10000000.0,
    "log_name": "log/adam_InvertedDoublePendulum-v4_bs_50000_nstep_10000000_0",
    "_policy_opt": {
      "defaults": {
        "lr": 0.001,
        "betas": [
          0.9,
          0.999
        ],
        "eps": 1e-08,
        "weight_decay": 0.0005,
        "amsgrad": false
      },
      "state": {},
      "param_groups": [
        {
          "params": [
            {
              "$type": "torch.nn.parameter.Parameter"
            },
            {
              "$type": "torch.nn.parameter.Parameter"
            },
            {
              "$type": "torch.nn.parameter.Parameter"
            },
            {
              "$type": "torch.nn.parameter.Parameter"
            },
            {
              "$type": "torch.nn.parameter.Parameter"
            },
            {
              "$type": "torch.nn.parameter.Parameter"
            },
            {
              "$type": "torch.nn.parameter.Parameter"
            }
          ],
          "lr": 0.001,
          "betas": [
            0.9,
            0.999
          ],
          "eps": 1e-08,
          "weight_decay": 0.0005,
          "amsgrad": false
        }
      ],
      "$type": "torch.optim.adam.Adam"
    },
    "$type": "__main__.VPG_opt"
  },
  "_env": {
    "_env": {
      "_env": {
        "env": {
          "env": {
            "env": {
              "env": {
                "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                "model": "<mujoco._structs.MjModel object at 0x7f5b041fc0f0>",
                "data": "<mujoco._structs.MjData object at 0x7f5b041c73f0>",
                "init_qpos": "array([0., 0., 0.])",
                "init_qvel": "array([0., 0., 0.])",
                "_viewers": {},
                "frame_skip": 5,
                "viewer": "None",
                "observation_space": {
                  "dtype": "dtype('float64')",
                  "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                  "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                  "_shape": [
                    11
                  ],
                  "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                  "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                  "low_repr": "-inf",
                  "high_repr": "inf",
                  "_np_random": "None",
                  "$type": "gym.spaces.box.Box"
                },
                "action_space": {
                  "dtype": "dtype('float32')",
                  "bounded_below": "array([ True])",
                  "bounded_above": "array([ True])",
                  "_shape": [
                    1
                  ],
                  "low": "array([-1.], dtype=float32)",
                  "high": "array([1.], dtype=float32)",
                  "low_repr": "-1.0",
                  "high_repr": "1.0",
                  "_np_random": "None",
                  "$type": "gym.spaces.box.Box"
                },
                "render_mode": "None",
                "renderer": {
                  "no_returns_render": [
                    "human"
                  ],
                  "single_render": [
                    "single_rgb_array",
                    "single_depth_array",
                    "single_state_pixels"
                  ],
                  "mode": "None",
                  "render": {
                    "$type": "functools.partial"
                  },
                  "render_list": [],
                  "$type": "gym.utils.renderer.Renderer"
                },
                "_ezpickle_args": [],
                "_ezpickle_kwargs": {},
                "spec": {
                  "id": "InvertedDoublePendulum-v4",
                  "entry_point": "gym.envs.mujoco.inverted_double_pendulum_v4:InvertedDoublePendulumEnv",
                  "reward_threshold": 9100.0,
                  "nondeterministic": false,
                  "max_episode_steps": 1000,
                  "order_enforce": true,
                  "autoreset": false,
                  "disable_env_checker": false,
                  "new_step_api": false,
                  "kwargs": {},
                  "namespace": "None",
                  "name": "InvertedDoublePendulum",
                  "version": 4,
                  "$type": "gym.envs.registration.EnvSpec"
                },
                "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": true,
              "checked_reset": false,
              "checked_step": false,
              "checked_render": false,
              "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": false,
            "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
          },
          "_action_space": "None",
          "_observation_space": "None",
          "_reward_range": "None",
          "_metadata": "None",
          "new_step_api": true,
          "_has_reset": false,
          "_disable_render_order_enforcing": false,
          "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
        },
        "_action_space": "None",
        "_observation_space": "None",
        "_reward_range": "None",
        "_metadata": "None",
        "new_step_api": false,
        "_max_episode_steps": 1000,
        "_elapsed_steps": "None",
        "$type": "gym.wrappers.time_limit.TimeLimit"
      },
      "_max_episode_length": 1000,
      "_render_modes": [
        "human",
        "rgb_array",
        "depth_array",
        "single_rgb_array",
        "single_depth_array"
      ],
      "_step_cnt": "None",
      "_visualize": false,
      "_action_space": {
        "dtype": "dtype('float32')",
        "bounded_below": "array([ True])",
        "bounded_above": "array([ True])",
        "_shape": [
          1
        ],
        "low": "array([-1.], dtype=float32)",
        "high": "array([1.], dtype=float32)",
        "low_repr": "-1.0",
        "high_repr": "1.0",
        "_np_random": "None",
        "$type": "akro.box.Box"
      },
      "_observation_space": {
        "dtype": "dtype('float32')",
        "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
        "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
        "_shape": [
          11
        ],
        "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
        "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
        "low_repr": "-inf",
        "high_repr": "inf",
        "_np_random": "None",
        "$type": "akro.box.Box"
      },
      "_spec": {
        "max_episode_length": 1000,
        "input_space": {
          "dtype": "dtype('float32')",
          "bounded_below": "array([ True])",
          "bounded_above": "array([ True])",
          "_shape": [
            1
          ],
          "low": "array([-1.], dtype=float32)",
          "high": "array([1.], dtype=float32)",
          "low_repr": "-1.0",
          "high_repr": "1.0",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "output_space": {
          "dtype": "dtype('float32')",
          "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
          "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
          "_shape": [
            11
          ],
          "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
          "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
          "low_repr": "-inf",
          "high_repr": "inf",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "$type": "garage._environment.EnvSpec"
      },
      "_env_info": "None",
      "$type": "garage.envs.gym_env.GymEnv"
    },
    "_scale_reward": 1.0,
    "_normalize_obs": false,
    "_normalize_reward": false,
    "_expected_action_scale": 1.0,
    "_flatten_obs": true,
    "_obs_alpha": 0.001,
    "_obs_mean": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
    "_obs_var": "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])",
    "_reward_alpha": 0.001,
    "_reward_mean": 0.0,
    "_reward_var": 1.0,
    "$type": "garage.envs.normalized_env.NormalizedEnv"
  },
  "_sampler": {
    "_factory": {
      "n_workers": 28,
      "_seed": "None",
      "_max_episode_length": 500,
      "_worker_class": {
        "$typename": "garage.sampler.default_worker.DefaultWorker"
      },
      "_worker_args": {},
      "$type": "garage.sampler.worker_factory.WorkerFactory"
    },
    "_agents": [
      {
        "training": true,
        "_parameters": {},
        "_buffers": {},
        "_non_persistent_buffers_set": [],
        "_backward_hooks": {},
        "_forward_hooks": {},
        "_forward_pre_hooks": {},
        "_state_dict_hooks": {},
        "_load_state_dict_pre_hooks": {},
        "_modules": {
          "_module": {
            "training": true,
            "_parameters": {
              "_init_std": {
                "$type": "torch.nn.parameter.Parameter"
              }
            },
            "_buffers": {
              "min_std_param": {
                "$type": "torch.Tensor"
              }
            },
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_mean_module": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 11.0,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      },
                      "1": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  },
                  "_output_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 1.0,
                            "$type": "torch.nn.modules.linear.Linear"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  }
                },
                "_output_dim": 1.0,
                "$type": "garage.torch.modules.mlp_module.MLPModule"
              }
            },
            "_input_dim": 11.0,
            "_hidden_sizes": [
              32,
              32
            ],
            "_action_dim": 1.0,
            "_learn_std": true,
            "_std_hidden_sizes": [
              32,
              32
            ],
            "_min_std": 1e-06,
            "_max_std": "None",
            "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
            "_std_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_std_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_std_output_nonlinearity": "None",
            "_std_output_w_init": {
              "$type": "builtins.function"
            },
            "_std_parameterization": "exp",
            "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
            "_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_output_nonlinearity": "None",
            "_output_w_init": {
              "$type": "builtins.function"
            },
            "_output_b_init": {
              "$type": "builtins.function"
            },
            "_layer_normalization": false,
            "_norm_dist_class": {
              "$typename": "torch.distributions.normal.Normal"
            },
            "_min_std_param": {
              "$type": "torch.Tensor"
            },
            "_max_std_param": "None",
            "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
          }
        },
        "_env_spec": {
          "max_episode_length": 1000,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_name": "GaussianMLPPolicy",
        "_obs_dim": 11.0,
        "_action_dim": 1.0,
        "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
      },
      {
        "training": true,
        "_parameters": {},
        "_buffers": {},
        "_non_persistent_buffers_set": [],
        "_backward_hooks": {},
        "_forward_hooks": {},
        "_forward_pre_hooks": {},
        "_state_dict_hooks": {},
        "_load_state_dict_pre_hooks": {},
        "_modules": {
          "_module": {
            "training": true,
            "_parameters": {
              "_init_std": {
                "$type": "torch.nn.parameter.Parameter"
              }
            },
            "_buffers": {
              "min_std_param": {
                "$type": "torch.Tensor"
              }
            },
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_mean_module": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 11.0,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      },
                      "1": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  },
                  "_output_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 1.0,
                            "$type": "torch.nn.modules.linear.Linear"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  }
                },
                "_output_dim": 1.0,
                "$type": "garage.torch.modules.mlp_module.MLPModule"
              }
            },
            "_input_dim": 11.0,
            "_hidden_sizes": [
              32,
              32
            ],
            "_action_dim": 1.0,
            "_learn_std": true,
            "_std_hidden_sizes": [
              32,
              32
            ],
            "_min_std": 1e-06,
            "_max_std": "None",
            "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
            "_std_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_std_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_std_output_nonlinearity": "None",
            "_std_output_w_init": {
              "$type": "builtins.function"
            },
            "_std_parameterization": "exp",
            "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
            "_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_output_nonlinearity": "None",
            "_output_w_init": {
              "$type": "builtins.function"
            },
            "_output_b_init": {
              "$type": "builtins.function"
            },
            "_layer_normalization": false,
            "_norm_dist_class": {
              "$typename": "torch.distributions.normal.Normal"
            },
            "_min_std_param": {
              "$type": "torch.Tensor"
            },
            "_max_std_param": "None",
            "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
          }
        },
        "_env_spec": {
          "max_episode_length": 1000,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_name": "GaussianMLPPolicy",
        "_obs_dim": 11.0,
        "_action_dim": 1.0,
        "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
      },
      {
        "training": true,
        "_parameters": {},
        "_buffers": {},
        "_non_persistent_buffers_set": [],
        "_backward_hooks": {},
        "_forward_hooks": {},
        "_forward_pre_hooks": {},
        "_state_dict_hooks": {},
        "_load_state_dict_pre_hooks": {},
        "_modules": {
          "_module": {
            "training": true,
            "_parameters": {
              "_init_std": {
                "$type": "torch.nn.parameter.Parameter"
              }
            },
            "_buffers": {
              "min_std_param": {
                "$type": "torch.Tensor"
              }
            },
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_mean_module": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 11.0,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      },
                      "1": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  },
                  "_output_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 1.0,
                            "$type": "torch.nn.modules.linear.Linear"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  }
                },
                "_output_dim": 1.0,
                "$type": "garage.torch.modules.mlp_module.MLPModule"
              }
            },
            "_input_dim": 11.0,
            "_hidden_sizes": [
              32,
              32
            ],
            "_action_dim": 1.0,
            "_learn_std": true,
            "_std_hidden_sizes": [
              32,
              32
            ],
            "_min_std": 1e-06,
            "_max_std": "None",
            "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
            "_std_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_std_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_std_output_nonlinearity": "None",
            "_std_output_w_init": {
              "$type": "builtins.function"
            },
            "_std_parameterization": "exp",
            "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
            "_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_output_nonlinearity": "None",
            "_output_w_init": {
              "$type": "builtins.function"
            },
            "_output_b_init": {
              "$type": "builtins.function"
            },
            "_layer_normalization": false,
            "_norm_dist_class": {
              "$typename": "torch.distributions.normal.Normal"
            },
            "_min_std_param": {
              "$type": "torch.Tensor"
            },
            "_max_std_param": "None",
            "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
          }
        },
        "_env_spec": {
          "max_episode_length": 1000,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_name": "GaussianMLPPolicy",
        "_obs_dim": 11.0,
        "_action_dim": 1.0,
        "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
      },
      {
        "training": true,
        "_parameters": {},
        "_buffers": {},
        "_non_persistent_buffers_set": [],
        "_backward_hooks": {},
        "_forward_hooks": {},
        "_forward_pre_hooks": {},
        "_state_dict_hooks": {},
        "_load_state_dict_pre_hooks": {},
        "_modules": {
          "_module": {
            "training": true,
            "_parameters": {
              "_init_std": {
                "$type": "torch.nn.parameter.Parameter"
              }
            },
            "_buffers": {
              "min_std_param": {
                "$type": "torch.Tensor"
              }
            },
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_mean_module": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 11.0,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      },
                      "1": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  },
                  "_output_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 1.0,
                            "$type": "torch.nn.modules.linear.Linear"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  }
                },
                "_output_dim": 1.0,
                "$type": "garage.torch.modules.mlp_module.MLPModule"
              }
            },
            "_input_dim": 11.0,
            "_hidden_sizes": [
              32,
              32
            ],
            "_action_dim": 1.0,
            "_learn_std": true,
            "_std_hidden_sizes": [
              32,
              32
            ],
            "_min_std": 1e-06,
            "_max_std": "None",
            "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
            "_std_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_std_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_std_output_nonlinearity": "None",
            "_std_output_w_init": {
              "$type": "builtins.function"
            },
            "_std_parameterization": "exp",
            "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
            "_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_output_nonlinearity": "None",
            "_output_w_init": {
              "$type": "builtins.function"
            },
            "_output_b_init": {
              "$type": "builtins.function"
            },
            "_layer_normalization": false,
            "_norm_dist_class": {
              "$typename": "torch.distributions.normal.Normal"
            },
            "_min_std_param": {
              "$type": "torch.Tensor"
            },
            "_max_std_param": "None",
            "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
          }
        },
        "_env_spec": {
          "max_episode_length": 1000,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_name": "GaussianMLPPolicy",
        "_obs_dim": 11.0,
        "_action_dim": 1.0,
        "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
      },
      {
        "training": true,
        "_parameters": {},
        "_buffers": {},
        "_non_persistent_buffers_set": [],
        "_backward_hooks": {},
        "_forward_hooks": {},
        "_forward_pre_hooks": {},
        "_state_dict_hooks": {},
        "_load_state_dict_pre_hooks": {},
        "_modules": {
          "_module": {
            "training": true,
            "_parameters": {
              "_init_std": {
                "$type": "torch.nn.parameter.Parameter"
              }
            },
            "_buffers": {
              "min_std_param": {
                "$type": "torch.Tensor"
              }
            },
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_mean_module": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 11.0,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      },
                      "1": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  },
                  "_output_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 1.0,
                            "$type": "torch.nn.modules.linear.Linear"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  }
                },
                "_output_dim": 1.0,
                "$type": "garage.torch.modules.mlp_module.MLPModule"
              }
            },
            "_input_dim": 11.0,
            "_hidden_sizes": [
              32,
              32
            ],
            "_action_dim": 1.0,
            "_learn_std": true,
            "_std_hidden_sizes": [
              32,
              32
            ],
            "_min_std": 1e-06,
            "_max_std": "None",
            "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
            "_std_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_std_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_std_output_nonlinearity": "None",
            "_std_output_w_init": {
              "$type": "builtins.function"
            },
            "_std_parameterization": "exp",
            "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
            "_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_output_nonlinearity": "None",
            "_output_w_init": {
              "$type": "builtins.function"
            },
            "_output_b_init": {
              "$type": "builtins.function"
            },
            "_layer_normalization": false,
            "_norm_dist_class": {
              "$typename": "torch.distributions.normal.Normal"
            },
            "_min_std_param": {
              "$type": "torch.Tensor"
            },
            "_max_std_param": "None",
            "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
          }
        },
        "_env_spec": {
          "max_episode_length": 1000,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_name": "GaussianMLPPolicy",
        "_obs_dim": 11.0,
        "_action_dim": 1.0,
        "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
      },
      {
        "training": true,
        "_parameters": {},
        "_buffers": {},
        "_non_persistent_buffers_set": [],
        "_backward_hooks": {},
        "_forward_hooks": {},
        "_forward_pre_hooks": {},
        "_state_dict_hooks": {},
        "_load_state_dict_pre_hooks": {},
        "_modules": {
          "_module": {
            "training": true,
            "_parameters": {
              "_init_std": {
                "$type": "torch.nn.parameter.Parameter"
              }
            },
            "_buffers": {
              "min_std_param": {
                "$type": "torch.Tensor"
              }
            },
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_mean_module": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 11.0,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      },
                      "1": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  },
                  "_output_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 1.0,
                            "$type": "torch.nn.modules.linear.Linear"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  }
                },
                "_output_dim": 1.0,
                "$type": "garage.torch.modules.mlp_module.MLPModule"
              }
            },
            "_input_dim": 11.0,
            "_hidden_sizes": [
              32,
              32
            ],
            "_action_dim": 1.0,
            "_learn_std": true,
            "_std_hidden_sizes": [
              32,
              32
            ],
            "_min_std": 1e-06,
            "_max_std": "None",
            "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
            "_std_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_std_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_std_output_nonlinearity": "None",
            "_std_output_w_init": {
              "$type": "builtins.function"
            },
            "_std_parameterization": "exp",
            "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
            "_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_output_nonlinearity": "None",
            "_output_w_init": {
              "$type": "builtins.function"
            },
            "_output_b_init": {
              "$type": "builtins.function"
            },
            "_layer_normalization": false,
            "_norm_dist_class": {
              "$typename": "torch.distributions.normal.Normal"
            },
            "_min_std_param": {
              "$type": "torch.Tensor"
            },
            "_max_std_param": "None",
            "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
          }
        },
        "_env_spec": {
          "max_episode_length": 1000,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_name": "GaussianMLPPolicy",
        "_obs_dim": 11.0,
        "_action_dim": 1.0,
        "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
      },
      {
        "training": true,
        "_parameters": {},
        "_buffers": {},
        "_non_persistent_buffers_set": [],
        "_backward_hooks": {},
        "_forward_hooks": {},
        "_forward_pre_hooks": {},
        "_state_dict_hooks": {},
        "_load_state_dict_pre_hooks": {},
        "_modules": {
          "_module": {
            "training": true,
            "_parameters": {
              "_init_std": {
                "$type": "torch.nn.parameter.Parameter"
              }
            },
            "_buffers": {
              "min_std_param": {
                "$type": "torch.Tensor"
              }
            },
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_mean_module": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 11.0,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      },
                      "1": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  },
                  "_output_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 1.0,
                            "$type": "torch.nn.modules.linear.Linear"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  }
                },
                "_output_dim": 1.0,
                "$type": "garage.torch.modules.mlp_module.MLPModule"
              }
            },
            "_input_dim": 11.0,
            "_hidden_sizes": [
              32,
              32
            ],
            "_action_dim": 1.0,
            "_learn_std": true,
            "_std_hidden_sizes": [
              32,
              32
            ],
            "_min_std": 1e-06,
            "_max_std": "None",
            "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
            "_std_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_std_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_std_output_nonlinearity": "None",
            "_std_output_w_init": {
              "$type": "builtins.function"
            },
            "_std_parameterization": "exp",
            "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
            "_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_output_nonlinearity": "None",
            "_output_w_init": {
              "$type": "builtins.function"
            },
            "_output_b_init": {
              "$type": "builtins.function"
            },
            "_layer_normalization": false,
            "_norm_dist_class": {
              "$typename": "torch.distributions.normal.Normal"
            },
            "_min_std_param": {
              "$type": "torch.Tensor"
            },
            "_max_std_param": "None",
            "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
          }
        },
        "_env_spec": {
          "max_episode_length": 1000,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_name": "GaussianMLPPolicy",
        "_obs_dim": 11.0,
        "_action_dim": 1.0,
        "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
      },
      {
        "training": true,
        "_parameters": {},
        "_buffers": {},
        "_non_persistent_buffers_set": [],
        "_backward_hooks": {},
        "_forward_hooks": {},
        "_forward_pre_hooks": {},
        "_state_dict_hooks": {},
        "_load_state_dict_pre_hooks": {},
        "_modules": {
          "_module": {
            "training": true,
            "_parameters": {
              "_init_std": {
                "$type": "torch.nn.parameter.Parameter"
              }
            },
            "_buffers": {
              "min_std_param": {
                "$type": "torch.Tensor"
              }
            },
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_mean_module": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 11.0,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      },
                      "1": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  },
                  "_output_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 1.0,
                            "$type": "torch.nn.modules.linear.Linear"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  }
                },
                "_output_dim": 1.0,
                "$type": "garage.torch.modules.mlp_module.MLPModule"
              }
            },
            "_input_dim": 11.0,
            "_hidden_sizes": [
              32,
              32
            ],
            "_action_dim": 1.0,
            "_learn_std": true,
            "_std_hidden_sizes": [
              32,
              32
            ],
            "_min_std": 1e-06,
            "_max_std": "None",
            "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
            "_std_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_std_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_std_output_nonlinearity": "None",
            "_std_output_w_init": {
              "$type": "builtins.function"
            },
            "_std_parameterization": "exp",
            "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
            "_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_output_nonlinearity": "None",
            "_output_w_init": {
              "$type": "builtins.function"
            },
            "_output_b_init": {
              "$type": "builtins.function"
            },
            "_layer_normalization": false,
            "_norm_dist_class": {
              "$typename": "torch.distributions.normal.Normal"
            },
            "_min_std_param": {
              "$type": "torch.Tensor"
            },
            "_max_std_param": "None",
            "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
          }
        },
        "_env_spec": {
          "max_episode_length": 1000,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_name": "GaussianMLPPolicy",
        "_obs_dim": 11.0,
        "_action_dim": 1.0,
        "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
      },
      {
        "training": true,
        "_parameters": {},
        "_buffers": {},
        "_non_persistent_buffers_set": [],
        "_backward_hooks": {},
        "_forward_hooks": {},
        "_forward_pre_hooks": {},
        "_state_dict_hooks": {},
        "_load_state_dict_pre_hooks": {},
        "_modules": {
          "_module": {
            "training": true,
            "_parameters": {
              "_init_std": {
                "$type": "torch.nn.parameter.Parameter"
              }
            },
            "_buffers": {
              "min_std_param": {
                "$type": "torch.Tensor"
              }
            },
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_mean_module": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 11.0,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      },
                      "1": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  },
                  "_output_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 1.0,
                            "$type": "torch.nn.modules.linear.Linear"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  }
                },
                "_output_dim": 1.0,
                "$type": "garage.torch.modules.mlp_module.MLPModule"
              }
            },
            "_input_dim": 11.0,
            "_hidden_sizes": [
              32,
              32
            ],
            "_action_dim": 1.0,
            "_learn_std": true,
            "_std_hidden_sizes": [
              32,
              32
            ],
            "_min_std": 1e-06,
            "_max_std": "None",
            "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
            "_std_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_std_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_std_output_nonlinearity": "None",
            "_std_output_w_init": {
              "$type": "builtins.function"
            },
            "_std_parameterization": "exp",
            "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
            "_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_output_nonlinearity": "None",
            "_output_w_init": {
              "$type": "builtins.function"
            },
            "_output_b_init": {
              "$type": "builtins.function"
            },
            "_layer_normalization": false,
            "_norm_dist_class": {
              "$typename": "torch.distributions.normal.Normal"
            },
            "_min_std_param": {
              "$type": "torch.Tensor"
            },
            "_max_std_param": "None",
            "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
          }
        },
        "_env_spec": {
          "max_episode_length": 1000,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_name": "GaussianMLPPolicy",
        "_obs_dim": 11.0,
        "_action_dim": 1.0,
        "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
      },
      {
        "training": true,
        "_parameters": {},
        "_buffers": {},
        "_non_persistent_buffers_set": [],
        "_backward_hooks": {},
        "_forward_hooks": {},
        "_forward_pre_hooks": {},
        "_state_dict_hooks": {},
        "_load_state_dict_pre_hooks": {},
        "_modules": {
          "_module": {
            "training": true,
            "_parameters": {
              "_init_std": {
                "$type": "torch.nn.parameter.Parameter"
              }
            },
            "_buffers": {
              "min_std_param": {
                "$type": "torch.Tensor"
              }
            },
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_mean_module": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 11.0,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      },
                      "1": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  },
                  "_output_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 1.0,
                            "$type": "torch.nn.modules.linear.Linear"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  }
                },
                "_output_dim": 1.0,
                "$type": "garage.torch.modules.mlp_module.MLPModule"
              }
            },
            "_input_dim": 11.0,
            "_hidden_sizes": [
              32,
              32
            ],
            "_action_dim": 1.0,
            "_learn_std": true,
            "_std_hidden_sizes": [
              32,
              32
            ],
            "_min_std": 1e-06,
            "_max_std": "None",
            "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
            "_std_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_std_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_std_output_nonlinearity": "None",
            "_std_output_w_init": {
              "$type": "builtins.function"
            },
            "_std_parameterization": "exp",
            "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
            "_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_output_nonlinearity": "None",
            "_output_w_init": {
              "$type": "builtins.function"
            },
            "_output_b_init": {
              "$type": "builtins.function"
            },
            "_layer_normalization": false,
            "_norm_dist_class": {
              "$typename": "torch.distributions.normal.Normal"
            },
            "_min_std_param": {
              "$type": "torch.Tensor"
            },
            "_max_std_param": "None",
            "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
          }
        },
        "_env_spec": {
          "max_episode_length": 1000,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_name": "GaussianMLPPolicy",
        "_obs_dim": 11.0,
        "_action_dim": 1.0,
        "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
      },
      {
        "training": true,
        "_parameters": {},
        "_buffers": {},
        "_non_persistent_buffers_set": [],
        "_backward_hooks": {},
        "_forward_hooks": {},
        "_forward_pre_hooks": {},
        "_state_dict_hooks": {},
        "_load_state_dict_pre_hooks": {},
        "_modules": {
          "_module": {
            "training": true,
            "_parameters": {
              "_init_std": {
                "$type": "torch.nn.parameter.Parameter"
              }
            },
            "_buffers": {
              "min_std_param": {
                "$type": "torch.Tensor"
              }
            },
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_mean_module": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 11.0,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      },
                      "1": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  },
                  "_output_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 1.0,
                            "$type": "torch.nn.modules.linear.Linear"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  }
                },
                "_output_dim": 1.0,
                "$type": "garage.torch.modules.mlp_module.MLPModule"
              }
            },
            "_input_dim": 11.0,
            "_hidden_sizes": [
              32,
              32
            ],
            "_action_dim": 1.0,
            "_learn_std": true,
            "_std_hidden_sizes": [
              32,
              32
            ],
            "_min_std": 1e-06,
            "_max_std": "None",
            "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
            "_std_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_std_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_std_output_nonlinearity": "None",
            "_std_output_w_init": {
              "$type": "builtins.function"
            },
            "_std_parameterization": "exp",
            "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
            "_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_output_nonlinearity": "None",
            "_output_w_init": {
              "$type": "builtins.function"
            },
            "_output_b_init": {
              "$type": "builtins.function"
            },
            "_layer_normalization": false,
            "_norm_dist_class": {
              "$typename": "torch.distributions.normal.Normal"
            },
            "_min_std_param": {
              "$type": "torch.Tensor"
            },
            "_max_std_param": "None",
            "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
          }
        },
        "_env_spec": {
          "max_episode_length": 1000,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_name": "GaussianMLPPolicy",
        "_obs_dim": 11.0,
        "_action_dim": 1.0,
        "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
      },
      {
        "training": true,
        "_parameters": {},
        "_buffers": {},
        "_non_persistent_buffers_set": [],
        "_backward_hooks": {},
        "_forward_hooks": {},
        "_forward_pre_hooks": {},
        "_state_dict_hooks": {},
        "_load_state_dict_pre_hooks": {},
        "_modules": {
          "_module": {
            "training": true,
            "_parameters": {
              "_init_std": {
                "$type": "torch.nn.parameter.Parameter"
              }
            },
            "_buffers": {
              "min_std_param": {
                "$type": "torch.Tensor"
              }
            },
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_mean_module": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 11.0,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      },
                      "1": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  },
                  "_output_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 1.0,
                            "$type": "torch.nn.modules.linear.Linear"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  }
                },
                "_output_dim": 1.0,
                "$type": "garage.torch.modules.mlp_module.MLPModule"
              }
            },
            "_input_dim": 11.0,
            "_hidden_sizes": [
              32,
              32
            ],
            "_action_dim": 1.0,
            "_learn_std": true,
            "_std_hidden_sizes": [
              32,
              32
            ],
            "_min_std": 1e-06,
            "_max_std": "None",
            "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
            "_std_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_std_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_std_output_nonlinearity": "None",
            "_std_output_w_init": {
              "$type": "builtins.function"
            },
            "_std_parameterization": "exp",
            "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
            "_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_output_nonlinearity": "None",
            "_output_w_init": {
              "$type": "builtins.function"
            },
            "_output_b_init": {
              "$type": "builtins.function"
            },
            "_layer_normalization": false,
            "_norm_dist_class": {
              "$typename": "torch.distributions.normal.Normal"
            },
            "_min_std_param": {
              "$type": "torch.Tensor"
            },
            "_max_std_param": "None",
            "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
          }
        },
        "_env_spec": {
          "max_episode_length": 1000,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_name": "GaussianMLPPolicy",
        "_obs_dim": 11.0,
        "_action_dim": 1.0,
        "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
      },
      {
        "training": true,
        "_parameters": {},
        "_buffers": {},
        "_non_persistent_buffers_set": [],
        "_backward_hooks": {},
        "_forward_hooks": {},
        "_forward_pre_hooks": {},
        "_state_dict_hooks": {},
        "_load_state_dict_pre_hooks": {},
        "_modules": {
          "_module": {
            "training": true,
            "_parameters": {
              "_init_std": {
                "$type": "torch.nn.parameter.Parameter"
              }
            },
            "_buffers": {
              "min_std_param": {
                "$type": "torch.Tensor"
              }
            },
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_mean_module": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 11.0,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      },
                      "1": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  },
                  "_output_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 1.0,
                            "$type": "torch.nn.modules.linear.Linear"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  }
                },
                "_output_dim": 1.0,
                "$type": "garage.torch.modules.mlp_module.MLPModule"
              }
            },
            "_input_dim": 11.0,
            "_hidden_sizes": [
              32,
              32
            ],
            "_action_dim": 1.0,
            "_learn_std": true,
            "_std_hidden_sizes": [
              32,
              32
            ],
            "_min_std": 1e-06,
            "_max_std": "None",
            "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
            "_std_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_std_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_std_output_nonlinearity": "None",
            "_std_output_w_init": {
              "$type": "builtins.function"
            },
            "_std_parameterization": "exp",
            "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
            "_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_output_nonlinearity": "None",
            "_output_w_init": {
              "$type": "builtins.function"
            },
            "_output_b_init": {
              "$type": "builtins.function"
            },
            "_layer_normalization": false,
            "_norm_dist_class": {
              "$typename": "torch.distributions.normal.Normal"
            },
            "_min_std_param": {
              "$type": "torch.Tensor"
            },
            "_max_std_param": "None",
            "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
          }
        },
        "_env_spec": {
          "max_episode_length": 1000,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_name": "GaussianMLPPolicy",
        "_obs_dim": 11.0,
        "_action_dim": 1.0,
        "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
      },
      {
        "training": true,
        "_parameters": {},
        "_buffers": {},
        "_non_persistent_buffers_set": [],
        "_backward_hooks": {},
        "_forward_hooks": {},
        "_forward_pre_hooks": {},
        "_state_dict_hooks": {},
        "_load_state_dict_pre_hooks": {},
        "_modules": {
          "_module": {
            "training": true,
            "_parameters": {
              "_init_std": {
                "$type": "torch.nn.parameter.Parameter"
              }
            },
            "_buffers": {
              "min_std_param": {
                "$type": "torch.Tensor"
              }
            },
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_mean_module": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 11.0,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      },
                      "1": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  },
                  "_output_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 1.0,
                            "$type": "torch.nn.modules.linear.Linear"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  }
                },
                "_output_dim": 1.0,
                "$type": "garage.torch.modules.mlp_module.MLPModule"
              }
            },
            "_input_dim": 11.0,
            "_hidden_sizes": [
              32,
              32
            ],
            "_action_dim": 1.0,
            "_learn_std": true,
            "_std_hidden_sizes": [
              32,
              32
            ],
            "_min_std": 1e-06,
            "_max_std": "None",
            "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
            "_std_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_std_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_std_output_nonlinearity": "None",
            "_std_output_w_init": {
              "$type": "builtins.function"
            },
            "_std_parameterization": "exp",
            "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
            "_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_output_nonlinearity": "None",
            "_output_w_init": {
              "$type": "builtins.function"
            },
            "_output_b_init": {
              "$type": "builtins.function"
            },
            "_layer_normalization": false,
            "_norm_dist_class": {
              "$typename": "torch.distributions.normal.Normal"
            },
            "_min_std_param": {
              "$type": "torch.Tensor"
            },
            "_max_std_param": "None",
            "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
          }
        },
        "_env_spec": {
          "max_episode_length": 1000,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_name": "GaussianMLPPolicy",
        "_obs_dim": 11.0,
        "_action_dim": 1.0,
        "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
      },
      {
        "training": true,
        "_parameters": {},
        "_buffers": {},
        "_non_persistent_buffers_set": [],
        "_backward_hooks": {},
        "_forward_hooks": {},
        "_forward_pre_hooks": {},
        "_state_dict_hooks": {},
        "_load_state_dict_pre_hooks": {},
        "_modules": {
          "_module": {
            "training": true,
            "_parameters": {
              "_init_std": {
                "$type": "torch.nn.parameter.Parameter"
              }
            },
            "_buffers": {
              "min_std_param": {
                "$type": "torch.Tensor"
              }
            },
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_mean_module": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 11.0,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      },
                      "1": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  },
                  "_output_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 1.0,
                            "$type": "torch.nn.modules.linear.Linear"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  }
                },
                "_output_dim": 1.0,
                "$type": "garage.torch.modules.mlp_module.MLPModule"
              }
            },
            "_input_dim": 11.0,
            "_hidden_sizes": [
              32,
              32
            ],
            "_action_dim": 1.0,
            "_learn_std": true,
            "_std_hidden_sizes": [
              32,
              32
            ],
            "_min_std": 1e-06,
            "_max_std": "None",
            "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
            "_std_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_std_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_std_output_nonlinearity": "None",
            "_std_output_w_init": {
              "$type": "builtins.function"
            },
            "_std_parameterization": "exp",
            "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
            "_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_output_nonlinearity": "None",
            "_output_w_init": {
              "$type": "builtins.function"
            },
            "_output_b_init": {
              "$type": "builtins.function"
            },
            "_layer_normalization": false,
            "_norm_dist_class": {
              "$typename": "torch.distributions.normal.Normal"
            },
            "_min_std_param": {
              "$type": "torch.Tensor"
            },
            "_max_std_param": "None",
            "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
          }
        },
        "_env_spec": {
          "max_episode_length": 1000,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_name": "GaussianMLPPolicy",
        "_obs_dim": 11.0,
        "_action_dim": 1.0,
        "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
      },
      {
        "training": true,
        "_parameters": {},
        "_buffers": {},
        "_non_persistent_buffers_set": [],
        "_backward_hooks": {},
        "_forward_hooks": {},
        "_forward_pre_hooks": {},
        "_state_dict_hooks": {},
        "_load_state_dict_pre_hooks": {},
        "_modules": {
          "_module": {
            "training": true,
            "_parameters": {
              "_init_std": {
                "$type": "torch.nn.parameter.Parameter"
              }
            },
            "_buffers": {
              "min_std_param": {
                "$type": "torch.Tensor"
              }
            },
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_mean_module": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 11.0,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      },
                      "1": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  },
                  "_output_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 1.0,
                            "$type": "torch.nn.modules.linear.Linear"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  }
                },
                "_output_dim": 1.0,
                "$type": "garage.torch.modules.mlp_module.MLPModule"
              }
            },
            "_input_dim": 11.0,
            "_hidden_sizes": [
              32,
              32
            ],
            "_action_dim": 1.0,
            "_learn_std": true,
            "_std_hidden_sizes": [
              32,
              32
            ],
            "_min_std": 1e-06,
            "_max_std": "None",
            "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
            "_std_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_std_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_std_output_nonlinearity": "None",
            "_std_output_w_init": {
              "$type": "builtins.function"
            },
            "_std_parameterization": "exp",
            "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
            "_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_output_nonlinearity": "None",
            "_output_w_init": {
              "$type": "builtins.function"
            },
            "_output_b_init": {
              "$type": "builtins.function"
            },
            "_layer_normalization": false,
            "_norm_dist_class": {
              "$typename": "torch.distributions.normal.Normal"
            },
            "_min_std_param": {
              "$type": "torch.Tensor"
            },
            "_max_std_param": "None",
            "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
          }
        },
        "_env_spec": {
          "max_episode_length": 1000,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_name": "GaussianMLPPolicy",
        "_obs_dim": 11.0,
        "_action_dim": 1.0,
        "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
      },
      {
        "training": true,
        "_parameters": {},
        "_buffers": {},
        "_non_persistent_buffers_set": [],
        "_backward_hooks": {},
        "_forward_hooks": {},
        "_forward_pre_hooks": {},
        "_state_dict_hooks": {},
        "_load_state_dict_pre_hooks": {},
        "_modules": {
          "_module": {
            "training": true,
            "_parameters": {
              "_init_std": {
                "$type": "torch.nn.parameter.Parameter"
              }
            },
            "_buffers": {
              "min_std_param": {
                "$type": "torch.Tensor"
              }
            },
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_mean_module": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 11.0,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      },
                      "1": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  },
                  "_output_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 1.0,
                            "$type": "torch.nn.modules.linear.Linear"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  }
                },
                "_output_dim": 1.0,
                "$type": "garage.torch.modules.mlp_module.MLPModule"
              }
            },
            "_input_dim": 11.0,
            "_hidden_sizes": [
              32,
              32
            ],
            "_action_dim": 1.0,
            "_learn_std": true,
            "_std_hidden_sizes": [
              32,
              32
            ],
            "_min_std": 1e-06,
            "_max_std": "None",
            "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
            "_std_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_std_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_std_output_nonlinearity": "None",
            "_std_output_w_init": {
              "$type": "builtins.function"
            },
            "_std_parameterization": "exp",
            "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
            "_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_output_nonlinearity": "None",
            "_output_w_init": {
              "$type": "builtins.function"
            },
            "_output_b_init": {
              "$type": "builtins.function"
            },
            "_layer_normalization": false,
            "_norm_dist_class": {
              "$typename": "torch.distributions.normal.Normal"
            },
            "_min_std_param": {
              "$type": "torch.Tensor"
            },
            "_max_std_param": "None",
            "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
          }
        },
        "_env_spec": {
          "max_episode_length": 1000,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_name": "GaussianMLPPolicy",
        "_obs_dim": 11.0,
        "_action_dim": 1.0,
        "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
      },
      {
        "training": true,
        "_parameters": {},
        "_buffers": {},
        "_non_persistent_buffers_set": [],
        "_backward_hooks": {},
        "_forward_hooks": {},
        "_forward_pre_hooks": {},
        "_state_dict_hooks": {},
        "_load_state_dict_pre_hooks": {},
        "_modules": {
          "_module": {
            "training": true,
            "_parameters": {
              "_init_std": {
                "$type": "torch.nn.parameter.Parameter"
              }
            },
            "_buffers": {
              "min_std_param": {
                "$type": "torch.Tensor"
              }
            },
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_mean_module": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 11.0,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      },
                      "1": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  },
                  "_output_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 1.0,
                            "$type": "torch.nn.modules.linear.Linear"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  }
                },
                "_output_dim": 1.0,
                "$type": "garage.torch.modules.mlp_module.MLPModule"
              }
            },
            "_input_dim": 11.0,
            "_hidden_sizes": [
              32,
              32
            ],
            "_action_dim": 1.0,
            "_learn_std": true,
            "_std_hidden_sizes": [
              32,
              32
            ],
            "_min_std": 1e-06,
            "_max_std": "None",
            "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
            "_std_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_std_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_std_output_nonlinearity": "None",
            "_std_output_w_init": {
              "$type": "builtins.function"
            },
            "_std_parameterization": "exp",
            "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
            "_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_output_nonlinearity": "None",
            "_output_w_init": {
              "$type": "builtins.function"
            },
            "_output_b_init": {
              "$type": "builtins.function"
            },
            "_layer_normalization": false,
            "_norm_dist_class": {
              "$typename": "torch.distributions.normal.Normal"
            },
            "_min_std_param": {
              "$type": "torch.Tensor"
            },
            "_max_std_param": "None",
            "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
          }
        },
        "_env_spec": {
          "max_episode_length": 1000,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_name": "GaussianMLPPolicy",
        "_obs_dim": 11.0,
        "_action_dim": 1.0,
        "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
      },
      {
        "training": true,
        "_parameters": {},
        "_buffers": {},
        "_non_persistent_buffers_set": [],
        "_backward_hooks": {},
        "_forward_hooks": {},
        "_forward_pre_hooks": {},
        "_state_dict_hooks": {},
        "_load_state_dict_pre_hooks": {},
        "_modules": {
          "_module": {
            "training": true,
            "_parameters": {
              "_init_std": {
                "$type": "torch.nn.parameter.Parameter"
              }
            },
            "_buffers": {
              "min_std_param": {
                "$type": "torch.Tensor"
              }
            },
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_mean_module": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 11.0,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      },
                      "1": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  },
                  "_output_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 1.0,
                            "$type": "torch.nn.modules.linear.Linear"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  }
                },
                "_output_dim": 1.0,
                "$type": "garage.torch.modules.mlp_module.MLPModule"
              }
            },
            "_input_dim": 11.0,
            "_hidden_sizes": [
              32,
              32
            ],
            "_action_dim": 1.0,
            "_learn_std": true,
            "_std_hidden_sizes": [
              32,
              32
            ],
            "_min_std": 1e-06,
            "_max_std": "None",
            "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
            "_std_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_std_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_std_output_nonlinearity": "None",
            "_std_output_w_init": {
              "$type": "builtins.function"
            },
            "_std_parameterization": "exp",
            "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
            "_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_output_nonlinearity": "None",
            "_output_w_init": {
              "$type": "builtins.function"
            },
            "_output_b_init": {
              "$type": "builtins.function"
            },
            "_layer_normalization": false,
            "_norm_dist_class": {
              "$typename": "torch.distributions.normal.Normal"
            },
            "_min_std_param": {
              "$type": "torch.Tensor"
            },
            "_max_std_param": "None",
            "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
          }
        },
        "_env_spec": {
          "max_episode_length": 1000,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_name": "GaussianMLPPolicy",
        "_obs_dim": 11.0,
        "_action_dim": 1.0,
        "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
      },
      {
        "training": true,
        "_parameters": {},
        "_buffers": {},
        "_non_persistent_buffers_set": [],
        "_backward_hooks": {},
        "_forward_hooks": {},
        "_forward_pre_hooks": {},
        "_state_dict_hooks": {},
        "_load_state_dict_pre_hooks": {},
        "_modules": {
          "_module": {
            "training": true,
            "_parameters": {
              "_init_std": {
                "$type": "torch.nn.parameter.Parameter"
              }
            },
            "_buffers": {
              "min_std_param": {
                "$type": "torch.Tensor"
              }
            },
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_mean_module": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 11.0,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      },
                      "1": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  },
                  "_output_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 1.0,
                            "$type": "torch.nn.modules.linear.Linear"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  }
                },
                "_output_dim": 1.0,
                "$type": "garage.torch.modules.mlp_module.MLPModule"
              }
            },
            "_input_dim": 11.0,
            "_hidden_sizes": [
              32,
              32
            ],
            "_action_dim": 1.0,
            "_learn_std": true,
            "_std_hidden_sizes": [
              32,
              32
            ],
            "_min_std": 1e-06,
            "_max_std": "None",
            "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
            "_std_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_std_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_std_output_nonlinearity": "None",
            "_std_output_w_init": {
              "$type": "builtins.function"
            },
            "_std_parameterization": "exp",
            "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
            "_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_output_nonlinearity": "None",
            "_output_w_init": {
              "$type": "builtins.function"
            },
            "_output_b_init": {
              "$type": "builtins.function"
            },
            "_layer_normalization": false,
            "_norm_dist_class": {
              "$typename": "torch.distributions.normal.Normal"
            },
            "_min_std_param": {
              "$type": "torch.Tensor"
            },
            "_max_std_param": "None",
            "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
          }
        },
        "_env_spec": {
          "max_episode_length": 1000,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_name": "GaussianMLPPolicy",
        "_obs_dim": 11.0,
        "_action_dim": 1.0,
        "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
      },
      {
        "training": true,
        "_parameters": {},
        "_buffers": {},
        "_non_persistent_buffers_set": [],
        "_backward_hooks": {},
        "_forward_hooks": {},
        "_forward_pre_hooks": {},
        "_state_dict_hooks": {},
        "_load_state_dict_pre_hooks": {},
        "_modules": {
          "_module": {
            "training": true,
            "_parameters": {
              "_init_std": {
                "$type": "torch.nn.parameter.Parameter"
              }
            },
            "_buffers": {
              "min_std_param": {
                "$type": "torch.Tensor"
              }
            },
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_mean_module": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 11.0,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      },
                      "1": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  },
                  "_output_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 1.0,
                            "$type": "torch.nn.modules.linear.Linear"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  }
                },
                "_output_dim": 1.0,
                "$type": "garage.torch.modules.mlp_module.MLPModule"
              }
            },
            "_input_dim": 11.0,
            "_hidden_sizes": [
              32,
              32
            ],
            "_action_dim": 1.0,
            "_learn_std": true,
            "_std_hidden_sizes": [
              32,
              32
            ],
            "_min_std": 1e-06,
            "_max_std": "None",
            "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
            "_std_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_std_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_std_output_nonlinearity": "None",
            "_std_output_w_init": {
              "$type": "builtins.function"
            },
            "_std_parameterization": "exp",
            "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
            "_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_output_nonlinearity": "None",
            "_output_w_init": {
              "$type": "builtins.function"
            },
            "_output_b_init": {
              "$type": "builtins.function"
            },
            "_layer_normalization": false,
            "_norm_dist_class": {
              "$typename": "torch.distributions.normal.Normal"
            },
            "_min_std_param": {
              "$type": "torch.Tensor"
            },
            "_max_std_param": "None",
            "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
          }
        },
        "_env_spec": {
          "max_episode_length": 1000,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_name": "GaussianMLPPolicy",
        "_obs_dim": 11.0,
        "_action_dim": 1.0,
        "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
      },
      {
        "training": true,
        "_parameters": {},
        "_buffers": {},
        "_non_persistent_buffers_set": [],
        "_backward_hooks": {},
        "_forward_hooks": {},
        "_forward_pre_hooks": {},
        "_state_dict_hooks": {},
        "_load_state_dict_pre_hooks": {},
        "_modules": {
          "_module": {
            "training": true,
            "_parameters": {
              "_init_std": {
                "$type": "torch.nn.parameter.Parameter"
              }
            },
            "_buffers": {
              "min_std_param": {
                "$type": "torch.Tensor"
              }
            },
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_mean_module": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 11.0,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      },
                      "1": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  },
                  "_output_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 1.0,
                            "$type": "torch.nn.modules.linear.Linear"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  }
                },
                "_output_dim": 1.0,
                "$type": "garage.torch.modules.mlp_module.MLPModule"
              }
            },
            "_input_dim": 11.0,
            "_hidden_sizes": [
              32,
              32
            ],
            "_action_dim": 1.0,
            "_learn_std": true,
            "_std_hidden_sizes": [
              32,
              32
            ],
            "_min_std": 1e-06,
            "_max_std": "None",
            "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
            "_std_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_std_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_std_output_nonlinearity": "None",
            "_std_output_w_init": {
              "$type": "builtins.function"
            },
            "_std_parameterization": "exp",
            "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
            "_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_output_nonlinearity": "None",
            "_output_w_init": {
              "$type": "builtins.function"
            },
            "_output_b_init": {
              "$type": "builtins.function"
            },
            "_layer_normalization": false,
            "_norm_dist_class": {
              "$typename": "torch.distributions.normal.Normal"
            },
            "_min_std_param": {
              "$type": "torch.Tensor"
            },
            "_max_std_param": "None",
            "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
          }
        },
        "_env_spec": {
          "max_episode_length": 1000,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_name": "GaussianMLPPolicy",
        "_obs_dim": 11.0,
        "_action_dim": 1.0,
        "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
      },
      {
        "training": true,
        "_parameters": {},
        "_buffers": {},
        "_non_persistent_buffers_set": [],
        "_backward_hooks": {},
        "_forward_hooks": {},
        "_forward_pre_hooks": {},
        "_state_dict_hooks": {},
        "_load_state_dict_pre_hooks": {},
        "_modules": {
          "_module": {
            "training": true,
            "_parameters": {
              "_init_std": {
                "$type": "torch.nn.parameter.Parameter"
              }
            },
            "_buffers": {
              "min_std_param": {
                "$type": "torch.Tensor"
              }
            },
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_mean_module": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 11.0,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      },
                      "1": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  },
                  "_output_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 1.0,
                            "$type": "torch.nn.modules.linear.Linear"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  }
                },
                "_output_dim": 1.0,
                "$type": "garage.torch.modules.mlp_module.MLPModule"
              }
            },
            "_input_dim": 11.0,
            "_hidden_sizes": [
              32,
              32
            ],
            "_action_dim": 1.0,
            "_learn_std": true,
            "_std_hidden_sizes": [
              32,
              32
            ],
            "_min_std": 1e-06,
            "_max_std": "None",
            "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
            "_std_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_std_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_std_output_nonlinearity": "None",
            "_std_output_w_init": {
              "$type": "builtins.function"
            },
            "_std_parameterization": "exp",
            "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
            "_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_output_nonlinearity": "None",
            "_output_w_init": {
              "$type": "builtins.function"
            },
            "_output_b_init": {
              "$type": "builtins.function"
            },
            "_layer_normalization": false,
            "_norm_dist_class": {
              "$typename": "torch.distributions.normal.Normal"
            },
            "_min_std_param": {
              "$type": "torch.Tensor"
            },
            "_max_std_param": "None",
            "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
          }
        },
        "_env_spec": {
          "max_episode_length": 1000,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_name": "GaussianMLPPolicy",
        "_obs_dim": 11.0,
        "_action_dim": 1.0,
        "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
      },
      {
        "training": true,
        "_parameters": {},
        "_buffers": {},
        "_non_persistent_buffers_set": [],
        "_backward_hooks": {},
        "_forward_hooks": {},
        "_forward_pre_hooks": {},
        "_state_dict_hooks": {},
        "_load_state_dict_pre_hooks": {},
        "_modules": {
          "_module": {
            "training": true,
            "_parameters": {
              "_init_std": {
                "$type": "torch.nn.parameter.Parameter"
              }
            },
            "_buffers": {
              "min_std_param": {
                "$type": "torch.Tensor"
              }
            },
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_mean_module": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 11.0,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      },
                      "1": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  },
                  "_output_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 1.0,
                            "$type": "torch.nn.modules.linear.Linear"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  }
                },
                "_output_dim": 1.0,
                "$type": "garage.torch.modules.mlp_module.MLPModule"
              }
            },
            "_input_dim": 11.0,
            "_hidden_sizes": [
              32,
              32
            ],
            "_action_dim": 1.0,
            "_learn_std": true,
            "_std_hidden_sizes": [
              32,
              32
            ],
            "_min_std": 1e-06,
            "_max_std": "None",
            "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
            "_std_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_std_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_std_output_nonlinearity": "None",
            "_std_output_w_init": {
              "$type": "builtins.function"
            },
            "_std_parameterization": "exp",
            "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
            "_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_output_nonlinearity": "None",
            "_output_w_init": {
              "$type": "builtins.function"
            },
            "_output_b_init": {
              "$type": "builtins.function"
            },
            "_layer_normalization": false,
            "_norm_dist_class": {
              "$typename": "torch.distributions.normal.Normal"
            },
            "_min_std_param": {
              "$type": "torch.Tensor"
            },
            "_max_std_param": "None",
            "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
          }
        },
        "_env_spec": {
          "max_episode_length": 1000,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_name": "GaussianMLPPolicy",
        "_obs_dim": 11.0,
        "_action_dim": 1.0,
        "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
      },
      {
        "training": true,
        "_parameters": {},
        "_buffers": {},
        "_non_persistent_buffers_set": [],
        "_backward_hooks": {},
        "_forward_hooks": {},
        "_forward_pre_hooks": {},
        "_state_dict_hooks": {},
        "_load_state_dict_pre_hooks": {},
        "_modules": {
          "_module": {
            "training": true,
            "_parameters": {
              "_init_std": {
                "$type": "torch.nn.parameter.Parameter"
              }
            },
            "_buffers": {
              "min_std_param": {
                "$type": "torch.Tensor"
              }
            },
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_mean_module": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 11.0,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      },
                      "1": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  },
                  "_output_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 1.0,
                            "$type": "torch.nn.modules.linear.Linear"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  }
                },
                "_output_dim": 1.0,
                "$type": "garage.torch.modules.mlp_module.MLPModule"
              }
            },
            "_input_dim": 11.0,
            "_hidden_sizes": [
              32,
              32
            ],
            "_action_dim": 1.0,
            "_learn_std": true,
            "_std_hidden_sizes": [
              32,
              32
            ],
            "_min_std": 1e-06,
            "_max_std": "None",
            "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
            "_std_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_std_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_std_output_nonlinearity": "None",
            "_std_output_w_init": {
              "$type": "builtins.function"
            },
            "_std_parameterization": "exp",
            "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
            "_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_output_nonlinearity": "None",
            "_output_w_init": {
              "$type": "builtins.function"
            },
            "_output_b_init": {
              "$type": "builtins.function"
            },
            "_layer_normalization": false,
            "_norm_dist_class": {
              "$typename": "torch.distributions.normal.Normal"
            },
            "_min_std_param": {
              "$type": "torch.Tensor"
            },
            "_max_std_param": "None",
            "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
          }
        },
        "_env_spec": {
          "max_episode_length": 1000,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_name": "GaussianMLPPolicy",
        "_obs_dim": 11.0,
        "_action_dim": 1.0,
        "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
      },
      {
        "training": true,
        "_parameters": {},
        "_buffers": {},
        "_non_persistent_buffers_set": [],
        "_backward_hooks": {},
        "_forward_hooks": {},
        "_forward_pre_hooks": {},
        "_state_dict_hooks": {},
        "_load_state_dict_pre_hooks": {},
        "_modules": {
          "_module": {
            "training": true,
            "_parameters": {
              "_init_std": {
                "$type": "torch.nn.parameter.Parameter"
              }
            },
            "_buffers": {
              "min_std_param": {
                "$type": "torch.Tensor"
              }
            },
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_mean_module": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 11.0,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      },
                      "1": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  },
                  "_output_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 1.0,
                            "$type": "torch.nn.modules.linear.Linear"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  }
                },
                "_output_dim": 1.0,
                "$type": "garage.torch.modules.mlp_module.MLPModule"
              }
            },
            "_input_dim": 11.0,
            "_hidden_sizes": [
              32,
              32
            ],
            "_action_dim": 1.0,
            "_learn_std": true,
            "_std_hidden_sizes": [
              32,
              32
            ],
            "_min_std": 1e-06,
            "_max_std": "None",
            "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
            "_std_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_std_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_std_output_nonlinearity": "None",
            "_std_output_w_init": {
              "$type": "builtins.function"
            },
            "_std_parameterization": "exp",
            "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
            "_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_output_nonlinearity": "None",
            "_output_w_init": {
              "$type": "builtins.function"
            },
            "_output_b_init": {
              "$type": "builtins.function"
            },
            "_layer_normalization": false,
            "_norm_dist_class": {
              "$typename": "torch.distributions.normal.Normal"
            },
            "_min_std_param": {
              "$type": "torch.Tensor"
            },
            "_max_std_param": "None",
            "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
          }
        },
        "_env_spec": {
          "max_episode_length": 1000,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_name": "GaussianMLPPolicy",
        "_obs_dim": 11.0,
        "_action_dim": 1.0,
        "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
      },
      {
        "training": true,
        "_parameters": {},
        "_buffers": {},
        "_non_persistent_buffers_set": [],
        "_backward_hooks": {},
        "_forward_hooks": {},
        "_forward_pre_hooks": {},
        "_state_dict_hooks": {},
        "_load_state_dict_pre_hooks": {},
        "_modules": {
          "_module": {
            "training": true,
            "_parameters": {
              "_init_std": {
                "$type": "torch.nn.parameter.Parameter"
              }
            },
            "_buffers": {
              "min_std_param": {
                "$type": "torch.Tensor"
              }
            },
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_mean_module": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 11.0,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      },
                      "1": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  },
                  "_output_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 1.0,
                            "$type": "torch.nn.modules.linear.Linear"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  }
                },
                "_output_dim": 1.0,
                "$type": "garage.torch.modules.mlp_module.MLPModule"
              }
            },
            "_input_dim": 11.0,
            "_hidden_sizes": [
              32,
              32
            ],
            "_action_dim": 1.0,
            "_learn_std": true,
            "_std_hidden_sizes": [
              32,
              32
            ],
            "_min_std": 1e-06,
            "_max_std": "None",
            "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
            "_std_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_std_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_std_output_nonlinearity": "None",
            "_std_output_w_init": {
              "$type": "builtins.function"
            },
            "_std_parameterization": "exp",
            "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
            "_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_output_nonlinearity": "None",
            "_output_w_init": {
              "$type": "builtins.function"
            },
            "_output_b_init": {
              "$type": "builtins.function"
            },
            "_layer_normalization": false,
            "_norm_dist_class": {
              "$typename": "torch.distributions.normal.Normal"
            },
            "_min_std_param": {
              "$type": "torch.Tensor"
            },
            "_max_std_param": "None",
            "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
          }
        },
        "_env_spec": {
          "max_episode_length": 1000,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_name": "GaussianMLPPolicy",
        "_obs_dim": 11.0,
        "_action_dim": 1.0,
        "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
      },
      {
        "training": true,
        "_parameters": {},
        "_buffers": {},
        "_non_persistent_buffers_set": [],
        "_backward_hooks": {},
        "_forward_hooks": {},
        "_forward_pre_hooks": {},
        "_state_dict_hooks": {},
        "_load_state_dict_pre_hooks": {},
        "_modules": {
          "_module": {
            "training": true,
            "_parameters": {
              "_init_std": {
                "$type": "torch.nn.parameter.Parameter"
              }
            },
            "_buffers": {
              "min_std_param": {
                "$type": "torch.Tensor"
              }
            },
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_mean_module": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 11.0,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      },
                      "1": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  },
                  "_output_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 1.0,
                            "$type": "torch.nn.modules.linear.Linear"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  }
                },
                "_output_dim": 1.0,
                "$type": "garage.torch.modules.mlp_module.MLPModule"
              }
            },
            "_input_dim": 11.0,
            "_hidden_sizes": [
              32,
              32
            ],
            "_action_dim": 1.0,
            "_learn_std": true,
            "_std_hidden_sizes": [
              32,
              32
            ],
            "_min_std": 1e-06,
            "_max_std": "None",
            "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
            "_std_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_std_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_std_output_nonlinearity": "None",
            "_std_output_w_init": {
              "$type": "builtins.function"
            },
            "_std_parameterization": "exp",
            "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
            "_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_output_nonlinearity": "None",
            "_output_w_init": {
              "$type": "builtins.function"
            },
            "_output_b_init": {
              "$type": "builtins.function"
            },
            "_layer_normalization": false,
            "_norm_dist_class": {
              "$typename": "torch.distributions.normal.Normal"
            },
            "_min_std_param": {
              "$type": "torch.Tensor"
            },
            "_max_std_param": "None",
            "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
          }
        },
        "_env_spec": {
          "max_episode_length": 1000,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_name": "GaussianMLPPolicy",
        "_obs_dim": 11.0,
        "_action_dim": 1.0,
        "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
      }
    ],
    "_envs": [
      {
        "_env": {
          "_env": {
            "env": {
              "env": {
                "env": {
                  "env": {
                    "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                    "model": "<mujoco._structs.MjModel object at 0x7f5b04bb2830>",
                    "data": "<mujoco._structs.MjData object at 0x7f5b0418c730>",
                    "init_qpos": "array([0., 0., 0.])",
                    "init_qvel": "array([0., 0., 0.])",
                    "_viewers": {},
                    "frame_skip": 5,
                    "viewer": "None",
                    "observation_space": {
                      "dtype": "dtype('float64')",
                      "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "_shape": [
                        11
                      ],
                      "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                      "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                      "low_repr": "-inf",
                      "high_repr": "inf",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "action_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True])",
                      "bounded_above": "array([ True])",
                      "_shape": [
                        1
                      ],
                      "low": "array([-1.], dtype=float32)",
                      "high": "array([1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "render_mode": "None",
                    "renderer": {
                      "no_returns_render": [
                        "human"
                      ],
                      "single_render": [
                        "single_rgb_array",
                        "single_depth_array",
                        "single_state_pixels"
                      ],
                      "mode": "None",
                      "render": {
                        "$type": "functools.partial"
                      },
                      "render_list": [],
                      "$type": "gym.utils.renderer.Renderer"
                    },
                    "_ezpickle_args": [],
                    "_ezpickle_kwargs": {},
                    "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "checked_reset": false,
                  "checked_step": false,
                  "checked_render": false,
                  "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": true,
              "_has_reset": false,
              "_disable_render_order_enforcing": false,
              "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": false,
            "_max_episode_steps": 1000,
            "_elapsed_steps": "None",
            "$type": "gym.wrappers.time_limit.TimeLimit"
          },
          "_max_episode_length": 1000,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array",
            "single_rgb_array",
            "single_depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        "_scale_reward": 1.0,
        "_normalize_obs": false,
        "_normalize_reward": false,
        "_expected_action_scale": 1.0,
        "_flatten_obs": true,
        "_obs_alpha": 0.001,
        "_obs_mean": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
        "_obs_var": "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])",
        "_reward_alpha": 0.001,
        "_reward_mean": 0.0,
        "_reward_var": 1.0,
        "$type": "garage.envs.normalized_env.NormalizedEnv"
      },
      {
        "_env": {
          "_env": {
            "env": {
              "env": {
                "env": {
                  "env": {
                    "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                    "model": "<mujoco._structs.MjModel object at 0x7f5b048d3df0>",
                    "data": "<mujoco._structs.MjData object at 0x7f5b0419c770>",
                    "init_qpos": "array([0., 0., 0.])",
                    "init_qvel": "array([0., 0., 0.])",
                    "_viewers": {},
                    "frame_skip": 5,
                    "viewer": "None",
                    "observation_space": {
                      "dtype": "dtype('float64')",
                      "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "_shape": [
                        11
                      ],
                      "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                      "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                      "low_repr": "-inf",
                      "high_repr": "inf",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "action_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True])",
                      "bounded_above": "array([ True])",
                      "_shape": [
                        1
                      ],
                      "low": "array([-1.], dtype=float32)",
                      "high": "array([1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "render_mode": "None",
                    "renderer": {
                      "no_returns_render": [
                        "human"
                      ],
                      "single_render": [
                        "single_rgb_array",
                        "single_depth_array",
                        "single_state_pixels"
                      ],
                      "mode": "None",
                      "render": {
                        "$type": "functools.partial"
                      },
                      "render_list": [],
                      "$type": "gym.utils.renderer.Renderer"
                    },
                    "_ezpickle_args": [],
                    "_ezpickle_kwargs": {},
                    "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "checked_reset": false,
                  "checked_step": false,
                  "checked_render": false,
                  "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": true,
              "_has_reset": false,
              "_disable_render_order_enforcing": false,
              "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": false,
            "_max_episode_steps": 1000,
            "_elapsed_steps": "None",
            "$type": "gym.wrappers.time_limit.TimeLimit"
          },
          "_max_episode_length": 1000,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array",
            "single_rgb_array",
            "single_depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        "_scale_reward": 1.0,
        "_normalize_obs": false,
        "_normalize_reward": false,
        "_expected_action_scale": 1.0,
        "_flatten_obs": true,
        "_obs_alpha": 0.001,
        "_obs_mean": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
        "_obs_var": "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])",
        "_reward_alpha": 0.001,
        "_reward_mean": 0.0,
        "_reward_var": 1.0,
        "$type": "garage.envs.normalized_env.NormalizedEnv"
      },
      {
        "_env": {
          "_env": {
            "env": {
              "env": {
                "env": {
                  "env": {
                    "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                    "model": "<mujoco._structs.MjModel object at 0x7f5aff90bef0>",
                    "data": "<mujoco._structs.MjData object at 0x7f5aff90bf30>",
                    "init_qpos": "array([0., 0., 0.])",
                    "init_qvel": "array([0., 0., 0.])",
                    "_viewers": {},
                    "frame_skip": 5,
                    "viewer": "None",
                    "observation_space": {
                      "dtype": "dtype('float64')",
                      "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "_shape": [
                        11
                      ],
                      "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                      "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                      "low_repr": "-inf",
                      "high_repr": "inf",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "action_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True])",
                      "bounded_above": "array([ True])",
                      "_shape": [
                        1
                      ],
                      "low": "array([-1.], dtype=float32)",
                      "high": "array([1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "render_mode": "None",
                    "renderer": {
                      "no_returns_render": [
                        "human"
                      ],
                      "single_render": [
                        "single_rgb_array",
                        "single_depth_array",
                        "single_state_pixels"
                      ],
                      "mode": "None",
                      "render": {
                        "$type": "functools.partial"
                      },
                      "render_list": [],
                      "$type": "gym.utils.renderer.Renderer"
                    },
                    "_ezpickle_args": [],
                    "_ezpickle_kwargs": {},
                    "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "checked_reset": false,
                  "checked_step": false,
                  "checked_render": false,
                  "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": true,
              "_has_reset": false,
              "_disable_render_order_enforcing": false,
              "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": false,
            "_max_episode_steps": 1000,
            "_elapsed_steps": "None",
            "$type": "gym.wrappers.time_limit.TimeLimit"
          },
          "_max_episode_length": 1000,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array",
            "single_rgb_array",
            "single_depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        "_scale_reward": 1.0,
        "_normalize_obs": false,
        "_normalize_reward": false,
        "_expected_action_scale": 1.0,
        "_flatten_obs": true,
        "_obs_alpha": 0.001,
        "_obs_mean": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
        "_obs_var": "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])",
        "_reward_alpha": 0.001,
        "_reward_mean": 0.0,
        "_reward_var": 1.0,
        "$type": "garage.envs.normalized_env.NormalizedEnv"
      },
      {
        "_env": {
          "_env": {
            "env": {
              "env": {
                "env": {
                  "env": {
                    "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                    "model": "<mujoco._structs.MjModel object at 0x7f5aff7e29b0>",
                    "data": "<mujoco._structs.MjData object at 0x7f5aff7e29f0>",
                    "init_qpos": "array([0., 0., 0.])",
                    "init_qvel": "array([0., 0., 0.])",
                    "_viewers": {},
                    "frame_skip": 5,
                    "viewer": "None",
                    "observation_space": {
                      "dtype": "dtype('float64')",
                      "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "_shape": [
                        11
                      ],
                      "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                      "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                      "low_repr": "-inf",
                      "high_repr": "inf",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "action_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True])",
                      "bounded_above": "array([ True])",
                      "_shape": [
                        1
                      ],
                      "low": "array([-1.], dtype=float32)",
                      "high": "array([1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "render_mode": "None",
                    "renderer": {
                      "no_returns_render": [
                        "human"
                      ],
                      "single_render": [
                        "single_rgb_array",
                        "single_depth_array",
                        "single_state_pixels"
                      ],
                      "mode": "None",
                      "render": {
                        "$type": "functools.partial"
                      },
                      "render_list": [],
                      "$type": "gym.utils.renderer.Renderer"
                    },
                    "_ezpickle_args": [],
                    "_ezpickle_kwargs": {},
                    "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "checked_reset": false,
                  "checked_step": false,
                  "checked_render": false,
                  "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": true,
              "_has_reset": false,
              "_disable_render_order_enforcing": false,
              "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": false,
            "_max_episode_steps": 1000,
            "_elapsed_steps": "None",
            "$type": "gym.wrappers.time_limit.TimeLimit"
          },
          "_max_episode_length": 1000,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array",
            "single_rgb_array",
            "single_depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        "_scale_reward": 1.0,
        "_normalize_obs": false,
        "_normalize_reward": false,
        "_expected_action_scale": 1.0,
        "_flatten_obs": true,
        "_obs_alpha": 0.001,
        "_obs_mean": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
        "_obs_var": "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])",
        "_reward_alpha": 0.001,
        "_reward_mean": 0.0,
        "_reward_var": 1.0,
        "$type": "garage.envs.normalized_env.NormalizedEnv"
      },
      {
        "_env": {
          "_env": {
            "env": {
              "env": {
                "env": {
                  "env": {
                    "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                    "model": "<mujoco._structs.MjModel object at 0x7f5aff818470>",
                    "data": "<mujoco._structs.MjData object at 0x7f5aff8184b0>",
                    "init_qpos": "array([0., 0., 0.])",
                    "init_qvel": "array([0., 0., 0.])",
                    "_viewers": {},
                    "frame_skip": 5,
                    "viewer": "None",
                    "observation_space": {
                      "dtype": "dtype('float64')",
                      "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "_shape": [
                        11
                      ],
                      "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                      "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                      "low_repr": "-inf",
                      "high_repr": "inf",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "action_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True])",
                      "bounded_above": "array([ True])",
                      "_shape": [
                        1
                      ],
                      "low": "array([-1.], dtype=float32)",
                      "high": "array([1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "render_mode": "None",
                    "renderer": {
                      "no_returns_render": [
                        "human"
                      ],
                      "single_render": [
                        "single_rgb_array",
                        "single_depth_array",
                        "single_state_pixels"
                      ],
                      "mode": "None",
                      "render": {
                        "$type": "functools.partial"
                      },
                      "render_list": [],
                      "$type": "gym.utils.renderer.Renderer"
                    },
                    "_ezpickle_args": [],
                    "_ezpickle_kwargs": {},
                    "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "checked_reset": false,
                  "checked_step": false,
                  "checked_render": false,
                  "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": true,
              "_has_reset": false,
              "_disable_render_order_enforcing": false,
              "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": false,
            "_max_episode_steps": 1000,
            "_elapsed_steps": "None",
            "$type": "gym.wrappers.time_limit.TimeLimit"
          },
          "_max_episode_length": 1000,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array",
            "single_rgb_array",
            "single_depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        "_scale_reward": 1.0,
        "_normalize_obs": false,
        "_normalize_reward": false,
        "_expected_action_scale": 1.0,
        "_flatten_obs": true,
        "_obs_alpha": 0.001,
        "_obs_mean": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
        "_obs_var": "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])",
        "_reward_alpha": 0.001,
        "_reward_mean": 0.0,
        "_reward_var": 1.0,
        "$type": "garage.envs.normalized_env.NormalizedEnv"
      },
      {
        "_env": {
          "_env": {
            "env": {
              "env": {
                "env": {
                  "env": {
                    "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                    "model": "<mujoco._structs.MjModel object at 0x7f5aff818f30>",
                    "data": "<mujoco._structs.MjData object at 0x7f5aff818f70>",
                    "init_qpos": "array([0., 0., 0.])",
                    "init_qvel": "array([0., 0., 0.])",
                    "_viewers": {},
                    "frame_skip": 5,
                    "viewer": "None",
                    "observation_space": {
                      "dtype": "dtype('float64')",
                      "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "_shape": [
                        11
                      ],
                      "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                      "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                      "low_repr": "-inf",
                      "high_repr": "inf",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "action_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True])",
                      "bounded_above": "array([ True])",
                      "_shape": [
                        1
                      ],
                      "low": "array([-1.], dtype=float32)",
                      "high": "array([1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "render_mode": "None",
                    "renderer": {
                      "no_returns_render": [
                        "human"
                      ],
                      "single_render": [
                        "single_rgb_array",
                        "single_depth_array",
                        "single_state_pixels"
                      ],
                      "mode": "None",
                      "render": {
                        "$type": "functools.partial"
                      },
                      "render_list": [],
                      "$type": "gym.utils.renderer.Renderer"
                    },
                    "_ezpickle_args": [],
                    "_ezpickle_kwargs": {},
                    "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "checked_reset": false,
                  "checked_step": false,
                  "checked_render": false,
                  "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": true,
              "_has_reset": false,
              "_disable_render_order_enforcing": false,
              "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": false,
            "_max_episode_steps": 1000,
            "_elapsed_steps": "None",
            "$type": "gym.wrappers.time_limit.TimeLimit"
          },
          "_max_episode_length": 1000,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array",
            "single_rgb_array",
            "single_depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        "_scale_reward": 1.0,
        "_normalize_obs": false,
        "_normalize_reward": false,
        "_expected_action_scale": 1.0,
        "_flatten_obs": true,
        "_obs_alpha": 0.001,
        "_obs_mean": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
        "_obs_var": "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])",
        "_reward_alpha": 0.001,
        "_reward_mean": 0.0,
        "_reward_var": 1.0,
        "$type": "garage.envs.normalized_env.NormalizedEnv"
      },
      {
        "_env": {
          "_env": {
            "env": {
              "env": {
                "env": {
                  "env": {
                    "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                    "model": "<mujoco._structs.MjModel object at 0x7f5aff77da30>",
                    "data": "<mujoco._structs.MjData object at 0x7f5aff77da70>",
                    "init_qpos": "array([0., 0., 0.])",
                    "init_qvel": "array([0., 0., 0.])",
                    "_viewers": {},
                    "frame_skip": 5,
                    "viewer": "None",
                    "observation_space": {
                      "dtype": "dtype('float64')",
                      "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "_shape": [
                        11
                      ],
                      "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                      "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                      "low_repr": "-inf",
                      "high_repr": "inf",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "action_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True])",
                      "bounded_above": "array([ True])",
                      "_shape": [
                        1
                      ],
                      "low": "array([-1.], dtype=float32)",
                      "high": "array([1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "render_mode": "None",
                    "renderer": {
                      "no_returns_render": [
                        "human"
                      ],
                      "single_render": [
                        "single_rgb_array",
                        "single_depth_array",
                        "single_state_pixels"
                      ],
                      "mode": "None",
                      "render": {
                        "$type": "functools.partial"
                      },
                      "render_list": [],
                      "$type": "gym.utils.renderer.Renderer"
                    },
                    "_ezpickle_args": [],
                    "_ezpickle_kwargs": {},
                    "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "checked_reset": false,
                  "checked_step": false,
                  "checked_render": false,
                  "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": true,
              "_has_reset": false,
              "_disable_render_order_enforcing": false,
              "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": false,
            "_max_episode_steps": 1000,
            "_elapsed_steps": "None",
            "$type": "gym.wrappers.time_limit.TimeLimit"
          },
          "_max_episode_length": 1000,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array",
            "single_rgb_array",
            "single_depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        "_scale_reward": 1.0,
        "_normalize_obs": false,
        "_normalize_reward": false,
        "_expected_action_scale": 1.0,
        "_flatten_obs": true,
        "_obs_alpha": 0.001,
        "_obs_mean": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
        "_obs_var": "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])",
        "_reward_alpha": 0.001,
        "_reward_mean": 0.0,
        "_reward_var": 1.0,
        "$type": "garage.envs.normalized_env.NormalizedEnv"
      },
      {
        "_env": {
          "_env": {
            "env": {
              "env": {
                "env": {
                  "env": {
                    "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                    "model": "<mujoco._structs.MjModel object at 0x7f5aff7334f0>",
                    "data": "<mujoco._structs.MjData object at 0x7f5aff733530>",
                    "init_qpos": "array([0., 0., 0.])",
                    "init_qvel": "array([0., 0., 0.])",
                    "_viewers": {},
                    "frame_skip": 5,
                    "viewer": "None",
                    "observation_space": {
                      "dtype": "dtype('float64')",
                      "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "_shape": [
                        11
                      ],
                      "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                      "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                      "low_repr": "-inf",
                      "high_repr": "inf",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "action_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True])",
                      "bounded_above": "array([ True])",
                      "_shape": [
                        1
                      ],
                      "low": "array([-1.], dtype=float32)",
                      "high": "array([1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "render_mode": "None",
                    "renderer": {
                      "no_returns_render": [
                        "human"
                      ],
                      "single_render": [
                        "single_rgb_array",
                        "single_depth_array",
                        "single_state_pixels"
                      ],
                      "mode": "None",
                      "render": {
                        "$type": "functools.partial"
                      },
                      "render_list": [],
                      "$type": "gym.utils.renderer.Renderer"
                    },
                    "_ezpickle_args": [],
                    "_ezpickle_kwargs": {},
                    "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "checked_reset": false,
                  "checked_step": false,
                  "checked_render": false,
                  "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": true,
              "_has_reset": false,
              "_disable_render_order_enforcing": false,
              "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": false,
            "_max_episode_steps": 1000,
            "_elapsed_steps": "None",
            "$type": "gym.wrappers.time_limit.TimeLimit"
          },
          "_max_episode_length": 1000,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array",
            "single_rgb_array",
            "single_depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        "_scale_reward": 1.0,
        "_normalize_obs": false,
        "_normalize_reward": false,
        "_expected_action_scale": 1.0,
        "_flatten_obs": true,
        "_obs_alpha": 0.001,
        "_obs_mean": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
        "_obs_var": "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])",
        "_reward_alpha": 0.001,
        "_reward_mean": 0.0,
        "_reward_var": 1.0,
        "$type": "garage.envs.normalized_env.NormalizedEnv"
      },
      {
        "_env": {
          "_env": {
            "env": {
              "env": {
                "env": {
                  "env": {
                    "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                    "model": "<mujoco._structs.MjModel object at 0x7f5aff733fb0>",
                    "data": "<mujoco._structs.MjData object at 0x7f5aff6ff030>",
                    "init_qpos": "array([0., 0., 0.])",
                    "init_qvel": "array([0., 0., 0.])",
                    "_viewers": {},
                    "frame_skip": 5,
                    "viewer": "None",
                    "observation_space": {
                      "dtype": "dtype('float64')",
                      "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "_shape": [
                        11
                      ],
                      "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                      "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                      "low_repr": "-inf",
                      "high_repr": "inf",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "action_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True])",
                      "bounded_above": "array([ True])",
                      "_shape": [
                        1
                      ],
                      "low": "array([-1.], dtype=float32)",
                      "high": "array([1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "render_mode": "None",
                    "renderer": {
                      "no_returns_render": [
                        "human"
                      ],
                      "single_render": [
                        "single_rgb_array",
                        "single_depth_array",
                        "single_state_pixels"
                      ],
                      "mode": "None",
                      "render": {
                        "$type": "functools.partial"
                      },
                      "render_list": [],
                      "$type": "gym.utils.renderer.Renderer"
                    },
                    "_ezpickle_args": [],
                    "_ezpickle_kwargs": {},
                    "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "checked_reset": false,
                  "checked_step": false,
                  "checked_render": false,
                  "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": true,
              "_has_reset": false,
              "_disable_render_order_enforcing": false,
              "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": false,
            "_max_episode_steps": 1000,
            "_elapsed_steps": "None",
            "$type": "gym.wrappers.time_limit.TimeLimit"
          },
          "_max_episode_length": 1000,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array",
            "single_rgb_array",
            "single_depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        "_scale_reward": 1.0,
        "_normalize_obs": false,
        "_normalize_reward": false,
        "_expected_action_scale": 1.0,
        "_flatten_obs": true,
        "_obs_alpha": 0.001,
        "_obs_mean": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
        "_obs_var": "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])",
        "_reward_alpha": 0.001,
        "_reward_mean": 0.0,
        "_reward_var": 1.0,
        "$type": "garage.envs.normalized_env.NormalizedEnv"
      },
      {
        "_env": {
          "_env": {
            "env": {
              "env": {
                "env": {
                  "env": {
                    "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                    "model": "<mujoco._structs.MjModel object at 0x7f5aff6ffab0>",
                    "data": "<mujoco._structs.MjData object at 0x7f5aff6ffaf0>",
                    "init_qpos": "array([0., 0., 0.])",
                    "init_qvel": "array([0., 0., 0.])",
                    "_viewers": {},
                    "frame_skip": 5,
                    "viewer": "None",
                    "observation_space": {
                      "dtype": "dtype('float64')",
                      "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "_shape": [
                        11
                      ],
                      "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                      "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                      "low_repr": "-inf",
                      "high_repr": "inf",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "action_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True])",
                      "bounded_above": "array([ True])",
                      "_shape": [
                        1
                      ],
                      "low": "array([-1.], dtype=float32)",
                      "high": "array([1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "render_mode": "None",
                    "renderer": {
                      "no_returns_render": [
                        "human"
                      ],
                      "single_render": [
                        "single_rgb_array",
                        "single_depth_array",
                        "single_state_pixels"
                      ],
                      "mode": "None",
                      "render": {
                        "$type": "functools.partial"
                      },
                      "render_list": [],
                      "$type": "gym.utils.renderer.Renderer"
                    },
                    "_ezpickle_args": [],
                    "_ezpickle_kwargs": {},
                    "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "checked_reset": false,
                  "checked_step": false,
                  "checked_render": false,
                  "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": true,
              "_has_reset": false,
              "_disable_render_order_enforcing": false,
              "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": false,
            "_max_episode_steps": 1000,
            "_elapsed_steps": "None",
            "$type": "gym.wrappers.time_limit.TimeLimit"
          },
          "_max_episode_length": 1000,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array",
            "single_rgb_array",
            "single_depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        "_scale_reward": 1.0,
        "_normalize_obs": false,
        "_normalize_reward": false,
        "_expected_action_scale": 1.0,
        "_flatten_obs": true,
        "_obs_alpha": 0.001,
        "_obs_mean": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
        "_obs_var": "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])",
        "_reward_alpha": 0.001,
        "_reward_mean": 0.0,
        "_reward_var": 1.0,
        "$type": "garage.envs.normalized_env.NormalizedEnv"
      },
      {
        "_env": {
          "_env": {
            "env": {
              "env": {
                "env": {
                  "env": {
                    "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                    "model": "<mujoco._structs.MjModel object at 0x7f5aff6ff7b0>",
                    "data": "<mujoco._structs.MjData object at 0x7f5aff6ff270>",
                    "init_qpos": "array([0., 0., 0.])",
                    "init_qvel": "array([0., 0., 0.])",
                    "_viewers": {},
                    "frame_skip": 5,
                    "viewer": "None",
                    "observation_space": {
                      "dtype": "dtype('float64')",
                      "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "_shape": [
                        11
                      ],
                      "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                      "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                      "low_repr": "-inf",
                      "high_repr": "inf",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "action_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True])",
                      "bounded_above": "array([ True])",
                      "_shape": [
                        1
                      ],
                      "low": "array([-1.], dtype=float32)",
                      "high": "array([1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "render_mode": "None",
                    "renderer": {
                      "no_returns_render": [
                        "human"
                      ],
                      "single_render": [
                        "single_rgb_array",
                        "single_depth_array",
                        "single_state_pixels"
                      ],
                      "mode": "None",
                      "render": {
                        "$type": "functools.partial"
                      },
                      "render_list": [],
                      "$type": "gym.utils.renderer.Renderer"
                    },
                    "_ezpickle_args": [],
                    "_ezpickle_kwargs": {},
                    "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "checked_reset": false,
                  "checked_step": false,
                  "checked_render": false,
                  "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": true,
              "_has_reset": false,
              "_disable_render_order_enforcing": false,
              "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": false,
            "_max_episode_steps": 1000,
            "_elapsed_steps": "None",
            "$type": "gym.wrappers.time_limit.TimeLimit"
          },
          "_max_episode_length": 1000,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array",
            "single_rgb_array",
            "single_depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        "_scale_reward": 1.0,
        "_normalize_obs": false,
        "_normalize_reward": false,
        "_expected_action_scale": 1.0,
        "_flatten_obs": true,
        "_obs_alpha": 0.001,
        "_obs_mean": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
        "_obs_var": "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])",
        "_reward_alpha": 0.001,
        "_reward_mean": 0.0,
        "_reward_var": 1.0,
        "$type": "garage.envs.normalized_env.NormalizedEnv"
      },
      {
        "_env": {
          "_env": {
            "env": {
              "env": {
                "env": {
                  "env": {
                    "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                    "model": "<mujoco._structs.MjModel object at 0x7f5aff818230>",
                    "data": "<mujoco._structs.MjData object at 0x7f5aff818c30>",
                    "init_qpos": "array([0., 0., 0.])",
                    "init_qvel": "array([0., 0., 0.])",
                    "_viewers": {},
                    "frame_skip": 5,
                    "viewer": "None",
                    "observation_space": {
                      "dtype": "dtype('float64')",
                      "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "_shape": [
                        11
                      ],
                      "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                      "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                      "low_repr": "-inf",
                      "high_repr": "inf",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "action_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True])",
                      "bounded_above": "array([ True])",
                      "_shape": [
                        1
                      ],
                      "low": "array([-1.], dtype=float32)",
                      "high": "array([1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "render_mode": "None",
                    "renderer": {
                      "no_returns_render": [
                        "human"
                      ],
                      "single_render": [
                        "single_rgb_array",
                        "single_depth_array",
                        "single_state_pixels"
                      ],
                      "mode": "None",
                      "render": {
                        "$type": "functools.partial"
                      },
                      "render_list": [],
                      "$type": "gym.utils.renderer.Renderer"
                    },
                    "_ezpickle_args": [],
                    "_ezpickle_kwargs": {},
                    "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "checked_reset": false,
                  "checked_step": false,
                  "checked_render": false,
                  "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": true,
              "_has_reset": false,
              "_disable_render_order_enforcing": false,
              "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": false,
            "_max_episode_steps": 1000,
            "_elapsed_steps": "None",
            "$type": "gym.wrappers.time_limit.TimeLimit"
          },
          "_max_episode_length": 1000,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array",
            "single_rgb_array",
            "single_depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        "_scale_reward": 1.0,
        "_normalize_obs": false,
        "_normalize_reward": false,
        "_expected_action_scale": 1.0,
        "_flatten_obs": true,
        "_obs_alpha": 0.001,
        "_obs_mean": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
        "_obs_var": "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])",
        "_reward_alpha": 0.001,
        "_reward_mean": 0.0,
        "_reward_var": 1.0,
        "$type": "garage.envs.normalized_env.NormalizedEnv"
      },
      {
        "_env": {
          "_env": {
            "env": {
              "env": {
                "env": {
                  "env": {
                    "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                    "model": "<mujoco._structs.MjModel object at 0x7f5affd6b3b0>",
                    "data": "<mujoco._structs.MjData object at 0x7f5b041c9b30>",
                    "init_qpos": "array([0., 0., 0.])",
                    "init_qvel": "array([0., 0., 0.])",
                    "_viewers": {},
                    "frame_skip": 5,
                    "viewer": "None",
                    "observation_space": {
                      "dtype": "dtype('float64')",
                      "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "_shape": [
                        11
                      ],
                      "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                      "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                      "low_repr": "-inf",
                      "high_repr": "inf",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "action_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True])",
                      "bounded_above": "array([ True])",
                      "_shape": [
                        1
                      ],
                      "low": "array([-1.], dtype=float32)",
                      "high": "array([1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "render_mode": "None",
                    "renderer": {
                      "no_returns_render": [
                        "human"
                      ],
                      "single_render": [
                        "single_rgb_array",
                        "single_depth_array",
                        "single_state_pixels"
                      ],
                      "mode": "None",
                      "render": {
                        "$type": "functools.partial"
                      },
                      "render_list": [],
                      "$type": "gym.utils.renderer.Renderer"
                    },
                    "_ezpickle_args": [],
                    "_ezpickle_kwargs": {},
                    "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "checked_reset": false,
                  "checked_step": false,
                  "checked_render": false,
                  "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": true,
              "_has_reset": false,
              "_disable_render_order_enforcing": false,
              "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": false,
            "_max_episode_steps": 1000,
            "_elapsed_steps": "None",
            "$type": "gym.wrappers.time_limit.TimeLimit"
          },
          "_max_episode_length": 1000,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array",
            "single_rgb_array",
            "single_depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        "_scale_reward": 1.0,
        "_normalize_obs": false,
        "_normalize_reward": false,
        "_expected_action_scale": 1.0,
        "_flatten_obs": true,
        "_obs_alpha": 0.001,
        "_obs_mean": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
        "_obs_var": "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])",
        "_reward_alpha": 0.001,
        "_reward_mean": 0.0,
        "_reward_var": 1.0,
        "$type": "garage.envs.normalized_env.NormalizedEnv"
      },
      {
        "_env": {
          "_env": {
            "env": {
              "env": {
                "env": {
                  "env": {
                    "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                    "model": "<mujoco._structs.MjModel object at 0x7f5aff6cc830>",
                    "data": "<mujoco._structs.MjData object at 0x7f5aff6cc870>",
                    "init_qpos": "array([0., 0., 0.])",
                    "init_qvel": "array([0., 0., 0.])",
                    "_viewers": {},
                    "frame_skip": 5,
                    "viewer": "None",
                    "observation_space": {
                      "dtype": "dtype('float64')",
                      "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "_shape": [
                        11
                      ],
                      "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                      "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                      "low_repr": "-inf",
                      "high_repr": "inf",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "action_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True])",
                      "bounded_above": "array([ True])",
                      "_shape": [
                        1
                      ],
                      "low": "array([-1.], dtype=float32)",
                      "high": "array([1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "render_mode": "None",
                    "renderer": {
                      "no_returns_render": [
                        "human"
                      ],
                      "single_render": [
                        "single_rgb_array",
                        "single_depth_array",
                        "single_state_pixels"
                      ],
                      "mode": "None",
                      "render": {
                        "$type": "functools.partial"
                      },
                      "render_list": [],
                      "$type": "gym.utils.renderer.Renderer"
                    },
                    "_ezpickle_args": [],
                    "_ezpickle_kwargs": {},
                    "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "checked_reset": false,
                  "checked_step": false,
                  "checked_render": false,
                  "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": true,
              "_has_reset": false,
              "_disable_render_order_enforcing": false,
              "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": false,
            "_max_episode_steps": 1000,
            "_elapsed_steps": "None",
            "$type": "gym.wrappers.time_limit.TimeLimit"
          },
          "_max_episode_length": 1000,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array",
            "single_rgb_array",
            "single_depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        "_scale_reward": 1.0,
        "_normalize_obs": false,
        "_normalize_reward": false,
        "_expected_action_scale": 1.0,
        "_flatten_obs": true,
        "_obs_alpha": 0.001,
        "_obs_mean": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
        "_obs_var": "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])",
        "_reward_alpha": 0.001,
        "_reward_mean": 0.0,
        "_reward_var": 1.0,
        "$type": "garage.envs.normalized_env.NormalizedEnv"
      },
      {
        "_env": {
          "_env": {
            "env": {
              "env": {
                "env": {
                  "env": {
                    "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                    "model": "<mujoco._structs.MjModel object at 0x7f5aff7de2f0>",
                    "data": "<mujoco._structs.MjData object at 0x7f5aff7de330>",
                    "init_qpos": "array([0., 0., 0.])",
                    "init_qvel": "array([0., 0., 0.])",
                    "_viewers": {},
                    "frame_skip": 5,
                    "viewer": "None",
                    "observation_space": {
                      "dtype": "dtype('float64')",
                      "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "_shape": [
                        11
                      ],
                      "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                      "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                      "low_repr": "-inf",
                      "high_repr": "inf",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "action_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True])",
                      "bounded_above": "array([ True])",
                      "_shape": [
                        1
                      ],
                      "low": "array([-1.], dtype=float32)",
                      "high": "array([1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "render_mode": "None",
                    "renderer": {
                      "no_returns_render": [
                        "human"
                      ],
                      "single_render": [
                        "single_rgb_array",
                        "single_depth_array",
                        "single_state_pixels"
                      ],
                      "mode": "None",
                      "render": {
                        "$type": "functools.partial"
                      },
                      "render_list": [],
                      "$type": "gym.utils.renderer.Renderer"
                    },
                    "_ezpickle_args": [],
                    "_ezpickle_kwargs": {},
                    "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "checked_reset": false,
                  "checked_step": false,
                  "checked_render": false,
                  "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": true,
              "_has_reset": false,
              "_disable_render_order_enforcing": false,
              "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": false,
            "_max_episode_steps": 1000,
            "_elapsed_steps": "None",
            "$type": "gym.wrappers.time_limit.TimeLimit"
          },
          "_max_episode_length": 1000,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array",
            "single_rgb_array",
            "single_depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        "_scale_reward": 1.0,
        "_normalize_obs": false,
        "_normalize_reward": false,
        "_expected_action_scale": 1.0,
        "_flatten_obs": true,
        "_obs_alpha": 0.001,
        "_obs_mean": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
        "_obs_var": "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])",
        "_reward_alpha": 0.001,
        "_reward_mean": 0.0,
        "_reward_var": 1.0,
        "$type": "garage.envs.normalized_env.NormalizedEnv"
      },
      {
        "_env": {
          "_env": {
            "env": {
              "env": {
                "env": {
                  "env": {
                    "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                    "model": "<mujoco._structs.MjModel object at 0x7f5aff7dedf0>",
                    "data": "<mujoco._structs.MjData object at 0x7f5aff7dee30>",
                    "init_qpos": "array([0., 0., 0.])",
                    "init_qvel": "array([0., 0., 0.])",
                    "_viewers": {},
                    "frame_skip": 5,
                    "viewer": "None",
                    "observation_space": {
                      "dtype": "dtype('float64')",
                      "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "_shape": [
                        11
                      ],
                      "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                      "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                      "low_repr": "-inf",
                      "high_repr": "inf",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "action_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True])",
                      "bounded_above": "array([ True])",
                      "_shape": [
                        1
                      ],
                      "low": "array([-1.], dtype=float32)",
                      "high": "array([1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "render_mode": "None",
                    "renderer": {
                      "no_returns_render": [
                        "human"
                      ],
                      "single_render": [
                        "single_rgb_array",
                        "single_depth_array",
                        "single_state_pixels"
                      ],
                      "mode": "None",
                      "render": {
                        "$type": "functools.partial"
                      },
                      "render_list": [],
                      "$type": "gym.utils.renderer.Renderer"
                    },
                    "_ezpickle_args": [],
                    "_ezpickle_kwargs": {},
                    "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "checked_reset": false,
                  "checked_step": false,
                  "checked_render": false,
                  "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": true,
              "_has_reset": false,
              "_disable_render_order_enforcing": false,
              "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": false,
            "_max_episode_steps": 1000,
            "_elapsed_steps": "None",
            "$type": "gym.wrappers.time_limit.TimeLimit"
          },
          "_max_episode_length": 1000,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array",
            "single_rgb_array",
            "single_depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        "_scale_reward": 1.0,
        "_normalize_obs": false,
        "_normalize_reward": false,
        "_expected_action_scale": 1.0,
        "_flatten_obs": true,
        "_obs_alpha": 0.001,
        "_obs_mean": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
        "_obs_var": "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])",
        "_reward_alpha": 0.001,
        "_reward_mean": 0.0,
        "_reward_var": 1.0,
        "$type": "garage.envs.normalized_env.NormalizedEnv"
      },
      {
        "_env": {
          "_env": {
            "env": {
              "env": {
                "env": {
                  "env": {
                    "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                    "model": "<mujoco._structs.MjModel object at 0x7f5aff61f930>",
                    "data": "<mujoco._structs.MjData object at 0x7f5aff61f970>",
                    "init_qpos": "array([0., 0., 0.])",
                    "init_qvel": "array([0., 0., 0.])",
                    "_viewers": {},
                    "frame_skip": 5,
                    "viewer": "None",
                    "observation_space": {
                      "dtype": "dtype('float64')",
                      "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "_shape": [
                        11
                      ],
                      "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                      "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                      "low_repr": "-inf",
                      "high_repr": "inf",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "action_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True])",
                      "bounded_above": "array([ True])",
                      "_shape": [
                        1
                      ],
                      "low": "array([-1.], dtype=float32)",
                      "high": "array([1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "render_mode": "None",
                    "renderer": {
                      "no_returns_render": [
                        "human"
                      ],
                      "single_render": [
                        "single_rgb_array",
                        "single_depth_array",
                        "single_state_pixels"
                      ],
                      "mode": "None",
                      "render": {
                        "$type": "functools.partial"
                      },
                      "render_list": [],
                      "$type": "gym.utils.renderer.Renderer"
                    },
                    "_ezpickle_args": [],
                    "_ezpickle_kwargs": {},
                    "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "checked_reset": false,
                  "checked_step": false,
                  "checked_render": false,
                  "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": true,
              "_has_reset": false,
              "_disable_render_order_enforcing": false,
              "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": false,
            "_max_episode_steps": 1000,
            "_elapsed_steps": "None",
            "$type": "gym.wrappers.time_limit.TimeLimit"
          },
          "_max_episode_length": 1000,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array",
            "single_rgb_array",
            "single_depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        "_scale_reward": 1.0,
        "_normalize_obs": false,
        "_normalize_reward": false,
        "_expected_action_scale": 1.0,
        "_flatten_obs": true,
        "_obs_alpha": 0.001,
        "_obs_mean": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
        "_obs_var": "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])",
        "_reward_alpha": 0.001,
        "_reward_mean": 0.0,
        "_reward_var": 1.0,
        "$type": "garage.envs.normalized_env.NormalizedEnv"
      },
      {
        "_env": {
          "_env": {
            "env": {
              "env": {
                "env": {
                  "env": {
                    "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                    "model": "<mujoco._structs.MjModel object at 0x7f5aff653470>",
                    "data": "<mujoco._structs.MjData object at 0x7f5aff6534b0>",
                    "init_qpos": "array([0., 0., 0.])",
                    "init_qvel": "array([0., 0., 0.])",
                    "_viewers": {},
                    "frame_skip": 5,
                    "viewer": "None",
                    "observation_space": {
                      "dtype": "dtype('float64')",
                      "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "_shape": [
                        11
                      ],
                      "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                      "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                      "low_repr": "-inf",
                      "high_repr": "inf",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "action_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True])",
                      "bounded_above": "array([ True])",
                      "_shape": [
                        1
                      ],
                      "low": "array([-1.], dtype=float32)",
                      "high": "array([1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "render_mode": "None",
                    "renderer": {
                      "no_returns_render": [
                        "human"
                      ],
                      "single_render": [
                        "single_rgb_array",
                        "single_depth_array",
                        "single_state_pixels"
                      ],
                      "mode": "None",
                      "render": {
                        "$type": "functools.partial"
                      },
                      "render_list": [],
                      "$type": "gym.utils.renderer.Renderer"
                    },
                    "_ezpickle_args": [],
                    "_ezpickle_kwargs": {},
                    "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "checked_reset": false,
                  "checked_step": false,
                  "checked_render": false,
                  "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": true,
              "_has_reset": false,
              "_disable_render_order_enforcing": false,
              "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": false,
            "_max_episode_steps": 1000,
            "_elapsed_steps": "None",
            "$type": "gym.wrappers.time_limit.TimeLimit"
          },
          "_max_episode_length": 1000,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array",
            "single_rgb_array",
            "single_depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        "_scale_reward": 1.0,
        "_normalize_obs": false,
        "_normalize_reward": false,
        "_expected_action_scale": 1.0,
        "_flatten_obs": true,
        "_obs_alpha": 0.001,
        "_obs_mean": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
        "_obs_var": "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])",
        "_reward_alpha": 0.001,
        "_reward_mean": 0.0,
        "_reward_var": 1.0,
        "$type": "garage.envs.normalized_env.NormalizedEnv"
      },
      {
        "_env": {
          "_env": {
            "env": {
              "env": {
                "env": {
                  "env": {
                    "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                    "model": "<mujoco._structs.MjModel object at 0x7f5aff653f70>",
                    "data": "<mujoco._structs.MjData object at 0x7f5aff653fb0>",
                    "init_qpos": "array([0., 0., 0.])",
                    "init_qvel": "array([0., 0., 0.])",
                    "_viewers": {},
                    "frame_skip": 5,
                    "viewer": "None",
                    "observation_space": {
                      "dtype": "dtype('float64')",
                      "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "_shape": [
                        11
                      ],
                      "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                      "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                      "low_repr": "-inf",
                      "high_repr": "inf",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "action_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True])",
                      "bounded_above": "array([ True])",
                      "_shape": [
                        1
                      ],
                      "low": "array([-1.], dtype=float32)",
                      "high": "array([1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "render_mode": "None",
                    "renderer": {
                      "no_returns_render": [
                        "human"
                      ],
                      "single_render": [
                        "single_rgb_array",
                        "single_depth_array",
                        "single_state_pixels"
                      ],
                      "mode": "None",
                      "render": {
                        "$type": "functools.partial"
                      },
                      "render_list": [],
                      "$type": "gym.utils.renderer.Renderer"
                    },
                    "_ezpickle_args": [],
                    "_ezpickle_kwargs": {},
                    "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "checked_reset": false,
                  "checked_step": false,
                  "checked_render": false,
                  "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": true,
              "_has_reset": false,
              "_disable_render_order_enforcing": false,
              "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": false,
            "_max_episode_steps": 1000,
            "_elapsed_steps": "None",
            "$type": "gym.wrappers.time_limit.TimeLimit"
          },
          "_max_episode_length": 1000,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array",
            "single_rgb_array",
            "single_depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        "_scale_reward": 1.0,
        "_normalize_obs": false,
        "_normalize_reward": false,
        "_expected_action_scale": 1.0,
        "_flatten_obs": true,
        "_obs_alpha": 0.001,
        "_obs_mean": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
        "_obs_var": "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])",
        "_reward_alpha": 0.001,
        "_reward_mean": 0.0,
        "_reward_var": 1.0,
        "$type": "garage.envs.normalized_env.NormalizedEnv"
      },
      {
        "_env": {
          "_env": {
            "env": {
              "env": {
                "env": {
                  "env": {
                    "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                    "model": "<mujoco._structs.MjModel object at 0x7f5aff5b8ab0>",
                    "data": "<mujoco._structs.MjData object at 0x7f5aff5b8af0>",
                    "init_qpos": "array([0., 0., 0.])",
                    "init_qvel": "array([0., 0., 0.])",
                    "_viewers": {},
                    "frame_skip": 5,
                    "viewer": "None",
                    "observation_space": {
                      "dtype": "dtype('float64')",
                      "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "_shape": [
                        11
                      ],
                      "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                      "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                      "low_repr": "-inf",
                      "high_repr": "inf",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "action_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True])",
                      "bounded_above": "array([ True])",
                      "_shape": [
                        1
                      ],
                      "low": "array([-1.], dtype=float32)",
                      "high": "array([1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "render_mode": "None",
                    "renderer": {
                      "no_returns_render": [
                        "human"
                      ],
                      "single_render": [
                        "single_rgb_array",
                        "single_depth_array",
                        "single_state_pixels"
                      ],
                      "mode": "None",
                      "render": {
                        "$type": "functools.partial"
                      },
                      "render_list": [],
                      "$type": "gym.utils.renderer.Renderer"
                    },
                    "_ezpickle_args": [],
                    "_ezpickle_kwargs": {},
                    "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "checked_reset": false,
                  "checked_step": false,
                  "checked_render": false,
                  "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": true,
              "_has_reset": false,
              "_disable_render_order_enforcing": false,
              "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": false,
            "_max_episode_steps": 1000,
            "_elapsed_steps": "None",
            "$type": "gym.wrappers.time_limit.TimeLimit"
          },
          "_max_episode_length": 1000,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array",
            "single_rgb_array",
            "single_depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        "_scale_reward": 1.0,
        "_normalize_obs": false,
        "_normalize_reward": false,
        "_expected_action_scale": 1.0,
        "_flatten_obs": true,
        "_obs_alpha": 0.001,
        "_obs_mean": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
        "_obs_var": "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])",
        "_reward_alpha": 0.001,
        "_reward_mean": 0.0,
        "_reward_var": 1.0,
        "$type": "garage.envs.normalized_env.NormalizedEnv"
      },
      {
        "_env": {
          "_env": {
            "env": {
              "env": {
                "env": {
                  "env": {
                    "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                    "model": "<mujoco._structs.MjModel object at 0x7f5aff56e5f0>",
                    "data": "<mujoco._structs.MjData object at 0x7f5aff56e630>",
                    "init_qpos": "array([0., 0., 0.])",
                    "init_qvel": "array([0., 0., 0.])",
                    "_viewers": {},
                    "frame_skip": 5,
                    "viewer": "None",
                    "observation_space": {
                      "dtype": "dtype('float64')",
                      "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "_shape": [
                        11
                      ],
                      "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                      "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                      "low_repr": "-inf",
                      "high_repr": "inf",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "action_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True])",
                      "bounded_above": "array([ True])",
                      "_shape": [
                        1
                      ],
                      "low": "array([-1.], dtype=float32)",
                      "high": "array([1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "render_mode": "None",
                    "renderer": {
                      "no_returns_render": [
                        "human"
                      ],
                      "single_render": [
                        "single_rgb_array",
                        "single_depth_array",
                        "single_state_pixels"
                      ],
                      "mode": "None",
                      "render": {
                        "$type": "functools.partial"
                      },
                      "render_list": [],
                      "$type": "gym.utils.renderer.Renderer"
                    },
                    "_ezpickle_args": [],
                    "_ezpickle_kwargs": {},
                    "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "checked_reset": false,
                  "checked_step": false,
                  "checked_render": false,
                  "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": true,
              "_has_reset": false,
              "_disable_render_order_enforcing": false,
              "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": false,
            "_max_episode_steps": 1000,
            "_elapsed_steps": "None",
            "$type": "gym.wrappers.time_limit.TimeLimit"
          },
          "_max_episode_length": 1000,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array",
            "single_rgb_array",
            "single_depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        "_scale_reward": 1.0,
        "_normalize_obs": false,
        "_normalize_reward": false,
        "_expected_action_scale": 1.0,
        "_flatten_obs": true,
        "_obs_alpha": 0.001,
        "_obs_mean": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
        "_obs_var": "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])",
        "_reward_alpha": 0.001,
        "_reward_mean": 0.0,
        "_reward_var": 1.0,
        "$type": "garage.envs.normalized_env.NormalizedEnv"
      },
      {
        "_env": {
          "_env": {
            "env": {
              "env": {
                "env": {
                  "env": {
                    "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                    "model": "<mujoco._structs.MjModel object at 0x7f5aff56e130>",
                    "data": "<mujoco._structs.MjData object at 0x7f5aff56e2f0>",
                    "init_qpos": "array([0., 0., 0.])",
                    "init_qvel": "array([0., 0., 0.])",
                    "_viewers": {},
                    "frame_skip": 5,
                    "viewer": "None",
                    "observation_space": {
                      "dtype": "dtype('float64')",
                      "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "_shape": [
                        11
                      ],
                      "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                      "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                      "low_repr": "-inf",
                      "high_repr": "inf",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "action_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True])",
                      "bounded_above": "array([ True])",
                      "_shape": [
                        1
                      ],
                      "low": "array([-1.], dtype=float32)",
                      "high": "array([1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "render_mode": "None",
                    "renderer": {
                      "no_returns_render": [
                        "human"
                      ],
                      "single_render": [
                        "single_rgb_array",
                        "single_depth_array",
                        "single_state_pixels"
                      ],
                      "mode": "None",
                      "render": {
                        "$type": "functools.partial"
                      },
                      "render_list": [],
                      "$type": "gym.utils.renderer.Renderer"
                    },
                    "_ezpickle_args": [],
                    "_ezpickle_kwargs": {},
                    "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "checked_reset": false,
                  "checked_step": false,
                  "checked_render": false,
                  "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": true,
              "_has_reset": false,
              "_disable_render_order_enforcing": false,
              "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": false,
            "_max_episode_steps": 1000,
            "_elapsed_steps": "None",
            "$type": "gym.wrappers.time_limit.TimeLimit"
          },
          "_max_episode_length": 1000,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array",
            "single_rgb_array",
            "single_depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        "_scale_reward": 1.0,
        "_normalize_obs": false,
        "_normalize_reward": false,
        "_expected_action_scale": 1.0,
        "_flatten_obs": true,
        "_obs_alpha": 0.001,
        "_obs_mean": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
        "_obs_var": "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])",
        "_reward_alpha": 0.001,
        "_reward_mean": 0.0,
        "_reward_var": 1.0,
        "$type": "garage.envs.normalized_env.NormalizedEnv"
      },
      {
        "_env": {
          "_env": {
            "env": {
              "env": {
                "env": {
                  "env": {
                    "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                    "model": "<mujoco._structs.MjModel object at 0x7f5aff61fbb0>",
                    "data": "<mujoco._structs.MjData object at 0x7f5aff61f6b0>",
                    "init_qpos": "array([0., 0., 0.])",
                    "init_qvel": "array([0., 0., 0.])",
                    "_viewers": {},
                    "frame_skip": 5,
                    "viewer": "None",
                    "observation_space": {
                      "dtype": "dtype('float64')",
                      "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "_shape": [
                        11
                      ],
                      "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                      "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                      "low_repr": "-inf",
                      "high_repr": "inf",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "action_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True])",
                      "bounded_above": "array([ True])",
                      "_shape": [
                        1
                      ],
                      "low": "array([-1.], dtype=float32)",
                      "high": "array([1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "render_mode": "None",
                    "renderer": {
                      "no_returns_render": [
                        "human"
                      ],
                      "single_render": [
                        "single_rgb_array",
                        "single_depth_array",
                        "single_state_pixels"
                      ],
                      "mode": "None",
                      "render": {
                        "$type": "functools.partial"
                      },
                      "render_list": [],
                      "$type": "gym.utils.renderer.Renderer"
                    },
                    "_ezpickle_args": [],
                    "_ezpickle_kwargs": {},
                    "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "checked_reset": false,
                  "checked_step": false,
                  "checked_render": false,
                  "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": true,
              "_has_reset": false,
              "_disable_render_order_enforcing": false,
              "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": false,
            "_max_episode_steps": 1000,
            "_elapsed_steps": "None",
            "$type": "gym.wrappers.time_limit.TimeLimit"
          },
          "_max_episode_length": 1000,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array",
            "single_rgb_array",
            "single_depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        "_scale_reward": 1.0,
        "_normalize_obs": false,
        "_normalize_reward": false,
        "_expected_action_scale": 1.0,
        "_flatten_obs": true,
        "_obs_alpha": 0.001,
        "_obs_mean": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
        "_obs_var": "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])",
        "_reward_alpha": 0.001,
        "_reward_mean": 0.0,
        "_reward_var": 1.0,
        "$type": "garage.envs.normalized_env.NormalizedEnv"
      },
      {
        "_env": {
          "_env": {
            "env": {
              "env": {
                "env": {
                  "env": {
                    "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                    "model": "<mujoco._structs.MjModel object at 0x7f5aff6cc3b0>",
                    "data": "<mujoco._structs.MjData object at 0x7f5aff6cc5f0>",
                    "init_qpos": "array([0., 0., 0.])",
                    "init_qvel": "array([0., 0., 0.])",
                    "_viewers": {},
                    "frame_skip": 5,
                    "viewer": "None",
                    "observation_space": {
                      "dtype": "dtype('float64')",
                      "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "_shape": [
                        11
                      ],
                      "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                      "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                      "low_repr": "-inf",
                      "high_repr": "inf",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "action_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True])",
                      "bounded_above": "array([ True])",
                      "_shape": [
                        1
                      ],
                      "low": "array([-1.], dtype=float32)",
                      "high": "array([1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "render_mode": "None",
                    "renderer": {
                      "no_returns_render": [
                        "human"
                      ],
                      "single_render": [
                        "single_rgb_array",
                        "single_depth_array",
                        "single_state_pixels"
                      ],
                      "mode": "None",
                      "render": {
                        "$type": "functools.partial"
                      },
                      "render_list": [],
                      "$type": "gym.utils.renderer.Renderer"
                    },
                    "_ezpickle_args": [],
                    "_ezpickle_kwargs": {},
                    "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "checked_reset": false,
                  "checked_step": false,
                  "checked_render": false,
                  "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": true,
              "_has_reset": false,
              "_disable_render_order_enforcing": false,
              "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": false,
            "_max_episode_steps": 1000,
            "_elapsed_steps": "None",
            "$type": "gym.wrappers.time_limit.TimeLimit"
          },
          "_max_episode_length": 1000,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array",
            "single_rgb_array",
            "single_depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        "_scale_reward": 1.0,
        "_normalize_obs": false,
        "_normalize_reward": false,
        "_expected_action_scale": 1.0,
        "_flatten_obs": true,
        "_obs_alpha": 0.001,
        "_obs_mean": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
        "_obs_var": "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])",
        "_reward_alpha": 0.001,
        "_reward_mean": 0.0,
        "_reward_var": 1.0,
        "$type": "garage.envs.normalized_env.NormalizedEnv"
      },
      {
        "_env": {
          "_env": {
            "env": {
              "env": {
                "env": {
                  "env": {
                    "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                    "model": "<mujoco._structs.MjModel object at 0x7f5aff5771f0>",
                    "data": "<mujoco._structs.MjData object at 0x7f5aff577230>",
                    "init_qpos": "array([0., 0., 0.])",
                    "init_qvel": "array([0., 0., 0.])",
                    "_viewers": {},
                    "frame_skip": 5,
                    "viewer": "None",
                    "observation_space": {
                      "dtype": "dtype('float64')",
                      "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "_shape": [
                        11
                      ],
                      "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                      "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                      "low_repr": "-inf",
                      "high_repr": "inf",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "action_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True])",
                      "bounded_above": "array([ True])",
                      "_shape": [
                        1
                      ],
                      "low": "array([-1.], dtype=float32)",
                      "high": "array([1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "render_mode": "None",
                    "renderer": {
                      "no_returns_render": [
                        "human"
                      ],
                      "single_render": [
                        "single_rgb_array",
                        "single_depth_array",
                        "single_state_pixels"
                      ],
                      "mode": "None",
                      "render": {
                        "$type": "functools.partial"
                      },
                      "render_list": [],
                      "$type": "gym.utils.renderer.Renderer"
                    },
                    "_ezpickle_args": [],
                    "_ezpickle_kwargs": {},
                    "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "checked_reset": false,
                  "checked_step": false,
                  "checked_render": false,
                  "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": true,
              "_has_reset": false,
              "_disable_render_order_enforcing": false,
              "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": false,
            "_max_episode_steps": 1000,
            "_elapsed_steps": "None",
            "$type": "gym.wrappers.time_limit.TimeLimit"
          },
          "_max_episode_length": 1000,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array",
            "single_rgb_array",
            "single_depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        "_scale_reward": 1.0,
        "_normalize_obs": false,
        "_normalize_reward": false,
        "_expected_action_scale": 1.0,
        "_flatten_obs": true,
        "_obs_alpha": 0.001,
        "_obs_mean": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
        "_obs_var": "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])",
        "_reward_alpha": 0.001,
        "_reward_mean": 0.0,
        "_reward_var": 1.0,
        "$type": "garage.envs.normalized_env.NormalizedEnv"
      },
      {
        "_env": {
          "_env": {
            "env": {
              "env": {
                "env": {
                  "env": {
                    "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                    "model": "<mujoco._structs.MjModel object at 0x7f5aff577ab0>",
                    "data": "<mujoco._structs.MjData object at 0x7f5aff577af0>",
                    "init_qpos": "array([0., 0., 0.])",
                    "init_qvel": "array([0., 0., 0.])",
                    "_viewers": {},
                    "frame_skip": 5,
                    "viewer": "None",
                    "observation_space": {
                      "dtype": "dtype('float64')",
                      "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "_shape": [
                        11
                      ],
                      "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                      "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                      "low_repr": "-inf",
                      "high_repr": "inf",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "action_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True])",
                      "bounded_above": "array([ True])",
                      "_shape": [
                        1
                      ],
                      "low": "array([-1.], dtype=float32)",
                      "high": "array([1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "render_mode": "None",
                    "renderer": {
                      "no_returns_render": [
                        "human"
                      ],
                      "single_render": [
                        "single_rgb_array",
                        "single_depth_array",
                        "single_state_pixels"
                      ],
                      "mode": "None",
                      "render": {
                        "$type": "functools.partial"
                      },
                      "render_list": [],
                      "$type": "gym.utils.renderer.Renderer"
                    },
                    "_ezpickle_args": [],
                    "_ezpickle_kwargs": {},
                    "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "checked_reset": false,
                  "checked_step": false,
                  "checked_render": false,
                  "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": true,
              "_has_reset": false,
              "_disable_render_order_enforcing": false,
              "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": false,
            "_max_episode_steps": 1000,
            "_elapsed_steps": "None",
            "$type": "gym.wrappers.time_limit.TimeLimit"
          },
          "_max_episode_length": 1000,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array",
            "single_rgb_array",
            "single_depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        "_scale_reward": 1.0,
        "_normalize_obs": false,
        "_normalize_reward": false,
        "_expected_action_scale": 1.0,
        "_flatten_obs": true,
        "_obs_alpha": 0.001,
        "_obs_mean": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
        "_obs_var": "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])",
        "_reward_alpha": 0.001,
        "_reward_mean": 0.0,
        "_reward_var": 1.0,
        "$type": "garage.envs.normalized_env.NormalizedEnv"
      },
      {
        "_env": {
          "_env": {
            "env": {
              "env": {
                "env": {
                  "env": {
                    "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                    "model": "<mujoco._structs.MjModel object at 0x7f5aff621570>",
                    "data": "<mujoco._structs.MjData object at 0x7f5aff6215b0>",
                    "init_qpos": "array([0., 0., 0.])",
                    "init_qvel": "array([0., 0., 0.])",
                    "_viewers": {},
                    "frame_skip": 5,
                    "viewer": "None",
                    "observation_space": {
                      "dtype": "dtype('float64')",
                      "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "_shape": [
                        11
                      ],
                      "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                      "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                      "low_repr": "-inf",
                      "high_repr": "inf",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "action_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True])",
                      "bounded_above": "array([ True])",
                      "_shape": [
                        1
                      ],
                      "low": "array([-1.], dtype=float32)",
                      "high": "array([1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "render_mode": "None",
                    "renderer": {
                      "no_returns_render": [
                        "human"
                      ],
                      "single_render": [
                        "single_rgb_array",
                        "single_depth_array",
                        "single_state_pixels"
                      ],
                      "mode": "None",
                      "render": {
                        "$type": "functools.partial"
                      },
                      "render_list": [],
                      "$type": "gym.utils.renderer.Renderer"
                    },
                    "_ezpickle_args": [],
                    "_ezpickle_kwargs": {},
                    "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "checked_reset": false,
                  "checked_step": false,
                  "checked_render": false,
                  "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": true,
              "_has_reset": false,
              "_disable_render_order_enforcing": false,
              "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": false,
            "_max_episode_steps": 1000,
            "_elapsed_steps": "None",
            "$type": "gym.wrappers.time_limit.TimeLimit"
          },
          "_max_episode_length": 1000,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array",
            "single_rgb_array",
            "single_depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        "_scale_reward": 1.0,
        "_normalize_obs": false,
        "_normalize_reward": false,
        "_expected_action_scale": 1.0,
        "_flatten_obs": true,
        "_obs_alpha": 0.001,
        "_obs_mean": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
        "_obs_var": "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])",
        "_reward_alpha": 0.001,
        "_reward_mean": 0.0,
        "_reward_var": 1.0,
        "$type": "garage.envs.normalized_env.NormalizedEnv"
      },
      {
        "_env": {
          "_env": {
            "env": {
              "env": {
                "env": {
                  "env": {
                    "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                    "model": "<mujoco._structs.MjModel object at 0x7f5aff4f50b0>",
                    "data": "<mujoco._structs.MjData object at 0x7f5aff4f50f0>",
                    "init_qpos": "array([0., 0., 0.])",
                    "init_qvel": "array([0., 0., 0.])",
                    "_viewers": {},
                    "frame_skip": 5,
                    "viewer": "None",
                    "observation_space": {
                      "dtype": "dtype('float64')",
                      "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "_shape": [
                        11
                      ],
                      "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                      "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                      "low_repr": "-inf",
                      "high_repr": "inf",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "action_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True])",
                      "bounded_above": "array([ True])",
                      "_shape": [
                        1
                      ],
                      "low": "array([-1.], dtype=float32)",
                      "high": "array([1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "render_mode": "None",
                    "renderer": {
                      "no_returns_render": [
                        "human"
                      ],
                      "single_render": [
                        "single_rgb_array",
                        "single_depth_array",
                        "single_state_pixels"
                      ],
                      "mode": "None",
                      "render": {
                        "$type": "functools.partial"
                      },
                      "render_list": [],
                      "$type": "gym.utils.renderer.Renderer"
                    },
                    "_ezpickle_args": [],
                    "_ezpickle_kwargs": {},
                    "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "checked_reset": false,
                  "checked_step": false,
                  "checked_render": false,
                  "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": true,
              "_has_reset": false,
              "_disable_render_order_enforcing": false,
              "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": false,
            "_max_episode_steps": 1000,
            "_elapsed_steps": "None",
            "$type": "gym.wrappers.time_limit.TimeLimit"
          },
          "_max_episode_length": 1000,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array",
            "single_rgb_array",
            "single_depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        "_scale_reward": 1.0,
        "_normalize_obs": false,
        "_normalize_reward": false,
        "_expected_action_scale": 1.0,
        "_flatten_obs": true,
        "_obs_alpha": 0.001,
        "_obs_mean": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
        "_obs_var": "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])",
        "_reward_alpha": 0.001,
        "_reward_mean": 0.0,
        "_reward_var": 1.0,
        "$type": "garage.envs.normalized_env.NormalizedEnv"
      }
    ],
    "_workers": [
      {
        "_seed": "None",
        "_max_episode_length": 500,
        "_worker_number": 0,
        "agent": {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_module": {
              "training": true,
              "_parameters": {
                "_init_std": {
                  "$type": "torch.nn.parameter.Parameter"
                }
              },
              "_buffers": {
                "min_std_param": {
                  "$type": "torch.Tensor"
                }
              },
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_mean_module": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 11.0,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    },
                    "_output_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 1.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    }
                  },
                  "_output_dim": 1.0,
                  "$type": "garage.torch.modules.mlp_module.MLPModule"
                }
              },
              "_input_dim": 11.0,
              "_hidden_sizes": [
                32,
                32
              ],
              "_action_dim": 1.0,
              "_learn_std": true,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_min_std": 1e-06,
              "_max_std": "None",
              "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
              "_std_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_std_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": "None",
              "_std_output_w_init": {
                "$type": "builtins.function"
              },
              "_std_parameterization": "exp",
              "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
              "_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_output_nonlinearity": "None",
              "_output_w_init": {
                "$type": "builtins.function"
              },
              "_output_b_init": {
                "$type": "builtins.function"
              },
              "_layer_normalization": false,
              "_norm_dist_class": {
                "$typename": "torch.distributions.normal.Normal"
              },
              "_min_std_param": {
                "$type": "torch.Tensor"
              },
              "_max_std_param": "None",
              "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
            }
          },
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
        },
        "env": {
          "_env": {
            "_env": {
              "env": {
                "env": {
                  "env": {
                    "env": {
                      "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                      "model": "<mujoco._structs.MjModel object at 0x7f5b04bb2830>",
                      "data": "<mujoco._structs.MjData object at 0x7f5b0418c730>",
                      "init_qpos": "array([0., 0., 0.])",
                      "init_qvel": "array([0., 0., 0.])",
                      "_viewers": {},
                      "frame_skip": 5,
                      "viewer": "None",
                      "observation_space": {
                        "dtype": "dtype('float64')",
                        "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "_shape": [
                          11
                        ],
                        "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                        "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                        "low_repr": "-inf",
                        "high_repr": "inf",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "action_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True])",
                        "bounded_above": "array([ True])",
                        "_shape": [
                          1
                        ],
                        "low": "array([-1.], dtype=float32)",
                        "high": "array([1.], dtype=float32)",
                        "low_repr": "-1.0",
                        "high_repr": "1.0",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "render_mode": "None",
                      "renderer": {
                        "no_returns_render": [
                          "human"
                        ],
                        "single_render": [
                          "single_rgb_array",
                          "single_depth_array",
                          "single_state_pixels"
                        ],
                        "mode": "None",
                        "render": {
                          "$type": "functools.partial"
                        },
                        "render_list": [],
                        "$type": "gym.utils.renderer.Renderer"
                      },
                      "_ezpickle_args": [],
                      "_ezpickle_kwargs": {},
                      "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                    },
                    "_action_space": "None",
                    "_observation_space": "None",
                    "_reward_range": "None",
                    "_metadata": "None",
                    "new_step_api": true,
                    "checked_reset": false,
                    "checked_step": false,
                    "checked_render": false,
                    "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": false,
                  "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "_has_reset": false,
                "_disable_render_order_enforcing": false,
                "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "_max_episode_steps": 1000,
              "_elapsed_steps": "None",
              "$type": "gym.wrappers.time_limit.TimeLimit"
            },
            "_max_episode_length": 1000,
            "_render_modes": [
              "human",
              "rgb_array",
              "depth_array",
              "single_rgb_array",
              "single_depth_array"
            ],
            "_step_cnt": "None",
            "_visualize": false,
            "_action_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_env_info": "None",
            "$type": "garage.envs.gym_env.GymEnv"
          },
          "_scale_reward": 1.0,
          "_normalize_obs": false,
          "_normalize_reward": false,
          "_expected_action_scale": 1.0,
          "_flatten_obs": true,
          "_obs_alpha": 0.001,
          "_obs_mean": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
          "_obs_var": "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])",
          "_reward_alpha": 0.001,
          "_reward_mean": 0.0,
          "_reward_var": 1.0,
          "$type": "garage.envs.normalized_env.NormalizedEnv"
        },
        "_env_steps": [],
        "_observations": [],
        "_last_observations": [],
        "_agent_infos": {},
        "_lengths": [],
        "_prev_obs": "None",
        "_eps_length": 0,
        "_episode_infos": {},
        "$type": "garage.sampler.default_worker.DefaultWorker"
      },
      {
        "_seed": "None",
        "_max_episode_length": 500,
        "_worker_number": 1,
        "agent": {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_module": {
              "training": true,
              "_parameters": {
                "_init_std": {
                  "$type": "torch.nn.parameter.Parameter"
                }
              },
              "_buffers": {
                "min_std_param": {
                  "$type": "torch.Tensor"
                }
              },
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_mean_module": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 11.0,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    },
                    "_output_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 1.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    }
                  },
                  "_output_dim": 1.0,
                  "$type": "garage.torch.modules.mlp_module.MLPModule"
                }
              },
              "_input_dim": 11.0,
              "_hidden_sizes": [
                32,
                32
              ],
              "_action_dim": 1.0,
              "_learn_std": true,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_min_std": 1e-06,
              "_max_std": "None",
              "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
              "_std_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_std_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": "None",
              "_std_output_w_init": {
                "$type": "builtins.function"
              },
              "_std_parameterization": "exp",
              "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
              "_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_output_nonlinearity": "None",
              "_output_w_init": {
                "$type": "builtins.function"
              },
              "_output_b_init": {
                "$type": "builtins.function"
              },
              "_layer_normalization": false,
              "_norm_dist_class": {
                "$typename": "torch.distributions.normal.Normal"
              },
              "_min_std_param": {
                "$type": "torch.Tensor"
              },
              "_max_std_param": "None",
              "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
            }
          },
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
        },
        "env": {
          "_env": {
            "_env": {
              "env": {
                "env": {
                  "env": {
                    "env": {
                      "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                      "model": "<mujoco._structs.MjModel object at 0x7f5b048d3df0>",
                      "data": "<mujoco._structs.MjData object at 0x7f5b0419c770>",
                      "init_qpos": "array([0., 0., 0.])",
                      "init_qvel": "array([0., 0., 0.])",
                      "_viewers": {},
                      "frame_skip": 5,
                      "viewer": "None",
                      "observation_space": {
                        "dtype": "dtype('float64')",
                        "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "_shape": [
                          11
                        ],
                        "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                        "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                        "low_repr": "-inf",
                        "high_repr": "inf",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "action_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True])",
                        "bounded_above": "array([ True])",
                        "_shape": [
                          1
                        ],
                        "low": "array([-1.], dtype=float32)",
                        "high": "array([1.], dtype=float32)",
                        "low_repr": "-1.0",
                        "high_repr": "1.0",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "render_mode": "None",
                      "renderer": {
                        "no_returns_render": [
                          "human"
                        ],
                        "single_render": [
                          "single_rgb_array",
                          "single_depth_array",
                          "single_state_pixels"
                        ],
                        "mode": "None",
                        "render": {
                          "$type": "functools.partial"
                        },
                        "render_list": [],
                        "$type": "gym.utils.renderer.Renderer"
                      },
                      "_ezpickle_args": [],
                      "_ezpickle_kwargs": {},
                      "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                    },
                    "_action_space": "None",
                    "_observation_space": "None",
                    "_reward_range": "None",
                    "_metadata": "None",
                    "new_step_api": true,
                    "checked_reset": false,
                    "checked_step": false,
                    "checked_render": false,
                    "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": false,
                  "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "_has_reset": false,
                "_disable_render_order_enforcing": false,
                "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "_max_episode_steps": 1000,
              "_elapsed_steps": "None",
              "$type": "gym.wrappers.time_limit.TimeLimit"
            },
            "_max_episode_length": 1000,
            "_render_modes": [
              "human",
              "rgb_array",
              "depth_array",
              "single_rgb_array",
              "single_depth_array"
            ],
            "_step_cnt": "None",
            "_visualize": false,
            "_action_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_env_info": "None",
            "$type": "garage.envs.gym_env.GymEnv"
          },
          "_scale_reward": 1.0,
          "_normalize_obs": false,
          "_normalize_reward": false,
          "_expected_action_scale": 1.0,
          "_flatten_obs": true,
          "_obs_alpha": 0.001,
          "_obs_mean": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
          "_obs_var": "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])",
          "_reward_alpha": 0.001,
          "_reward_mean": 0.0,
          "_reward_var": 1.0,
          "$type": "garage.envs.normalized_env.NormalizedEnv"
        },
        "_env_steps": [],
        "_observations": [],
        "_last_observations": [],
        "_agent_infos": {},
        "_lengths": [],
        "_prev_obs": "None",
        "_eps_length": 0,
        "_episode_infos": {},
        "$type": "garage.sampler.default_worker.DefaultWorker"
      },
      {
        "_seed": "None",
        "_max_episode_length": 500,
        "_worker_number": 2,
        "agent": {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_module": {
              "training": true,
              "_parameters": {
                "_init_std": {
                  "$type": "torch.nn.parameter.Parameter"
                }
              },
              "_buffers": {
                "min_std_param": {
                  "$type": "torch.Tensor"
                }
              },
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_mean_module": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 11.0,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    },
                    "_output_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 1.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    }
                  },
                  "_output_dim": 1.0,
                  "$type": "garage.torch.modules.mlp_module.MLPModule"
                }
              },
              "_input_dim": 11.0,
              "_hidden_sizes": [
                32,
                32
              ],
              "_action_dim": 1.0,
              "_learn_std": true,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_min_std": 1e-06,
              "_max_std": "None",
              "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
              "_std_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_std_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": "None",
              "_std_output_w_init": {
                "$type": "builtins.function"
              },
              "_std_parameterization": "exp",
              "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
              "_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_output_nonlinearity": "None",
              "_output_w_init": {
                "$type": "builtins.function"
              },
              "_output_b_init": {
                "$type": "builtins.function"
              },
              "_layer_normalization": false,
              "_norm_dist_class": {
                "$typename": "torch.distributions.normal.Normal"
              },
              "_min_std_param": {
                "$type": "torch.Tensor"
              },
              "_max_std_param": "None",
              "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
            }
          },
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
        },
        "env": {
          "_env": {
            "_env": {
              "env": {
                "env": {
                  "env": {
                    "env": {
                      "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                      "model": "<mujoco._structs.MjModel object at 0x7f5aff90bef0>",
                      "data": "<mujoco._structs.MjData object at 0x7f5aff90bf30>",
                      "init_qpos": "array([0., 0., 0.])",
                      "init_qvel": "array([0., 0., 0.])",
                      "_viewers": {},
                      "frame_skip": 5,
                      "viewer": "None",
                      "observation_space": {
                        "dtype": "dtype('float64')",
                        "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "_shape": [
                          11
                        ],
                        "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                        "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                        "low_repr": "-inf",
                        "high_repr": "inf",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "action_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True])",
                        "bounded_above": "array([ True])",
                        "_shape": [
                          1
                        ],
                        "low": "array([-1.], dtype=float32)",
                        "high": "array([1.], dtype=float32)",
                        "low_repr": "-1.0",
                        "high_repr": "1.0",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "render_mode": "None",
                      "renderer": {
                        "no_returns_render": [
                          "human"
                        ],
                        "single_render": [
                          "single_rgb_array",
                          "single_depth_array",
                          "single_state_pixels"
                        ],
                        "mode": "None",
                        "render": {
                          "$type": "functools.partial"
                        },
                        "render_list": [],
                        "$type": "gym.utils.renderer.Renderer"
                      },
                      "_ezpickle_args": [],
                      "_ezpickle_kwargs": {},
                      "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                    },
                    "_action_space": "None",
                    "_observation_space": "None",
                    "_reward_range": "None",
                    "_metadata": "None",
                    "new_step_api": true,
                    "checked_reset": false,
                    "checked_step": false,
                    "checked_render": false,
                    "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": false,
                  "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "_has_reset": false,
                "_disable_render_order_enforcing": false,
                "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "_max_episode_steps": 1000,
              "_elapsed_steps": "None",
              "$type": "gym.wrappers.time_limit.TimeLimit"
            },
            "_max_episode_length": 1000,
            "_render_modes": [
              "human",
              "rgb_array",
              "depth_array",
              "single_rgb_array",
              "single_depth_array"
            ],
            "_step_cnt": "None",
            "_visualize": false,
            "_action_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_env_info": "None",
            "$type": "garage.envs.gym_env.GymEnv"
          },
          "_scale_reward": 1.0,
          "_normalize_obs": false,
          "_normalize_reward": false,
          "_expected_action_scale": 1.0,
          "_flatten_obs": true,
          "_obs_alpha": 0.001,
          "_obs_mean": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
          "_obs_var": "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])",
          "_reward_alpha": 0.001,
          "_reward_mean": 0.0,
          "_reward_var": 1.0,
          "$type": "garage.envs.normalized_env.NormalizedEnv"
        },
        "_env_steps": [],
        "_observations": [],
        "_last_observations": [],
        "_agent_infos": {},
        "_lengths": [],
        "_prev_obs": "None",
        "_eps_length": 0,
        "_episode_infos": {},
        "$type": "garage.sampler.default_worker.DefaultWorker"
      },
      {
        "_seed": "None",
        "_max_episode_length": 500,
        "_worker_number": 3,
        "agent": {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_module": {
              "training": true,
              "_parameters": {
                "_init_std": {
                  "$type": "torch.nn.parameter.Parameter"
                }
              },
              "_buffers": {
                "min_std_param": {
                  "$type": "torch.Tensor"
                }
              },
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_mean_module": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 11.0,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    },
                    "_output_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 1.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    }
                  },
                  "_output_dim": 1.0,
                  "$type": "garage.torch.modules.mlp_module.MLPModule"
                }
              },
              "_input_dim": 11.0,
              "_hidden_sizes": [
                32,
                32
              ],
              "_action_dim": 1.0,
              "_learn_std": true,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_min_std": 1e-06,
              "_max_std": "None",
              "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
              "_std_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_std_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": "None",
              "_std_output_w_init": {
                "$type": "builtins.function"
              },
              "_std_parameterization": "exp",
              "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
              "_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_output_nonlinearity": "None",
              "_output_w_init": {
                "$type": "builtins.function"
              },
              "_output_b_init": {
                "$type": "builtins.function"
              },
              "_layer_normalization": false,
              "_norm_dist_class": {
                "$typename": "torch.distributions.normal.Normal"
              },
              "_min_std_param": {
                "$type": "torch.Tensor"
              },
              "_max_std_param": "None",
              "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
            }
          },
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
        },
        "env": {
          "_env": {
            "_env": {
              "env": {
                "env": {
                  "env": {
                    "env": {
                      "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                      "model": "<mujoco._structs.MjModel object at 0x7f5aff7e29b0>",
                      "data": "<mujoco._structs.MjData object at 0x7f5aff7e29f0>",
                      "init_qpos": "array([0., 0., 0.])",
                      "init_qvel": "array([0., 0., 0.])",
                      "_viewers": {},
                      "frame_skip": 5,
                      "viewer": "None",
                      "observation_space": {
                        "dtype": "dtype('float64')",
                        "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "_shape": [
                          11
                        ],
                        "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                        "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                        "low_repr": "-inf",
                        "high_repr": "inf",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "action_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True])",
                        "bounded_above": "array([ True])",
                        "_shape": [
                          1
                        ],
                        "low": "array([-1.], dtype=float32)",
                        "high": "array([1.], dtype=float32)",
                        "low_repr": "-1.0",
                        "high_repr": "1.0",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "render_mode": "None",
                      "renderer": {
                        "no_returns_render": [
                          "human"
                        ],
                        "single_render": [
                          "single_rgb_array",
                          "single_depth_array",
                          "single_state_pixels"
                        ],
                        "mode": "None",
                        "render": {
                          "$type": "functools.partial"
                        },
                        "render_list": [],
                        "$type": "gym.utils.renderer.Renderer"
                      },
                      "_ezpickle_args": [],
                      "_ezpickle_kwargs": {},
                      "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                    },
                    "_action_space": "None",
                    "_observation_space": "None",
                    "_reward_range": "None",
                    "_metadata": "None",
                    "new_step_api": true,
                    "checked_reset": false,
                    "checked_step": false,
                    "checked_render": false,
                    "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": false,
                  "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "_has_reset": false,
                "_disable_render_order_enforcing": false,
                "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "_max_episode_steps": 1000,
              "_elapsed_steps": "None",
              "$type": "gym.wrappers.time_limit.TimeLimit"
            },
            "_max_episode_length": 1000,
            "_render_modes": [
              "human",
              "rgb_array",
              "depth_array",
              "single_rgb_array",
              "single_depth_array"
            ],
            "_step_cnt": "None",
            "_visualize": false,
            "_action_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_env_info": "None",
            "$type": "garage.envs.gym_env.GymEnv"
          },
          "_scale_reward": 1.0,
          "_normalize_obs": false,
          "_normalize_reward": false,
          "_expected_action_scale": 1.0,
          "_flatten_obs": true,
          "_obs_alpha": 0.001,
          "_obs_mean": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
          "_obs_var": "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])",
          "_reward_alpha": 0.001,
          "_reward_mean": 0.0,
          "_reward_var": 1.0,
          "$type": "garage.envs.normalized_env.NormalizedEnv"
        },
        "_env_steps": [],
        "_observations": [],
        "_last_observations": [],
        "_agent_infos": {},
        "_lengths": [],
        "_prev_obs": "None",
        "_eps_length": 0,
        "_episode_infos": {},
        "$type": "garage.sampler.default_worker.DefaultWorker"
      },
      {
        "_seed": "None",
        "_max_episode_length": 500,
        "_worker_number": 4,
        "agent": {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_module": {
              "training": true,
              "_parameters": {
                "_init_std": {
                  "$type": "torch.nn.parameter.Parameter"
                }
              },
              "_buffers": {
                "min_std_param": {
                  "$type": "torch.Tensor"
                }
              },
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_mean_module": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 11.0,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    },
                    "_output_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 1.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    }
                  },
                  "_output_dim": 1.0,
                  "$type": "garage.torch.modules.mlp_module.MLPModule"
                }
              },
              "_input_dim": 11.0,
              "_hidden_sizes": [
                32,
                32
              ],
              "_action_dim": 1.0,
              "_learn_std": true,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_min_std": 1e-06,
              "_max_std": "None",
              "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
              "_std_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_std_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": "None",
              "_std_output_w_init": {
                "$type": "builtins.function"
              },
              "_std_parameterization": "exp",
              "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
              "_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_output_nonlinearity": "None",
              "_output_w_init": {
                "$type": "builtins.function"
              },
              "_output_b_init": {
                "$type": "builtins.function"
              },
              "_layer_normalization": false,
              "_norm_dist_class": {
                "$typename": "torch.distributions.normal.Normal"
              },
              "_min_std_param": {
                "$type": "torch.Tensor"
              },
              "_max_std_param": "None",
              "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
            }
          },
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
        },
        "env": {
          "_env": {
            "_env": {
              "env": {
                "env": {
                  "env": {
                    "env": {
                      "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                      "model": "<mujoco._structs.MjModel object at 0x7f5aff818470>",
                      "data": "<mujoco._structs.MjData object at 0x7f5aff8184b0>",
                      "init_qpos": "array([0., 0., 0.])",
                      "init_qvel": "array([0., 0., 0.])",
                      "_viewers": {},
                      "frame_skip": 5,
                      "viewer": "None",
                      "observation_space": {
                        "dtype": "dtype('float64')",
                        "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "_shape": [
                          11
                        ],
                        "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                        "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                        "low_repr": "-inf",
                        "high_repr": "inf",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "action_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True])",
                        "bounded_above": "array([ True])",
                        "_shape": [
                          1
                        ],
                        "low": "array([-1.], dtype=float32)",
                        "high": "array([1.], dtype=float32)",
                        "low_repr": "-1.0",
                        "high_repr": "1.0",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "render_mode": "None",
                      "renderer": {
                        "no_returns_render": [
                          "human"
                        ],
                        "single_render": [
                          "single_rgb_array",
                          "single_depth_array",
                          "single_state_pixels"
                        ],
                        "mode": "None",
                        "render": {
                          "$type": "functools.partial"
                        },
                        "render_list": [],
                        "$type": "gym.utils.renderer.Renderer"
                      },
                      "_ezpickle_args": [],
                      "_ezpickle_kwargs": {},
                      "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                    },
                    "_action_space": "None",
                    "_observation_space": "None",
                    "_reward_range": "None",
                    "_metadata": "None",
                    "new_step_api": true,
                    "checked_reset": false,
                    "checked_step": false,
                    "checked_render": false,
                    "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": false,
                  "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "_has_reset": false,
                "_disable_render_order_enforcing": false,
                "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "_max_episode_steps": 1000,
              "_elapsed_steps": "None",
              "$type": "gym.wrappers.time_limit.TimeLimit"
            },
            "_max_episode_length": 1000,
            "_render_modes": [
              "human",
              "rgb_array",
              "depth_array",
              "single_rgb_array",
              "single_depth_array"
            ],
            "_step_cnt": "None",
            "_visualize": false,
            "_action_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_env_info": "None",
            "$type": "garage.envs.gym_env.GymEnv"
          },
          "_scale_reward": 1.0,
          "_normalize_obs": false,
          "_normalize_reward": false,
          "_expected_action_scale": 1.0,
          "_flatten_obs": true,
          "_obs_alpha": 0.001,
          "_obs_mean": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
          "_obs_var": "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])",
          "_reward_alpha": 0.001,
          "_reward_mean": 0.0,
          "_reward_var": 1.0,
          "$type": "garage.envs.normalized_env.NormalizedEnv"
        },
        "_env_steps": [],
        "_observations": [],
        "_last_observations": [],
        "_agent_infos": {},
        "_lengths": [],
        "_prev_obs": "None",
        "_eps_length": 0,
        "_episode_infos": {},
        "$type": "garage.sampler.default_worker.DefaultWorker"
      },
      {
        "_seed": "None",
        "_max_episode_length": 500,
        "_worker_number": 5,
        "agent": {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_module": {
              "training": true,
              "_parameters": {
                "_init_std": {
                  "$type": "torch.nn.parameter.Parameter"
                }
              },
              "_buffers": {
                "min_std_param": {
                  "$type": "torch.Tensor"
                }
              },
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_mean_module": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 11.0,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    },
                    "_output_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 1.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    }
                  },
                  "_output_dim": 1.0,
                  "$type": "garage.torch.modules.mlp_module.MLPModule"
                }
              },
              "_input_dim": 11.0,
              "_hidden_sizes": [
                32,
                32
              ],
              "_action_dim": 1.0,
              "_learn_std": true,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_min_std": 1e-06,
              "_max_std": "None",
              "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
              "_std_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_std_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": "None",
              "_std_output_w_init": {
                "$type": "builtins.function"
              },
              "_std_parameterization": "exp",
              "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
              "_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_output_nonlinearity": "None",
              "_output_w_init": {
                "$type": "builtins.function"
              },
              "_output_b_init": {
                "$type": "builtins.function"
              },
              "_layer_normalization": false,
              "_norm_dist_class": {
                "$typename": "torch.distributions.normal.Normal"
              },
              "_min_std_param": {
                "$type": "torch.Tensor"
              },
              "_max_std_param": "None",
              "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
            }
          },
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
        },
        "env": {
          "_env": {
            "_env": {
              "env": {
                "env": {
                  "env": {
                    "env": {
                      "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                      "model": "<mujoco._structs.MjModel object at 0x7f5aff818f30>",
                      "data": "<mujoco._structs.MjData object at 0x7f5aff818f70>",
                      "init_qpos": "array([0., 0., 0.])",
                      "init_qvel": "array([0., 0., 0.])",
                      "_viewers": {},
                      "frame_skip": 5,
                      "viewer": "None",
                      "observation_space": {
                        "dtype": "dtype('float64')",
                        "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "_shape": [
                          11
                        ],
                        "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                        "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                        "low_repr": "-inf",
                        "high_repr": "inf",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "action_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True])",
                        "bounded_above": "array([ True])",
                        "_shape": [
                          1
                        ],
                        "low": "array([-1.], dtype=float32)",
                        "high": "array([1.], dtype=float32)",
                        "low_repr": "-1.0",
                        "high_repr": "1.0",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "render_mode": "None",
                      "renderer": {
                        "no_returns_render": [
                          "human"
                        ],
                        "single_render": [
                          "single_rgb_array",
                          "single_depth_array",
                          "single_state_pixels"
                        ],
                        "mode": "None",
                        "render": {
                          "$type": "functools.partial"
                        },
                        "render_list": [],
                        "$type": "gym.utils.renderer.Renderer"
                      },
                      "_ezpickle_args": [],
                      "_ezpickle_kwargs": {},
                      "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                    },
                    "_action_space": "None",
                    "_observation_space": "None",
                    "_reward_range": "None",
                    "_metadata": "None",
                    "new_step_api": true,
                    "checked_reset": false,
                    "checked_step": false,
                    "checked_render": false,
                    "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": false,
                  "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "_has_reset": false,
                "_disable_render_order_enforcing": false,
                "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "_max_episode_steps": 1000,
              "_elapsed_steps": "None",
              "$type": "gym.wrappers.time_limit.TimeLimit"
            },
            "_max_episode_length": 1000,
            "_render_modes": [
              "human",
              "rgb_array",
              "depth_array",
              "single_rgb_array",
              "single_depth_array"
            ],
            "_step_cnt": "None",
            "_visualize": false,
            "_action_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_env_info": "None",
            "$type": "garage.envs.gym_env.GymEnv"
          },
          "_scale_reward": 1.0,
          "_normalize_obs": false,
          "_normalize_reward": false,
          "_expected_action_scale": 1.0,
          "_flatten_obs": true,
          "_obs_alpha": 0.001,
          "_obs_mean": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
          "_obs_var": "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])",
          "_reward_alpha": 0.001,
          "_reward_mean": 0.0,
          "_reward_var": 1.0,
          "$type": "garage.envs.normalized_env.NormalizedEnv"
        },
        "_env_steps": [],
        "_observations": [],
        "_last_observations": [],
        "_agent_infos": {},
        "_lengths": [],
        "_prev_obs": "None",
        "_eps_length": 0,
        "_episode_infos": {},
        "$type": "garage.sampler.default_worker.DefaultWorker"
      },
      {
        "_seed": "None",
        "_max_episode_length": 500,
        "_worker_number": 6,
        "agent": {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_module": {
              "training": true,
              "_parameters": {
                "_init_std": {
                  "$type": "torch.nn.parameter.Parameter"
                }
              },
              "_buffers": {
                "min_std_param": {
                  "$type": "torch.Tensor"
                }
              },
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_mean_module": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 11.0,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    },
                    "_output_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 1.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    }
                  },
                  "_output_dim": 1.0,
                  "$type": "garage.torch.modules.mlp_module.MLPModule"
                }
              },
              "_input_dim": 11.0,
              "_hidden_sizes": [
                32,
                32
              ],
              "_action_dim": 1.0,
              "_learn_std": true,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_min_std": 1e-06,
              "_max_std": "None",
              "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
              "_std_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_std_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": "None",
              "_std_output_w_init": {
                "$type": "builtins.function"
              },
              "_std_parameterization": "exp",
              "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
              "_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_output_nonlinearity": "None",
              "_output_w_init": {
                "$type": "builtins.function"
              },
              "_output_b_init": {
                "$type": "builtins.function"
              },
              "_layer_normalization": false,
              "_norm_dist_class": {
                "$typename": "torch.distributions.normal.Normal"
              },
              "_min_std_param": {
                "$type": "torch.Tensor"
              },
              "_max_std_param": "None",
              "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
            }
          },
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
        },
        "env": {
          "_env": {
            "_env": {
              "env": {
                "env": {
                  "env": {
                    "env": {
                      "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                      "model": "<mujoco._structs.MjModel object at 0x7f5aff77da30>",
                      "data": "<mujoco._structs.MjData object at 0x7f5aff77da70>",
                      "init_qpos": "array([0., 0., 0.])",
                      "init_qvel": "array([0., 0., 0.])",
                      "_viewers": {},
                      "frame_skip": 5,
                      "viewer": "None",
                      "observation_space": {
                        "dtype": "dtype('float64')",
                        "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "_shape": [
                          11
                        ],
                        "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                        "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                        "low_repr": "-inf",
                        "high_repr": "inf",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "action_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True])",
                        "bounded_above": "array([ True])",
                        "_shape": [
                          1
                        ],
                        "low": "array([-1.], dtype=float32)",
                        "high": "array([1.], dtype=float32)",
                        "low_repr": "-1.0",
                        "high_repr": "1.0",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "render_mode": "None",
                      "renderer": {
                        "no_returns_render": [
                          "human"
                        ],
                        "single_render": [
                          "single_rgb_array",
                          "single_depth_array",
                          "single_state_pixels"
                        ],
                        "mode": "None",
                        "render": {
                          "$type": "functools.partial"
                        },
                        "render_list": [],
                        "$type": "gym.utils.renderer.Renderer"
                      },
                      "_ezpickle_args": [],
                      "_ezpickle_kwargs": {},
                      "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                    },
                    "_action_space": "None",
                    "_observation_space": "None",
                    "_reward_range": "None",
                    "_metadata": "None",
                    "new_step_api": true,
                    "checked_reset": false,
                    "checked_step": false,
                    "checked_render": false,
                    "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": false,
                  "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "_has_reset": false,
                "_disable_render_order_enforcing": false,
                "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "_max_episode_steps": 1000,
              "_elapsed_steps": "None",
              "$type": "gym.wrappers.time_limit.TimeLimit"
            },
            "_max_episode_length": 1000,
            "_render_modes": [
              "human",
              "rgb_array",
              "depth_array",
              "single_rgb_array",
              "single_depth_array"
            ],
            "_step_cnt": "None",
            "_visualize": false,
            "_action_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_env_info": "None",
            "$type": "garage.envs.gym_env.GymEnv"
          },
          "_scale_reward": 1.0,
          "_normalize_obs": false,
          "_normalize_reward": false,
          "_expected_action_scale": 1.0,
          "_flatten_obs": true,
          "_obs_alpha": 0.001,
          "_obs_mean": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
          "_obs_var": "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])",
          "_reward_alpha": 0.001,
          "_reward_mean": 0.0,
          "_reward_var": 1.0,
          "$type": "garage.envs.normalized_env.NormalizedEnv"
        },
        "_env_steps": [],
        "_observations": [],
        "_last_observations": [],
        "_agent_infos": {},
        "_lengths": [],
        "_prev_obs": "None",
        "_eps_length": 0,
        "_episode_infos": {},
        "$type": "garage.sampler.default_worker.DefaultWorker"
      },
      {
        "_seed": "None",
        "_max_episode_length": 500,
        "_worker_number": 7,
        "agent": {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_module": {
              "training": true,
              "_parameters": {
                "_init_std": {
                  "$type": "torch.nn.parameter.Parameter"
                }
              },
              "_buffers": {
                "min_std_param": {
                  "$type": "torch.Tensor"
                }
              },
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_mean_module": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 11.0,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    },
                    "_output_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 1.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    }
                  },
                  "_output_dim": 1.0,
                  "$type": "garage.torch.modules.mlp_module.MLPModule"
                }
              },
              "_input_dim": 11.0,
              "_hidden_sizes": [
                32,
                32
              ],
              "_action_dim": 1.0,
              "_learn_std": true,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_min_std": 1e-06,
              "_max_std": "None",
              "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
              "_std_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_std_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": "None",
              "_std_output_w_init": {
                "$type": "builtins.function"
              },
              "_std_parameterization": "exp",
              "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
              "_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_output_nonlinearity": "None",
              "_output_w_init": {
                "$type": "builtins.function"
              },
              "_output_b_init": {
                "$type": "builtins.function"
              },
              "_layer_normalization": false,
              "_norm_dist_class": {
                "$typename": "torch.distributions.normal.Normal"
              },
              "_min_std_param": {
                "$type": "torch.Tensor"
              },
              "_max_std_param": "None",
              "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
            }
          },
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
        },
        "env": {
          "_env": {
            "_env": {
              "env": {
                "env": {
                  "env": {
                    "env": {
                      "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                      "model": "<mujoco._structs.MjModel object at 0x7f5aff7334f0>",
                      "data": "<mujoco._structs.MjData object at 0x7f5aff733530>",
                      "init_qpos": "array([0., 0., 0.])",
                      "init_qvel": "array([0., 0., 0.])",
                      "_viewers": {},
                      "frame_skip": 5,
                      "viewer": "None",
                      "observation_space": {
                        "dtype": "dtype('float64')",
                        "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "_shape": [
                          11
                        ],
                        "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                        "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                        "low_repr": "-inf",
                        "high_repr": "inf",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "action_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True])",
                        "bounded_above": "array([ True])",
                        "_shape": [
                          1
                        ],
                        "low": "array([-1.], dtype=float32)",
                        "high": "array([1.], dtype=float32)",
                        "low_repr": "-1.0",
                        "high_repr": "1.0",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "render_mode": "None",
                      "renderer": {
                        "no_returns_render": [
                          "human"
                        ],
                        "single_render": [
                          "single_rgb_array",
                          "single_depth_array",
                          "single_state_pixels"
                        ],
                        "mode": "None",
                        "render": {
                          "$type": "functools.partial"
                        },
                        "render_list": [],
                        "$type": "gym.utils.renderer.Renderer"
                      },
                      "_ezpickle_args": [],
                      "_ezpickle_kwargs": {},
                      "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                    },
                    "_action_space": "None",
                    "_observation_space": "None",
                    "_reward_range": "None",
                    "_metadata": "None",
                    "new_step_api": true,
                    "checked_reset": false,
                    "checked_step": false,
                    "checked_render": false,
                    "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": false,
                  "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "_has_reset": false,
                "_disable_render_order_enforcing": false,
                "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "_max_episode_steps": 1000,
              "_elapsed_steps": "None",
              "$type": "gym.wrappers.time_limit.TimeLimit"
            },
            "_max_episode_length": 1000,
            "_render_modes": [
              "human",
              "rgb_array",
              "depth_array",
              "single_rgb_array",
              "single_depth_array"
            ],
            "_step_cnt": "None",
            "_visualize": false,
            "_action_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_env_info": "None",
            "$type": "garage.envs.gym_env.GymEnv"
          },
          "_scale_reward": 1.0,
          "_normalize_obs": false,
          "_normalize_reward": false,
          "_expected_action_scale": 1.0,
          "_flatten_obs": true,
          "_obs_alpha": 0.001,
          "_obs_mean": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
          "_obs_var": "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])",
          "_reward_alpha": 0.001,
          "_reward_mean": 0.0,
          "_reward_var": 1.0,
          "$type": "garage.envs.normalized_env.NormalizedEnv"
        },
        "_env_steps": [],
        "_observations": [],
        "_last_observations": [],
        "_agent_infos": {},
        "_lengths": [],
        "_prev_obs": "None",
        "_eps_length": 0,
        "_episode_infos": {},
        "$type": "garage.sampler.default_worker.DefaultWorker"
      },
      {
        "_seed": "None",
        "_max_episode_length": 500,
        "_worker_number": 8,
        "agent": {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_module": {
              "training": true,
              "_parameters": {
                "_init_std": {
                  "$type": "torch.nn.parameter.Parameter"
                }
              },
              "_buffers": {
                "min_std_param": {
                  "$type": "torch.Tensor"
                }
              },
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_mean_module": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 11.0,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    },
                    "_output_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 1.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    }
                  },
                  "_output_dim": 1.0,
                  "$type": "garage.torch.modules.mlp_module.MLPModule"
                }
              },
              "_input_dim": 11.0,
              "_hidden_sizes": [
                32,
                32
              ],
              "_action_dim": 1.0,
              "_learn_std": true,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_min_std": 1e-06,
              "_max_std": "None",
              "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
              "_std_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_std_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": "None",
              "_std_output_w_init": {
                "$type": "builtins.function"
              },
              "_std_parameterization": "exp",
              "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
              "_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_output_nonlinearity": "None",
              "_output_w_init": {
                "$type": "builtins.function"
              },
              "_output_b_init": {
                "$type": "builtins.function"
              },
              "_layer_normalization": false,
              "_norm_dist_class": {
                "$typename": "torch.distributions.normal.Normal"
              },
              "_min_std_param": {
                "$type": "torch.Tensor"
              },
              "_max_std_param": "None",
              "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
            }
          },
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
        },
        "env": {
          "_env": {
            "_env": {
              "env": {
                "env": {
                  "env": {
                    "env": {
                      "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                      "model": "<mujoco._structs.MjModel object at 0x7f5aff733fb0>",
                      "data": "<mujoco._structs.MjData object at 0x7f5aff6ff030>",
                      "init_qpos": "array([0., 0., 0.])",
                      "init_qvel": "array([0., 0., 0.])",
                      "_viewers": {},
                      "frame_skip": 5,
                      "viewer": "None",
                      "observation_space": {
                        "dtype": "dtype('float64')",
                        "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "_shape": [
                          11
                        ],
                        "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                        "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                        "low_repr": "-inf",
                        "high_repr": "inf",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "action_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True])",
                        "bounded_above": "array([ True])",
                        "_shape": [
                          1
                        ],
                        "low": "array([-1.], dtype=float32)",
                        "high": "array([1.], dtype=float32)",
                        "low_repr": "-1.0",
                        "high_repr": "1.0",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "render_mode": "None",
                      "renderer": {
                        "no_returns_render": [
                          "human"
                        ],
                        "single_render": [
                          "single_rgb_array",
                          "single_depth_array",
                          "single_state_pixels"
                        ],
                        "mode": "None",
                        "render": {
                          "$type": "functools.partial"
                        },
                        "render_list": [],
                        "$type": "gym.utils.renderer.Renderer"
                      },
                      "_ezpickle_args": [],
                      "_ezpickle_kwargs": {},
                      "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                    },
                    "_action_space": "None",
                    "_observation_space": "None",
                    "_reward_range": "None",
                    "_metadata": "None",
                    "new_step_api": true,
                    "checked_reset": false,
                    "checked_step": false,
                    "checked_render": false,
                    "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": false,
                  "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "_has_reset": false,
                "_disable_render_order_enforcing": false,
                "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "_max_episode_steps": 1000,
              "_elapsed_steps": "None",
              "$type": "gym.wrappers.time_limit.TimeLimit"
            },
            "_max_episode_length": 1000,
            "_render_modes": [
              "human",
              "rgb_array",
              "depth_array",
              "single_rgb_array",
              "single_depth_array"
            ],
            "_step_cnt": "None",
            "_visualize": false,
            "_action_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_env_info": "None",
            "$type": "garage.envs.gym_env.GymEnv"
          },
          "_scale_reward": 1.0,
          "_normalize_obs": false,
          "_normalize_reward": false,
          "_expected_action_scale": 1.0,
          "_flatten_obs": true,
          "_obs_alpha": 0.001,
          "_obs_mean": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
          "_obs_var": "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])",
          "_reward_alpha": 0.001,
          "_reward_mean": 0.0,
          "_reward_var": 1.0,
          "$type": "garage.envs.normalized_env.NormalizedEnv"
        },
        "_env_steps": [],
        "_observations": [],
        "_last_observations": [],
        "_agent_infos": {},
        "_lengths": [],
        "_prev_obs": "None",
        "_eps_length": 0,
        "_episode_infos": {},
        "$type": "garage.sampler.default_worker.DefaultWorker"
      },
      {
        "_seed": "None",
        "_max_episode_length": 500,
        "_worker_number": 9,
        "agent": {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_module": {
              "training": true,
              "_parameters": {
                "_init_std": {
                  "$type": "torch.nn.parameter.Parameter"
                }
              },
              "_buffers": {
                "min_std_param": {
                  "$type": "torch.Tensor"
                }
              },
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_mean_module": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 11.0,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    },
                    "_output_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 1.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    }
                  },
                  "_output_dim": 1.0,
                  "$type": "garage.torch.modules.mlp_module.MLPModule"
                }
              },
              "_input_dim": 11.0,
              "_hidden_sizes": [
                32,
                32
              ],
              "_action_dim": 1.0,
              "_learn_std": true,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_min_std": 1e-06,
              "_max_std": "None",
              "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
              "_std_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_std_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": "None",
              "_std_output_w_init": {
                "$type": "builtins.function"
              },
              "_std_parameterization": "exp",
              "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
              "_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_output_nonlinearity": "None",
              "_output_w_init": {
                "$type": "builtins.function"
              },
              "_output_b_init": {
                "$type": "builtins.function"
              },
              "_layer_normalization": false,
              "_norm_dist_class": {
                "$typename": "torch.distributions.normal.Normal"
              },
              "_min_std_param": {
                "$type": "torch.Tensor"
              },
              "_max_std_param": "None",
              "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
            }
          },
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
        },
        "env": {
          "_env": {
            "_env": {
              "env": {
                "env": {
                  "env": {
                    "env": {
                      "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                      "model": "<mujoco._structs.MjModel object at 0x7f5aff6ffab0>",
                      "data": "<mujoco._structs.MjData object at 0x7f5aff6ffaf0>",
                      "init_qpos": "array([0., 0., 0.])",
                      "init_qvel": "array([0., 0., 0.])",
                      "_viewers": {},
                      "frame_skip": 5,
                      "viewer": "None",
                      "observation_space": {
                        "dtype": "dtype('float64')",
                        "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "_shape": [
                          11
                        ],
                        "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                        "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                        "low_repr": "-inf",
                        "high_repr": "inf",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "action_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True])",
                        "bounded_above": "array([ True])",
                        "_shape": [
                          1
                        ],
                        "low": "array([-1.], dtype=float32)",
                        "high": "array([1.], dtype=float32)",
                        "low_repr": "-1.0",
                        "high_repr": "1.0",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "render_mode": "None",
                      "renderer": {
                        "no_returns_render": [
                          "human"
                        ],
                        "single_render": [
                          "single_rgb_array",
                          "single_depth_array",
                          "single_state_pixels"
                        ],
                        "mode": "None",
                        "render": {
                          "$type": "functools.partial"
                        },
                        "render_list": [],
                        "$type": "gym.utils.renderer.Renderer"
                      },
                      "_ezpickle_args": [],
                      "_ezpickle_kwargs": {},
                      "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                    },
                    "_action_space": "None",
                    "_observation_space": "None",
                    "_reward_range": "None",
                    "_metadata": "None",
                    "new_step_api": true,
                    "checked_reset": false,
                    "checked_step": false,
                    "checked_render": false,
                    "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": false,
                  "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "_has_reset": false,
                "_disable_render_order_enforcing": false,
                "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "_max_episode_steps": 1000,
              "_elapsed_steps": "None",
              "$type": "gym.wrappers.time_limit.TimeLimit"
            },
            "_max_episode_length": 1000,
            "_render_modes": [
              "human",
              "rgb_array",
              "depth_array",
              "single_rgb_array",
              "single_depth_array"
            ],
            "_step_cnt": "None",
            "_visualize": false,
            "_action_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_env_info": "None",
            "$type": "garage.envs.gym_env.GymEnv"
          },
          "_scale_reward": 1.0,
          "_normalize_obs": false,
          "_normalize_reward": false,
          "_expected_action_scale": 1.0,
          "_flatten_obs": true,
          "_obs_alpha": 0.001,
          "_obs_mean": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
          "_obs_var": "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])",
          "_reward_alpha": 0.001,
          "_reward_mean": 0.0,
          "_reward_var": 1.0,
          "$type": "garage.envs.normalized_env.NormalizedEnv"
        },
        "_env_steps": [],
        "_observations": [],
        "_last_observations": [],
        "_agent_infos": {},
        "_lengths": [],
        "_prev_obs": "None",
        "_eps_length": 0,
        "_episode_infos": {},
        "$type": "garage.sampler.default_worker.DefaultWorker"
      },
      {
        "_seed": "None",
        "_max_episode_length": 500,
        "_worker_number": 10,
        "agent": {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_module": {
              "training": true,
              "_parameters": {
                "_init_std": {
                  "$type": "torch.nn.parameter.Parameter"
                }
              },
              "_buffers": {
                "min_std_param": {
                  "$type": "torch.Tensor"
                }
              },
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_mean_module": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 11.0,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    },
                    "_output_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 1.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    }
                  },
                  "_output_dim": 1.0,
                  "$type": "garage.torch.modules.mlp_module.MLPModule"
                }
              },
              "_input_dim": 11.0,
              "_hidden_sizes": [
                32,
                32
              ],
              "_action_dim": 1.0,
              "_learn_std": true,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_min_std": 1e-06,
              "_max_std": "None",
              "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
              "_std_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_std_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": "None",
              "_std_output_w_init": {
                "$type": "builtins.function"
              },
              "_std_parameterization": "exp",
              "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
              "_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_output_nonlinearity": "None",
              "_output_w_init": {
                "$type": "builtins.function"
              },
              "_output_b_init": {
                "$type": "builtins.function"
              },
              "_layer_normalization": false,
              "_norm_dist_class": {
                "$typename": "torch.distributions.normal.Normal"
              },
              "_min_std_param": {
                "$type": "torch.Tensor"
              },
              "_max_std_param": "None",
              "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
            }
          },
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
        },
        "env": {
          "_env": {
            "_env": {
              "env": {
                "env": {
                  "env": {
                    "env": {
                      "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                      "model": "<mujoco._structs.MjModel object at 0x7f5aff6ff7b0>",
                      "data": "<mujoco._structs.MjData object at 0x7f5aff6ff270>",
                      "init_qpos": "array([0., 0., 0.])",
                      "init_qvel": "array([0., 0., 0.])",
                      "_viewers": {},
                      "frame_skip": 5,
                      "viewer": "None",
                      "observation_space": {
                        "dtype": "dtype('float64')",
                        "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "_shape": [
                          11
                        ],
                        "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                        "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                        "low_repr": "-inf",
                        "high_repr": "inf",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "action_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True])",
                        "bounded_above": "array([ True])",
                        "_shape": [
                          1
                        ],
                        "low": "array([-1.], dtype=float32)",
                        "high": "array([1.], dtype=float32)",
                        "low_repr": "-1.0",
                        "high_repr": "1.0",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "render_mode": "None",
                      "renderer": {
                        "no_returns_render": [
                          "human"
                        ],
                        "single_render": [
                          "single_rgb_array",
                          "single_depth_array",
                          "single_state_pixels"
                        ],
                        "mode": "None",
                        "render": {
                          "$type": "functools.partial"
                        },
                        "render_list": [],
                        "$type": "gym.utils.renderer.Renderer"
                      },
                      "_ezpickle_args": [],
                      "_ezpickle_kwargs": {},
                      "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                    },
                    "_action_space": "None",
                    "_observation_space": "None",
                    "_reward_range": "None",
                    "_metadata": "None",
                    "new_step_api": true,
                    "checked_reset": false,
                    "checked_step": false,
                    "checked_render": false,
                    "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": false,
                  "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "_has_reset": false,
                "_disable_render_order_enforcing": false,
                "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "_max_episode_steps": 1000,
              "_elapsed_steps": "None",
              "$type": "gym.wrappers.time_limit.TimeLimit"
            },
            "_max_episode_length": 1000,
            "_render_modes": [
              "human",
              "rgb_array",
              "depth_array",
              "single_rgb_array",
              "single_depth_array"
            ],
            "_step_cnt": "None",
            "_visualize": false,
            "_action_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_env_info": "None",
            "$type": "garage.envs.gym_env.GymEnv"
          },
          "_scale_reward": 1.0,
          "_normalize_obs": false,
          "_normalize_reward": false,
          "_expected_action_scale": 1.0,
          "_flatten_obs": true,
          "_obs_alpha": 0.001,
          "_obs_mean": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
          "_obs_var": "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])",
          "_reward_alpha": 0.001,
          "_reward_mean": 0.0,
          "_reward_var": 1.0,
          "$type": "garage.envs.normalized_env.NormalizedEnv"
        },
        "_env_steps": [],
        "_observations": [],
        "_last_observations": [],
        "_agent_infos": {},
        "_lengths": [],
        "_prev_obs": "None",
        "_eps_length": 0,
        "_episode_infos": {},
        "$type": "garage.sampler.default_worker.DefaultWorker"
      },
      {
        "_seed": "None",
        "_max_episode_length": 500,
        "_worker_number": 11,
        "agent": {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_module": {
              "training": true,
              "_parameters": {
                "_init_std": {
                  "$type": "torch.nn.parameter.Parameter"
                }
              },
              "_buffers": {
                "min_std_param": {
                  "$type": "torch.Tensor"
                }
              },
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_mean_module": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 11.0,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    },
                    "_output_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 1.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    }
                  },
                  "_output_dim": 1.0,
                  "$type": "garage.torch.modules.mlp_module.MLPModule"
                }
              },
              "_input_dim": 11.0,
              "_hidden_sizes": [
                32,
                32
              ],
              "_action_dim": 1.0,
              "_learn_std": true,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_min_std": 1e-06,
              "_max_std": "None",
              "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
              "_std_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_std_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": "None",
              "_std_output_w_init": {
                "$type": "builtins.function"
              },
              "_std_parameterization": "exp",
              "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
              "_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_output_nonlinearity": "None",
              "_output_w_init": {
                "$type": "builtins.function"
              },
              "_output_b_init": {
                "$type": "builtins.function"
              },
              "_layer_normalization": false,
              "_norm_dist_class": {
                "$typename": "torch.distributions.normal.Normal"
              },
              "_min_std_param": {
                "$type": "torch.Tensor"
              },
              "_max_std_param": "None",
              "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
            }
          },
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
        },
        "env": {
          "_env": {
            "_env": {
              "env": {
                "env": {
                  "env": {
                    "env": {
                      "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                      "model": "<mujoco._structs.MjModel object at 0x7f5aff818230>",
                      "data": "<mujoco._structs.MjData object at 0x7f5aff818c30>",
                      "init_qpos": "array([0., 0., 0.])",
                      "init_qvel": "array([0., 0., 0.])",
                      "_viewers": {},
                      "frame_skip": 5,
                      "viewer": "None",
                      "observation_space": {
                        "dtype": "dtype('float64')",
                        "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "_shape": [
                          11
                        ],
                        "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                        "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                        "low_repr": "-inf",
                        "high_repr": "inf",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "action_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True])",
                        "bounded_above": "array([ True])",
                        "_shape": [
                          1
                        ],
                        "low": "array([-1.], dtype=float32)",
                        "high": "array([1.], dtype=float32)",
                        "low_repr": "-1.0",
                        "high_repr": "1.0",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "render_mode": "None",
                      "renderer": {
                        "no_returns_render": [
                          "human"
                        ],
                        "single_render": [
                          "single_rgb_array",
                          "single_depth_array",
                          "single_state_pixels"
                        ],
                        "mode": "None",
                        "render": {
                          "$type": "functools.partial"
                        },
                        "render_list": [],
                        "$type": "gym.utils.renderer.Renderer"
                      },
                      "_ezpickle_args": [],
                      "_ezpickle_kwargs": {},
                      "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                    },
                    "_action_space": "None",
                    "_observation_space": "None",
                    "_reward_range": "None",
                    "_metadata": "None",
                    "new_step_api": true,
                    "checked_reset": false,
                    "checked_step": false,
                    "checked_render": false,
                    "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": false,
                  "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "_has_reset": false,
                "_disable_render_order_enforcing": false,
                "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "_max_episode_steps": 1000,
              "_elapsed_steps": "None",
              "$type": "gym.wrappers.time_limit.TimeLimit"
            },
            "_max_episode_length": 1000,
            "_render_modes": [
              "human",
              "rgb_array",
              "depth_array",
              "single_rgb_array",
              "single_depth_array"
            ],
            "_step_cnt": "None",
            "_visualize": false,
            "_action_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_env_info": "None",
            "$type": "garage.envs.gym_env.GymEnv"
          },
          "_scale_reward": 1.0,
          "_normalize_obs": false,
          "_normalize_reward": false,
          "_expected_action_scale": 1.0,
          "_flatten_obs": true,
          "_obs_alpha": 0.001,
          "_obs_mean": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
          "_obs_var": "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])",
          "_reward_alpha": 0.001,
          "_reward_mean": 0.0,
          "_reward_var": 1.0,
          "$type": "garage.envs.normalized_env.NormalizedEnv"
        },
        "_env_steps": [],
        "_observations": [],
        "_last_observations": [],
        "_agent_infos": {},
        "_lengths": [],
        "_prev_obs": "None",
        "_eps_length": 0,
        "_episode_infos": {},
        "$type": "garage.sampler.default_worker.DefaultWorker"
      },
      {
        "_seed": "None",
        "_max_episode_length": 500,
        "_worker_number": 12,
        "agent": {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_module": {
              "training": true,
              "_parameters": {
                "_init_std": {
                  "$type": "torch.nn.parameter.Parameter"
                }
              },
              "_buffers": {
                "min_std_param": {
                  "$type": "torch.Tensor"
                }
              },
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_mean_module": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 11.0,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    },
                    "_output_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 1.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    }
                  },
                  "_output_dim": 1.0,
                  "$type": "garage.torch.modules.mlp_module.MLPModule"
                }
              },
              "_input_dim": 11.0,
              "_hidden_sizes": [
                32,
                32
              ],
              "_action_dim": 1.0,
              "_learn_std": true,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_min_std": 1e-06,
              "_max_std": "None",
              "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
              "_std_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_std_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": "None",
              "_std_output_w_init": {
                "$type": "builtins.function"
              },
              "_std_parameterization": "exp",
              "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
              "_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_output_nonlinearity": "None",
              "_output_w_init": {
                "$type": "builtins.function"
              },
              "_output_b_init": {
                "$type": "builtins.function"
              },
              "_layer_normalization": false,
              "_norm_dist_class": {
                "$typename": "torch.distributions.normal.Normal"
              },
              "_min_std_param": {
                "$type": "torch.Tensor"
              },
              "_max_std_param": "None",
              "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
            }
          },
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
        },
        "env": {
          "_env": {
            "_env": {
              "env": {
                "env": {
                  "env": {
                    "env": {
                      "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                      "model": "<mujoco._structs.MjModel object at 0x7f5affd6b3b0>",
                      "data": "<mujoco._structs.MjData object at 0x7f5b041c9b30>",
                      "init_qpos": "array([0., 0., 0.])",
                      "init_qvel": "array([0., 0., 0.])",
                      "_viewers": {},
                      "frame_skip": 5,
                      "viewer": "None",
                      "observation_space": {
                        "dtype": "dtype('float64')",
                        "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "_shape": [
                          11
                        ],
                        "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                        "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                        "low_repr": "-inf",
                        "high_repr": "inf",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "action_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True])",
                        "bounded_above": "array([ True])",
                        "_shape": [
                          1
                        ],
                        "low": "array([-1.], dtype=float32)",
                        "high": "array([1.], dtype=float32)",
                        "low_repr": "-1.0",
                        "high_repr": "1.0",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "render_mode": "None",
                      "renderer": {
                        "no_returns_render": [
                          "human"
                        ],
                        "single_render": [
                          "single_rgb_array",
                          "single_depth_array",
                          "single_state_pixels"
                        ],
                        "mode": "None",
                        "render": {
                          "$type": "functools.partial"
                        },
                        "render_list": [],
                        "$type": "gym.utils.renderer.Renderer"
                      },
                      "_ezpickle_args": [],
                      "_ezpickle_kwargs": {},
                      "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                    },
                    "_action_space": "None",
                    "_observation_space": "None",
                    "_reward_range": "None",
                    "_metadata": "None",
                    "new_step_api": true,
                    "checked_reset": false,
                    "checked_step": false,
                    "checked_render": false,
                    "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": false,
                  "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "_has_reset": false,
                "_disable_render_order_enforcing": false,
                "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "_max_episode_steps": 1000,
              "_elapsed_steps": "None",
              "$type": "gym.wrappers.time_limit.TimeLimit"
            },
            "_max_episode_length": 1000,
            "_render_modes": [
              "human",
              "rgb_array",
              "depth_array",
              "single_rgb_array",
              "single_depth_array"
            ],
            "_step_cnt": "None",
            "_visualize": false,
            "_action_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_env_info": "None",
            "$type": "garage.envs.gym_env.GymEnv"
          },
          "_scale_reward": 1.0,
          "_normalize_obs": false,
          "_normalize_reward": false,
          "_expected_action_scale": 1.0,
          "_flatten_obs": true,
          "_obs_alpha": 0.001,
          "_obs_mean": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
          "_obs_var": "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])",
          "_reward_alpha": 0.001,
          "_reward_mean": 0.0,
          "_reward_var": 1.0,
          "$type": "garage.envs.normalized_env.NormalizedEnv"
        },
        "_env_steps": [],
        "_observations": [],
        "_last_observations": [],
        "_agent_infos": {},
        "_lengths": [],
        "_prev_obs": "None",
        "_eps_length": 0,
        "_episode_infos": {},
        "$type": "garage.sampler.default_worker.DefaultWorker"
      },
      {
        "_seed": "None",
        "_max_episode_length": 500,
        "_worker_number": 13,
        "agent": {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_module": {
              "training": true,
              "_parameters": {
                "_init_std": {
                  "$type": "torch.nn.parameter.Parameter"
                }
              },
              "_buffers": {
                "min_std_param": {
                  "$type": "torch.Tensor"
                }
              },
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_mean_module": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 11.0,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    },
                    "_output_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 1.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    }
                  },
                  "_output_dim": 1.0,
                  "$type": "garage.torch.modules.mlp_module.MLPModule"
                }
              },
              "_input_dim": 11.0,
              "_hidden_sizes": [
                32,
                32
              ],
              "_action_dim": 1.0,
              "_learn_std": true,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_min_std": 1e-06,
              "_max_std": "None",
              "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
              "_std_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_std_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": "None",
              "_std_output_w_init": {
                "$type": "builtins.function"
              },
              "_std_parameterization": "exp",
              "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
              "_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_output_nonlinearity": "None",
              "_output_w_init": {
                "$type": "builtins.function"
              },
              "_output_b_init": {
                "$type": "builtins.function"
              },
              "_layer_normalization": false,
              "_norm_dist_class": {
                "$typename": "torch.distributions.normal.Normal"
              },
              "_min_std_param": {
                "$type": "torch.Tensor"
              },
              "_max_std_param": "None",
              "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
            }
          },
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
        },
        "env": {
          "_env": {
            "_env": {
              "env": {
                "env": {
                  "env": {
                    "env": {
                      "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                      "model": "<mujoco._structs.MjModel object at 0x7f5aff6cc830>",
                      "data": "<mujoco._structs.MjData object at 0x7f5aff6cc870>",
                      "init_qpos": "array([0., 0., 0.])",
                      "init_qvel": "array([0., 0., 0.])",
                      "_viewers": {},
                      "frame_skip": 5,
                      "viewer": "None",
                      "observation_space": {
                        "dtype": "dtype('float64')",
                        "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "_shape": [
                          11
                        ],
                        "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                        "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                        "low_repr": "-inf",
                        "high_repr": "inf",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "action_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True])",
                        "bounded_above": "array([ True])",
                        "_shape": [
                          1
                        ],
                        "low": "array([-1.], dtype=float32)",
                        "high": "array([1.], dtype=float32)",
                        "low_repr": "-1.0",
                        "high_repr": "1.0",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "render_mode": "None",
                      "renderer": {
                        "no_returns_render": [
                          "human"
                        ],
                        "single_render": [
                          "single_rgb_array",
                          "single_depth_array",
                          "single_state_pixels"
                        ],
                        "mode": "None",
                        "render": {
                          "$type": "functools.partial"
                        },
                        "render_list": [],
                        "$type": "gym.utils.renderer.Renderer"
                      },
                      "_ezpickle_args": [],
                      "_ezpickle_kwargs": {},
                      "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                    },
                    "_action_space": "None",
                    "_observation_space": "None",
                    "_reward_range": "None",
                    "_metadata": "None",
                    "new_step_api": true,
                    "checked_reset": false,
                    "checked_step": false,
                    "checked_render": false,
                    "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": false,
                  "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "_has_reset": false,
                "_disable_render_order_enforcing": false,
                "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "_max_episode_steps": 1000,
              "_elapsed_steps": "None",
              "$type": "gym.wrappers.time_limit.TimeLimit"
            },
            "_max_episode_length": 1000,
            "_render_modes": [
              "human",
              "rgb_array",
              "depth_array",
              "single_rgb_array",
              "single_depth_array"
            ],
            "_step_cnt": "None",
            "_visualize": false,
            "_action_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_env_info": "None",
            "$type": "garage.envs.gym_env.GymEnv"
          },
          "_scale_reward": 1.0,
          "_normalize_obs": false,
          "_normalize_reward": false,
          "_expected_action_scale": 1.0,
          "_flatten_obs": true,
          "_obs_alpha": 0.001,
          "_obs_mean": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
          "_obs_var": "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])",
          "_reward_alpha": 0.001,
          "_reward_mean": 0.0,
          "_reward_var": 1.0,
          "$type": "garage.envs.normalized_env.NormalizedEnv"
        },
        "_env_steps": [],
        "_observations": [],
        "_last_observations": [],
        "_agent_infos": {},
        "_lengths": [],
        "_prev_obs": "None",
        "_eps_length": 0,
        "_episode_infos": {},
        "$type": "garage.sampler.default_worker.DefaultWorker"
      },
      {
        "_seed": "None",
        "_max_episode_length": 500,
        "_worker_number": 14,
        "agent": {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_module": {
              "training": true,
              "_parameters": {
                "_init_std": {
                  "$type": "torch.nn.parameter.Parameter"
                }
              },
              "_buffers": {
                "min_std_param": {
                  "$type": "torch.Tensor"
                }
              },
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_mean_module": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 11.0,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    },
                    "_output_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 1.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    }
                  },
                  "_output_dim": 1.0,
                  "$type": "garage.torch.modules.mlp_module.MLPModule"
                }
              },
              "_input_dim": 11.0,
              "_hidden_sizes": [
                32,
                32
              ],
              "_action_dim": 1.0,
              "_learn_std": true,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_min_std": 1e-06,
              "_max_std": "None",
              "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
              "_std_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_std_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": "None",
              "_std_output_w_init": {
                "$type": "builtins.function"
              },
              "_std_parameterization": "exp",
              "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
              "_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_output_nonlinearity": "None",
              "_output_w_init": {
                "$type": "builtins.function"
              },
              "_output_b_init": {
                "$type": "builtins.function"
              },
              "_layer_normalization": false,
              "_norm_dist_class": {
                "$typename": "torch.distributions.normal.Normal"
              },
              "_min_std_param": {
                "$type": "torch.Tensor"
              },
              "_max_std_param": "None",
              "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
            }
          },
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
        },
        "env": {
          "_env": {
            "_env": {
              "env": {
                "env": {
                  "env": {
                    "env": {
                      "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                      "model": "<mujoco._structs.MjModel object at 0x7f5aff7de2f0>",
                      "data": "<mujoco._structs.MjData object at 0x7f5aff7de330>",
                      "init_qpos": "array([0., 0., 0.])",
                      "init_qvel": "array([0., 0., 0.])",
                      "_viewers": {},
                      "frame_skip": 5,
                      "viewer": "None",
                      "observation_space": {
                        "dtype": "dtype('float64')",
                        "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "_shape": [
                          11
                        ],
                        "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                        "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                        "low_repr": "-inf",
                        "high_repr": "inf",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "action_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True])",
                        "bounded_above": "array([ True])",
                        "_shape": [
                          1
                        ],
                        "low": "array([-1.], dtype=float32)",
                        "high": "array([1.], dtype=float32)",
                        "low_repr": "-1.0",
                        "high_repr": "1.0",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "render_mode": "None",
                      "renderer": {
                        "no_returns_render": [
                          "human"
                        ],
                        "single_render": [
                          "single_rgb_array",
                          "single_depth_array",
                          "single_state_pixels"
                        ],
                        "mode": "None",
                        "render": {
                          "$type": "functools.partial"
                        },
                        "render_list": [],
                        "$type": "gym.utils.renderer.Renderer"
                      },
                      "_ezpickle_args": [],
                      "_ezpickle_kwargs": {},
                      "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                    },
                    "_action_space": "None",
                    "_observation_space": "None",
                    "_reward_range": "None",
                    "_metadata": "None",
                    "new_step_api": true,
                    "checked_reset": false,
                    "checked_step": false,
                    "checked_render": false,
                    "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": false,
                  "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "_has_reset": false,
                "_disable_render_order_enforcing": false,
                "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "_max_episode_steps": 1000,
              "_elapsed_steps": "None",
              "$type": "gym.wrappers.time_limit.TimeLimit"
            },
            "_max_episode_length": 1000,
            "_render_modes": [
              "human",
              "rgb_array",
              "depth_array",
              "single_rgb_array",
              "single_depth_array"
            ],
            "_step_cnt": "None",
            "_visualize": false,
            "_action_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_env_info": "None",
            "$type": "garage.envs.gym_env.GymEnv"
          },
          "_scale_reward": 1.0,
          "_normalize_obs": false,
          "_normalize_reward": false,
          "_expected_action_scale": 1.0,
          "_flatten_obs": true,
          "_obs_alpha": 0.001,
          "_obs_mean": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
          "_obs_var": "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])",
          "_reward_alpha": 0.001,
          "_reward_mean": 0.0,
          "_reward_var": 1.0,
          "$type": "garage.envs.normalized_env.NormalizedEnv"
        },
        "_env_steps": [],
        "_observations": [],
        "_last_observations": [],
        "_agent_infos": {},
        "_lengths": [],
        "_prev_obs": "None",
        "_eps_length": 0,
        "_episode_infos": {},
        "$type": "garage.sampler.default_worker.DefaultWorker"
      },
      {
        "_seed": "None",
        "_max_episode_length": 500,
        "_worker_number": 15,
        "agent": {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_module": {
              "training": true,
              "_parameters": {
                "_init_std": {
                  "$type": "torch.nn.parameter.Parameter"
                }
              },
              "_buffers": {
                "min_std_param": {
                  "$type": "torch.Tensor"
                }
              },
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_mean_module": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 11.0,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    },
                    "_output_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 1.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    }
                  },
                  "_output_dim": 1.0,
                  "$type": "garage.torch.modules.mlp_module.MLPModule"
                }
              },
              "_input_dim": 11.0,
              "_hidden_sizes": [
                32,
                32
              ],
              "_action_dim": 1.0,
              "_learn_std": true,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_min_std": 1e-06,
              "_max_std": "None",
              "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
              "_std_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_std_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": "None",
              "_std_output_w_init": {
                "$type": "builtins.function"
              },
              "_std_parameterization": "exp",
              "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
              "_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_output_nonlinearity": "None",
              "_output_w_init": {
                "$type": "builtins.function"
              },
              "_output_b_init": {
                "$type": "builtins.function"
              },
              "_layer_normalization": false,
              "_norm_dist_class": {
                "$typename": "torch.distributions.normal.Normal"
              },
              "_min_std_param": {
                "$type": "torch.Tensor"
              },
              "_max_std_param": "None",
              "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
            }
          },
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
        },
        "env": {
          "_env": {
            "_env": {
              "env": {
                "env": {
                  "env": {
                    "env": {
                      "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                      "model": "<mujoco._structs.MjModel object at 0x7f5aff7dedf0>",
                      "data": "<mujoco._structs.MjData object at 0x7f5aff7dee30>",
                      "init_qpos": "array([0., 0., 0.])",
                      "init_qvel": "array([0., 0., 0.])",
                      "_viewers": {},
                      "frame_skip": 5,
                      "viewer": "None",
                      "observation_space": {
                        "dtype": "dtype('float64')",
                        "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "_shape": [
                          11
                        ],
                        "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                        "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                        "low_repr": "-inf",
                        "high_repr": "inf",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "action_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True])",
                        "bounded_above": "array([ True])",
                        "_shape": [
                          1
                        ],
                        "low": "array([-1.], dtype=float32)",
                        "high": "array([1.], dtype=float32)",
                        "low_repr": "-1.0",
                        "high_repr": "1.0",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "render_mode": "None",
                      "renderer": {
                        "no_returns_render": [
                          "human"
                        ],
                        "single_render": [
                          "single_rgb_array",
                          "single_depth_array",
                          "single_state_pixels"
                        ],
                        "mode": "None",
                        "render": {
                          "$type": "functools.partial"
                        },
                        "render_list": [],
                        "$type": "gym.utils.renderer.Renderer"
                      },
                      "_ezpickle_args": [],
                      "_ezpickle_kwargs": {},
                      "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                    },
                    "_action_space": "None",
                    "_observation_space": "None",
                    "_reward_range": "None",
                    "_metadata": "None",
                    "new_step_api": true,
                    "checked_reset": false,
                    "checked_step": false,
                    "checked_render": false,
                    "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": false,
                  "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "_has_reset": false,
                "_disable_render_order_enforcing": false,
                "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "_max_episode_steps": 1000,
              "_elapsed_steps": "None",
              "$type": "gym.wrappers.time_limit.TimeLimit"
            },
            "_max_episode_length": 1000,
            "_render_modes": [
              "human",
              "rgb_array",
              "depth_array",
              "single_rgb_array",
              "single_depth_array"
            ],
            "_step_cnt": "None",
            "_visualize": false,
            "_action_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_env_info": "None",
            "$type": "garage.envs.gym_env.GymEnv"
          },
          "_scale_reward": 1.0,
          "_normalize_obs": false,
          "_normalize_reward": false,
          "_expected_action_scale": 1.0,
          "_flatten_obs": true,
          "_obs_alpha": 0.001,
          "_obs_mean": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
          "_obs_var": "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])",
          "_reward_alpha": 0.001,
          "_reward_mean": 0.0,
          "_reward_var": 1.0,
          "$type": "garage.envs.normalized_env.NormalizedEnv"
        },
        "_env_steps": [],
        "_observations": [],
        "_last_observations": [],
        "_agent_infos": {},
        "_lengths": [],
        "_prev_obs": "None",
        "_eps_length": 0,
        "_episode_infos": {},
        "$type": "garage.sampler.default_worker.DefaultWorker"
      },
      {
        "_seed": "None",
        "_max_episode_length": 500,
        "_worker_number": 16,
        "agent": {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_module": {
              "training": true,
              "_parameters": {
                "_init_std": {
                  "$type": "torch.nn.parameter.Parameter"
                }
              },
              "_buffers": {
                "min_std_param": {
                  "$type": "torch.Tensor"
                }
              },
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_mean_module": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 11.0,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    },
                    "_output_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 1.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    }
                  },
                  "_output_dim": 1.0,
                  "$type": "garage.torch.modules.mlp_module.MLPModule"
                }
              },
              "_input_dim": 11.0,
              "_hidden_sizes": [
                32,
                32
              ],
              "_action_dim": 1.0,
              "_learn_std": true,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_min_std": 1e-06,
              "_max_std": "None",
              "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
              "_std_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_std_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": "None",
              "_std_output_w_init": {
                "$type": "builtins.function"
              },
              "_std_parameterization": "exp",
              "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
              "_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_output_nonlinearity": "None",
              "_output_w_init": {
                "$type": "builtins.function"
              },
              "_output_b_init": {
                "$type": "builtins.function"
              },
              "_layer_normalization": false,
              "_norm_dist_class": {
                "$typename": "torch.distributions.normal.Normal"
              },
              "_min_std_param": {
                "$type": "torch.Tensor"
              },
              "_max_std_param": "None",
              "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
            }
          },
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
        },
        "env": {
          "_env": {
            "_env": {
              "env": {
                "env": {
                  "env": {
                    "env": {
                      "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                      "model": "<mujoco._structs.MjModel object at 0x7f5aff61f930>",
                      "data": "<mujoco._structs.MjData object at 0x7f5aff61f970>",
                      "init_qpos": "array([0., 0., 0.])",
                      "init_qvel": "array([0., 0., 0.])",
                      "_viewers": {},
                      "frame_skip": 5,
                      "viewer": "None",
                      "observation_space": {
                        "dtype": "dtype('float64')",
                        "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "_shape": [
                          11
                        ],
                        "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                        "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                        "low_repr": "-inf",
                        "high_repr": "inf",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "action_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True])",
                        "bounded_above": "array([ True])",
                        "_shape": [
                          1
                        ],
                        "low": "array([-1.], dtype=float32)",
                        "high": "array([1.], dtype=float32)",
                        "low_repr": "-1.0",
                        "high_repr": "1.0",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "render_mode": "None",
                      "renderer": {
                        "no_returns_render": [
                          "human"
                        ],
                        "single_render": [
                          "single_rgb_array",
                          "single_depth_array",
                          "single_state_pixels"
                        ],
                        "mode": "None",
                        "render": {
                          "$type": "functools.partial"
                        },
                        "render_list": [],
                        "$type": "gym.utils.renderer.Renderer"
                      },
                      "_ezpickle_args": [],
                      "_ezpickle_kwargs": {},
                      "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                    },
                    "_action_space": "None",
                    "_observation_space": "None",
                    "_reward_range": "None",
                    "_metadata": "None",
                    "new_step_api": true,
                    "checked_reset": false,
                    "checked_step": false,
                    "checked_render": false,
                    "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": false,
                  "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "_has_reset": false,
                "_disable_render_order_enforcing": false,
                "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "_max_episode_steps": 1000,
              "_elapsed_steps": "None",
              "$type": "gym.wrappers.time_limit.TimeLimit"
            },
            "_max_episode_length": 1000,
            "_render_modes": [
              "human",
              "rgb_array",
              "depth_array",
              "single_rgb_array",
              "single_depth_array"
            ],
            "_step_cnt": "None",
            "_visualize": false,
            "_action_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_env_info": "None",
            "$type": "garage.envs.gym_env.GymEnv"
          },
          "_scale_reward": 1.0,
          "_normalize_obs": false,
          "_normalize_reward": false,
          "_expected_action_scale": 1.0,
          "_flatten_obs": true,
          "_obs_alpha": 0.001,
          "_obs_mean": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
          "_obs_var": "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])",
          "_reward_alpha": 0.001,
          "_reward_mean": 0.0,
          "_reward_var": 1.0,
          "$type": "garage.envs.normalized_env.NormalizedEnv"
        },
        "_env_steps": [],
        "_observations": [],
        "_last_observations": [],
        "_agent_infos": {},
        "_lengths": [],
        "_prev_obs": "None",
        "_eps_length": 0,
        "_episode_infos": {},
        "$type": "garage.sampler.default_worker.DefaultWorker"
      },
      {
        "_seed": "None",
        "_max_episode_length": 500,
        "_worker_number": 17,
        "agent": {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_module": {
              "training": true,
              "_parameters": {
                "_init_std": {
                  "$type": "torch.nn.parameter.Parameter"
                }
              },
              "_buffers": {
                "min_std_param": {
                  "$type": "torch.Tensor"
                }
              },
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_mean_module": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 11.0,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    },
                    "_output_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 1.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    }
                  },
                  "_output_dim": 1.0,
                  "$type": "garage.torch.modules.mlp_module.MLPModule"
                }
              },
              "_input_dim": 11.0,
              "_hidden_sizes": [
                32,
                32
              ],
              "_action_dim": 1.0,
              "_learn_std": true,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_min_std": 1e-06,
              "_max_std": "None",
              "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
              "_std_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_std_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": "None",
              "_std_output_w_init": {
                "$type": "builtins.function"
              },
              "_std_parameterization": "exp",
              "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
              "_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_output_nonlinearity": "None",
              "_output_w_init": {
                "$type": "builtins.function"
              },
              "_output_b_init": {
                "$type": "builtins.function"
              },
              "_layer_normalization": false,
              "_norm_dist_class": {
                "$typename": "torch.distributions.normal.Normal"
              },
              "_min_std_param": {
                "$type": "torch.Tensor"
              },
              "_max_std_param": "None",
              "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
            }
          },
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
        },
        "env": {
          "_env": {
            "_env": {
              "env": {
                "env": {
                  "env": {
                    "env": {
                      "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                      "model": "<mujoco._structs.MjModel object at 0x7f5aff653470>",
                      "data": "<mujoco._structs.MjData object at 0x7f5aff6534b0>",
                      "init_qpos": "array([0., 0., 0.])",
                      "init_qvel": "array([0., 0., 0.])",
                      "_viewers": {},
                      "frame_skip": 5,
                      "viewer": "None",
                      "observation_space": {
                        "dtype": "dtype('float64')",
                        "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "_shape": [
                          11
                        ],
                        "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                        "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                        "low_repr": "-inf",
                        "high_repr": "inf",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "action_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True])",
                        "bounded_above": "array([ True])",
                        "_shape": [
                          1
                        ],
                        "low": "array([-1.], dtype=float32)",
                        "high": "array([1.], dtype=float32)",
                        "low_repr": "-1.0",
                        "high_repr": "1.0",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "render_mode": "None",
                      "renderer": {
                        "no_returns_render": [
                          "human"
                        ],
                        "single_render": [
                          "single_rgb_array",
                          "single_depth_array",
                          "single_state_pixels"
                        ],
                        "mode": "None",
                        "render": {
                          "$type": "functools.partial"
                        },
                        "render_list": [],
                        "$type": "gym.utils.renderer.Renderer"
                      },
                      "_ezpickle_args": [],
                      "_ezpickle_kwargs": {},
                      "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                    },
                    "_action_space": "None",
                    "_observation_space": "None",
                    "_reward_range": "None",
                    "_metadata": "None",
                    "new_step_api": true,
                    "checked_reset": false,
                    "checked_step": false,
                    "checked_render": false,
                    "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": false,
                  "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "_has_reset": false,
                "_disable_render_order_enforcing": false,
                "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "_max_episode_steps": 1000,
              "_elapsed_steps": "None",
              "$type": "gym.wrappers.time_limit.TimeLimit"
            },
            "_max_episode_length": 1000,
            "_render_modes": [
              "human",
              "rgb_array",
              "depth_array",
              "single_rgb_array",
              "single_depth_array"
            ],
            "_step_cnt": "None",
            "_visualize": false,
            "_action_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_env_info": "None",
            "$type": "garage.envs.gym_env.GymEnv"
          },
          "_scale_reward": 1.0,
          "_normalize_obs": false,
          "_normalize_reward": false,
          "_expected_action_scale": 1.0,
          "_flatten_obs": true,
          "_obs_alpha": 0.001,
          "_obs_mean": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
          "_obs_var": "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])",
          "_reward_alpha": 0.001,
          "_reward_mean": 0.0,
          "_reward_var": 1.0,
          "$type": "garage.envs.normalized_env.NormalizedEnv"
        },
        "_env_steps": [],
        "_observations": [],
        "_last_observations": [],
        "_agent_infos": {},
        "_lengths": [],
        "_prev_obs": "None",
        "_eps_length": 0,
        "_episode_infos": {},
        "$type": "garage.sampler.default_worker.DefaultWorker"
      },
      {
        "_seed": "None",
        "_max_episode_length": 500,
        "_worker_number": 18,
        "agent": {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_module": {
              "training": true,
              "_parameters": {
                "_init_std": {
                  "$type": "torch.nn.parameter.Parameter"
                }
              },
              "_buffers": {
                "min_std_param": {
                  "$type": "torch.Tensor"
                }
              },
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_mean_module": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 11.0,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    },
                    "_output_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 1.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    }
                  },
                  "_output_dim": 1.0,
                  "$type": "garage.torch.modules.mlp_module.MLPModule"
                }
              },
              "_input_dim": 11.0,
              "_hidden_sizes": [
                32,
                32
              ],
              "_action_dim": 1.0,
              "_learn_std": true,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_min_std": 1e-06,
              "_max_std": "None",
              "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
              "_std_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_std_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": "None",
              "_std_output_w_init": {
                "$type": "builtins.function"
              },
              "_std_parameterization": "exp",
              "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
              "_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_output_nonlinearity": "None",
              "_output_w_init": {
                "$type": "builtins.function"
              },
              "_output_b_init": {
                "$type": "builtins.function"
              },
              "_layer_normalization": false,
              "_norm_dist_class": {
                "$typename": "torch.distributions.normal.Normal"
              },
              "_min_std_param": {
                "$type": "torch.Tensor"
              },
              "_max_std_param": "None",
              "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
            }
          },
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
        },
        "env": {
          "_env": {
            "_env": {
              "env": {
                "env": {
                  "env": {
                    "env": {
                      "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                      "model": "<mujoco._structs.MjModel object at 0x7f5aff653f70>",
                      "data": "<mujoco._structs.MjData object at 0x7f5aff653fb0>",
                      "init_qpos": "array([0., 0., 0.])",
                      "init_qvel": "array([0., 0., 0.])",
                      "_viewers": {},
                      "frame_skip": 5,
                      "viewer": "None",
                      "observation_space": {
                        "dtype": "dtype('float64')",
                        "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "_shape": [
                          11
                        ],
                        "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                        "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                        "low_repr": "-inf",
                        "high_repr": "inf",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "action_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True])",
                        "bounded_above": "array([ True])",
                        "_shape": [
                          1
                        ],
                        "low": "array([-1.], dtype=float32)",
                        "high": "array([1.], dtype=float32)",
                        "low_repr": "-1.0",
                        "high_repr": "1.0",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "render_mode": "None",
                      "renderer": {
                        "no_returns_render": [
                          "human"
                        ],
                        "single_render": [
                          "single_rgb_array",
                          "single_depth_array",
                          "single_state_pixels"
                        ],
                        "mode": "None",
                        "render": {
                          "$type": "functools.partial"
                        },
                        "render_list": [],
                        "$type": "gym.utils.renderer.Renderer"
                      },
                      "_ezpickle_args": [],
                      "_ezpickle_kwargs": {},
                      "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                    },
                    "_action_space": "None",
                    "_observation_space": "None",
                    "_reward_range": "None",
                    "_metadata": "None",
                    "new_step_api": true,
                    "checked_reset": false,
                    "checked_step": false,
                    "checked_render": false,
                    "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": false,
                  "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "_has_reset": false,
                "_disable_render_order_enforcing": false,
                "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "_max_episode_steps": 1000,
              "_elapsed_steps": "None",
              "$type": "gym.wrappers.time_limit.TimeLimit"
            },
            "_max_episode_length": 1000,
            "_render_modes": [
              "human",
              "rgb_array",
              "depth_array",
              "single_rgb_array",
              "single_depth_array"
            ],
            "_step_cnt": "None",
            "_visualize": false,
            "_action_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_env_info": "None",
            "$type": "garage.envs.gym_env.GymEnv"
          },
          "_scale_reward": 1.0,
          "_normalize_obs": false,
          "_normalize_reward": false,
          "_expected_action_scale": 1.0,
          "_flatten_obs": true,
          "_obs_alpha": 0.001,
          "_obs_mean": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
          "_obs_var": "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])",
          "_reward_alpha": 0.001,
          "_reward_mean": 0.0,
          "_reward_var": 1.0,
          "$type": "garage.envs.normalized_env.NormalizedEnv"
        },
        "_env_steps": [],
        "_observations": [],
        "_last_observations": [],
        "_agent_infos": {},
        "_lengths": [],
        "_prev_obs": "None",
        "_eps_length": 0,
        "_episode_infos": {},
        "$type": "garage.sampler.default_worker.DefaultWorker"
      },
      {
        "_seed": "None",
        "_max_episode_length": 500,
        "_worker_number": 19,
        "agent": {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_module": {
              "training": true,
              "_parameters": {
                "_init_std": {
                  "$type": "torch.nn.parameter.Parameter"
                }
              },
              "_buffers": {
                "min_std_param": {
                  "$type": "torch.Tensor"
                }
              },
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_mean_module": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 11.0,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    },
                    "_output_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 1.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    }
                  },
                  "_output_dim": 1.0,
                  "$type": "garage.torch.modules.mlp_module.MLPModule"
                }
              },
              "_input_dim": 11.0,
              "_hidden_sizes": [
                32,
                32
              ],
              "_action_dim": 1.0,
              "_learn_std": true,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_min_std": 1e-06,
              "_max_std": "None",
              "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
              "_std_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_std_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": "None",
              "_std_output_w_init": {
                "$type": "builtins.function"
              },
              "_std_parameterization": "exp",
              "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
              "_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_output_nonlinearity": "None",
              "_output_w_init": {
                "$type": "builtins.function"
              },
              "_output_b_init": {
                "$type": "builtins.function"
              },
              "_layer_normalization": false,
              "_norm_dist_class": {
                "$typename": "torch.distributions.normal.Normal"
              },
              "_min_std_param": {
                "$type": "torch.Tensor"
              },
              "_max_std_param": "None",
              "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
            }
          },
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
        },
        "env": {
          "_env": {
            "_env": {
              "env": {
                "env": {
                  "env": {
                    "env": {
                      "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                      "model": "<mujoco._structs.MjModel object at 0x7f5aff5b8ab0>",
                      "data": "<mujoco._structs.MjData object at 0x7f5aff5b8af0>",
                      "init_qpos": "array([0., 0., 0.])",
                      "init_qvel": "array([0., 0., 0.])",
                      "_viewers": {},
                      "frame_skip": 5,
                      "viewer": "None",
                      "observation_space": {
                        "dtype": "dtype('float64')",
                        "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "_shape": [
                          11
                        ],
                        "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                        "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                        "low_repr": "-inf",
                        "high_repr": "inf",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "action_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True])",
                        "bounded_above": "array([ True])",
                        "_shape": [
                          1
                        ],
                        "low": "array([-1.], dtype=float32)",
                        "high": "array([1.], dtype=float32)",
                        "low_repr": "-1.0",
                        "high_repr": "1.0",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "render_mode": "None",
                      "renderer": {
                        "no_returns_render": [
                          "human"
                        ],
                        "single_render": [
                          "single_rgb_array",
                          "single_depth_array",
                          "single_state_pixels"
                        ],
                        "mode": "None",
                        "render": {
                          "$type": "functools.partial"
                        },
                        "render_list": [],
                        "$type": "gym.utils.renderer.Renderer"
                      },
                      "_ezpickle_args": [],
                      "_ezpickle_kwargs": {},
                      "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                    },
                    "_action_space": "None",
                    "_observation_space": "None",
                    "_reward_range": "None",
                    "_metadata": "None",
                    "new_step_api": true,
                    "checked_reset": false,
                    "checked_step": false,
                    "checked_render": false,
                    "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": false,
                  "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "_has_reset": false,
                "_disable_render_order_enforcing": false,
                "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "_max_episode_steps": 1000,
              "_elapsed_steps": "None",
              "$type": "gym.wrappers.time_limit.TimeLimit"
            },
            "_max_episode_length": 1000,
            "_render_modes": [
              "human",
              "rgb_array",
              "depth_array",
              "single_rgb_array",
              "single_depth_array"
            ],
            "_step_cnt": "None",
            "_visualize": false,
            "_action_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_env_info": "None",
            "$type": "garage.envs.gym_env.GymEnv"
          },
          "_scale_reward": 1.0,
          "_normalize_obs": false,
          "_normalize_reward": false,
          "_expected_action_scale": 1.0,
          "_flatten_obs": true,
          "_obs_alpha": 0.001,
          "_obs_mean": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
          "_obs_var": "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])",
          "_reward_alpha": 0.001,
          "_reward_mean": 0.0,
          "_reward_var": 1.0,
          "$type": "garage.envs.normalized_env.NormalizedEnv"
        },
        "_env_steps": [],
        "_observations": [],
        "_last_observations": [],
        "_agent_infos": {},
        "_lengths": [],
        "_prev_obs": "None",
        "_eps_length": 0,
        "_episode_infos": {},
        "$type": "garage.sampler.default_worker.DefaultWorker"
      },
      {
        "_seed": "None",
        "_max_episode_length": 500,
        "_worker_number": 20,
        "agent": {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_module": {
              "training": true,
              "_parameters": {
                "_init_std": {
                  "$type": "torch.nn.parameter.Parameter"
                }
              },
              "_buffers": {
                "min_std_param": {
                  "$type": "torch.Tensor"
                }
              },
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_mean_module": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 11.0,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    },
                    "_output_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 1.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    }
                  },
                  "_output_dim": 1.0,
                  "$type": "garage.torch.modules.mlp_module.MLPModule"
                }
              },
              "_input_dim": 11.0,
              "_hidden_sizes": [
                32,
                32
              ],
              "_action_dim": 1.0,
              "_learn_std": true,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_min_std": 1e-06,
              "_max_std": "None",
              "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
              "_std_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_std_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": "None",
              "_std_output_w_init": {
                "$type": "builtins.function"
              },
              "_std_parameterization": "exp",
              "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
              "_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_output_nonlinearity": "None",
              "_output_w_init": {
                "$type": "builtins.function"
              },
              "_output_b_init": {
                "$type": "builtins.function"
              },
              "_layer_normalization": false,
              "_norm_dist_class": {
                "$typename": "torch.distributions.normal.Normal"
              },
              "_min_std_param": {
                "$type": "torch.Tensor"
              },
              "_max_std_param": "None",
              "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
            }
          },
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
        },
        "env": {
          "_env": {
            "_env": {
              "env": {
                "env": {
                  "env": {
                    "env": {
                      "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                      "model": "<mujoco._structs.MjModel object at 0x7f5aff56e5f0>",
                      "data": "<mujoco._structs.MjData object at 0x7f5aff56e630>",
                      "init_qpos": "array([0., 0., 0.])",
                      "init_qvel": "array([0., 0., 0.])",
                      "_viewers": {},
                      "frame_skip": 5,
                      "viewer": "None",
                      "observation_space": {
                        "dtype": "dtype('float64')",
                        "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "_shape": [
                          11
                        ],
                        "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                        "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                        "low_repr": "-inf",
                        "high_repr": "inf",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "action_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True])",
                        "bounded_above": "array([ True])",
                        "_shape": [
                          1
                        ],
                        "low": "array([-1.], dtype=float32)",
                        "high": "array([1.], dtype=float32)",
                        "low_repr": "-1.0",
                        "high_repr": "1.0",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "render_mode": "None",
                      "renderer": {
                        "no_returns_render": [
                          "human"
                        ],
                        "single_render": [
                          "single_rgb_array",
                          "single_depth_array",
                          "single_state_pixels"
                        ],
                        "mode": "None",
                        "render": {
                          "$type": "functools.partial"
                        },
                        "render_list": [],
                        "$type": "gym.utils.renderer.Renderer"
                      },
                      "_ezpickle_args": [],
                      "_ezpickle_kwargs": {},
                      "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                    },
                    "_action_space": "None",
                    "_observation_space": "None",
                    "_reward_range": "None",
                    "_metadata": "None",
                    "new_step_api": true,
                    "checked_reset": false,
                    "checked_step": false,
                    "checked_render": false,
                    "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": false,
                  "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "_has_reset": false,
                "_disable_render_order_enforcing": false,
                "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "_max_episode_steps": 1000,
              "_elapsed_steps": "None",
              "$type": "gym.wrappers.time_limit.TimeLimit"
            },
            "_max_episode_length": 1000,
            "_render_modes": [
              "human",
              "rgb_array",
              "depth_array",
              "single_rgb_array",
              "single_depth_array"
            ],
            "_step_cnt": "None",
            "_visualize": false,
            "_action_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_env_info": "None",
            "$type": "garage.envs.gym_env.GymEnv"
          },
          "_scale_reward": 1.0,
          "_normalize_obs": false,
          "_normalize_reward": false,
          "_expected_action_scale": 1.0,
          "_flatten_obs": true,
          "_obs_alpha": 0.001,
          "_obs_mean": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
          "_obs_var": "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])",
          "_reward_alpha": 0.001,
          "_reward_mean": 0.0,
          "_reward_var": 1.0,
          "$type": "garage.envs.normalized_env.NormalizedEnv"
        },
        "_env_steps": [],
        "_observations": [],
        "_last_observations": [],
        "_agent_infos": {},
        "_lengths": [],
        "_prev_obs": "None",
        "_eps_length": 0,
        "_episode_infos": {},
        "$type": "garage.sampler.default_worker.DefaultWorker"
      },
      {
        "_seed": "None",
        "_max_episode_length": 500,
        "_worker_number": 21,
        "agent": {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_module": {
              "training": true,
              "_parameters": {
                "_init_std": {
                  "$type": "torch.nn.parameter.Parameter"
                }
              },
              "_buffers": {
                "min_std_param": {
                  "$type": "torch.Tensor"
                }
              },
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_mean_module": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 11.0,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    },
                    "_output_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 1.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    }
                  },
                  "_output_dim": 1.0,
                  "$type": "garage.torch.modules.mlp_module.MLPModule"
                }
              },
              "_input_dim": 11.0,
              "_hidden_sizes": [
                32,
                32
              ],
              "_action_dim": 1.0,
              "_learn_std": true,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_min_std": 1e-06,
              "_max_std": "None",
              "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
              "_std_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_std_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": "None",
              "_std_output_w_init": {
                "$type": "builtins.function"
              },
              "_std_parameterization": "exp",
              "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
              "_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_output_nonlinearity": "None",
              "_output_w_init": {
                "$type": "builtins.function"
              },
              "_output_b_init": {
                "$type": "builtins.function"
              },
              "_layer_normalization": false,
              "_norm_dist_class": {
                "$typename": "torch.distributions.normal.Normal"
              },
              "_min_std_param": {
                "$type": "torch.Tensor"
              },
              "_max_std_param": "None",
              "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
            }
          },
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
        },
        "env": {
          "_env": {
            "_env": {
              "env": {
                "env": {
                  "env": {
                    "env": {
                      "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                      "model": "<mujoco._structs.MjModel object at 0x7f5aff56e130>",
                      "data": "<mujoco._structs.MjData object at 0x7f5aff56e2f0>",
                      "init_qpos": "array([0., 0., 0.])",
                      "init_qvel": "array([0., 0., 0.])",
                      "_viewers": {},
                      "frame_skip": 5,
                      "viewer": "None",
                      "observation_space": {
                        "dtype": "dtype('float64')",
                        "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "_shape": [
                          11
                        ],
                        "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                        "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                        "low_repr": "-inf",
                        "high_repr": "inf",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "action_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True])",
                        "bounded_above": "array([ True])",
                        "_shape": [
                          1
                        ],
                        "low": "array([-1.], dtype=float32)",
                        "high": "array([1.], dtype=float32)",
                        "low_repr": "-1.0",
                        "high_repr": "1.0",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "render_mode": "None",
                      "renderer": {
                        "no_returns_render": [
                          "human"
                        ],
                        "single_render": [
                          "single_rgb_array",
                          "single_depth_array",
                          "single_state_pixels"
                        ],
                        "mode": "None",
                        "render": {
                          "$type": "functools.partial"
                        },
                        "render_list": [],
                        "$type": "gym.utils.renderer.Renderer"
                      },
                      "_ezpickle_args": [],
                      "_ezpickle_kwargs": {},
                      "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                    },
                    "_action_space": "None",
                    "_observation_space": "None",
                    "_reward_range": "None",
                    "_metadata": "None",
                    "new_step_api": true,
                    "checked_reset": false,
                    "checked_step": false,
                    "checked_render": false,
                    "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": false,
                  "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "_has_reset": false,
                "_disable_render_order_enforcing": false,
                "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "_max_episode_steps": 1000,
              "_elapsed_steps": "None",
              "$type": "gym.wrappers.time_limit.TimeLimit"
            },
            "_max_episode_length": 1000,
            "_render_modes": [
              "human",
              "rgb_array",
              "depth_array",
              "single_rgb_array",
              "single_depth_array"
            ],
            "_step_cnt": "None",
            "_visualize": false,
            "_action_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_env_info": "None",
            "$type": "garage.envs.gym_env.GymEnv"
          },
          "_scale_reward": 1.0,
          "_normalize_obs": false,
          "_normalize_reward": false,
          "_expected_action_scale": 1.0,
          "_flatten_obs": true,
          "_obs_alpha": 0.001,
          "_obs_mean": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
          "_obs_var": "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])",
          "_reward_alpha": 0.001,
          "_reward_mean": 0.0,
          "_reward_var": 1.0,
          "$type": "garage.envs.normalized_env.NormalizedEnv"
        },
        "_env_steps": [],
        "_observations": [],
        "_last_observations": [],
        "_agent_infos": {},
        "_lengths": [],
        "_prev_obs": "None",
        "_eps_length": 0,
        "_episode_infos": {},
        "$type": "garage.sampler.default_worker.DefaultWorker"
      },
      {
        "_seed": "None",
        "_max_episode_length": 500,
        "_worker_number": 22,
        "agent": {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_module": {
              "training": true,
              "_parameters": {
                "_init_std": {
                  "$type": "torch.nn.parameter.Parameter"
                }
              },
              "_buffers": {
                "min_std_param": {
                  "$type": "torch.Tensor"
                }
              },
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_mean_module": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 11.0,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    },
                    "_output_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 1.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    }
                  },
                  "_output_dim": 1.0,
                  "$type": "garage.torch.modules.mlp_module.MLPModule"
                }
              },
              "_input_dim": 11.0,
              "_hidden_sizes": [
                32,
                32
              ],
              "_action_dim": 1.0,
              "_learn_std": true,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_min_std": 1e-06,
              "_max_std": "None",
              "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
              "_std_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_std_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": "None",
              "_std_output_w_init": {
                "$type": "builtins.function"
              },
              "_std_parameterization": "exp",
              "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
              "_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_output_nonlinearity": "None",
              "_output_w_init": {
                "$type": "builtins.function"
              },
              "_output_b_init": {
                "$type": "builtins.function"
              },
              "_layer_normalization": false,
              "_norm_dist_class": {
                "$typename": "torch.distributions.normal.Normal"
              },
              "_min_std_param": {
                "$type": "torch.Tensor"
              },
              "_max_std_param": "None",
              "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
            }
          },
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
        },
        "env": {
          "_env": {
            "_env": {
              "env": {
                "env": {
                  "env": {
                    "env": {
                      "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                      "model": "<mujoco._structs.MjModel object at 0x7f5aff61fbb0>",
                      "data": "<mujoco._structs.MjData object at 0x7f5aff61f6b0>",
                      "init_qpos": "array([0., 0., 0.])",
                      "init_qvel": "array([0., 0., 0.])",
                      "_viewers": {},
                      "frame_skip": 5,
                      "viewer": "None",
                      "observation_space": {
                        "dtype": "dtype('float64')",
                        "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "_shape": [
                          11
                        ],
                        "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                        "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                        "low_repr": "-inf",
                        "high_repr": "inf",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "action_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True])",
                        "bounded_above": "array([ True])",
                        "_shape": [
                          1
                        ],
                        "low": "array([-1.], dtype=float32)",
                        "high": "array([1.], dtype=float32)",
                        "low_repr": "-1.0",
                        "high_repr": "1.0",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "render_mode": "None",
                      "renderer": {
                        "no_returns_render": [
                          "human"
                        ],
                        "single_render": [
                          "single_rgb_array",
                          "single_depth_array",
                          "single_state_pixels"
                        ],
                        "mode": "None",
                        "render": {
                          "$type": "functools.partial"
                        },
                        "render_list": [],
                        "$type": "gym.utils.renderer.Renderer"
                      },
                      "_ezpickle_args": [],
                      "_ezpickle_kwargs": {},
                      "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                    },
                    "_action_space": "None",
                    "_observation_space": "None",
                    "_reward_range": "None",
                    "_metadata": "None",
                    "new_step_api": true,
                    "checked_reset": false,
                    "checked_step": false,
                    "checked_render": false,
                    "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": false,
                  "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "_has_reset": false,
                "_disable_render_order_enforcing": false,
                "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "_max_episode_steps": 1000,
              "_elapsed_steps": "None",
              "$type": "gym.wrappers.time_limit.TimeLimit"
            },
            "_max_episode_length": 1000,
            "_render_modes": [
              "human",
              "rgb_array",
              "depth_array",
              "single_rgb_array",
              "single_depth_array"
            ],
            "_step_cnt": "None",
            "_visualize": false,
            "_action_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_env_info": "None",
            "$type": "garage.envs.gym_env.GymEnv"
          },
          "_scale_reward": 1.0,
          "_normalize_obs": false,
          "_normalize_reward": false,
          "_expected_action_scale": 1.0,
          "_flatten_obs": true,
          "_obs_alpha": 0.001,
          "_obs_mean": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
          "_obs_var": "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])",
          "_reward_alpha": 0.001,
          "_reward_mean": 0.0,
          "_reward_var": 1.0,
          "$type": "garage.envs.normalized_env.NormalizedEnv"
        },
        "_env_steps": [],
        "_observations": [],
        "_last_observations": [],
        "_agent_infos": {},
        "_lengths": [],
        "_prev_obs": "None",
        "_eps_length": 0,
        "_episode_infos": {},
        "$type": "garage.sampler.default_worker.DefaultWorker"
      },
      {
        "_seed": "None",
        "_max_episode_length": 500,
        "_worker_number": 23,
        "agent": {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_module": {
              "training": true,
              "_parameters": {
                "_init_std": {
                  "$type": "torch.nn.parameter.Parameter"
                }
              },
              "_buffers": {
                "min_std_param": {
                  "$type": "torch.Tensor"
                }
              },
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_mean_module": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 11.0,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    },
                    "_output_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 1.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    }
                  },
                  "_output_dim": 1.0,
                  "$type": "garage.torch.modules.mlp_module.MLPModule"
                }
              },
              "_input_dim": 11.0,
              "_hidden_sizes": [
                32,
                32
              ],
              "_action_dim": 1.0,
              "_learn_std": true,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_min_std": 1e-06,
              "_max_std": "None",
              "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
              "_std_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_std_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": "None",
              "_std_output_w_init": {
                "$type": "builtins.function"
              },
              "_std_parameterization": "exp",
              "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
              "_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_output_nonlinearity": "None",
              "_output_w_init": {
                "$type": "builtins.function"
              },
              "_output_b_init": {
                "$type": "builtins.function"
              },
              "_layer_normalization": false,
              "_norm_dist_class": {
                "$typename": "torch.distributions.normal.Normal"
              },
              "_min_std_param": {
                "$type": "torch.Tensor"
              },
              "_max_std_param": "None",
              "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
            }
          },
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
        },
        "env": {
          "_env": {
            "_env": {
              "env": {
                "env": {
                  "env": {
                    "env": {
                      "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                      "model": "<mujoco._structs.MjModel object at 0x7f5aff6cc3b0>",
                      "data": "<mujoco._structs.MjData object at 0x7f5aff6cc5f0>",
                      "init_qpos": "array([0., 0., 0.])",
                      "init_qvel": "array([0., 0., 0.])",
                      "_viewers": {},
                      "frame_skip": 5,
                      "viewer": "None",
                      "observation_space": {
                        "dtype": "dtype('float64')",
                        "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "_shape": [
                          11
                        ],
                        "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                        "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                        "low_repr": "-inf",
                        "high_repr": "inf",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "action_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True])",
                        "bounded_above": "array([ True])",
                        "_shape": [
                          1
                        ],
                        "low": "array([-1.], dtype=float32)",
                        "high": "array([1.], dtype=float32)",
                        "low_repr": "-1.0",
                        "high_repr": "1.0",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "render_mode": "None",
                      "renderer": {
                        "no_returns_render": [
                          "human"
                        ],
                        "single_render": [
                          "single_rgb_array",
                          "single_depth_array",
                          "single_state_pixels"
                        ],
                        "mode": "None",
                        "render": {
                          "$type": "functools.partial"
                        },
                        "render_list": [],
                        "$type": "gym.utils.renderer.Renderer"
                      },
                      "_ezpickle_args": [],
                      "_ezpickle_kwargs": {},
                      "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                    },
                    "_action_space": "None",
                    "_observation_space": "None",
                    "_reward_range": "None",
                    "_metadata": "None",
                    "new_step_api": true,
                    "checked_reset": false,
                    "checked_step": false,
                    "checked_render": false,
                    "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": false,
                  "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "_has_reset": false,
                "_disable_render_order_enforcing": false,
                "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "_max_episode_steps": 1000,
              "_elapsed_steps": "None",
              "$type": "gym.wrappers.time_limit.TimeLimit"
            },
            "_max_episode_length": 1000,
            "_render_modes": [
              "human",
              "rgb_array",
              "depth_array",
              "single_rgb_array",
              "single_depth_array"
            ],
            "_step_cnt": "None",
            "_visualize": false,
            "_action_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_env_info": "None",
            "$type": "garage.envs.gym_env.GymEnv"
          },
          "_scale_reward": 1.0,
          "_normalize_obs": false,
          "_normalize_reward": false,
          "_expected_action_scale": 1.0,
          "_flatten_obs": true,
          "_obs_alpha": 0.001,
          "_obs_mean": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
          "_obs_var": "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])",
          "_reward_alpha": 0.001,
          "_reward_mean": 0.0,
          "_reward_var": 1.0,
          "$type": "garage.envs.normalized_env.NormalizedEnv"
        },
        "_env_steps": [],
        "_observations": [],
        "_last_observations": [],
        "_agent_infos": {},
        "_lengths": [],
        "_prev_obs": "None",
        "_eps_length": 0,
        "_episode_infos": {},
        "$type": "garage.sampler.default_worker.DefaultWorker"
      },
      {
        "_seed": "None",
        "_max_episode_length": 500,
        "_worker_number": 24,
        "agent": {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_module": {
              "training": true,
              "_parameters": {
                "_init_std": {
                  "$type": "torch.nn.parameter.Parameter"
                }
              },
              "_buffers": {
                "min_std_param": {
                  "$type": "torch.Tensor"
                }
              },
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_mean_module": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 11.0,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    },
                    "_output_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 1.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    }
                  },
                  "_output_dim": 1.0,
                  "$type": "garage.torch.modules.mlp_module.MLPModule"
                }
              },
              "_input_dim": 11.0,
              "_hidden_sizes": [
                32,
                32
              ],
              "_action_dim": 1.0,
              "_learn_std": true,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_min_std": 1e-06,
              "_max_std": "None",
              "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
              "_std_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_std_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": "None",
              "_std_output_w_init": {
                "$type": "builtins.function"
              },
              "_std_parameterization": "exp",
              "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
              "_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_output_nonlinearity": "None",
              "_output_w_init": {
                "$type": "builtins.function"
              },
              "_output_b_init": {
                "$type": "builtins.function"
              },
              "_layer_normalization": false,
              "_norm_dist_class": {
                "$typename": "torch.distributions.normal.Normal"
              },
              "_min_std_param": {
                "$type": "torch.Tensor"
              },
              "_max_std_param": "None",
              "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
            }
          },
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
        },
        "env": {
          "_env": {
            "_env": {
              "env": {
                "env": {
                  "env": {
                    "env": {
                      "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                      "model": "<mujoco._structs.MjModel object at 0x7f5aff5771f0>",
                      "data": "<mujoco._structs.MjData object at 0x7f5aff577230>",
                      "init_qpos": "array([0., 0., 0.])",
                      "init_qvel": "array([0., 0., 0.])",
                      "_viewers": {},
                      "frame_skip": 5,
                      "viewer": "None",
                      "observation_space": {
                        "dtype": "dtype('float64')",
                        "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "_shape": [
                          11
                        ],
                        "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                        "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                        "low_repr": "-inf",
                        "high_repr": "inf",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "action_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True])",
                        "bounded_above": "array([ True])",
                        "_shape": [
                          1
                        ],
                        "low": "array([-1.], dtype=float32)",
                        "high": "array([1.], dtype=float32)",
                        "low_repr": "-1.0",
                        "high_repr": "1.0",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "render_mode": "None",
                      "renderer": {
                        "no_returns_render": [
                          "human"
                        ],
                        "single_render": [
                          "single_rgb_array",
                          "single_depth_array",
                          "single_state_pixels"
                        ],
                        "mode": "None",
                        "render": {
                          "$type": "functools.partial"
                        },
                        "render_list": [],
                        "$type": "gym.utils.renderer.Renderer"
                      },
                      "_ezpickle_args": [],
                      "_ezpickle_kwargs": {},
                      "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                    },
                    "_action_space": "None",
                    "_observation_space": "None",
                    "_reward_range": "None",
                    "_metadata": "None",
                    "new_step_api": true,
                    "checked_reset": false,
                    "checked_step": false,
                    "checked_render": false,
                    "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": false,
                  "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "_has_reset": false,
                "_disable_render_order_enforcing": false,
                "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "_max_episode_steps": 1000,
              "_elapsed_steps": "None",
              "$type": "gym.wrappers.time_limit.TimeLimit"
            },
            "_max_episode_length": 1000,
            "_render_modes": [
              "human",
              "rgb_array",
              "depth_array",
              "single_rgb_array",
              "single_depth_array"
            ],
            "_step_cnt": "None",
            "_visualize": false,
            "_action_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_env_info": "None",
            "$type": "garage.envs.gym_env.GymEnv"
          },
          "_scale_reward": 1.0,
          "_normalize_obs": false,
          "_normalize_reward": false,
          "_expected_action_scale": 1.0,
          "_flatten_obs": true,
          "_obs_alpha": 0.001,
          "_obs_mean": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
          "_obs_var": "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])",
          "_reward_alpha": 0.001,
          "_reward_mean": 0.0,
          "_reward_var": 1.0,
          "$type": "garage.envs.normalized_env.NormalizedEnv"
        },
        "_env_steps": [],
        "_observations": [],
        "_last_observations": [],
        "_agent_infos": {},
        "_lengths": [],
        "_prev_obs": "None",
        "_eps_length": 0,
        "_episode_infos": {},
        "$type": "garage.sampler.default_worker.DefaultWorker"
      },
      {
        "_seed": "None",
        "_max_episode_length": 500,
        "_worker_number": 25,
        "agent": {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_module": {
              "training": true,
              "_parameters": {
                "_init_std": {
                  "$type": "torch.nn.parameter.Parameter"
                }
              },
              "_buffers": {
                "min_std_param": {
                  "$type": "torch.Tensor"
                }
              },
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_mean_module": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 11.0,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    },
                    "_output_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 1.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    }
                  },
                  "_output_dim": 1.0,
                  "$type": "garage.torch.modules.mlp_module.MLPModule"
                }
              },
              "_input_dim": 11.0,
              "_hidden_sizes": [
                32,
                32
              ],
              "_action_dim": 1.0,
              "_learn_std": true,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_min_std": 1e-06,
              "_max_std": "None",
              "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
              "_std_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_std_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": "None",
              "_std_output_w_init": {
                "$type": "builtins.function"
              },
              "_std_parameterization": "exp",
              "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
              "_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_output_nonlinearity": "None",
              "_output_w_init": {
                "$type": "builtins.function"
              },
              "_output_b_init": {
                "$type": "builtins.function"
              },
              "_layer_normalization": false,
              "_norm_dist_class": {
                "$typename": "torch.distributions.normal.Normal"
              },
              "_min_std_param": {
                "$type": "torch.Tensor"
              },
              "_max_std_param": "None",
              "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
            }
          },
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
        },
        "env": {
          "_env": {
            "_env": {
              "env": {
                "env": {
                  "env": {
                    "env": {
                      "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                      "model": "<mujoco._structs.MjModel object at 0x7f5aff577ab0>",
                      "data": "<mujoco._structs.MjData object at 0x7f5aff577af0>",
                      "init_qpos": "array([0., 0., 0.])",
                      "init_qvel": "array([0., 0., 0.])",
                      "_viewers": {},
                      "frame_skip": 5,
                      "viewer": "None",
                      "observation_space": {
                        "dtype": "dtype('float64')",
                        "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "_shape": [
                          11
                        ],
                        "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                        "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                        "low_repr": "-inf",
                        "high_repr": "inf",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "action_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True])",
                        "bounded_above": "array([ True])",
                        "_shape": [
                          1
                        ],
                        "low": "array([-1.], dtype=float32)",
                        "high": "array([1.], dtype=float32)",
                        "low_repr": "-1.0",
                        "high_repr": "1.0",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "render_mode": "None",
                      "renderer": {
                        "no_returns_render": [
                          "human"
                        ],
                        "single_render": [
                          "single_rgb_array",
                          "single_depth_array",
                          "single_state_pixels"
                        ],
                        "mode": "None",
                        "render": {
                          "$type": "functools.partial"
                        },
                        "render_list": [],
                        "$type": "gym.utils.renderer.Renderer"
                      },
                      "_ezpickle_args": [],
                      "_ezpickle_kwargs": {},
                      "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                    },
                    "_action_space": "None",
                    "_observation_space": "None",
                    "_reward_range": "None",
                    "_metadata": "None",
                    "new_step_api": true,
                    "checked_reset": false,
                    "checked_step": false,
                    "checked_render": false,
                    "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": false,
                  "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "_has_reset": false,
                "_disable_render_order_enforcing": false,
                "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "_max_episode_steps": 1000,
              "_elapsed_steps": "None",
              "$type": "gym.wrappers.time_limit.TimeLimit"
            },
            "_max_episode_length": 1000,
            "_render_modes": [
              "human",
              "rgb_array",
              "depth_array",
              "single_rgb_array",
              "single_depth_array"
            ],
            "_step_cnt": "None",
            "_visualize": false,
            "_action_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_env_info": "None",
            "$type": "garage.envs.gym_env.GymEnv"
          },
          "_scale_reward": 1.0,
          "_normalize_obs": false,
          "_normalize_reward": false,
          "_expected_action_scale": 1.0,
          "_flatten_obs": true,
          "_obs_alpha": 0.001,
          "_obs_mean": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
          "_obs_var": "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])",
          "_reward_alpha": 0.001,
          "_reward_mean": 0.0,
          "_reward_var": 1.0,
          "$type": "garage.envs.normalized_env.NormalizedEnv"
        },
        "_env_steps": [],
        "_observations": [],
        "_last_observations": [],
        "_agent_infos": {},
        "_lengths": [],
        "_prev_obs": "None",
        "_eps_length": 0,
        "_episode_infos": {},
        "$type": "garage.sampler.default_worker.DefaultWorker"
      },
      {
        "_seed": "None",
        "_max_episode_length": 500,
        "_worker_number": 26,
        "agent": {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_module": {
              "training": true,
              "_parameters": {
                "_init_std": {
                  "$type": "torch.nn.parameter.Parameter"
                }
              },
              "_buffers": {
                "min_std_param": {
                  "$type": "torch.Tensor"
                }
              },
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_mean_module": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 11.0,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    },
                    "_output_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 1.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    }
                  },
                  "_output_dim": 1.0,
                  "$type": "garage.torch.modules.mlp_module.MLPModule"
                }
              },
              "_input_dim": 11.0,
              "_hidden_sizes": [
                32,
                32
              ],
              "_action_dim": 1.0,
              "_learn_std": true,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_min_std": 1e-06,
              "_max_std": "None",
              "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
              "_std_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_std_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": "None",
              "_std_output_w_init": {
                "$type": "builtins.function"
              },
              "_std_parameterization": "exp",
              "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
              "_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_output_nonlinearity": "None",
              "_output_w_init": {
                "$type": "builtins.function"
              },
              "_output_b_init": {
                "$type": "builtins.function"
              },
              "_layer_normalization": false,
              "_norm_dist_class": {
                "$typename": "torch.distributions.normal.Normal"
              },
              "_min_std_param": {
                "$type": "torch.Tensor"
              },
              "_max_std_param": "None",
              "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
            }
          },
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
        },
        "env": {
          "_env": {
            "_env": {
              "env": {
                "env": {
                  "env": {
                    "env": {
                      "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                      "model": "<mujoco._structs.MjModel object at 0x7f5aff621570>",
                      "data": "<mujoco._structs.MjData object at 0x7f5aff6215b0>",
                      "init_qpos": "array([0., 0., 0.])",
                      "init_qvel": "array([0., 0., 0.])",
                      "_viewers": {},
                      "frame_skip": 5,
                      "viewer": "None",
                      "observation_space": {
                        "dtype": "dtype('float64')",
                        "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "_shape": [
                          11
                        ],
                        "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                        "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                        "low_repr": "-inf",
                        "high_repr": "inf",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "action_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True])",
                        "bounded_above": "array([ True])",
                        "_shape": [
                          1
                        ],
                        "low": "array([-1.], dtype=float32)",
                        "high": "array([1.], dtype=float32)",
                        "low_repr": "-1.0",
                        "high_repr": "1.0",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "render_mode": "None",
                      "renderer": {
                        "no_returns_render": [
                          "human"
                        ],
                        "single_render": [
                          "single_rgb_array",
                          "single_depth_array",
                          "single_state_pixels"
                        ],
                        "mode": "None",
                        "render": {
                          "$type": "functools.partial"
                        },
                        "render_list": [],
                        "$type": "gym.utils.renderer.Renderer"
                      },
                      "_ezpickle_args": [],
                      "_ezpickle_kwargs": {},
                      "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                    },
                    "_action_space": "None",
                    "_observation_space": "None",
                    "_reward_range": "None",
                    "_metadata": "None",
                    "new_step_api": true,
                    "checked_reset": false,
                    "checked_step": false,
                    "checked_render": false,
                    "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": false,
                  "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "_has_reset": false,
                "_disable_render_order_enforcing": false,
                "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "_max_episode_steps": 1000,
              "_elapsed_steps": "None",
              "$type": "gym.wrappers.time_limit.TimeLimit"
            },
            "_max_episode_length": 1000,
            "_render_modes": [
              "human",
              "rgb_array",
              "depth_array",
              "single_rgb_array",
              "single_depth_array"
            ],
            "_step_cnt": "None",
            "_visualize": false,
            "_action_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_env_info": "None",
            "$type": "garage.envs.gym_env.GymEnv"
          },
          "_scale_reward": 1.0,
          "_normalize_obs": false,
          "_normalize_reward": false,
          "_expected_action_scale": 1.0,
          "_flatten_obs": true,
          "_obs_alpha": 0.001,
          "_obs_mean": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
          "_obs_var": "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])",
          "_reward_alpha": 0.001,
          "_reward_mean": 0.0,
          "_reward_var": 1.0,
          "$type": "garage.envs.normalized_env.NormalizedEnv"
        },
        "_env_steps": [],
        "_observations": [],
        "_last_observations": [],
        "_agent_infos": {},
        "_lengths": [],
        "_prev_obs": "None",
        "_eps_length": 0,
        "_episode_infos": {},
        "$type": "garage.sampler.default_worker.DefaultWorker"
      },
      {
        "_seed": "None",
        "_max_episode_length": 500,
        "_worker_number": 27,
        "agent": {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_module": {
              "training": true,
              "_parameters": {
                "_init_std": {
                  "$type": "torch.nn.parameter.Parameter"
                }
              },
              "_buffers": {
                "min_std_param": {
                  "$type": "torch.Tensor"
                }
              },
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_mean_module": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 11.0,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f5b985965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    },
                    "_output_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 1.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    }
                  },
                  "_output_dim": 1.0,
                  "$type": "garage.torch.modules.mlp_module.MLPModule"
                }
              },
              "_input_dim": 11.0,
              "_hidden_sizes": [
                32,
                32
              ],
              "_action_dim": 1.0,
              "_learn_std": true,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_min_std": 1e-06,
              "_max_std": "None",
              "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
              "_std_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_std_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": "None",
              "_std_output_w_init": {
                "$type": "builtins.function"
              },
              "_std_parameterization": "exp",
              "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f5b985965a0>",
              "_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_output_nonlinearity": "None",
              "_output_w_init": {
                "$type": "builtins.function"
              },
              "_output_b_init": {
                "$type": "builtins.function"
              },
              "_layer_normalization": false,
              "_norm_dist_class": {
                "$typename": "torch.distributions.normal.Normal"
              },
              "_min_std_param": {
                "$type": "torch.Tensor"
              },
              "_max_std_param": "None",
              "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
            }
          },
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
        },
        "env": {
          "_env": {
            "_env": {
              "env": {
                "env": {
                  "env": {
                    "env": {
                      "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                      "model": "<mujoco._structs.MjModel object at 0x7f5aff4f50b0>",
                      "data": "<mujoco._structs.MjData object at 0x7f5aff4f50f0>",
                      "init_qpos": "array([0., 0., 0.])",
                      "init_qvel": "array([0., 0., 0.])",
                      "_viewers": {},
                      "frame_skip": 5,
                      "viewer": "None",
                      "observation_space": {
                        "dtype": "dtype('float64')",
                        "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "_shape": [
                          11
                        ],
                        "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                        "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                        "low_repr": "-inf",
                        "high_repr": "inf",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "action_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True])",
                        "bounded_above": "array([ True])",
                        "_shape": [
                          1
                        ],
                        "low": "array([-1.], dtype=float32)",
                        "high": "array([1.], dtype=float32)",
                        "low_repr": "-1.0",
                        "high_repr": "1.0",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "render_mode": "None",
                      "renderer": {
                        "no_returns_render": [
                          "human"
                        ],
                        "single_render": [
                          "single_rgb_array",
                          "single_depth_array",
                          "single_state_pixels"
                        ],
                        "mode": "None",
                        "render": {
                          "$type": "functools.partial"
                        },
                        "render_list": [],
                        "$type": "gym.utils.renderer.Renderer"
                      },
                      "_ezpickle_args": [],
                      "_ezpickle_kwargs": {},
                      "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                    },
                    "_action_space": "None",
                    "_observation_space": "None",
                    "_reward_range": "None",
                    "_metadata": "None",
                    "new_step_api": true,
                    "checked_reset": false,
                    "checked_step": false,
                    "checked_render": false,
                    "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": false,
                  "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "_has_reset": false,
                "_disable_render_order_enforcing": false,
                "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "_max_episode_steps": 1000,
              "_elapsed_steps": "None",
              "$type": "gym.wrappers.time_limit.TimeLimit"
            },
            "_max_episode_length": 1000,
            "_render_modes": [
              "human",
              "rgb_array",
              "depth_array",
              "single_rgb_array",
              "single_depth_array"
            ],
            "_step_cnt": "None",
            "_visualize": false,
            "_action_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_env_info": "None",
            "$type": "garage.envs.gym_env.GymEnv"
          },
          "_scale_reward": 1.0,
          "_normalize_obs": false,
          "_normalize_reward": false,
          "_expected_action_scale": 1.0,
          "_flatten_obs": true,
          "_obs_alpha": 0.001,
          "_obs_mean": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",
          "_obs_var": "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])",
          "_reward_alpha": 0.001,
          "_reward_mean": 0.0,
          "_reward_var": 1.0,
          "$type": "garage.envs.normalized_env.NormalizedEnv"
        },
        "_env_steps": [],
        "_observations": [],
        "_last_observations": [],
        "_agent_infos": {},
        "_lengths": [],
        "_prev_obs": "None",
        "_eps_length": 0,
        "_episode_infos": {},
        "$type": "garage.sampler.default_worker.DefaultWorker"
      }
    ],
    "total_env_steps": 0,
    "$type": "garage.sampler.local_sampler.LocalSampler"
  },
  "_plotter": "None",
  "_start_time": "None",
  "_itr_start_time": "None",
  "step_itr": "None",
  "step_episode": "None",
  "enable_logging": true,
  "_n_workers": "None",
  "_worker_class": "None",
  "_worker_args": "None",
  "$type": "garage.trainer.Trainer"
}