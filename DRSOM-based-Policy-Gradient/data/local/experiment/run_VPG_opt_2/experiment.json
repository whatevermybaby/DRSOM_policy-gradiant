{
  "_snapshotter": {
    "_snapshot_dir": "/home/lw/shanshu/DRSOM-based-Policy-Gradient/data/local/experiment/run_VPG_opt_2",
    "_snapshot_mode": "last",
    "_snapshot_gap": 1,
    "$type": "garage.experiment.snapshotter.Snapshotter"
  },
  "_has_setup": true,
  "_plot": false,
  "_seed": 100,
  "_train_args": {
    "n_epochs": 200,
    "batch_size": 4000,
    "plot": false,
    "store_episodes": false,
    "pause_for_plot": false,
    "start_epoch": 0,
    "$type": "garage.trainer.TrainArgs"
  },
  "_stats": {
    "total_epoch": 0,
    "total_itr": 0,
    "total_env_steps": 0,
    "last_episode": "None",
    "$type": "garage.trainer.ExperimentStats"
  },
  "_algo": {
    "env_spec": {
      "max_episode_length": 1000,
      "input_space": {
        "dtype": "dtype('float32')",
        "bounded_below": "array([ True])",
        "bounded_above": "array([ True])",
        "_shape": [
          1
        ],
        "low": "array([-1.], dtype=float32)",
        "high": "array([1.], dtype=float32)",
        "low_repr": "-1.0",
        "high_repr": "1.0",
        "_np_random": "None",
        "$type": "akro.box.Box"
      },
      "output_space": {
        "dtype": "dtype('float32')",
        "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
        "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
        "_shape": [
          11
        ],
        "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
        "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
        "low_repr": "-inf",
        "high_repr": "inf",
        "_np_random": "None",
        "$type": "akro.box.Box"
      },
      "$type": "garage._environment.EnvSpec"
    },
    "policy": {
      "training": true,
      "_parameters": {},
      "_buffers": {},
      "_non_persistent_buffers_set": [],
      "_backward_hooks": {},
      "_forward_hooks": {},
      "_forward_pre_hooks": {},
      "_state_dict_hooks": {},
      "_load_state_dict_pre_hooks": {},
      "_modules": {
        "_module": {
          "training": true,
          "_parameters": {
            "_init_std": {
              "$type": "torch.nn.parameter.Parameter"
            }
          },
          "_buffers": {
            "min_std_param": {
              "$type": "torch.Tensor"
            }
          },
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_mean_module": {
              "training": true,
              "_parameters": {},
              "_buffers": {},
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_layers": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "0": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 11.0,
                          "out_features": 32,
                          "$type": "torch.nn.modules.linear.Linear"
                        },
                        "non_linearity": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                          "$type": "garage.torch._functions.NonLinearity"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    },
                    "1": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 32,
                          "out_features": 32,
                          "$type": "torch.nn.modules.linear.Linear"
                        },
                        "non_linearity": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                          "$type": "garage.torch._functions.NonLinearity"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    }
                  },
                  "$type": "torch.nn.modules.container.ModuleList"
                },
                "_output_layers": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "0": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 32,
                          "out_features": 1.0,
                          "$type": "torch.nn.modules.linear.Linear"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    }
                  },
                  "$type": "torch.nn.modules.container.ModuleList"
                }
              },
              "_output_dim": 1.0,
              "$type": "garage.torch.modules.mlp_module.MLPModule"
            }
          },
          "_input_dim": 11.0,
          "_hidden_sizes": [
            32,
            32
          ],
          "_action_dim": 1.0,
          "_learn_std": true,
          "_std_hidden_sizes": [
            32,
            32
          ],
          "_min_std": 1e-06,
          "_max_std": "None",
          "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
          "_std_hidden_w_init": {
            "$type": "builtins.function"
          },
          "_std_hidden_b_init": {
            "$type": "builtins.function"
          },
          "_std_output_nonlinearity": "None",
          "_std_output_w_init": {
            "$type": "builtins.function"
          },
          "_std_parameterization": "exp",
          "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
          "_hidden_w_init": {
            "$type": "builtins.function"
          },
          "_hidden_b_init": {
            "$type": "builtins.function"
          },
          "_output_nonlinearity": "None",
          "_output_w_init": {
            "$type": "builtins.function"
          },
          "_output_b_init": {
            "$type": "builtins.function"
          },
          "_layer_normalization": false,
          "_norm_dist_class": {
            "$typename": "torch.distributions.normal.Normal"
          },
          "_min_std_param": {
            "$type": "torch.Tensor"
          },
          "_max_std_param": "None",
          "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
        }
      },
      "_env_spec": {
        "max_episode_length": 1000,
        "input_space": {
          "dtype": "dtype('float32')",
          "bounded_below": "array([ True])",
          "bounded_above": "array([ True])",
          "_shape": [
            1
          ],
          "low": "array([-1.], dtype=float32)",
          "high": "array([1.], dtype=float32)",
          "low_repr": "-1.0",
          "high_repr": "1.0",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "output_space": {
          "dtype": "dtype('float32')",
          "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
          "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
          "_shape": [
            11
          ],
          "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
          "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
          "low_repr": "-inf",
          "high_repr": "inf",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "$type": "garage._environment.EnvSpec"
      },
      "_name": "GaussianMLPPolicy",
      "_obs_dim": 11.0,
      "_action_dim": 1.0,
      "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
    },
    "_sampler": {
      "_factory": {
        "n_workers": 28,
        "_seed": "None",
        "_max_episode_length": 200,
        "_worker_class": {
          "$typename": "garage.sampler.default_worker.DefaultWorker"
        },
        "_worker_args": {},
        "$type": "garage.sampler.worker_factory.WorkerFactory"
      },
      "_agents": [
        {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_module": {
              "training": true,
              "_parameters": {
                "_init_std": {
                  "$type": "torch.nn.parameter.Parameter"
                }
              },
              "_buffers": {
                "min_std_param": {
                  "$type": "torch.Tensor"
                }
              },
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_mean_module": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 11.0,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    },
                    "_output_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 1.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    }
                  },
                  "_output_dim": 1.0,
                  "$type": "garage.torch.modules.mlp_module.MLPModule"
                }
              },
              "_input_dim": 11.0,
              "_hidden_sizes": [
                32,
                32
              ],
              "_action_dim": 1.0,
              "_learn_std": true,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_min_std": 1e-06,
              "_max_std": "None",
              "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
              "_std_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_std_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": "None",
              "_std_output_w_init": {
                "$type": "builtins.function"
              },
              "_std_parameterization": "exp",
              "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
              "_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_output_nonlinearity": "None",
              "_output_w_init": {
                "$type": "builtins.function"
              },
              "_output_b_init": {
                "$type": "builtins.function"
              },
              "_layer_normalization": false,
              "_norm_dist_class": {
                "$typename": "torch.distributions.normal.Normal"
              },
              "_min_std_param": {
                "$type": "torch.Tensor"
              },
              "_max_std_param": "None",
              "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
            }
          },
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
        },
        {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_module": {
              "training": true,
              "_parameters": {
                "_init_std": {
                  "$type": "torch.nn.parameter.Parameter"
                }
              },
              "_buffers": {
                "min_std_param": {
                  "$type": "torch.Tensor"
                }
              },
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_mean_module": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 11.0,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    },
                    "_output_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 1.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    }
                  },
                  "_output_dim": 1.0,
                  "$type": "garage.torch.modules.mlp_module.MLPModule"
                }
              },
              "_input_dim": 11.0,
              "_hidden_sizes": [
                32,
                32
              ],
              "_action_dim": 1.0,
              "_learn_std": true,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_min_std": 1e-06,
              "_max_std": "None",
              "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
              "_std_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_std_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": "None",
              "_std_output_w_init": {
                "$type": "builtins.function"
              },
              "_std_parameterization": "exp",
              "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
              "_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_output_nonlinearity": "None",
              "_output_w_init": {
                "$type": "builtins.function"
              },
              "_output_b_init": {
                "$type": "builtins.function"
              },
              "_layer_normalization": false,
              "_norm_dist_class": {
                "$typename": "torch.distributions.normal.Normal"
              },
              "_min_std_param": {
                "$type": "torch.Tensor"
              },
              "_max_std_param": "None",
              "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
            }
          },
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
        },
        {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_module": {
              "training": true,
              "_parameters": {
                "_init_std": {
                  "$type": "torch.nn.parameter.Parameter"
                }
              },
              "_buffers": {
                "min_std_param": {
                  "$type": "torch.Tensor"
                }
              },
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_mean_module": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 11.0,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    },
                    "_output_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 1.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    }
                  },
                  "_output_dim": 1.0,
                  "$type": "garage.torch.modules.mlp_module.MLPModule"
                }
              },
              "_input_dim": 11.0,
              "_hidden_sizes": [
                32,
                32
              ],
              "_action_dim": 1.0,
              "_learn_std": true,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_min_std": 1e-06,
              "_max_std": "None",
              "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
              "_std_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_std_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": "None",
              "_std_output_w_init": {
                "$type": "builtins.function"
              },
              "_std_parameterization": "exp",
              "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
              "_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_output_nonlinearity": "None",
              "_output_w_init": {
                "$type": "builtins.function"
              },
              "_output_b_init": {
                "$type": "builtins.function"
              },
              "_layer_normalization": false,
              "_norm_dist_class": {
                "$typename": "torch.distributions.normal.Normal"
              },
              "_min_std_param": {
                "$type": "torch.Tensor"
              },
              "_max_std_param": "None",
              "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
            }
          },
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
        },
        {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_module": {
              "training": true,
              "_parameters": {
                "_init_std": {
                  "$type": "torch.nn.parameter.Parameter"
                }
              },
              "_buffers": {
                "min_std_param": {
                  "$type": "torch.Tensor"
                }
              },
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_mean_module": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 11.0,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    },
                    "_output_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 1.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    }
                  },
                  "_output_dim": 1.0,
                  "$type": "garage.torch.modules.mlp_module.MLPModule"
                }
              },
              "_input_dim": 11.0,
              "_hidden_sizes": [
                32,
                32
              ],
              "_action_dim": 1.0,
              "_learn_std": true,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_min_std": 1e-06,
              "_max_std": "None",
              "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
              "_std_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_std_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": "None",
              "_std_output_w_init": {
                "$type": "builtins.function"
              },
              "_std_parameterization": "exp",
              "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
              "_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_output_nonlinearity": "None",
              "_output_w_init": {
                "$type": "builtins.function"
              },
              "_output_b_init": {
                "$type": "builtins.function"
              },
              "_layer_normalization": false,
              "_norm_dist_class": {
                "$typename": "torch.distributions.normal.Normal"
              },
              "_min_std_param": {
                "$type": "torch.Tensor"
              },
              "_max_std_param": "None",
              "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
            }
          },
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
        },
        {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_module": {
              "training": true,
              "_parameters": {
                "_init_std": {
                  "$type": "torch.nn.parameter.Parameter"
                }
              },
              "_buffers": {
                "min_std_param": {
                  "$type": "torch.Tensor"
                }
              },
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_mean_module": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 11.0,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    },
                    "_output_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 1.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    }
                  },
                  "_output_dim": 1.0,
                  "$type": "garage.torch.modules.mlp_module.MLPModule"
                }
              },
              "_input_dim": 11.0,
              "_hidden_sizes": [
                32,
                32
              ],
              "_action_dim": 1.0,
              "_learn_std": true,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_min_std": 1e-06,
              "_max_std": "None",
              "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
              "_std_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_std_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": "None",
              "_std_output_w_init": {
                "$type": "builtins.function"
              },
              "_std_parameterization": "exp",
              "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
              "_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_output_nonlinearity": "None",
              "_output_w_init": {
                "$type": "builtins.function"
              },
              "_output_b_init": {
                "$type": "builtins.function"
              },
              "_layer_normalization": false,
              "_norm_dist_class": {
                "$typename": "torch.distributions.normal.Normal"
              },
              "_min_std_param": {
                "$type": "torch.Tensor"
              },
              "_max_std_param": "None",
              "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
            }
          },
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
        },
        {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_module": {
              "training": true,
              "_parameters": {
                "_init_std": {
                  "$type": "torch.nn.parameter.Parameter"
                }
              },
              "_buffers": {
                "min_std_param": {
                  "$type": "torch.Tensor"
                }
              },
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_mean_module": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 11.0,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    },
                    "_output_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 1.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    }
                  },
                  "_output_dim": 1.0,
                  "$type": "garage.torch.modules.mlp_module.MLPModule"
                }
              },
              "_input_dim": 11.0,
              "_hidden_sizes": [
                32,
                32
              ],
              "_action_dim": 1.0,
              "_learn_std": true,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_min_std": 1e-06,
              "_max_std": "None",
              "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
              "_std_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_std_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": "None",
              "_std_output_w_init": {
                "$type": "builtins.function"
              },
              "_std_parameterization": "exp",
              "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
              "_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_output_nonlinearity": "None",
              "_output_w_init": {
                "$type": "builtins.function"
              },
              "_output_b_init": {
                "$type": "builtins.function"
              },
              "_layer_normalization": false,
              "_norm_dist_class": {
                "$typename": "torch.distributions.normal.Normal"
              },
              "_min_std_param": {
                "$type": "torch.Tensor"
              },
              "_max_std_param": "None",
              "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
            }
          },
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
        },
        {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_module": {
              "training": true,
              "_parameters": {
                "_init_std": {
                  "$type": "torch.nn.parameter.Parameter"
                }
              },
              "_buffers": {
                "min_std_param": {
                  "$type": "torch.Tensor"
                }
              },
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_mean_module": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 11.0,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    },
                    "_output_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 1.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    }
                  },
                  "_output_dim": 1.0,
                  "$type": "garage.torch.modules.mlp_module.MLPModule"
                }
              },
              "_input_dim": 11.0,
              "_hidden_sizes": [
                32,
                32
              ],
              "_action_dim": 1.0,
              "_learn_std": true,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_min_std": 1e-06,
              "_max_std": "None",
              "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
              "_std_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_std_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": "None",
              "_std_output_w_init": {
                "$type": "builtins.function"
              },
              "_std_parameterization": "exp",
              "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
              "_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_output_nonlinearity": "None",
              "_output_w_init": {
                "$type": "builtins.function"
              },
              "_output_b_init": {
                "$type": "builtins.function"
              },
              "_layer_normalization": false,
              "_norm_dist_class": {
                "$typename": "torch.distributions.normal.Normal"
              },
              "_min_std_param": {
                "$type": "torch.Tensor"
              },
              "_max_std_param": "None",
              "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
            }
          },
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
        },
        {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_module": {
              "training": true,
              "_parameters": {
                "_init_std": {
                  "$type": "torch.nn.parameter.Parameter"
                }
              },
              "_buffers": {
                "min_std_param": {
                  "$type": "torch.Tensor"
                }
              },
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_mean_module": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 11.0,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    },
                    "_output_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 1.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    }
                  },
                  "_output_dim": 1.0,
                  "$type": "garage.torch.modules.mlp_module.MLPModule"
                }
              },
              "_input_dim": 11.0,
              "_hidden_sizes": [
                32,
                32
              ],
              "_action_dim": 1.0,
              "_learn_std": true,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_min_std": 1e-06,
              "_max_std": "None",
              "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
              "_std_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_std_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": "None",
              "_std_output_w_init": {
                "$type": "builtins.function"
              },
              "_std_parameterization": "exp",
              "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
              "_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_output_nonlinearity": "None",
              "_output_w_init": {
                "$type": "builtins.function"
              },
              "_output_b_init": {
                "$type": "builtins.function"
              },
              "_layer_normalization": false,
              "_norm_dist_class": {
                "$typename": "torch.distributions.normal.Normal"
              },
              "_min_std_param": {
                "$type": "torch.Tensor"
              },
              "_max_std_param": "None",
              "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
            }
          },
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
        },
        {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_module": {
              "training": true,
              "_parameters": {
                "_init_std": {
                  "$type": "torch.nn.parameter.Parameter"
                }
              },
              "_buffers": {
                "min_std_param": {
                  "$type": "torch.Tensor"
                }
              },
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_mean_module": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 11.0,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    },
                    "_output_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 1.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    }
                  },
                  "_output_dim": 1.0,
                  "$type": "garage.torch.modules.mlp_module.MLPModule"
                }
              },
              "_input_dim": 11.0,
              "_hidden_sizes": [
                32,
                32
              ],
              "_action_dim": 1.0,
              "_learn_std": true,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_min_std": 1e-06,
              "_max_std": "None",
              "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
              "_std_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_std_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": "None",
              "_std_output_w_init": {
                "$type": "builtins.function"
              },
              "_std_parameterization": "exp",
              "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
              "_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_output_nonlinearity": "None",
              "_output_w_init": {
                "$type": "builtins.function"
              },
              "_output_b_init": {
                "$type": "builtins.function"
              },
              "_layer_normalization": false,
              "_norm_dist_class": {
                "$typename": "torch.distributions.normal.Normal"
              },
              "_min_std_param": {
                "$type": "torch.Tensor"
              },
              "_max_std_param": "None",
              "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
            }
          },
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
        },
        {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_module": {
              "training": true,
              "_parameters": {
                "_init_std": {
                  "$type": "torch.nn.parameter.Parameter"
                }
              },
              "_buffers": {
                "min_std_param": {
                  "$type": "torch.Tensor"
                }
              },
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_mean_module": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 11.0,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    },
                    "_output_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 1.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    }
                  },
                  "_output_dim": 1.0,
                  "$type": "garage.torch.modules.mlp_module.MLPModule"
                }
              },
              "_input_dim": 11.0,
              "_hidden_sizes": [
                32,
                32
              ],
              "_action_dim": 1.0,
              "_learn_std": true,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_min_std": 1e-06,
              "_max_std": "None",
              "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
              "_std_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_std_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": "None",
              "_std_output_w_init": {
                "$type": "builtins.function"
              },
              "_std_parameterization": "exp",
              "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
              "_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_output_nonlinearity": "None",
              "_output_w_init": {
                "$type": "builtins.function"
              },
              "_output_b_init": {
                "$type": "builtins.function"
              },
              "_layer_normalization": false,
              "_norm_dist_class": {
                "$typename": "torch.distributions.normal.Normal"
              },
              "_min_std_param": {
                "$type": "torch.Tensor"
              },
              "_max_std_param": "None",
              "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
            }
          },
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
        },
        {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_module": {
              "training": true,
              "_parameters": {
                "_init_std": {
                  "$type": "torch.nn.parameter.Parameter"
                }
              },
              "_buffers": {
                "min_std_param": {
                  "$type": "torch.Tensor"
                }
              },
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_mean_module": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 11.0,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    },
                    "_output_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 1.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    }
                  },
                  "_output_dim": 1.0,
                  "$type": "garage.torch.modules.mlp_module.MLPModule"
                }
              },
              "_input_dim": 11.0,
              "_hidden_sizes": [
                32,
                32
              ],
              "_action_dim": 1.0,
              "_learn_std": true,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_min_std": 1e-06,
              "_max_std": "None",
              "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
              "_std_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_std_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": "None",
              "_std_output_w_init": {
                "$type": "builtins.function"
              },
              "_std_parameterization": "exp",
              "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
              "_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_output_nonlinearity": "None",
              "_output_w_init": {
                "$type": "builtins.function"
              },
              "_output_b_init": {
                "$type": "builtins.function"
              },
              "_layer_normalization": false,
              "_norm_dist_class": {
                "$typename": "torch.distributions.normal.Normal"
              },
              "_min_std_param": {
                "$type": "torch.Tensor"
              },
              "_max_std_param": "None",
              "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
            }
          },
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
        },
        {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_module": {
              "training": true,
              "_parameters": {
                "_init_std": {
                  "$type": "torch.nn.parameter.Parameter"
                }
              },
              "_buffers": {
                "min_std_param": {
                  "$type": "torch.Tensor"
                }
              },
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_mean_module": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 11.0,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    },
                    "_output_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 1.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    }
                  },
                  "_output_dim": 1.0,
                  "$type": "garage.torch.modules.mlp_module.MLPModule"
                }
              },
              "_input_dim": 11.0,
              "_hidden_sizes": [
                32,
                32
              ],
              "_action_dim": 1.0,
              "_learn_std": true,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_min_std": 1e-06,
              "_max_std": "None",
              "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
              "_std_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_std_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": "None",
              "_std_output_w_init": {
                "$type": "builtins.function"
              },
              "_std_parameterization": "exp",
              "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
              "_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_output_nonlinearity": "None",
              "_output_w_init": {
                "$type": "builtins.function"
              },
              "_output_b_init": {
                "$type": "builtins.function"
              },
              "_layer_normalization": false,
              "_norm_dist_class": {
                "$typename": "torch.distributions.normal.Normal"
              },
              "_min_std_param": {
                "$type": "torch.Tensor"
              },
              "_max_std_param": "None",
              "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
            }
          },
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
        },
        {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_module": {
              "training": true,
              "_parameters": {
                "_init_std": {
                  "$type": "torch.nn.parameter.Parameter"
                }
              },
              "_buffers": {
                "min_std_param": {
                  "$type": "torch.Tensor"
                }
              },
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_mean_module": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 11.0,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    },
                    "_output_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 1.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    }
                  },
                  "_output_dim": 1.0,
                  "$type": "garage.torch.modules.mlp_module.MLPModule"
                }
              },
              "_input_dim": 11.0,
              "_hidden_sizes": [
                32,
                32
              ],
              "_action_dim": 1.0,
              "_learn_std": true,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_min_std": 1e-06,
              "_max_std": "None",
              "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
              "_std_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_std_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": "None",
              "_std_output_w_init": {
                "$type": "builtins.function"
              },
              "_std_parameterization": "exp",
              "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
              "_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_output_nonlinearity": "None",
              "_output_w_init": {
                "$type": "builtins.function"
              },
              "_output_b_init": {
                "$type": "builtins.function"
              },
              "_layer_normalization": false,
              "_norm_dist_class": {
                "$typename": "torch.distributions.normal.Normal"
              },
              "_min_std_param": {
                "$type": "torch.Tensor"
              },
              "_max_std_param": "None",
              "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
            }
          },
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
        },
        {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_module": {
              "training": true,
              "_parameters": {
                "_init_std": {
                  "$type": "torch.nn.parameter.Parameter"
                }
              },
              "_buffers": {
                "min_std_param": {
                  "$type": "torch.Tensor"
                }
              },
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_mean_module": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 11.0,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    },
                    "_output_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 1.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    }
                  },
                  "_output_dim": 1.0,
                  "$type": "garage.torch.modules.mlp_module.MLPModule"
                }
              },
              "_input_dim": 11.0,
              "_hidden_sizes": [
                32,
                32
              ],
              "_action_dim": 1.0,
              "_learn_std": true,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_min_std": 1e-06,
              "_max_std": "None",
              "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
              "_std_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_std_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": "None",
              "_std_output_w_init": {
                "$type": "builtins.function"
              },
              "_std_parameterization": "exp",
              "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
              "_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_output_nonlinearity": "None",
              "_output_w_init": {
                "$type": "builtins.function"
              },
              "_output_b_init": {
                "$type": "builtins.function"
              },
              "_layer_normalization": false,
              "_norm_dist_class": {
                "$typename": "torch.distributions.normal.Normal"
              },
              "_min_std_param": {
                "$type": "torch.Tensor"
              },
              "_max_std_param": "None",
              "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
            }
          },
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
        },
        {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_module": {
              "training": true,
              "_parameters": {
                "_init_std": {
                  "$type": "torch.nn.parameter.Parameter"
                }
              },
              "_buffers": {
                "min_std_param": {
                  "$type": "torch.Tensor"
                }
              },
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_mean_module": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 11.0,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    },
                    "_output_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 1.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    }
                  },
                  "_output_dim": 1.0,
                  "$type": "garage.torch.modules.mlp_module.MLPModule"
                }
              },
              "_input_dim": 11.0,
              "_hidden_sizes": [
                32,
                32
              ],
              "_action_dim": 1.0,
              "_learn_std": true,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_min_std": 1e-06,
              "_max_std": "None",
              "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
              "_std_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_std_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": "None",
              "_std_output_w_init": {
                "$type": "builtins.function"
              },
              "_std_parameterization": "exp",
              "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
              "_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_output_nonlinearity": "None",
              "_output_w_init": {
                "$type": "builtins.function"
              },
              "_output_b_init": {
                "$type": "builtins.function"
              },
              "_layer_normalization": false,
              "_norm_dist_class": {
                "$typename": "torch.distributions.normal.Normal"
              },
              "_min_std_param": {
                "$type": "torch.Tensor"
              },
              "_max_std_param": "None",
              "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
            }
          },
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
        },
        {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_module": {
              "training": true,
              "_parameters": {
                "_init_std": {
                  "$type": "torch.nn.parameter.Parameter"
                }
              },
              "_buffers": {
                "min_std_param": {
                  "$type": "torch.Tensor"
                }
              },
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_mean_module": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 11.0,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    },
                    "_output_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 1.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    }
                  },
                  "_output_dim": 1.0,
                  "$type": "garage.torch.modules.mlp_module.MLPModule"
                }
              },
              "_input_dim": 11.0,
              "_hidden_sizes": [
                32,
                32
              ],
              "_action_dim": 1.0,
              "_learn_std": true,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_min_std": 1e-06,
              "_max_std": "None",
              "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
              "_std_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_std_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": "None",
              "_std_output_w_init": {
                "$type": "builtins.function"
              },
              "_std_parameterization": "exp",
              "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
              "_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_output_nonlinearity": "None",
              "_output_w_init": {
                "$type": "builtins.function"
              },
              "_output_b_init": {
                "$type": "builtins.function"
              },
              "_layer_normalization": false,
              "_norm_dist_class": {
                "$typename": "torch.distributions.normal.Normal"
              },
              "_min_std_param": {
                "$type": "torch.Tensor"
              },
              "_max_std_param": "None",
              "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
            }
          },
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
        },
        {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_module": {
              "training": true,
              "_parameters": {
                "_init_std": {
                  "$type": "torch.nn.parameter.Parameter"
                }
              },
              "_buffers": {
                "min_std_param": {
                  "$type": "torch.Tensor"
                }
              },
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_mean_module": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 11.0,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    },
                    "_output_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 1.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    }
                  },
                  "_output_dim": 1.0,
                  "$type": "garage.torch.modules.mlp_module.MLPModule"
                }
              },
              "_input_dim": 11.0,
              "_hidden_sizes": [
                32,
                32
              ],
              "_action_dim": 1.0,
              "_learn_std": true,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_min_std": 1e-06,
              "_max_std": "None",
              "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
              "_std_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_std_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": "None",
              "_std_output_w_init": {
                "$type": "builtins.function"
              },
              "_std_parameterization": "exp",
              "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
              "_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_output_nonlinearity": "None",
              "_output_w_init": {
                "$type": "builtins.function"
              },
              "_output_b_init": {
                "$type": "builtins.function"
              },
              "_layer_normalization": false,
              "_norm_dist_class": {
                "$typename": "torch.distributions.normal.Normal"
              },
              "_min_std_param": {
                "$type": "torch.Tensor"
              },
              "_max_std_param": "None",
              "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
            }
          },
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
        },
        {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_module": {
              "training": true,
              "_parameters": {
                "_init_std": {
                  "$type": "torch.nn.parameter.Parameter"
                }
              },
              "_buffers": {
                "min_std_param": {
                  "$type": "torch.Tensor"
                }
              },
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_mean_module": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 11.0,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    },
                    "_output_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 1.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    }
                  },
                  "_output_dim": 1.0,
                  "$type": "garage.torch.modules.mlp_module.MLPModule"
                }
              },
              "_input_dim": 11.0,
              "_hidden_sizes": [
                32,
                32
              ],
              "_action_dim": 1.0,
              "_learn_std": true,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_min_std": 1e-06,
              "_max_std": "None",
              "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
              "_std_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_std_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": "None",
              "_std_output_w_init": {
                "$type": "builtins.function"
              },
              "_std_parameterization": "exp",
              "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
              "_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_output_nonlinearity": "None",
              "_output_w_init": {
                "$type": "builtins.function"
              },
              "_output_b_init": {
                "$type": "builtins.function"
              },
              "_layer_normalization": false,
              "_norm_dist_class": {
                "$typename": "torch.distributions.normal.Normal"
              },
              "_min_std_param": {
                "$type": "torch.Tensor"
              },
              "_max_std_param": "None",
              "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
            }
          },
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
        },
        {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_module": {
              "training": true,
              "_parameters": {
                "_init_std": {
                  "$type": "torch.nn.parameter.Parameter"
                }
              },
              "_buffers": {
                "min_std_param": {
                  "$type": "torch.Tensor"
                }
              },
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_mean_module": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 11.0,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    },
                    "_output_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 1.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    }
                  },
                  "_output_dim": 1.0,
                  "$type": "garage.torch.modules.mlp_module.MLPModule"
                }
              },
              "_input_dim": 11.0,
              "_hidden_sizes": [
                32,
                32
              ],
              "_action_dim": 1.0,
              "_learn_std": true,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_min_std": 1e-06,
              "_max_std": "None",
              "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
              "_std_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_std_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": "None",
              "_std_output_w_init": {
                "$type": "builtins.function"
              },
              "_std_parameterization": "exp",
              "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
              "_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_output_nonlinearity": "None",
              "_output_w_init": {
                "$type": "builtins.function"
              },
              "_output_b_init": {
                "$type": "builtins.function"
              },
              "_layer_normalization": false,
              "_norm_dist_class": {
                "$typename": "torch.distributions.normal.Normal"
              },
              "_min_std_param": {
                "$type": "torch.Tensor"
              },
              "_max_std_param": "None",
              "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
            }
          },
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
        },
        {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_module": {
              "training": true,
              "_parameters": {
                "_init_std": {
                  "$type": "torch.nn.parameter.Parameter"
                }
              },
              "_buffers": {
                "min_std_param": {
                  "$type": "torch.Tensor"
                }
              },
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_mean_module": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 11.0,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    },
                    "_output_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 1.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    }
                  },
                  "_output_dim": 1.0,
                  "$type": "garage.torch.modules.mlp_module.MLPModule"
                }
              },
              "_input_dim": 11.0,
              "_hidden_sizes": [
                32,
                32
              ],
              "_action_dim": 1.0,
              "_learn_std": true,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_min_std": 1e-06,
              "_max_std": "None",
              "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
              "_std_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_std_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": "None",
              "_std_output_w_init": {
                "$type": "builtins.function"
              },
              "_std_parameterization": "exp",
              "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
              "_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_output_nonlinearity": "None",
              "_output_w_init": {
                "$type": "builtins.function"
              },
              "_output_b_init": {
                "$type": "builtins.function"
              },
              "_layer_normalization": false,
              "_norm_dist_class": {
                "$typename": "torch.distributions.normal.Normal"
              },
              "_min_std_param": {
                "$type": "torch.Tensor"
              },
              "_max_std_param": "None",
              "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
            }
          },
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
        },
        {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_module": {
              "training": true,
              "_parameters": {
                "_init_std": {
                  "$type": "torch.nn.parameter.Parameter"
                }
              },
              "_buffers": {
                "min_std_param": {
                  "$type": "torch.Tensor"
                }
              },
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_mean_module": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 11.0,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    },
                    "_output_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 1.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    }
                  },
                  "_output_dim": 1.0,
                  "$type": "garage.torch.modules.mlp_module.MLPModule"
                }
              },
              "_input_dim": 11.0,
              "_hidden_sizes": [
                32,
                32
              ],
              "_action_dim": 1.0,
              "_learn_std": true,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_min_std": 1e-06,
              "_max_std": "None",
              "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
              "_std_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_std_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": "None",
              "_std_output_w_init": {
                "$type": "builtins.function"
              },
              "_std_parameterization": "exp",
              "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
              "_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_output_nonlinearity": "None",
              "_output_w_init": {
                "$type": "builtins.function"
              },
              "_output_b_init": {
                "$type": "builtins.function"
              },
              "_layer_normalization": false,
              "_norm_dist_class": {
                "$typename": "torch.distributions.normal.Normal"
              },
              "_min_std_param": {
                "$type": "torch.Tensor"
              },
              "_max_std_param": "None",
              "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
            }
          },
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
        },
        {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_module": {
              "training": true,
              "_parameters": {
                "_init_std": {
                  "$type": "torch.nn.parameter.Parameter"
                }
              },
              "_buffers": {
                "min_std_param": {
                  "$type": "torch.Tensor"
                }
              },
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_mean_module": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 11.0,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    },
                    "_output_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 1.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    }
                  },
                  "_output_dim": 1.0,
                  "$type": "garage.torch.modules.mlp_module.MLPModule"
                }
              },
              "_input_dim": 11.0,
              "_hidden_sizes": [
                32,
                32
              ],
              "_action_dim": 1.0,
              "_learn_std": true,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_min_std": 1e-06,
              "_max_std": "None",
              "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
              "_std_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_std_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": "None",
              "_std_output_w_init": {
                "$type": "builtins.function"
              },
              "_std_parameterization": "exp",
              "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
              "_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_output_nonlinearity": "None",
              "_output_w_init": {
                "$type": "builtins.function"
              },
              "_output_b_init": {
                "$type": "builtins.function"
              },
              "_layer_normalization": false,
              "_norm_dist_class": {
                "$typename": "torch.distributions.normal.Normal"
              },
              "_min_std_param": {
                "$type": "torch.Tensor"
              },
              "_max_std_param": "None",
              "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
            }
          },
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
        },
        {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_module": {
              "training": true,
              "_parameters": {
                "_init_std": {
                  "$type": "torch.nn.parameter.Parameter"
                }
              },
              "_buffers": {
                "min_std_param": {
                  "$type": "torch.Tensor"
                }
              },
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_mean_module": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 11.0,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    },
                    "_output_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 1.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    }
                  },
                  "_output_dim": 1.0,
                  "$type": "garage.torch.modules.mlp_module.MLPModule"
                }
              },
              "_input_dim": 11.0,
              "_hidden_sizes": [
                32,
                32
              ],
              "_action_dim": 1.0,
              "_learn_std": true,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_min_std": 1e-06,
              "_max_std": "None",
              "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
              "_std_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_std_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": "None",
              "_std_output_w_init": {
                "$type": "builtins.function"
              },
              "_std_parameterization": "exp",
              "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
              "_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_output_nonlinearity": "None",
              "_output_w_init": {
                "$type": "builtins.function"
              },
              "_output_b_init": {
                "$type": "builtins.function"
              },
              "_layer_normalization": false,
              "_norm_dist_class": {
                "$typename": "torch.distributions.normal.Normal"
              },
              "_min_std_param": {
                "$type": "torch.Tensor"
              },
              "_max_std_param": "None",
              "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
            }
          },
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
        },
        {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_module": {
              "training": true,
              "_parameters": {
                "_init_std": {
                  "$type": "torch.nn.parameter.Parameter"
                }
              },
              "_buffers": {
                "min_std_param": {
                  "$type": "torch.Tensor"
                }
              },
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_mean_module": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 11.0,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    },
                    "_output_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 1.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    }
                  },
                  "_output_dim": 1.0,
                  "$type": "garage.torch.modules.mlp_module.MLPModule"
                }
              },
              "_input_dim": 11.0,
              "_hidden_sizes": [
                32,
                32
              ],
              "_action_dim": 1.0,
              "_learn_std": true,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_min_std": 1e-06,
              "_max_std": "None",
              "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
              "_std_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_std_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": "None",
              "_std_output_w_init": {
                "$type": "builtins.function"
              },
              "_std_parameterization": "exp",
              "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
              "_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_output_nonlinearity": "None",
              "_output_w_init": {
                "$type": "builtins.function"
              },
              "_output_b_init": {
                "$type": "builtins.function"
              },
              "_layer_normalization": false,
              "_norm_dist_class": {
                "$typename": "torch.distributions.normal.Normal"
              },
              "_min_std_param": {
                "$type": "torch.Tensor"
              },
              "_max_std_param": "None",
              "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
            }
          },
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
        },
        {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_module": {
              "training": true,
              "_parameters": {
                "_init_std": {
                  "$type": "torch.nn.parameter.Parameter"
                }
              },
              "_buffers": {
                "min_std_param": {
                  "$type": "torch.Tensor"
                }
              },
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_mean_module": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 11.0,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    },
                    "_output_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 1.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    }
                  },
                  "_output_dim": 1.0,
                  "$type": "garage.torch.modules.mlp_module.MLPModule"
                }
              },
              "_input_dim": 11.0,
              "_hidden_sizes": [
                32,
                32
              ],
              "_action_dim": 1.0,
              "_learn_std": true,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_min_std": 1e-06,
              "_max_std": "None",
              "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
              "_std_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_std_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": "None",
              "_std_output_w_init": {
                "$type": "builtins.function"
              },
              "_std_parameterization": "exp",
              "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
              "_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_output_nonlinearity": "None",
              "_output_w_init": {
                "$type": "builtins.function"
              },
              "_output_b_init": {
                "$type": "builtins.function"
              },
              "_layer_normalization": false,
              "_norm_dist_class": {
                "$typename": "torch.distributions.normal.Normal"
              },
              "_min_std_param": {
                "$type": "torch.Tensor"
              },
              "_max_std_param": "None",
              "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
            }
          },
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
        },
        {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_module": {
              "training": true,
              "_parameters": {
                "_init_std": {
                  "$type": "torch.nn.parameter.Parameter"
                }
              },
              "_buffers": {
                "min_std_param": {
                  "$type": "torch.Tensor"
                }
              },
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_mean_module": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 11.0,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    },
                    "_output_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 1.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    }
                  },
                  "_output_dim": 1.0,
                  "$type": "garage.torch.modules.mlp_module.MLPModule"
                }
              },
              "_input_dim": 11.0,
              "_hidden_sizes": [
                32,
                32
              ],
              "_action_dim": 1.0,
              "_learn_std": true,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_min_std": 1e-06,
              "_max_std": "None",
              "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
              "_std_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_std_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": "None",
              "_std_output_w_init": {
                "$type": "builtins.function"
              },
              "_std_parameterization": "exp",
              "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
              "_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_output_nonlinearity": "None",
              "_output_w_init": {
                "$type": "builtins.function"
              },
              "_output_b_init": {
                "$type": "builtins.function"
              },
              "_layer_normalization": false,
              "_norm_dist_class": {
                "$typename": "torch.distributions.normal.Normal"
              },
              "_min_std_param": {
                "$type": "torch.Tensor"
              },
              "_max_std_param": "None",
              "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
            }
          },
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
        },
        {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_module": {
              "training": true,
              "_parameters": {
                "_init_std": {
                  "$type": "torch.nn.parameter.Parameter"
                }
              },
              "_buffers": {
                "min_std_param": {
                  "$type": "torch.Tensor"
                }
              },
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_mean_module": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 11.0,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    },
                    "_output_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 1.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    }
                  },
                  "_output_dim": 1.0,
                  "$type": "garage.torch.modules.mlp_module.MLPModule"
                }
              },
              "_input_dim": 11.0,
              "_hidden_sizes": [
                32,
                32
              ],
              "_action_dim": 1.0,
              "_learn_std": true,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_min_std": 1e-06,
              "_max_std": "None",
              "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
              "_std_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_std_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": "None",
              "_std_output_w_init": {
                "$type": "builtins.function"
              },
              "_std_parameterization": "exp",
              "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
              "_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_output_nonlinearity": "None",
              "_output_w_init": {
                "$type": "builtins.function"
              },
              "_output_b_init": {
                "$type": "builtins.function"
              },
              "_layer_normalization": false,
              "_norm_dist_class": {
                "$typename": "torch.distributions.normal.Normal"
              },
              "_min_std_param": {
                "$type": "torch.Tensor"
              },
              "_max_std_param": "None",
              "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
            }
          },
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
        },
        {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_module": {
              "training": true,
              "_parameters": {
                "_init_std": {
                  "$type": "torch.nn.parameter.Parameter"
                }
              },
              "_buffers": {
                "min_std_param": {
                  "$type": "torch.Tensor"
                }
              },
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_mean_module": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 11.0,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    },
                    "_output_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 1.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    }
                  },
                  "_output_dim": 1.0,
                  "$type": "garage.torch.modules.mlp_module.MLPModule"
                }
              },
              "_input_dim": 11.0,
              "_hidden_sizes": [
                32,
                32
              ],
              "_action_dim": 1.0,
              "_learn_std": true,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_min_std": 1e-06,
              "_max_std": "None",
              "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
              "_std_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_std_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": "None",
              "_std_output_w_init": {
                "$type": "builtins.function"
              },
              "_std_parameterization": "exp",
              "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
              "_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_output_nonlinearity": "None",
              "_output_w_init": {
                "$type": "builtins.function"
              },
              "_output_b_init": {
                "$type": "builtins.function"
              },
              "_layer_normalization": false,
              "_norm_dist_class": {
                "$typename": "torch.distributions.normal.Normal"
              },
              "_min_std_param": {
                "$type": "torch.Tensor"
              },
              "_max_std_param": "None",
              "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
            }
          },
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
        }
      ],
      "_envs": [
        {
          "_env": {
            "env": {
              "env": {
                "env": {
                  "env": {
                    "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                    "model": "<mujoco._structs.MjModel object at 0x7f1bfd2c3070>",
                    "data": "<mujoco._structs.MjData object at 0x7f1bfcef6070>",
                    "init_qpos": "array([0., 0., 0.])",
                    "init_qvel": "array([0., 0., 0.])",
                    "_viewers": {},
                    "frame_skip": 5,
                    "viewer": "None",
                    "observation_space": {
                      "dtype": "dtype('float64')",
                      "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "_shape": [
                        11
                      ],
                      "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                      "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                      "low_repr": "-inf",
                      "high_repr": "inf",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "action_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True])",
                      "bounded_above": "array([ True])",
                      "_shape": [
                        1
                      ],
                      "low": "array([-1.], dtype=float32)",
                      "high": "array([1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "render_mode": "None",
                    "renderer": {
                      "no_returns_render": [
                        "human"
                      ],
                      "single_render": [
                        "single_depth_array",
                        "single_rgb_array",
                        "single_state_pixels"
                      ],
                      "mode": "None",
                      "render": {
                        "$type": "functools.partial"
                      },
                      "render_list": [],
                      "$type": "gym.utils.renderer.Renderer"
                    },
                    "_ezpickle_args": [],
                    "_ezpickle_kwargs": {},
                    "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "checked_reset": false,
                  "checked_step": false,
                  "checked_render": false,
                  "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": true,
              "_has_reset": false,
              "_disable_render_order_enforcing": false,
              "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": false,
            "_max_episode_steps": 1000,
            "_elapsed_steps": "None",
            "$type": "gym.wrappers.time_limit.TimeLimit"
          },
          "_max_episode_length": 1000,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array",
            "single_rgb_array",
            "single_depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        {
          "_env": {
            "env": {
              "env": {
                "env": {
                  "env": {
                    "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                    "model": "<mujoco._structs.MjModel object at 0x7f1bfd8b05b0>",
                    "data": "<mujoco._structs.MjData object at 0x7f1bfd8b0970>",
                    "init_qpos": "array([0., 0., 0.])",
                    "init_qvel": "array([0., 0., 0.])",
                    "_viewers": {},
                    "frame_skip": 5,
                    "viewer": "None",
                    "observation_space": {
                      "dtype": "dtype('float64')",
                      "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "_shape": [
                        11
                      ],
                      "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                      "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                      "low_repr": "-inf",
                      "high_repr": "inf",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "action_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True])",
                      "bounded_above": "array([ True])",
                      "_shape": [
                        1
                      ],
                      "low": "array([-1.], dtype=float32)",
                      "high": "array([1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "render_mode": "None",
                    "renderer": {
                      "no_returns_render": [
                        "human"
                      ],
                      "single_render": [
                        "single_depth_array",
                        "single_rgb_array",
                        "single_state_pixels"
                      ],
                      "mode": "None",
                      "render": {
                        "$type": "functools.partial"
                      },
                      "render_list": [],
                      "$type": "gym.utils.renderer.Renderer"
                    },
                    "_ezpickle_args": [],
                    "_ezpickle_kwargs": {},
                    "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "checked_reset": false,
                  "checked_step": false,
                  "checked_render": false,
                  "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": true,
              "_has_reset": false,
              "_disable_render_order_enforcing": false,
              "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": false,
            "_max_episode_steps": 1000,
            "_elapsed_steps": "None",
            "$type": "gym.wrappers.time_limit.TimeLimit"
          },
          "_max_episode_length": 1000,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array",
            "single_rgb_array",
            "single_depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        {
          "_env": {
            "env": {
              "env": {
                "env": {
                  "env": {
                    "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                    "model": "<mujoco._structs.MjModel object at 0x7f1bfca013b0>",
                    "data": "<mujoco._structs.MjData object at 0x7f1bfca013f0>",
                    "init_qpos": "array([0., 0., 0.])",
                    "init_qvel": "array([0., 0., 0.])",
                    "_viewers": {},
                    "frame_skip": 5,
                    "viewer": "None",
                    "observation_space": {
                      "dtype": "dtype('float64')",
                      "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "_shape": [
                        11
                      ],
                      "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                      "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                      "low_repr": "-inf",
                      "high_repr": "inf",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "action_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True])",
                      "bounded_above": "array([ True])",
                      "_shape": [
                        1
                      ],
                      "low": "array([-1.], dtype=float32)",
                      "high": "array([1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "render_mode": "None",
                    "renderer": {
                      "no_returns_render": [
                        "human"
                      ],
                      "single_render": [
                        "single_depth_array",
                        "single_rgb_array",
                        "single_state_pixels"
                      ],
                      "mode": "None",
                      "render": {
                        "$type": "functools.partial"
                      },
                      "render_list": [],
                      "$type": "gym.utils.renderer.Renderer"
                    },
                    "_ezpickle_args": [],
                    "_ezpickle_kwargs": {},
                    "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "checked_reset": false,
                  "checked_step": false,
                  "checked_render": false,
                  "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": true,
              "_has_reset": false,
              "_disable_render_order_enforcing": false,
              "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": false,
            "_max_episode_steps": 1000,
            "_elapsed_steps": "None",
            "$type": "gym.wrappers.time_limit.TimeLimit"
          },
          "_max_episode_length": 1000,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array",
            "single_rgb_array",
            "single_depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        {
          "_env": {
            "env": {
              "env": {
                "env": {
                  "env": {
                    "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                    "model": "<mujoco._structs.MjModel object at 0x7f1bfca01df0>",
                    "data": "<mujoco._structs.MjData object at 0x7f1bfca01e30>",
                    "init_qpos": "array([0., 0., 0.])",
                    "init_qvel": "array([0., 0., 0.])",
                    "_viewers": {},
                    "frame_skip": 5,
                    "viewer": "None",
                    "observation_space": {
                      "dtype": "dtype('float64')",
                      "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "_shape": [
                        11
                      ],
                      "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                      "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                      "low_repr": "-inf",
                      "high_repr": "inf",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "action_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True])",
                      "bounded_above": "array([ True])",
                      "_shape": [
                        1
                      ],
                      "low": "array([-1.], dtype=float32)",
                      "high": "array([1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "render_mode": "None",
                    "renderer": {
                      "no_returns_render": [
                        "human"
                      ],
                      "single_render": [
                        "single_depth_array",
                        "single_rgb_array",
                        "single_state_pixels"
                      ],
                      "mode": "None",
                      "render": {
                        "$type": "functools.partial"
                      },
                      "render_list": [],
                      "$type": "gym.utils.renderer.Renderer"
                    },
                    "_ezpickle_args": [],
                    "_ezpickle_kwargs": {},
                    "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "checked_reset": false,
                  "checked_step": false,
                  "checked_render": false,
                  "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": true,
              "_has_reset": false,
              "_disable_render_order_enforcing": false,
              "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": false,
            "_max_episode_steps": 1000,
            "_elapsed_steps": "None",
            "$type": "gym.wrappers.time_limit.TimeLimit"
          },
          "_max_episode_length": 1000,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array",
            "single_rgb_array",
            "single_depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        {
          "_env": {
            "env": {
              "env": {
                "env": {
                  "env": {
                    "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                    "model": "<mujoco._structs.MjModel object at 0x7f1bfc95f870>",
                    "data": "<mujoco._structs.MjData object at 0x7f1bfc95f8b0>",
                    "init_qpos": "array([0., 0., 0.])",
                    "init_qvel": "array([0., 0., 0.])",
                    "_viewers": {},
                    "frame_skip": 5,
                    "viewer": "None",
                    "observation_space": {
                      "dtype": "dtype('float64')",
                      "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "_shape": [
                        11
                      ],
                      "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                      "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                      "low_repr": "-inf",
                      "high_repr": "inf",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "action_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True])",
                      "bounded_above": "array([ True])",
                      "_shape": [
                        1
                      ],
                      "low": "array([-1.], dtype=float32)",
                      "high": "array([1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "render_mode": "None",
                    "renderer": {
                      "no_returns_render": [
                        "human"
                      ],
                      "single_render": [
                        "single_depth_array",
                        "single_rgb_array",
                        "single_state_pixels"
                      ],
                      "mode": "None",
                      "render": {
                        "$type": "functools.partial"
                      },
                      "render_list": [],
                      "$type": "gym.utils.renderer.Renderer"
                    },
                    "_ezpickle_args": [],
                    "_ezpickle_kwargs": {},
                    "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "checked_reset": false,
                  "checked_step": false,
                  "checked_render": false,
                  "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": true,
              "_has_reset": false,
              "_disable_render_order_enforcing": false,
              "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": false,
            "_max_episode_steps": 1000,
            "_elapsed_steps": "None",
            "$type": "gym.wrappers.time_limit.TimeLimit"
          },
          "_max_episode_length": 1000,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array",
            "single_rgb_array",
            "single_depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        {
          "_env": {
            "env": {
              "env": {
                "env": {
                  "env": {
                    "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                    "model": "<mujoco._structs.MjModel object at 0x7f1bfc91b330>",
                    "data": "<mujoco._structs.MjData object at 0x7f1bfc91b370>",
                    "init_qpos": "array([0., 0., 0.])",
                    "init_qvel": "array([0., 0., 0.])",
                    "_viewers": {},
                    "frame_skip": 5,
                    "viewer": "None",
                    "observation_space": {
                      "dtype": "dtype('float64')",
                      "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "_shape": [
                        11
                      ],
                      "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                      "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                      "low_repr": "-inf",
                      "high_repr": "inf",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "action_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True])",
                      "bounded_above": "array([ True])",
                      "_shape": [
                        1
                      ],
                      "low": "array([-1.], dtype=float32)",
                      "high": "array([1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "render_mode": "None",
                    "renderer": {
                      "no_returns_render": [
                        "human"
                      ],
                      "single_render": [
                        "single_depth_array",
                        "single_rgb_array",
                        "single_state_pixels"
                      ],
                      "mode": "None",
                      "render": {
                        "$type": "functools.partial"
                      },
                      "render_list": [],
                      "$type": "gym.utils.renderer.Renderer"
                    },
                    "_ezpickle_args": [],
                    "_ezpickle_kwargs": {},
                    "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "checked_reset": false,
                  "checked_step": false,
                  "checked_render": false,
                  "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": true,
              "_has_reset": false,
              "_disable_render_order_enforcing": false,
              "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": false,
            "_max_episode_steps": 1000,
            "_elapsed_steps": "None",
            "$type": "gym.wrappers.time_limit.TimeLimit"
          },
          "_max_episode_length": 1000,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array",
            "single_rgb_array",
            "single_depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        {
          "_env": {
            "env": {
              "env": {
                "env": {
                  "env": {
                    "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                    "model": "<mujoco._structs.MjModel object at 0x7f1bfc91bdb0>",
                    "data": "<mujoco._structs.MjData object at 0x7f1bfc91bdf0>",
                    "init_qpos": "array([0., 0., 0.])",
                    "init_qvel": "array([0., 0., 0.])",
                    "_viewers": {},
                    "frame_skip": 5,
                    "viewer": "None",
                    "observation_space": {
                      "dtype": "dtype('float64')",
                      "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "_shape": [
                        11
                      ],
                      "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                      "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                      "low_repr": "-inf",
                      "high_repr": "inf",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "action_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True])",
                      "bounded_above": "array([ True])",
                      "_shape": [
                        1
                      ],
                      "low": "array([-1.], dtype=float32)",
                      "high": "array([1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "render_mode": "None",
                    "renderer": {
                      "no_returns_render": [
                        "human"
                      ],
                      "single_render": [
                        "single_depth_array",
                        "single_rgb_array",
                        "single_state_pixels"
                      ],
                      "mode": "None",
                      "render": {
                        "$type": "functools.partial"
                      },
                      "render_list": [],
                      "$type": "gym.utils.renderer.Renderer"
                    },
                    "_ezpickle_args": [],
                    "_ezpickle_kwargs": {},
                    "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "checked_reset": false,
                  "checked_step": false,
                  "checked_render": false,
                  "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": true,
              "_has_reset": false,
              "_disable_render_order_enforcing": false,
              "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": false,
            "_max_episode_steps": 1000,
            "_elapsed_steps": "None",
            "$type": "gym.wrappers.time_limit.TimeLimit"
          },
          "_max_episode_length": 1000,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array",
            "single_rgb_array",
            "single_depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        {
          "_env": {
            "env": {
              "env": {
                "env": {
                  "env": {
                    "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                    "model": "<mujoco._structs.MjModel object at 0x7f1bfc879830>",
                    "data": "<mujoco._structs.MjData object at 0x7f1bfc879870>",
                    "init_qpos": "array([0., 0., 0.])",
                    "init_qvel": "array([0., 0., 0.])",
                    "_viewers": {},
                    "frame_skip": 5,
                    "viewer": "None",
                    "observation_space": {
                      "dtype": "dtype('float64')",
                      "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "_shape": [
                        11
                      ],
                      "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                      "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                      "low_repr": "-inf",
                      "high_repr": "inf",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "action_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True])",
                      "bounded_above": "array([ True])",
                      "_shape": [
                        1
                      ],
                      "low": "array([-1.], dtype=float32)",
                      "high": "array([1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "render_mode": "None",
                    "renderer": {
                      "no_returns_render": [
                        "human"
                      ],
                      "single_render": [
                        "single_depth_array",
                        "single_rgb_array",
                        "single_state_pixels"
                      ],
                      "mode": "None",
                      "render": {
                        "$type": "functools.partial"
                      },
                      "render_list": [],
                      "$type": "gym.utils.renderer.Renderer"
                    },
                    "_ezpickle_args": [],
                    "_ezpickle_kwargs": {},
                    "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "checked_reset": false,
                  "checked_step": false,
                  "checked_render": false,
                  "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": true,
              "_has_reset": false,
              "_disable_render_order_enforcing": false,
              "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": false,
            "_max_episode_steps": 1000,
            "_elapsed_steps": "None",
            "$type": "gym.wrappers.time_limit.TimeLimit"
          },
          "_max_episode_length": 1000,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array",
            "single_rgb_array",
            "single_depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        {
          "_env": {
            "env": {
              "env": {
                "env": {
                  "env": {
                    "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                    "model": "<mujoco._structs.MjModel object at 0x7f1bfc82e2f0>",
                    "data": "<mujoco._structs.MjData object at 0x7f1bfc82e330>",
                    "init_qpos": "array([0., 0., 0.])",
                    "init_qvel": "array([0., 0., 0.])",
                    "_viewers": {},
                    "frame_skip": 5,
                    "viewer": "None",
                    "observation_space": {
                      "dtype": "dtype('float64')",
                      "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "_shape": [
                        11
                      ],
                      "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                      "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                      "low_repr": "-inf",
                      "high_repr": "inf",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "action_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True])",
                      "bounded_above": "array([ True])",
                      "_shape": [
                        1
                      ],
                      "low": "array([-1.], dtype=float32)",
                      "high": "array([1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "render_mode": "None",
                    "renderer": {
                      "no_returns_render": [
                        "human"
                      ],
                      "single_render": [
                        "single_depth_array",
                        "single_rgb_array",
                        "single_state_pixels"
                      ],
                      "mode": "None",
                      "render": {
                        "$type": "functools.partial"
                      },
                      "render_list": [],
                      "$type": "gym.utils.renderer.Renderer"
                    },
                    "_ezpickle_args": [],
                    "_ezpickle_kwargs": {},
                    "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "checked_reset": false,
                  "checked_step": false,
                  "checked_render": false,
                  "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": true,
              "_has_reset": false,
              "_disable_render_order_enforcing": false,
              "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": false,
            "_max_episode_steps": 1000,
            "_elapsed_steps": "None",
            "$type": "gym.wrappers.time_limit.TimeLimit"
          },
          "_max_episode_length": 1000,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array",
            "single_rgb_array",
            "single_depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        {
          "_env": {
            "env": {
              "env": {
                "env": {
                  "env": {
                    "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                    "model": "<mujoco._structs.MjModel object at 0x7f1bfc82ed70>",
                    "data": "<mujoco._structs.MjData object at 0x7f1bfc82edb0>",
                    "init_qpos": "array([0., 0., 0.])",
                    "init_qvel": "array([0., 0., 0.])",
                    "_viewers": {},
                    "frame_skip": 5,
                    "viewer": "None",
                    "observation_space": {
                      "dtype": "dtype('float64')",
                      "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "_shape": [
                        11
                      ],
                      "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                      "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                      "low_repr": "-inf",
                      "high_repr": "inf",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "action_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True])",
                      "bounded_above": "array([ True])",
                      "_shape": [
                        1
                      ],
                      "low": "array([-1.], dtype=float32)",
                      "high": "array([1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "render_mode": "None",
                    "renderer": {
                      "no_returns_render": [
                        "human"
                      ],
                      "single_render": [
                        "single_depth_array",
                        "single_rgb_array",
                        "single_state_pixels"
                      ],
                      "mode": "None",
                      "render": {
                        "$type": "functools.partial"
                      },
                      "render_list": [],
                      "$type": "gym.utils.renderer.Renderer"
                    },
                    "_ezpickle_args": [],
                    "_ezpickle_kwargs": {},
                    "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "checked_reset": false,
                  "checked_step": false,
                  "checked_render": false,
                  "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": true,
              "_has_reset": false,
              "_disable_render_order_enforcing": false,
              "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": false,
            "_max_episode_steps": 1000,
            "_elapsed_steps": "None",
            "$type": "gym.wrappers.time_limit.TimeLimit"
          },
          "_max_episode_length": 1000,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array",
            "single_rgb_array",
            "single_depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        {
          "_env": {
            "env": {
              "env": {
                "env": {
                  "env": {
                    "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                    "model": "<mujoco._structs.MjModel object at 0x7f1bfc814870>",
                    "data": "<mujoco._structs.MjData object at 0x7f1bfc8148b0>",
                    "init_qpos": "array([0., 0., 0.])",
                    "init_qvel": "array([0., 0., 0.])",
                    "_viewers": {},
                    "frame_skip": 5,
                    "viewer": "None",
                    "observation_space": {
                      "dtype": "dtype('float64')",
                      "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "_shape": [
                        11
                      ],
                      "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                      "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                      "low_repr": "-inf",
                      "high_repr": "inf",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "action_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True])",
                      "bounded_above": "array([ True])",
                      "_shape": [
                        1
                      ],
                      "low": "array([-1.], dtype=float32)",
                      "high": "array([1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "render_mode": "None",
                    "renderer": {
                      "no_returns_render": [
                        "human"
                      ],
                      "single_render": [
                        "single_depth_array",
                        "single_rgb_array",
                        "single_state_pixels"
                      ],
                      "mode": "None",
                      "render": {
                        "$type": "functools.partial"
                      },
                      "render_list": [],
                      "$type": "gym.utils.renderer.Renderer"
                    },
                    "_ezpickle_args": [],
                    "_ezpickle_kwargs": {},
                    "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "checked_reset": false,
                  "checked_step": false,
                  "checked_render": false,
                  "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": true,
              "_has_reset": false,
              "_disable_render_order_enforcing": false,
              "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": false,
            "_max_episode_steps": 1000,
            "_elapsed_steps": "None",
            "$type": "gym.wrappers.time_limit.TimeLimit"
          },
          "_max_episode_length": 1000,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array",
            "single_rgb_array",
            "single_depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        {
          "_env": {
            "env": {
              "env": {
                "env": {
                  "env": {
                    "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                    "model": "<mujoco._structs.MjModel object at 0x7f1bfc814530>",
                    "data": "<mujoco._structs.MjData object at 0x7f1bfc8145b0>",
                    "init_qpos": "array([0., 0., 0.])",
                    "init_qvel": "array([0., 0., 0.])",
                    "_viewers": {},
                    "frame_skip": 5,
                    "viewer": "None",
                    "observation_space": {
                      "dtype": "dtype('float64')",
                      "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "_shape": [
                        11
                      ],
                      "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                      "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                      "low_repr": "-inf",
                      "high_repr": "inf",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "action_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True])",
                      "bounded_above": "array([ True])",
                      "_shape": [
                        1
                      ],
                      "low": "array([-1.], dtype=float32)",
                      "high": "array([1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "render_mode": "None",
                    "renderer": {
                      "no_returns_render": [
                        "human"
                      ],
                      "single_render": [
                        "single_depth_array",
                        "single_rgb_array",
                        "single_state_pixels"
                      ],
                      "mode": "None",
                      "render": {
                        "$type": "functools.partial"
                      },
                      "render_list": [],
                      "$type": "gym.utils.renderer.Renderer"
                    },
                    "_ezpickle_args": [],
                    "_ezpickle_kwargs": {},
                    "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "checked_reset": false,
                  "checked_step": false,
                  "checked_render": false,
                  "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": true,
              "_has_reset": false,
              "_disable_render_order_enforcing": false,
              "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": false,
            "_max_episode_steps": 1000,
            "_elapsed_steps": "None",
            "$type": "gym.wrappers.time_limit.TimeLimit"
          },
          "_max_episode_length": 1000,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array",
            "single_rgb_array",
            "single_depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        {
          "_env": {
            "env": {
              "env": {
                "env": {
                  "env": {
                    "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                    "model": "<mujoco._structs.MjModel object at 0x7f1bfc91ba30>",
                    "data": "<mujoco._structs.MjData object at 0x7f1bfc91bab0>",
                    "init_qpos": "array([0., 0., 0.])",
                    "init_qvel": "array([0., 0., 0.])",
                    "_viewers": {},
                    "frame_skip": 5,
                    "viewer": "None",
                    "observation_space": {
                      "dtype": "dtype('float64')",
                      "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "_shape": [
                        11
                      ],
                      "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                      "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                      "low_repr": "-inf",
                      "high_repr": "inf",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "action_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True])",
                      "bounded_above": "array([ True])",
                      "_shape": [
                        1
                      ],
                      "low": "array([-1.], dtype=float32)",
                      "high": "array([1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "render_mode": "None",
                    "renderer": {
                      "no_returns_render": [
                        "human"
                      ],
                      "single_render": [
                        "single_depth_array",
                        "single_rgb_array",
                        "single_state_pixels"
                      ],
                      "mode": "None",
                      "render": {
                        "$type": "functools.partial"
                      },
                      "render_list": [],
                      "$type": "gym.utils.renderer.Renderer"
                    },
                    "_ezpickle_args": [],
                    "_ezpickle_kwargs": {},
                    "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "checked_reset": false,
                  "checked_step": false,
                  "checked_render": false,
                  "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": true,
              "_has_reset": false,
              "_disable_render_order_enforcing": false,
              "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": false,
            "_max_episode_steps": 1000,
            "_elapsed_steps": "None",
            "$type": "gym.wrappers.time_limit.TimeLimit"
          },
          "_max_episode_length": 1000,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array",
            "single_rgb_array",
            "single_depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        {
          "_env": {
            "env": {
              "env": {
                "env": {
                  "env": {
                    "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                    "model": "<mujoco._structs.MjModel object at 0x7f1bfca011b0>",
                    "data": "<mujoco._structs.MjData object at 0x7f1bfd313b70>",
                    "init_qpos": "array([0., 0., 0.])",
                    "init_qvel": "array([0., 0., 0.])",
                    "_viewers": {},
                    "frame_skip": 5,
                    "viewer": "None",
                    "observation_space": {
                      "dtype": "dtype('float64')",
                      "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "_shape": [
                        11
                      ],
                      "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                      "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                      "low_repr": "-inf",
                      "high_repr": "inf",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "action_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True])",
                      "bounded_above": "array([ True])",
                      "_shape": [
                        1
                      ],
                      "low": "array([-1.], dtype=float32)",
                      "high": "array([1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "render_mode": "None",
                    "renderer": {
                      "no_returns_render": [
                        "human"
                      ],
                      "single_render": [
                        "single_depth_array",
                        "single_rgb_array",
                        "single_state_pixels"
                      ],
                      "mode": "None",
                      "render": {
                        "$type": "functools.partial"
                      },
                      "render_list": [],
                      "$type": "gym.utils.renderer.Renderer"
                    },
                    "_ezpickle_args": [],
                    "_ezpickle_kwargs": {},
                    "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "checked_reset": false,
                  "checked_step": false,
                  "checked_render": false,
                  "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": true,
              "_has_reset": false,
              "_disable_render_order_enforcing": false,
              "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": false,
            "_max_episode_steps": 1000,
            "_elapsed_steps": "None",
            "$type": "gym.wrappers.time_limit.TimeLimit"
          },
          "_max_episode_length": 1000,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array",
            "single_rgb_array",
            "single_depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        {
          "_env": {
            "env": {
              "env": {
                "env": {
                  "env": {
                    "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                    "model": "<mujoco._structs.MjModel object at 0x7f1bfc7c8470>",
                    "data": "<mujoco._structs.MjData object at 0x7f1bfc7c84b0>",
                    "init_qpos": "array([0., 0., 0.])",
                    "init_qvel": "array([0., 0., 0.])",
                    "_viewers": {},
                    "frame_skip": 5,
                    "viewer": "None",
                    "observation_space": {
                      "dtype": "dtype('float64')",
                      "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "_shape": [
                        11
                      ],
                      "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                      "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                      "low_repr": "-inf",
                      "high_repr": "inf",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "action_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True])",
                      "bounded_above": "array([ True])",
                      "_shape": [
                        1
                      ],
                      "low": "array([-1.], dtype=float32)",
                      "high": "array([1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "render_mode": "None",
                    "renderer": {
                      "no_returns_render": [
                        "human"
                      ],
                      "single_render": [
                        "single_depth_array",
                        "single_rgb_array",
                        "single_state_pixels"
                      ],
                      "mode": "None",
                      "render": {
                        "$type": "functools.partial"
                      },
                      "render_list": [],
                      "$type": "gym.utils.renderer.Renderer"
                    },
                    "_ezpickle_args": [],
                    "_ezpickle_kwargs": {},
                    "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "checked_reset": false,
                  "checked_step": false,
                  "checked_render": false,
                  "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": true,
              "_has_reset": false,
              "_disable_render_order_enforcing": false,
              "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": false,
            "_max_episode_steps": 1000,
            "_elapsed_steps": "None",
            "$type": "gym.wrappers.time_limit.TimeLimit"
          },
          "_max_episode_length": 1000,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array",
            "single_rgb_array",
            "single_depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        {
          "_env": {
            "env": {
              "env": {
                "env": {
                  "env": {
                    "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                    "model": "<mujoco._structs.MjModel object at 0x7f1bfc7c8c30>",
                    "data": "<mujoco._structs.MjData object at 0x7f1bfc7c8c70>",
                    "init_qpos": "array([0., 0., 0.])",
                    "init_qvel": "array([0., 0., 0.])",
                    "_viewers": {},
                    "frame_skip": 5,
                    "viewer": "None",
                    "observation_space": {
                      "dtype": "dtype('float64')",
                      "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "_shape": [
                        11
                      ],
                      "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                      "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                      "low_repr": "-inf",
                      "high_repr": "inf",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "action_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True])",
                      "bounded_above": "array([ True])",
                      "_shape": [
                        1
                      ],
                      "low": "array([-1.], dtype=float32)",
                      "high": "array([1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "render_mode": "None",
                    "renderer": {
                      "no_returns_render": [
                        "human"
                      ],
                      "single_render": [
                        "single_depth_array",
                        "single_rgb_array",
                        "single_state_pixels"
                      ],
                      "mode": "None",
                      "render": {
                        "$type": "functools.partial"
                      },
                      "render_list": [],
                      "$type": "gym.utils.renderer.Renderer"
                    },
                    "_ezpickle_args": [],
                    "_ezpickle_kwargs": {},
                    "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "checked_reset": false,
                  "checked_step": false,
                  "checked_render": false,
                  "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": true,
              "_has_reset": false,
              "_disable_render_order_enforcing": false,
              "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": false,
            "_max_episode_steps": 1000,
            "_elapsed_steps": "None",
            "$type": "gym.wrappers.time_limit.TimeLimit"
          },
          "_max_episode_length": 1000,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array",
            "single_rgb_array",
            "single_depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        {
          "_env": {
            "env": {
              "env": {
                "env": {
                  "env": {
                    "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                    "model": "<mujoco._structs.MjModel object at 0x7f1bfc9156b0>",
                    "data": "<mujoco._structs.MjData object at 0x7f1bfc9156f0>",
                    "init_qpos": "array([0., 0., 0.])",
                    "init_qvel": "array([0., 0., 0.])",
                    "_viewers": {},
                    "frame_skip": 5,
                    "viewer": "None",
                    "observation_space": {
                      "dtype": "dtype('float64')",
                      "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "_shape": [
                        11
                      ],
                      "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                      "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                      "low_repr": "-inf",
                      "high_repr": "inf",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "action_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True])",
                      "bounded_above": "array([ True])",
                      "_shape": [
                        1
                      ],
                      "low": "array([-1.], dtype=float32)",
                      "high": "array([1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "render_mode": "None",
                    "renderer": {
                      "no_returns_render": [
                        "human"
                      ],
                      "single_render": [
                        "single_depth_array",
                        "single_rgb_array",
                        "single_state_pixels"
                      ],
                      "mode": "None",
                      "render": {
                        "$type": "functools.partial"
                      },
                      "render_list": [],
                      "$type": "gym.utils.renderer.Renderer"
                    },
                    "_ezpickle_args": [],
                    "_ezpickle_kwargs": {},
                    "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "checked_reset": false,
                  "checked_step": false,
                  "checked_render": false,
                  "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": true,
              "_has_reset": false,
              "_disable_render_order_enforcing": false,
              "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": false,
            "_max_episode_steps": 1000,
            "_elapsed_steps": "None",
            "$type": "gym.wrappers.time_limit.TimeLimit"
          },
          "_max_episode_length": 1000,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array",
            "single_rgb_array",
            "single_depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        {
          "_env": {
            "env": {
              "env": {
                "env": {
                  "env": {
                    "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                    "model": "<mujoco._structs.MjModel object at 0x7f1bfc79a1b0>",
                    "data": "<mujoco._structs.MjData object at 0x7f1bfc79a1f0>",
                    "init_qpos": "array([0., 0., 0.])",
                    "init_qvel": "array([0., 0., 0.])",
                    "_viewers": {},
                    "frame_skip": 5,
                    "viewer": "None",
                    "observation_space": {
                      "dtype": "dtype('float64')",
                      "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "_shape": [
                        11
                      ],
                      "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                      "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                      "low_repr": "-inf",
                      "high_repr": "inf",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "action_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True])",
                      "bounded_above": "array([ True])",
                      "_shape": [
                        1
                      ],
                      "low": "array([-1.], dtype=float32)",
                      "high": "array([1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "render_mode": "None",
                    "renderer": {
                      "no_returns_render": [
                        "human"
                      ],
                      "single_render": [
                        "single_depth_array",
                        "single_rgb_array",
                        "single_state_pixels"
                      ],
                      "mode": "None",
                      "render": {
                        "$type": "functools.partial"
                      },
                      "render_list": [],
                      "$type": "gym.utils.renderer.Renderer"
                    },
                    "_ezpickle_args": [],
                    "_ezpickle_kwargs": {},
                    "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "checked_reset": false,
                  "checked_step": false,
                  "checked_render": false,
                  "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": true,
              "_has_reset": false,
              "_disable_render_order_enforcing": false,
              "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": false,
            "_max_episode_steps": 1000,
            "_elapsed_steps": "None",
            "$type": "gym.wrappers.time_limit.TimeLimit"
          },
          "_max_episode_length": 1000,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array",
            "single_rgb_array",
            "single_depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        {
          "_env": {
            "env": {
              "env": {
                "env": {
                  "env": {
                    "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                    "model": "<mujoco._structs.MjModel object at 0x7f1bfc79ac70>",
                    "data": "<mujoco._structs.MjData object at 0x7f1bfc79acb0>",
                    "init_qpos": "array([0., 0., 0.])",
                    "init_qvel": "array([0., 0., 0.])",
                    "_viewers": {},
                    "frame_skip": 5,
                    "viewer": "None",
                    "observation_space": {
                      "dtype": "dtype('float64')",
                      "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "_shape": [
                        11
                      ],
                      "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                      "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                      "low_repr": "-inf",
                      "high_repr": "inf",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "action_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True])",
                      "bounded_above": "array([ True])",
                      "_shape": [
                        1
                      ],
                      "low": "array([-1.], dtype=float32)",
                      "high": "array([1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "render_mode": "None",
                    "renderer": {
                      "no_returns_render": [
                        "human"
                      ],
                      "single_render": [
                        "single_depth_array",
                        "single_rgb_array",
                        "single_state_pixels"
                      ],
                      "mode": "None",
                      "render": {
                        "$type": "functools.partial"
                      },
                      "render_list": [],
                      "$type": "gym.utils.renderer.Renderer"
                    },
                    "_ezpickle_args": [],
                    "_ezpickle_kwargs": {},
                    "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "checked_reset": false,
                  "checked_step": false,
                  "checked_render": false,
                  "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": true,
              "_has_reset": false,
              "_disable_render_order_enforcing": false,
              "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": false,
            "_max_episode_steps": 1000,
            "_elapsed_steps": "None",
            "$type": "gym.wrappers.time_limit.TimeLimit"
          },
          "_max_episode_length": 1000,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array",
            "single_rgb_array",
            "single_depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        {
          "_env": {
            "env": {
              "env": {
                "env": {
                  "env": {
                    "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                    "model": "<mujoco._structs.MjModel object at 0x7f1bfc769770>",
                    "data": "<mujoco._structs.MjData object at 0x7f1bfc7697b0>",
                    "init_qpos": "array([0., 0., 0.])",
                    "init_qvel": "array([0., 0., 0.])",
                    "_viewers": {},
                    "frame_skip": 5,
                    "viewer": "None",
                    "observation_space": {
                      "dtype": "dtype('float64')",
                      "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "_shape": [
                        11
                      ],
                      "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                      "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                      "low_repr": "-inf",
                      "high_repr": "inf",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "action_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True])",
                      "bounded_above": "array([ True])",
                      "_shape": [
                        1
                      ],
                      "low": "array([-1.], dtype=float32)",
                      "high": "array([1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "render_mode": "None",
                    "renderer": {
                      "no_returns_render": [
                        "human"
                      ],
                      "single_render": [
                        "single_depth_array",
                        "single_rgb_array",
                        "single_state_pixels"
                      ],
                      "mode": "None",
                      "render": {
                        "$type": "functools.partial"
                      },
                      "render_list": [],
                      "$type": "gym.utils.renderer.Renderer"
                    },
                    "_ezpickle_args": [],
                    "_ezpickle_kwargs": {},
                    "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "checked_reset": false,
                  "checked_step": false,
                  "checked_render": false,
                  "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": true,
              "_has_reset": false,
              "_disable_render_order_enforcing": false,
              "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": false,
            "_max_episode_steps": 1000,
            "_elapsed_steps": "None",
            "$type": "gym.wrappers.time_limit.TimeLimit"
          },
          "_max_episode_length": 1000,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array",
            "single_rgb_array",
            "single_depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        {
          "_env": {
            "env": {
              "env": {
                "env": {
                  "env": {
                    "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                    "model": "<mujoco._structs.MjModel object at 0x7f1bfc6b4270>",
                    "data": "<mujoco._structs.MjData object at 0x7f1bfc6b42b0>",
                    "init_qpos": "array([0., 0., 0.])",
                    "init_qvel": "array([0., 0., 0.])",
                    "_viewers": {},
                    "frame_skip": 5,
                    "viewer": "None",
                    "observation_space": {
                      "dtype": "dtype('float64')",
                      "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "_shape": [
                        11
                      ],
                      "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                      "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                      "low_repr": "-inf",
                      "high_repr": "inf",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "action_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True])",
                      "bounded_above": "array([ True])",
                      "_shape": [
                        1
                      ],
                      "low": "array([-1.], dtype=float32)",
                      "high": "array([1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "render_mode": "None",
                    "renderer": {
                      "no_returns_render": [
                        "human"
                      ],
                      "single_render": [
                        "single_depth_array",
                        "single_rgb_array",
                        "single_state_pixels"
                      ],
                      "mode": "None",
                      "render": {
                        "$type": "functools.partial"
                      },
                      "render_list": [],
                      "$type": "gym.utils.renderer.Renderer"
                    },
                    "_ezpickle_args": [],
                    "_ezpickle_kwargs": {},
                    "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "checked_reset": false,
                  "checked_step": false,
                  "checked_render": false,
                  "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": true,
              "_has_reset": false,
              "_disable_render_order_enforcing": false,
              "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": false,
            "_max_episode_steps": 1000,
            "_elapsed_steps": "None",
            "$type": "gym.wrappers.time_limit.TimeLimit"
          },
          "_max_episode_length": 1000,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array",
            "single_rgb_array",
            "single_depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        {
          "_env": {
            "env": {
              "env": {
                "env": {
                  "env": {
                    "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                    "model": "<mujoco._structs.MjModel object at 0x7f1bfc6b4d30>",
                    "data": "<mujoco._structs.MjData object at 0x7f1bfc6b4d70>",
                    "init_qpos": "array([0., 0., 0.])",
                    "init_qvel": "array([0., 0., 0.])",
                    "_viewers": {},
                    "frame_skip": 5,
                    "viewer": "None",
                    "observation_space": {
                      "dtype": "dtype('float64')",
                      "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "_shape": [
                        11
                      ],
                      "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                      "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                      "low_repr": "-inf",
                      "high_repr": "inf",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "action_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True])",
                      "bounded_above": "array([ True])",
                      "_shape": [
                        1
                      ],
                      "low": "array([-1.], dtype=float32)",
                      "high": "array([1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "render_mode": "None",
                    "renderer": {
                      "no_returns_render": [
                        "human"
                      ],
                      "single_render": [
                        "single_depth_array",
                        "single_rgb_array",
                        "single_state_pixels"
                      ],
                      "mode": "None",
                      "render": {
                        "$type": "functools.partial"
                      },
                      "render_list": [],
                      "$type": "gym.utils.renderer.Renderer"
                    },
                    "_ezpickle_args": [],
                    "_ezpickle_kwargs": {},
                    "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "checked_reset": false,
                  "checked_step": false,
                  "checked_render": false,
                  "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": true,
              "_has_reset": false,
              "_disable_render_order_enforcing": false,
              "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": false,
            "_max_episode_steps": 1000,
            "_elapsed_steps": "None",
            "$type": "gym.wrappers.time_limit.TimeLimit"
          },
          "_max_episode_length": 1000,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array",
            "single_rgb_array",
            "single_depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        {
          "_env": {
            "env": {
              "env": {
                "env": {
                  "env": {
                    "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                    "model": "<mujoco._structs.MjModel object at 0x7f1bfc683830>",
                    "data": "<mujoco._structs.MjData object at 0x7f1bfc683870>",
                    "init_qpos": "array([0., 0., 0.])",
                    "init_qvel": "array([0., 0., 0.])",
                    "_viewers": {},
                    "frame_skip": 5,
                    "viewer": "None",
                    "observation_space": {
                      "dtype": "dtype('float64')",
                      "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "_shape": [
                        11
                      ],
                      "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                      "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                      "low_repr": "-inf",
                      "high_repr": "inf",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "action_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True])",
                      "bounded_above": "array([ True])",
                      "_shape": [
                        1
                      ],
                      "low": "array([-1.], dtype=float32)",
                      "high": "array([1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "render_mode": "None",
                    "renderer": {
                      "no_returns_render": [
                        "human"
                      ],
                      "single_render": [
                        "single_depth_array",
                        "single_rgb_array",
                        "single_state_pixels"
                      ],
                      "mode": "None",
                      "render": {
                        "$type": "functools.partial"
                      },
                      "render_list": [],
                      "$type": "gym.utils.renderer.Renderer"
                    },
                    "_ezpickle_args": [],
                    "_ezpickle_kwargs": {},
                    "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "checked_reset": false,
                  "checked_step": false,
                  "checked_render": false,
                  "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": true,
              "_has_reset": false,
              "_disable_render_order_enforcing": false,
              "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": false,
            "_max_episode_steps": 1000,
            "_elapsed_steps": "None",
            "$type": "gym.wrappers.time_limit.TimeLimit"
          },
          "_max_episode_length": 1000,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array",
            "single_rgb_array",
            "single_depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        {
          "_env": {
            "env": {
              "env": {
                "env": {
                  "env": {
                    "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                    "model": "<mujoco._structs.MjModel object at 0x7f1bfc683070>",
                    "data": "<mujoco._structs.MjData object at 0x7f1bfc683630>",
                    "init_qpos": "array([0., 0., 0.])",
                    "init_qvel": "array([0., 0., 0.])",
                    "_viewers": {},
                    "frame_skip": 5,
                    "viewer": "None",
                    "observation_space": {
                      "dtype": "dtype('float64')",
                      "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "_shape": [
                        11
                      ],
                      "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                      "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                      "low_repr": "-inf",
                      "high_repr": "inf",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "action_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True])",
                      "bounded_above": "array([ True])",
                      "_shape": [
                        1
                      ],
                      "low": "array([-1.], dtype=float32)",
                      "high": "array([1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "render_mode": "None",
                    "renderer": {
                      "no_returns_render": [
                        "human"
                      ],
                      "single_render": [
                        "single_depth_array",
                        "single_rgb_array",
                        "single_state_pixels"
                      ],
                      "mode": "None",
                      "render": {
                        "$type": "functools.partial"
                      },
                      "render_list": [],
                      "$type": "gym.utils.renderer.Renderer"
                    },
                    "_ezpickle_args": [],
                    "_ezpickle_kwargs": {},
                    "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "checked_reset": false,
                  "checked_step": false,
                  "checked_render": false,
                  "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": true,
              "_has_reset": false,
              "_disable_render_order_enforcing": false,
              "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": false,
            "_max_episode_steps": 1000,
            "_elapsed_steps": "None",
            "$type": "gym.wrappers.time_limit.TimeLimit"
          },
          "_max_episode_length": 1000,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array",
            "single_rgb_array",
            "single_depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        {
          "_env": {
            "env": {
              "env": {
                "env": {
                  "env": {
                    "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                    "model": "<mujoco._structs.MjModel object at 0x7f1bfc79a730>",
                    "data": "<mujoco._structs.MjData object at 0x7f1bfc79af30>",
                    "init_qpos": "array([0., 0., 0.])",
                    "init_qvel": "array([0., 0., 0.])",
                    "_viewers": {},
                    "frame_skip": 5,
                    "viewer": "None",
                    "observation_space": {
                      "dtype": "dtype('float64')",
                      "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "_shape": [
                        11
                      ],
                      "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                      "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                      "low_repr": "-inf",
                      "high_repr": "inf",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "action_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True])",
                      "bounded_above": "array([ True])",
                      "_shape": [
                        1
                      ],
                      "low": "array([-1.], dtype=float32)",
                      "high": "array([1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "render_mode": "None",
                    "renderer": {
                      "no_returns_render": [
                        "human"
                      ],
                      "single_render": [
                        "single_depth_array",
                        "single_rgb_array",
                        "single_state_pixels"
                      ],
                      "mode": "None",
                      "render": {
                        "$type": "functools.partial"
                      },
                      "render_list": [],
                      "$type": "gym.utils.renderer.Renderer"
                    },
                    "_ezpickle_args": [],
                    "_ezpickle_kwargs": {},
                    "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "checked_reset": false,
                  "checked_step": false,
                  "checked_render": false,
                  "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": true,
              "_has_reset": false,
              "_disable_render_order_enforcing": false,
              "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": false,
            "_max_episode_steps": 1000,
            "_elapsed_steps": "None",
            "$type": "gym.wrappers.time_limit.TimeLimit"
          },
          "_max_episode_length": 1000,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array",
            "single_rgb_array",
            "single_depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        {
          "_env": {
            "env": {
              "env": {
                "env": {
                  "env": {
                    "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                    "model": "<mujoco._structs.MjModel object at 0x7f1bfc7c8a70>",
                    "data": "<mujoco._structs.MjData object at 0x7f1bfc7c8a30>",
                    "init_qpos": "array([0., 0., 0.])",
                    "init_qvel": "array([0., 0., 0.])",
                    "_viewers": {},
                    "frame_skip": 5,
                    "viewer": "None",
                    "observation_space": {
                      "dtype": "dtype('float64')",
                      "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "_shape": [
                        11
                      ],
                      "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                      "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                      "low_repr": "-inf",
                      "high_repr": "inf",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "action_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True])",
                      "bounded_above": "array([ True])",
                      "_shape": [
                        1
                      ],
                      "low": "array([-1.], dtype=float32)",
                      "high": "array([1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "render_mode": "None",
                    "renderer": {
                      "no_returns_render": [
                        "human"
                      ],
                      "single_render": [
                        "single_depth_array",
                        "single_rgb_array",
                        "single_state_pixels"
                      ],
                      "mode": "None",
                      "render": {
                        "$type": "functools.partial"
                      },
                      "render_list": [],
                      "$type": "gym.utils.renderer.Renderer"
                    },
                    "_ezpickle_args": [],
                    "_ezpickle_kwargs": {},
                    "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "checked_reset": false,
                  "checked_step": false,
                  "checked_render": false,
                  "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": true,
              "_has_reset": false,
              "_disable_render_order_enforcing": false,
              "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": false,
            "_max_episode_steps": 1000,
            "_elapsed_steps": "None",
            "$type": "gym.wrappers.time_limit.TimeLimit"
          },
          "_max_episode_length": 1000,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array",
            "single_rgb_array",
            "single_depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        {
          "_env": {
            "env": {
              "env": {
                "env": {
                  "env": {
                    "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                    "model": "<mujoco._structs.MjModel object at 0x7f1bfc879630>",
                    "data": "<mujoco._structs.MjData object at 0x7f1bfc879af0>",
                    "init_qpos": "array([0., 0., 0.])",
                    "init_qvel": "array([0., 0., 0.])",
                    "_viewers": {},
                    "frame_skip": 5,
                    "viewer": "None",
                    "observation_space": {
                      "dtype": "dtype('float64')",
                      "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "_shape": [
                        11
                      ],
                      "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                      "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                      "low_repr": "-inf",
                      "high_repr": "inf",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "action_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True])",
                      "bounded_above": "array([ True])",
                      "_shape": [
                        1
                      ],
                      "low": "array([-1.], dtype=float32)",
                      "high": "array([1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "render_mode": "None",
                    "renderer": {
                      "no_returns_render": [
                        "human"
                      ],
                      "single_render": [
                        "single_depth_array",
                        "single_rgb_array",
                        "single_state_pixels"
                      ],
                      "mode": "None",
                      "render": {
                        "$type": "functools.partial"
                      },
                      "render_list": [],
                      "$type": "gym.utils.renderer.Renderer"
                    },
                    "_ezpickle_args": [],
                    "_ezpickle_kwargs": {},
                    "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "checked_reset": false,
                  "checked_step": false,
                  "checked_render": false,
                  "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": true,
              "_has_reset": false,
              "_disable_render_order_enforcing": false,
              "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": false,
            "_max_episode_steps": 1000,
            "_elapsed_steps": "None",
            "$type": "gym.wrappers.time_limit.TimeLimit"
          },
          "_max_episode_length": 1000,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array",
            "single_rgb_array",
            "single_depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        {
          "_env": {
            "env": {
              "env": {
                "env": {
                  "env": {
                    "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                    "model": "<mujoco._structs.MjModel object at 0x7f1bfc637870>",
                    "data": "<mujoco._structs.MjData object at 0x7f1bfc6378b0>",
                    "init_qpos": "array([0., 0., 0.])",
                    "init_qvel": "array([0., 0., 0.])",
                    "_viewers": {},
                    "frame_skip": 5,
                    "viewer": "None",
                    "observation_space": {
                      "dtype": "dtype('float64')",
                      "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "_shape": [
                        11
                      ],
                      "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                      "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                      "low_repr": "-inf",
                      "high_repr": "inf",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "action_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True])",
                      "bounded_above": "array([ True])",
                      "_shape": [
                        1
                      ],
                      "low": "array([-1.], dtype=float32)",
                      "high": "array([1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "render_mode": "None",
                    "renderer": {
                      "no_returns_render": [
                        "human"
                      ],
                      "single_render": [
                        "single_depth_array",
                        "single_rgb_array",
                        "single_state_pixels"
                      ],
                      "mode": "None",
                      "render": {
                        "$type": "functools.partial"
                      },
                      "render_list": [],
                      "$type": "gym.utils.renderer.Renderer"
                    },
                    "_ezpickle_args": [],
                    "_ezpickle_kwargs": {},
                    "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "checked_reset": false,
                  "checked_step": false,
                  "checked_render": false,
                  "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": true,
              "_has_reset": false,
              "_disable_render_order_enforcing": false,
              "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": false,
            "_max_episode_steps": 1000,
            "_elapsed_steps": "None",
            "$type": "gym.wrappers.time_limit.TimeLimit"
          },
          "_max_episode_length": 1000,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array",
            "single_rgb_array",
            "single_depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        }
      ],
      "_workers": [
        {
          "_seed": "None",
          "_max_episode_length": 200,
          "_worker_number": 0,
          "agent": {
            "training": true,
            "_parameters": {},
            "_buffers": {},
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_module": {
                "training": true,
                "_parameters": {
                  "_init_std": {
                    "$type": "torch.nn.parameter.Parameter"
                  }
                },
                "_buffers": {
                  "min_std_param": {
                    "$type": "torch.Tensor"
                  }
                },
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_mean_module": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "_layers": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "0": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 11.0,
                                "out_features": 32,
                                "$type": "torch.nn.modules.linear.Linear"
                              },
                              "non_linearity": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                                "$type": "garage.torch._functions.NonLinearity"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          },
                          "1": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 32,
                                "out_features": 32,
                                "$type": "torch.nn.modules.linear.Linear"
                              },
                              "non_linearity": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                                "$type": "garage.torch._functions.NonLinearity"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          }
                        },
                        "$type": "torch.nn.modules.container.ModuleList"
                      },
                      "_output_layers": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "0": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 32,
                                "out_features": 1.0,
                                "$type": "torch.nn.modules.linear.Linear"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          }
                        },
                        "$type": "torch.nn.modules.container.ModuleList"
                      }
                    },
                    "_output_dim": 1.0,
                    "$type": "garage.torch.modules.mlp_module.MLPModule"
                  }
                },
                "_input_dim": 11.0,
                "_hidden_sizes": [
                  32,
                  32
                ],
                "_action_dim": 1.0,
                "_learn_std": true,
                "_std_hidden_sizes": [
                  32,
                  32
                ],
                "_min_std": 1e-06,
                "_max_std": "None",
                "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
                "_std_hidden_w_init": {
                  "$type": "builtins.function"
                },
                "_std_hidden_b_init": {
                  "$type": "builtins.function"
                },
                "_std_output_nonlinearity": "None",
                "_std_output_w_init": {
                  "$type": "builtins.function"
                },
                "_std_parameterization": "exp",
                "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
                "_hidden_w_init": {
                  "$type": "builtins.function"
                },
                "_hidden_b_init": {
                  "$type": "builtins.function"
                },
                "_output_nonlinearity": "None",
                "_output_w_init": {
                  "$type": "builtins.function"
                },
                "_output_b_init": {
                  "$type": "builtins.function"
                },
                "_layer_normalization": false,
                "_norm_dist_class": {
                  "$typename": "torch.distributions.normal.Normal"
                },
                "_min_std_param": {
                  "$type": "torch.Tensor"
                },
                "_max_std_param": "None",
                "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
              }
            },
            "_env_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_name": "GaussianMLPPolicy",
            "_obs_dim": 11.0,
            "_action_dim": 1.0,
            "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
          },
          "env": {
            "_env": {
              "env": {
                "env": {
                  "env": {
                    "env": {
                      "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                      "model": "<mujoco._structs.MjModel object at 0x7f1bfd2c3070>",
                      "data": "<mujoco._structs.MjData object at 0x7f1bfcef6070>",
                      "init_qpos": "array([0., 0., 0.])",
                      "init_qvel": "array([0., 0., 0.])",
                      "_viewers": {},
                      "frame_skip": 5,
                      "viewer": "None",
                      "observation_space": {
                        "dtype": "dtype('float64')",
                        "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "_shape": [
                          11
                        ],
                        "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                        "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                        "low_repr": "-inf",
                        "high_repr": "inf",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "action_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True])",
                        "bounded_above": "array([ True])",
                        "_shape": [
                          1
                        ],
                        "low": "array([-1.], dtype=float32)",
                        "high": "array([1.], dtype=float32)",
                        "low_repr": "-1.0",
                        "high_repr": "1.0",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "render_mode": "None",
                      "renderer": {
                        "no_returns_render": [
                          "human"
                        ],
                        "single_render": [
                          "single_depth_array",
                          "single_rgb_array",
                          "single_state_pixels"
                        ],
                        "mode": "None",
                        "render": {
                          "$type": "functools.partial"
                        },
                        "render_list": [],
                        "$type": "gym.utils.renderer.Renderer"
                      },
                      "_ezpickle_args": [],
                      "_ezpickle_kwargs": {},
                      "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                    },
                    "_action_space": "None",
                    "_observation_space": "None",
                    "_reward_range": "None",
                    "_metadata": "None",
                    "new_step_api": true,
                    "checked_reset": false,
                    "checked_step": false,
                    "checked_render": false,
                    "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": false,
                  "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "_has_reset": false,
                "_disable_render_order_enforcing": false,
                "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "_max_episode_steps": 1000,
              "_elapsed_steps": "None",
              "$type": "gym.wrappers.time_limit.TimeLimit"
            },
            "_max_episode_length": 1000,
            "_render_modes": [
              "human",
              "rgb_array",
              "depth_array",
              "single_rgb_array",
              "single_depth_array"
            ],
            "_step_cnt": "None",
            "_visualize": false,
            "_action_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_env_info": "None",
            "$type": "garage.envs.gym_env.GymEnv"
          },
          "_env_steps": [],
          "_observations": [],
          "_last_observations": [],
          "_agent_infos": {},
          "_lengths": [],
          "_prev_obs": "None",
          "_eps_length": 0,
          "_episode_infos": {},
          "$type": "garage.sampler.default_worker.DefaultWorker"
        },
        {
          "_seed": "None",
          "_max_episode_length": 200,
          "_worker_number": 1,
          "agent": {
            "training": true,
            "_parameters": {},
            "_buffers": {},
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_module": {
                "training": true,
                "_parameters": {
                  "_init_std": {
                    "$type": "torch.nn.parameter.Parameter"
                  }
                },
                "_buffers": {
                  "min_std_param": {
                    "$type": "torch.Tensor"
                  }
                },
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_mean_module": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "_layers": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "0": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 11.0,
                                "out_features": 32,
                                "$type": "torch.nn.modules.linear.Linear"
                              },
                              "non_linearity": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                                "$type": "garage.torch._functions.NonLinearity"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          },
                          "1": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 32,
                                "out_features": 32,
                                "$type": "torch.nn.modules.linear.Linear"
                              },
                              "non_linearity": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                                "$type": "garage.torch._functions.NonLinearity"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          }
                        },
                        "$type": "torch.nn.modules.container.ModuleList"
                      },
                      "_output_layers": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "0": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 32,
                                "out_features": 1.0,
                                "$type": "torch.nn.modules.linear.Linear"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          }
                        },
                        "$type": "torch.nn.modules.container.ModuleList"
                      }
                    },
                    "_output_dim": 1.0,
                    "$type": "garage.torch.modules.mlp_module.MLPModule"
                  }
                },
                "_input_dim": 11.0,
                "_hidden_sizes": [
                  32,
                  32
                ],
                "_action_dim": 1.0,
                "_learn_std": true,
                "_std_hidden_sizes": [
                  32,
                  32
                ],
                "_min_std": 1e-06,
                "_max_std": "None",
                "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
                "_std_hidden_w_init": {
                  "$type": "builtins.function"
                },
                "_std_hidden_b_init": {
                  "$type": "builtins.function"
                },
                "_std_output_nonlinearity": "None",
                "_std_output_w_init": {
                  "$type": "builtins.function"
                },
                "_std_parameterization": "exp",
                "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
                "_hidden_w_init": {
                  "$type": "builtins.function"
                },
                "_hidden_b_init": {
                  "$type": "builtins.function"
                },
                "_output_nonlinearity": "None",
                "_output_w_init": {
                  "$type": "builtins.function"
                },
                "_output_b_init": {
                  "$type": "builtins.function"
                },
                "_layer_normalization": false,
                "_norm_dist_class": {
                  "$typename": "torch.distributions.normal.Normal"
                },
                "_min_std_param": {
                  "$type": "torch.Tensor"
                },
                "_max_std_param": "None",
                "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
              }
            },
            "_env_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_name": "GaussianMLPPolicy",
            "_obs_dim": 11.0,
            "_action_dim": 1.0,
            "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
          },
          "env": {
            "_env": {
              "env": {
                "env": {
                  "env": {
                    "env": {
                      "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                      "model": "<mujoco._structs.MjModel object at 0x7f1bfd8b05b0>",
                      "data": "<mujoco._structs.MjData object at 0x7f1bfd8b0970>",
                      "init_qpos": "array([0., 0., 0.])",
                      "init_qvel": "array([0., 0., 0.])",
                      "_viewers": {},
                      "frame_skip": 5,
                      "viewer": "None",
                      "observation_space": {
                        "dtype": "dtype('float64')",
                        "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "_shape": [
                          11
                        ],
                        "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                        "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                        "low_repr": "-inf",
                        "high_repr": "inf",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "action_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True])",
                        "bounded_above": "array([ True])",
                        "_shape": [
                          1
                        ],
                        "low": "array([-1.], dtype=float32)",
                        "high": "array([1.], dtype=float32)",
                        "low_repr": "-1.0",
                        "high_repr": "1.0",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "render_mode": "None",
                      "renderer": {
                        "no_returns_render": [
                          "human"
                        ],
                        "single_render": [
                          "single_depth_array",
                          "single_rgb_array",
                          "single_state_pixels"
                        ],
                        "mode": "None",
                        "render": {
                          "$type": "functools.partial"
                        },
                        "render_list": [],
                        "$type": "gym.utils.renderer.Renderer"
                      },
                      "_ezpickle_args": [],
                      "_ezpickle_kwargs": {},
                      "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                    },
                    "_action_space": "None",
                    "_observation_space": "None",
                    "_reward_range": "None",
                    "_metadata": "None",
                    "new_step_api": true,
                    "checked_reset": false,
                    "checked_step": false,
                    "checked_render": false,
                    "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": false,
                  "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "_has_reset": false,
                "_disable_render_order_enforcing": false,
                "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "_max_episode_steps": 1000,
              "_elapsed_steps": "None",
              "$type": "gym.wrappers.time_limit.TimeLimit"
            },
            "_max_episode_length": 1000,
            "_render_modes": [
              "human",
              "rgb_array",
              "depth_array",
              "single_rgb_array",
              "single_depth_array"
            ],
            "_step_cnt": "None",
            "_visualize": false,
            "_action_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_env_info": "None",
            "$type": "garage.envs.gym_env.GymEnv"
          },
          "_env_steps": [],
          "_observations": [],
          "_last_observations": [],
          "_agent_infos": {},
          "_lengths": [],
          "_prev_obs": "None",
          "_eps_length": 0,
          "_episode_infos": {},
          "$type": "garage.sampler.default_worker.DefaultWorker"
        },
        {
          "_seed": "None",
          "_max_episode_length": 200,
          "_worker_number": 2,
          "agent": {
            "training": true,
            "_parameters": {},
            "_buffers": {},
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_module": {
                "training": true,
                "_parameters": {
                  "_init_std": {
                    "$type": "torch.nn.parameter.Parameter"
                  }
                },
                "_buffers": {
                  "min_std_param": {
                    "$type": "torch.Tensor"
                  }
                },
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_mean_module": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "_layers": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "0": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 11.0,
                                "out_features": 32,
                                "$type": "torch.nn.modules.linear.Linear"
                              },
                              "non_linearity": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                                "$type": "garage.torch._functions.NonLinearity"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          },
                          "1": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 32,
                                "out_features": 32,
                                "$type": "torch.nn.modules.linear.Linear"
                              },
                              "non_linearity": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                                "$type": "garage.torch._functions.NonLinearity"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          }
                        },
                        "$type": "torch.nn.modules.container.ModuleList"
                      },
                      "_output_layers": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "0": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 32,
                                "out_features": 1.0,
                                "$type": "torch.nn.modules.linear.Linear"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          }
                        },
                        "$type": "torch.nn.modules.container.ModuleList"
                      }
                    },
                    "_output_dim": 1.0,
                    "$type": "garage.torch.modules.mlp_module.MLPModule"
                  }
                },
                "_input_dim": 11.0,
                "_hidden_sizes": [
                  32,
                  32
                ],
                "_action_dim": 1.0,
                "_learn_std": true,
                "_std_hidden_sizes": [
                  32,
                  32
                ],
                "_min_std": 1e-06,
                "_max_std": "None",
                "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
                "_std_hidden_w_init": {
                  "$type": "builtins.function"
                },
                "_std_hidden_b_init": {
                  "$type": "builtins.function"
                },
                "_std_output_nonlinearity": "None",
                "_std_output_w_init": {
                  "$type": "builtins.function"
                },
                "_std_parameterization": "exp",
                "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
                "_hidden_w_init": {
                  "$type": "builtins.function"
                },
                "_hidden_b_init": {
                  "$type": "builtins.function"
                },
                "_output_nonlinearity": "None",
                "_output_w_init": {
                  "$type": "builtins.function"
                },
                "_output_b_init": {
                  "$type": "builtins.function"
                },
                "_layer_normalization": false,
                "_norm_dist_class": {
                  "$typename": "torch.distributions.normal.Normal"
                },
                "_min_std_param": {
                  "$type": "torch.Tensor"
                },
                "_max_std_param": "None",
                "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
              }
            },
            "_env_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_name": "GaussianMLPPolicy",
            "_obs_dim": 11.0,
            "_action_dim": 1.0,
            "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
          },
          "env": {
            "_env": {
              "env": {
                "env": {
                  "env": {
                    "env": {
                      "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                      "model": "<mujoco._structs.MjModel object at 0x7f1bfca013b0>",
                      "data": "<mujoco._structs.MjData object at 0x7f1bfca013f0>",
                      "init_qpos": "array([0., 0., 0.])",
                      "init_qvel": "array([0., 0., 0.])",
                      "_viewers": {},
                      "frame_skip": 5,
                      "viewer": "None",
                      "observation_space": {
                        "dtype": "dtype('float64')",
                        "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "_shape": [
                          11
                        ],
                        "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                        "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                        "low_repr": "-inf",
                        "high_repr": "inf",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "action_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True])",
                        "bounded_above": "array([ True])",
                        "_shape": [
                          1
                        ],
                        "low": "array([-1.], dtype=float32)",
                        "high": "array([1.], dtype=float32)",
                        "low_repr": "-1.0",
                        "high_repr": "1.0",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "render_mode": "None",
                      "renderer": {
                        "no_returns_render": [
                          "human"
                        ],
                        "single_render": [
                          "single_depth_array",
                          "single_rgb_array",
                          "single_state_pixels"
                        ],
                        "mode": "None",
                        "render": {
                          "$type": "functools.partial"
                        },
                        "render_list": [],
                        "$type": "gym.utils.renderer.Renderer"
                      },
                      "_ezpickle_args": [],
                      "_ezpickle_kwargs": {},
                      "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                    },
                    "_action_space": "None",
                    "_observation_space": "None",
                    "_reward_range": "None",
                    "_metadata": "None",
                    "new_step_api": true,
                    "checked_reset": false,
                    "checked_step": false,
                    "checked_render": false,
                    "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": false,
                  "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "_has_reset": false,
                "_disable_render_order_enforcing": false,
                "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "_max_episode_steps": 1000,
              "_elapsed_steps": "None",
              "$type": "gym.wrappers.time_limit.TimeLimit"
            },
            "_max_episode_length": 1000,
            "_render_modes": [
              "human",
              "rgb_array",
              "depth_array",
              "single_rgb_array",
              "single_depth_array"
            ],
            "_step_cnt": "None",
            "_visualize": false,
            "_action_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_env_info": "None",
            "$type": "garage.envs.gym_env.GymEnv"
          },
          "_env_steps": [],
          "_observations": [],
          "_last_observations": [],
          "_agent_infos": {},
          "_lengths": [],
          "_prev_obs": "None",
          "_eps_length": 0,
          "_episode_infos": {},
          "$type": "garage.sampler.default_worker.DefaultWorker"
        },
        {
          "_seed": "None",
          "_max_episode_length": 200,
          "_worker_number": 3,
          "agent": {
            "training": true,
            "_parameters": {},
            "_buffers": {},
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_module": {
                "training": true,
                "_parameters": {
                  "_init_std": {
                    "$type": "torch.nn.parameter.Parameter"
                  }
                },
                "_buffers": {
                  "min_std_param": {
                    "$type": "torch.Tensor"
                  }
                },
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_mean_module": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "_layers": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "0": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 11.0,
                                "out_features": 32,
                                "$type": "torch.nn.modules.linear.Linear"
                              },
                              "non_linearity": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                                "$type": "garage.torch._functions.NonLinearity"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          },
                          "1": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 32,
                                "out_features": 32,
                                "$type": "torch.nn.modules.linear.Linear"
                              },
                              "non_linearity": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                                "$type": "garage.torch._functions.NonLinearity"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          }
                        },
                        "$type": "torch.nn.modules.container.ModuleList"
                      },
                      "_output_layers": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "0": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 32,
                                "out_features": 1.0,
                                "$type": "torch.nn.modules.linear.Linear"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          }
                        },
                        "$type": "torch.nn.modules.container.ModuleList"
                      }
                    },
                    "_output_dim": 1.0,
                    "$type": "garage.torch.modules.mlp_module.MLPModule"
                  }
                },
                "_input_dim": 11.0,
                "_hidden_sizes": [
                  32,
                  32
                ],
                "_action_dim": 1.0,
                "_learn_std": true,
                "_std_hidden_sizes": [
                  32,
                  32
                ],
                "_min_std": 1e-06,
                "_max_std": "None",
                "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
                "_std_hidden_w_init": {
                  "$type": "builtins.function"
                },
                "_std_hidden_b_init": {
                  "$type": "builtins.function"
                },
                "_std_output_nonlinearity": "None",
                "_std_output_w_init": {
                  "$type": "builtins.function"
                },
                "_std_parameterization": "exp",
                "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
                "_hidden_w_init": {
                  "$type": "builtins.function"
                },
                "_hidden_b_init": {
                  "$type": "builtins.function"
                },
                "_output_nonlinearity": "None",
                "_output_w_init": {
                  "$type": "builtins.function"
                },
                "_output_b_init": {
                  "$type": "builtins.function"
                },
                "_layer_normalization": false,
                "_norm_dist_class": {
                  "$typename": "torch.distributions.normal.Normal"
                },
                "_min_std_param": {
                  "$type": "torch.Tensor"
                },
                "_max_std_param": "None",
                "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
              }
            },
            "_env_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_name": "GaussianMLPPolicy",
            "_obs_dim": 11.0,
            "_action_dim": 1.0,
            "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
          },
          "env": {
            "_env": {
              "env": {
                "env": {
                  "env": {
                    "env": {
                      "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                      "model": "<mujoco._structs.MjModel object at 0x7f1bfca01df0>",
                      "data": "<mujoco._structs.MjData object at 0x7f1bfca01e30>",
                      "init_qpos": "array([0., 0., 0.])",
                      "init_qvel": "array([0., 0., 0.])",
                      "_viewers": {},
                      "frame_skip": 5,
                      "viewer": "None",
                      "observation_space": {
                        "dtype": "dtype('float64')",
                        "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "_shape": [
                          11
                        ],
                        "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                        "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                        "low_repr": "-inf",
                        "high_repr": "inf",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "action_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True])",
                        "bounded_above": "array([ True])",
                        "_shape": [
                          1
                        ],
                        "low": "array([-1.], dtype=float32)",
                        "high": "array([1.], dtype=float32)",
                        "low_repr": "-1.0",
                        "high_repr": "1.0",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "render_mode": "None",
                      "renderer": {
                        "no_returns_render": [
                          "human"
                        ],
                        "single_render": [
                          "single_depth_array",
                          "single_rgb_array",
                          "single_state_pixels"
                        ],
                        "mode": "None",
                        "render": {
                          "$type": "functools.partial"
                        },
                        "render_list": [],
                        "$type": "gym.utils.renderer.Renderer"
                      },
                      "_ezpickle_args": [],
                      "_ezpickle_kwargs": {},
                      "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                    },
                    "_action_space": "None",
                    "_observation_space": "None",
                    "_reward_range": "None",
                    "_metadata": "None",
                    "new_step_api": true,
                    "checked_reset": false,
                    "checked_step": false,
                    "checked_render": false,
                    "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": false,
                  "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "_has_reset": false,
                "_disable_render_order_enforcing": false,
                "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "_max_episode_steps": 1000,
              "_elapsed_steps": "None",
              "$type": "gym.wrappers.time_limit.TimeLimit"
            },
            "_max_episode_length": 1000,
            "_render_modes": [
              "human",
              "rgb_array",
              "depth_array",
              "single_rgb_array",
              "single_depth_array"
            ],
            "_step_cnt": "None",
            "_visualize": false,
            "_action_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_env_info": "None",
            "$type": "garage.envs.gym_env.GymEnv"
          },
          "_env_steps": [],
          "_observations": [],
          "_last_observations": [],
          "_agent_infos": {},
          "_lengths": [],
          "_prev_obs": "None",
          "_eps_length": 0,
          "_episode_infos": {},
          "$type": "garage.sampler.default_worker.DefaultWorker"
        },
        {
          "_seed": "None",
          "_max_episode_length": 200,
          "_worker_number": 4,
          "agent": {
            "training": true,
            "_parameters": {},
            "_buffers": {},
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_module": {
                "training": true,
                "_parameters": {
                  "_init_std": {
                    "$type": "torch.nn.parameter.Parameter"
                  }
                },
                "_buffers": {
                  "min_std_param": {
                    "$type": "torch.Tensor"
                  }
                },
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_mean_module": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "_layers": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "0": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 11.0,
                                "out_features": 32,
                                "$type": "torch.nn.modules.linear.Linear"
                              },
                              "non_linearity": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                                "$type": "garage.torch._functions.NonLinearity"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          },
                          "1": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 32,
                                "out_features": 32,
                                "$type": "torch.nn.modules.linear.Linear"
                              },
                              "non_linearity": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                                "$type": "garage.torch._functions.NonLinearity"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          }
                        },
                        "$type": "torch.nn.modules.container.ModuleList"
                      },
                      "_output_layers": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "0": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 32,
                                "out_features": 1.0,
                                "$type": "torch.nn.modules.linear.Linear"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          }
                        },
                        "$type": "torch.nn.modules.container.ModuleList"
                      }
                    },
                    "_output_dim": 1.0,
                    "$type": "garage.torch.modules.mlp_module.MLPModule"
                  }
                },
                "_input_dim": 11.0,
                "_hidden_sizes": [
                  32,
                  32
                ],
                "_action_dim": 1.0,
                "_learn_std": true,
                "_std_hidden_sizes": [
                  32,
                  32
                ],
                "_min_std": 1e-06,
                "_max_std": "None",
                "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
                "_std_hidden_w_init": {
                  "$type": "builtins.function"
                },
                "_std_hidden_b_init": {
                  "$type": "builtins.function"
                },
                "_std_output_nonlinearity": "None",
                "_std_output_w_init": {
                  "$type": "builtins.function"
                },
                "_std_parameterization": "exp",
                "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
                "_hidden_w_init": {
                  "$type": "builtins.function"
                },
                "_hidden_b_init": {
                  "$type": "builtins.function"
                },
                "_output_nonlinearity": "None",
                "_output_w_init": {
                  "$type": "builtins.function"
                },
                "_output_b_init": {
                  "$type": "builtins.function"
                },
                "_layer_normalization": false,
                "_norm_dist_class": {
                  "$typename": "torch.distributions.normal.Normal"
                },
                "_min_std_param": {
                  "$type": "torch.Tensor"
                },
                "_max_std_param": "None",
                "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
              }
            },
            "_env_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_name": "GaussianMLPPolicy",
            "_obs_dim": 11.0,
            "_action_dim": 1.0,
            "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
          },
          "env": {
            "_env": {
              "env": {
                "env": {
                  "env": {
                    "env": {
                      "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                      "model": "<mujoco._structs.MjModel object at 0x7f1bfc95f870>",
                      "data": "<mujoco._structs.MjData object at 0x7f1bfc95f8b0>",
                      "init_qpos": "array([0., 0., 0.])",
                      "init_qvel": "array([0., 0., 0.])",
                      "_viewers": {},
                      "frame_skip": 5,
                      "viewer": "None",
                      "observation_space": {
                        "dtype": "dtype('float64')",
                        "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "_shape": [
                          11
                        ],
                        "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                        "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                        "low_repr": "-inf",
                        "high_repr": "inf",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "action_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True])",
                        "bounded_above": "array([ True])",
                        "_shape": [
                          1
                        ],
                        "low": "array([-1.], dtype=float32)",
                        "high": "array([1.], dtype=float32)",
                        "low_repr": "-1.0",
                        "high_repr": "1.0",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "render_mode": "None",
                      "renderer": {
                        "no_returns_render": [
                          "human"
                        ],
                        "single_render": [
                          "single_depth_array",
                          "single_rgb_array",
                          "single_state_pixels"
                        ],
                        "mode": "None",
                        "render": {
                          "$type": "functools.partial"
                        },
                        "render_list": [],
                        "$type": "gym.utils.renderer.Renderer"
                      },
                      "_ezpickle_args": [],
                      "_ezpickle_kwargs": {},
                      "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                    },
                    "_action_space": "None",
                    "_observation_space": "None",
                    "_reward_range": "None",
                    "_metadata": "None",
                    "new_step_api": true,
                    "checked_reset": false,
                    "checked_step": false,
                    "checked_render": false,
                    "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": false,
                  "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "_has_reset": false,
                "_disable_render_order_enforcing": false,
                "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "_max_episode_steps": 1000,
              "_elapsed_steps": "None",
              "$type": "gym.wrappers.time_limit.TimeLimit"
            },
            "_max_episode_length": 1000,
            "_render_modes": [
              "human",
              "rgb_array",
              "depth_array",
              "single_rgb_array",
              "single_depth_array"
            ],
            "_step_cnt": "None",
            "_visualize": false,
            "_action_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_env_info": "None",
            "$type": "garage.envs.gym_env.GymEnv"
          },
          "_env_steps": [],
          "_observations": [],
          "_last_observations": [],
          "_agent_infos": {},
          "_lengths": [],
          "_prev_obs": "None",
          "_eps_length": 0,
          "_episode_infos": {},
          "$type": "garage.sampler.default_worker.DefaultWorker"
        },
        {
          "_seed": "None",
          "_max_episode_length": 200,
          "_worker_number": 5,
          "agent": {
            "training": true,
            "_parameters": {},
            "_buffers": {},
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_module": {
                "training": true,
                "_parameters": {
                  "_init_std": {
                    "$type": "torch.nn.parameter.Parameter"
                  }
                },
                "_buffers": {
                  "min_std_param": {
                    "$type": "torch.Tensor"
                  }
                },
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_mean_module": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "_layers": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "0": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 11.0,
                                "out_features": 32,
                                "$type": "torch.nn.modules.linear.Linear"
                              },
                              "non_linearity": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                                "$type": "garage.torch._functions.NonLinearity"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          },
                          "1": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 32,
                                "out_features": 32,
                                "$type": "torch.nn.modules.linear.Linear"
                              },
                              "non_linearity": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                                "$type": "garage.torch._functions.NonLinearity"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          }
                        },
                        "$type": "torch.nn.modules.container.ModuleList"
                      },
                      "_output_layers": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "0": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 32,
                                "out_features": 1.0,
                                "$type": "torch.nn.modules.linear.Linear"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          }
                        },
                        "$type": "torch.nn.modules.container.ModuleList"
                      }
                    },
                    "_output_dim": 1.0,
                    "$type": "garage.torch.modules.mlp_module.MLPModule"
                  }
                },
                "_input_dim": 11.0,
                "_hidden_sizes": [
                  32,
                  32
                ],
                "_action_dim": 1.0,
                "_learn_std": true,
                "_std_hidden_sizes": [
                  32,
                  32
                ],
                "_min_std": 1e-06,
                "_max_std": "None",
                "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
                "_std_hidden_w_init": {
                  "$type": "builtins.function"
                },
                "_std_hidden_b_init": {
                  "$type": "builtins.function"
                },
                "_std_output_nonlinearity": "None",
                "_std_output_w_init": {
                  "$type": "builtins.function"
                },
                "_std_parameterization": "exp",
                "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
                "_hidden_w_init": {
                  "$type": "builtins.function"
                },
                "_hidden_b_init": {
                  "$type": "builtins.function"
                },
                "_output_nonlinearity": "None",
                "_output_w_init": {
                  "$type": "builtins.function"
                },
                "_output_b_init": {
                  "$type": "builtins.function"
                },
                "_layer_normalization": false,
                "_norm_dist_class": {
                  "$typename": "torch.distributions.normal.Normal"
                },
                "_min_std_param": {
                  "$type": "torch.Tensor"
                },
                "_max_std_param": "None",
                "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
              }
            },
            "_env_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_name": "GaussianMLPPolicy",
            "_obs_dim": 11.0,
            "_action_dim": 1.0,
            "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
          },
          "env": {
            "_env": {
              "env": {
                "env": {
                  "env": {
                    "env": {
                      "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                      "model": "<mujoco._structs.MjModel object at 0x7f1bfc91b330>",
                      "data": "<mujoco._structs.MjData object at 0x7f1bfc91b370>",
                      "init_qpos": "array([0., 0., 0.])",
                      "init_qvel": "array([0., 0., 0.])",
                      "_viewers": {},
                      "frame_skip": 5,
                      "viewer": "None",
                      "observation_space": {
                        "dtype": "dtype('float64')",
                        "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "_shape": [
                          11
                        ],
                        "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                        "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                        "low_repr": "-inf",
                        "high_repr": "inf",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "action_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True])",
                        "bounded_above": "array([ True])",
                        "_shape": [
                          1
                        ],
                        "low": "array([-1.], dtype=float32)",
                        "high": "array([1.], dtype=float32)",
                        "low_repr": "-1.0",
                        "high_repr": "1.0",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "render_mode": "None",
                      "renderer": {
                        "no_returns_render": [
                          "human"
                        ],
                        "single_render": [
                          "single_depth_array",
                          "single_rgb_array",
                          "single_state_pixels"
                        ],
                        "mode": "None",
                        "render": {
                          "$type": "functools.partial"
                        },
                        "render_list": [],
                        "$type": "gym.utils.renderer.Renderer"
                      },
                      "_ezpickle_args": [],
                      "_ezpickle_kwargs": {},
                      "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                    },
                    "_action_space": "None",
                    "_observation_space": "None",
                    "_reward_range": "None",
                    "_metadata": "None",
                    "new_step_api": true,
                    "checked_reset": false,
                    "checked_step": false,
                    "checked_render": false,
                    "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": false,
                  "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "_has_reset": false,
                "_disable_render_order_enforcing": false,
                "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "_max_episode_steps": 1000,
              "_elapsed_steps": "None",
              "$type": "gym.wrappers.time_limit.TimeLimit"
            },
            "_max_episode_length": 1000,
            "_render_modes": [
              "human",
              "rgb_array",
              "depth_array",
              "single_rgb_array",
              "single_depth_array"
            ],
            "_step_cnt": "None",
            "_visualize": false,
            "_action_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_env_info": "None",
            "$type": "garage.envs.gym_env.GymEnv"
          },
          "_env_steps": [],
          "_observations": [],
          "_last_observations": [],
          "_agent_infos": {},
          "_lengths": [],
          "_prev_obs": "None",
          "_eps_length": 0,
          "_episode_infos": {},
          "$type": "garage.sampler.default_worker.DefaultWorker"
        },
        {
          "_seed": "None",
          "_max_episode_length": 200,
          "_worker_number": 6,
          "agent": {
            "training": true,
            "_parameters": {},
            "_buffers": {},
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_module": {
                "training": true,
                "_parameters": {
                  "_init_std": {
                    "$type": "torch.nn.parameter.Parameter"
                  }
                },
                "_buffers": {
                  "min_std_param": {
                    "$type": "torch.Tensor"
                  }
                },
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_mean_module": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "_layers": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "0": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 11.0,
                                "out_features": 32,
                                "$type": "torch.nn.modules.linear.Linear"
                              },
                              "non_linearity": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                                "$type": "garage.torch._functions.NonLinearity"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          },
                          "1": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 32,
                                "out_features": 32,
                                "$type": "torch.nn.modules.linear.Linear"
                              },
                              "non_linearity": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                                "$type": "garage.torch._functions.NonLinearity"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          }
                        },
                        "$type": "torch.nn.modules.container.ModuleList"
                      },
                      "_output_layers": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "0": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 32,
                                "out_features": 1.0,
                                "$type": "torch.nn.modules.linear.Linear"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          }
                        },
                        "$type": "torch.nn.modules.container.ModuleList"
                      }
                    },
                    "_output_dim": 1.0,
                    "$type": "garage.torch.modules.mlp_module.MLPModule"
                  }
                },
                "_input_dim": 11.0,
                "_hidden_sizes": [
                  32,
                  32
                ],
                "_action_dim": 1.0,
                "_learn_std": true,
                "_std_hidden_sizes": [
                  32,
                  32
                ],
                "_min_std": 1e-06,
                "_max_std": "None",
                "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
                "_std_hidden_w_init": {
                  "$type": "builtins.function"
                },
                "_std_hidden_b_init": {
                  "$type": "builtins.function"
                },
                "_std_output_nonlinearity": "None",
                "_std_output_w_init": {
                  "$type": "builtins.function"
                },
                "_std_parameterization": "exp",
                "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
                "_hidden_w_init": {
                  "$type": "builtins.function"
                },
                "_hidden_b_init": {
                  "$type": "builtins.function"
                },
                "_output_nonlinearity": "None",
                "_output_w_init": {
                  "$type": "builtins.function"
                },
                "_output_b_init": {
                  "$type": "builtins.function"
                },
                "_layer_normalization": false,
                "_norm_dist_class": {
                  "$typename": "torch.distributions.normal.Normal"
                },
                "_min_std_param": {
                  "$type": "torch.Tensor"
                },
                "_max_std_param": "None",
                "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
              }
            },
            "_env_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_name": "GaussianMLPPolicy",
            "_obs_dim": 11.0,
            "_action_dim": 1.0,
            "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
          },
          "env": {
            "_env": {
              "env": {
                "env": {
                  "env": {
                    "env": {
                      "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                      "model": "<mujoco._structs.MjModel object at 0x7f1bfc91bdb0>",
                      "data": "<mujoco._structs.MjData object at 0x7f1bfc91bdf0>",
                      "init_qpos": "array([0., 0., 0.])",
                      "init_qvel": "array([0., 0., 0.])",
                      "_viewers": {},
                      "frame_skip": 5,
                      "viewer": "None",
                      "observation_space": {
                        "dtype": "dtype('float64')",
                        "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "_shape": [
                          11
                        ],
                        "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                        "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                        "low_repr": "-inf",
                        "high_repr": "inf",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "action_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True])",
                        "bounded_above": "array([ True])",
                        "_shape": [
                          1
                        ],
                        "low": "array([-1.], dtype=float32)",
                        "high": "array([1.], dtype=float32)",
                        "low_repr": "-1.0",
                        "high_repr": "1.0",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "render_mode": "None",
                      "renderer": {
                        "no_returns_render": [
                          "human"
                        ],
                        "single_render": [
                          "single_depth_array",
                          "single_rgb_array",
                          "single_state_pixels"
                        ],
                        "mode": "None",
                        "render": {
                          "$type": "functools.partial"
                        },
                        "render_list": [],
                        "$type": "gym.utils.renderer.Renderer"
                      },
                      "_ezpickle_args": [],
                      "_ezpickle_kwargs": {},
                      "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                    },
                    "_action_space": "None",
                    "_observation_space": "None",
                    "_reward_range": "None",
                    "_metadata": "None",
                    "new_step_api": true,
                    "checked_reset": false,
                    "checked_step": false,
                    "checked_render": false,
                    "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": false,
                  "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "_has_reset": false,
                "_disable_render_order_enforcing": false,
                "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "_max_episode_steps": 1000,
              "_elapsed_steps": "None",
              "$type": "gym.wrappers.time_limit.TimeLimit"
            },
            "_max_episode_length": 1000,
            "_render_modes": [
              "human",
              "rgb_array",
              "depth_array",
              "single_rgb_array",
              "single_depth_array"
            ],
            "_step_cnt": "None",
            "_visualize": false,
            "_action_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_env_info": "None",
            "$type": "garage.envs.gym_env.GymEnv"
          },
          "_env_steps": [],
          "_observations": [],
          "_last_observations": [],
          "_agent_infos": {},
          "_lengths": [],
          "_prev_obs": "None",
          "_eps_length": 0,
          "_episode_infos": {},
          "$type": "garage.sampler.default_worker.DefaultWorker"
        },
        {
          "_seed": "None",
          "_max_episode_length": 200,
          "_worker_number": 7,
          "agent": {
            "training": true,
            "_parameters": {},
            "_buffers": {},
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_module": {
                "training": true,
                "_parameters": {
                  "_init_std": {
                    "$type": "torch.nn.parameter.Parameter"
                  }
                },
                "_buffers": {
                  "min_std_param": {
                    "$type": "torch.Tensor"
                  }
                },
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_mean_module": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "_layers": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "0": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 11.0,
                                "out_features": 32,
                                "$type": "torch.nn.modules.linear.Linear"
                              },
                              "non_linearity": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                                "$type": "garage.torch._functions.NonLinearity"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          },
                          "1": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 32,
                                "out_features": 32,
                                "$type": "torch.nn.modules.linear.Linear"
                              },
                              "non_linearity": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                                "$type": "garage.torch._functions.NonLinearity"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          }
                        },
                        "$type": "torch.nn.modules.container.ModuleList"
                      },
                      "_output_layers": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "0": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 32,
                                "out_features": 1.0,
                                "$type": "torch.nn.modules.linear.Linear"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          }
                        },
                        "$type": "torch.nn.modules.container.ModuleList"
                      }
                    },
                    "_output_dim": 1.0,
                    "$type": "garage.torch.modules.mlp_module.MLPModule"
                  }
                },
                "_input_dim": 11.0,
                "_hidden_sizes": [
                  32,
                  32
                ],
                "_action_dim": 1.0,
                "_learn_std": true,
                "_std_hidden_sizes": [
                  32,
                  32
                ],
                "_min_std": 1e-06,
                "_max_std": "None",
                "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
                "_std_hidden_w_init": {
                  "$type": "builtins.function"
                },
                "_std_hidden_b_init": {
                  "$type": "builtins.function"
                },
                "_std_output_nonlinearity": "None",
                "_std_output_w_init": {
                  "$type": "builtins.function"
                },
                "_std_parameterization": "exp",
                "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
                "_hidden_w_init": {
                  "$type": "builtins.function"
                },
                "_hidden_b_init": {
                  "$type": "builtins.function"
                },
                "_output_nonlinearity": "None",
                "_output_w_init": {
                  "$type": "builtins.function"
                },
                "_output_b_init": {
                  "$type": "builtins.function"
                },
                "_layer_normalization": false,
                "_norm_dist_class": {
                  "$typename": "torch.distributions.normal.Normal"
                },
                "_min_std_param": {
                  "$type": "torch.Tensor"
                },
                "_max_std_param": "None",
                "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
              }
            },
            "_env_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_name": "GaussianMLPPolicy",
            "_obs_dim": 11.0,
            "_action_dim": 1.0,
            "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
          },
          "env": {
            "_env": {
              "env": {
                "env": {
                  "env": {
                    "env": {
                      "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                      "model": "<mujoco._structs.MjModel object at 0x7f1bfc879830>",
                      "data": "<mujoco._structs.MjData object at 0x7f1bfc879870>",
                      "init_qpos": "array([0., 0., 0.])",
                      "init_qvel": "array([0., 0., 0.])",
                      "_viewers": {},
                      "frame_skip": 5,
                      "viewer": "None",
                      "observation_space": {
                        "dtype": "dtype('float64')",
                        "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "_shape": [
                          11
                        ],
                        "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                        "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                        "low_repr": "-inf",
                        "high_repr": "inf",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "action_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True])",
                        "bounded_above": "array([ True])",
                        "_shape": [
                          1
                        ],
                        "low": "array([-1.], dtype=float32)",
                        "high": "array([1.], dtype=float32)",
                        "low_repr": "-1.0",
                        "high_repr": "1.0",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "render_mode": "None",
                      "renderer": {
                        "no_returns_render": [
                          "human"
                        ],
                        "single_render": [
                          "single_depth_array",
                          "single_rgb_array",
                          "single_state_pixels"
                        ],
                        "mode": "None",
                        "render": {
                          "$type": "functools.partial"
                        },
                        "render_list": [],
                        "$type": "gym.utils.renderer.Renderer"
                      },
                      "_ezpickle_args": [],
                      "_ezpickle_kwargs": {},
                      "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                    },
                    "_action_space": "None",
                    "_observation_space": "None",
                    "_reward_range": "None",
                    "_metadata": "None",
                    "new_step_api": true,
                    "checked_reset": false,
                    "checked_step": false,
                    "checked_render": false,
                    "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": false,
                  "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "_has_reset": false,
                "_disable_render_order_enforcing": false,
                "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "_max_episode_steps": 1000,
              "_elapsed_steps": "None",
              "$type": "gym.wrappers.time_limit.TimeLimit"
            },
            "_max_episode_length": 1000,
            "_render_modes": [
              "human",
              "rgb_array",
              "depth_array",
              "single_rgb_array",
              "single_depth_array"
            ],
            "_step_cnt": "None",
            "_visualize": false,
            "_action_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_env_info": "None",
            "$type": "garage.envs.gym_env.GymEnv"
          },
          "_env_steps": [],
          "_observations": [],
          "_last_observations": [],
          "_agent_infos": {},
          "_lengths": [],
          "_prev_obs": "None",
          "_eps_length": 0,
          "_episode_infos": {},
          "$type": "garage.sampler.default_worker.DefaultWorker"
        },
        {
          "_seed": "None",
          "_max_episode_length": 200,
          "_worker_number": 8,
          "agent": {
            "training": true,
            "_parameters": {},
            "_buffers": {},
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_module": {
                "training": true,
                "_parameters": {
                  "_init_std": {
                    "$type": "torch.nn.parameter.Parameter"
                  }
                },
                "_buffers": {
                  "min_std_param": {
                    "$type": "torch.Tensor"
                  }
                },
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_mean_module": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "_layers": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "0": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 11.0,
                                "out_features": 32,
                                "$type": "torch.nn.modules.linear.Linear"
                              },
                              "non_linearity": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                                "$type": "garage.torch._functions.NonLinearity"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          },
                          "1": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 32,
                                "out_features": 32,
                                "$type": "torch.nn.modules.linear.Linear"
                              },
                              "non_linearity": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                                "$type": "garage.torch._functions.NonLinearity"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          }
                        },
                        "$type": "torch.nn.modules.container.ModuleList"
                      },
                      "_output_layers": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "0": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 32,
                                "out_features": 1.0,
                                "$type": "torch.nn.modules.linear.Linear"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          }
                        },
                        "$type": "torch.nn.modules.container.ModuleList"
                      }
                    },
                    "_output_dim": 1.0,
                    "$type": "garage.torch.modules.mlp_module.MLPModule"
                  }
                },
                "_input_dim": 11.0,
                "_hidden_sizes": [
                  32,
                  32
                ],
                "_action_dim": 1.0,
                "_learn_std": true,
                "_std_hidden_sizes": [
                  32,
                  32
                ],
                "_min_std": 1e-06,
                "_max_std": "None",
                "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
                "_std_hidden_w_init": {
                  "$type": "builtins.function"
                },
                "_std_hidden_b_init": {
                  "$type": "builtins.function"
                },
                "_std_output_nonlinearity": "None",
                "_std_output_w_init": {
                  "$type": "builtins.function"
                },
                "_std_parameterization": "exp",
                "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
                "_hidden_w_init": {
                  "$type": "builtins.function"
                },
                "_hidden_b_init": {
                  "$type": "builtins.function"
                },
                "_output_nonlinearity": "None",
                "_output_w_init": {
                  "$type": "builtins.function"
                },
                "_output_b_init": {
                  "$type": "builtins.function"
                },
                "_layer_normalization": false,
                "_norm_dist_class": {
                  "$typename": "torch.distributions.normal.Normal"
                },
                "_min_std_param": {
                  "$type": "torch.Tensor"
                },
                "_max_std_param": "None",
                "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
              }
            },
            "_env_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_name": "GaussianMLPPolicy",
            "_obs_dim": 11.0,
            "_action_dim": 1.0,
            "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
          },
          "env": {
            "_env": {
              "env": {
                "env": {
                  "env": {
                    "env": {
                      "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                      "model": "<mujoco._structs.MjModel object at 0x7f1bfc82e2f0>",
                      "data": "<mujoco._structs.MjData object at 0x7f1bfc82e330>",
                      "init_qpos": "array([0., 0., 0.])",
                      "init_qvel": "array([0., 0., 0.])",
                      "_viewers": {},
                      "frame_skip": 5,
                      "viewer": "None",
                      "observation_space": {
                        "dtype": "dtype('float64')",
                        "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "_shape": [
                          11
                        ],
                        "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                        "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                        "low_repr": "-inf",
                        "high_repr": "inf",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "action_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True])",
                        "bounded_above": "array([ True])",
                        "_shape": [
                          1
                        ],
                        "low": "array([-1.], dtype=float32)",
                        "high": "array([1.], dtype=float32)",
                        "low_repr": "-1.0",
                        "high_repr": "1.0",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "render_mode": "None",
                      "renderer": {
                        "no_returns_render": [
                          "human"
                        ],
                        "single_render": [
                          "single_depth_array",
                          "single_rgb_array",
                          "single_state_pixels"
                        ],
                        "mode": "None",
                        "render": {
                          "$type": "functools.partial"
                        },
                        "render_list": [],
                        "$type": "gym.utils.renderer.Renderer"
                      },
                      "_ezpickle_args": [],
                      "_ezpickle_kwargs": {},
                      "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                    },
                    "_action_space": "None",
                    "_observation_space": "None",
                    "_reward_range": "None",
                    "_metadata": "None",
                    "new_step_api": true,
                    "checked_reset": false,
                    "checked_step": false,
                    "checked_render": false,
                    "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": false,
                  "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "_has_reset": false,
                "_disable_render_order_enforcing": false,
                "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "_max_episode_steps": 1000,
              "_elapsed_steps": "None",
              "$type": "gym.wrappers.time_limit.TimeLimit"
            },
            "_max_episode_length": 1000,
            "_render_modes": [
              "human",
              "rgb_array",
              "depth_array",
              "single_rgb_array",
              "single_depth_array"
            ],
            "_step_cnt": "None",
            "_visualize": false,
            "_action_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_env_info": "None",
            "$type": "garage.envs.gym_env.GymEnv"
          },
          "_env_steps": [],
          "_observations": [],
          "_last_observations": [],
          "_agent_infos": {},
          "_lengths": [],
          "_prev_obs": "None",
          "_eps_length": 0,
          "_episode_infos": {},
          "$type": "garage.sampler.default_worker.DefaultWorker"
        },
        {
          "_seed": "None",
          "_max_episode_length": 200,
          "_worker_number": 9,
          "agent": {
            "training": true,
            "_parameters": {},
            "_buffers": {},
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_module": {
                "training": true,
                "_parameters": {
                  "_init_std": {
                    "$type": "torch.nn.parameter.Parameter"
                  }
                },
                "_buffers": {
                  "min_std_param": {
                    "$type": "torch.Tensor"
                  }
                },
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_mean_module": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "_layers": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "0": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 11.0,
                                "out_features": 32,
                                "$type": "torch.nn.modules.linear.Linear"
                              },
                              "non_linearity": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                                "$type": "garage.torch._functions.NonLinearity"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          },
                          "1": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 32,
                                "out_features": 32,
                                "$type": "torch.nn.modules.linear.Linear"
                              },
                              "non_linearity": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                                "$type": "garage.torch._functions.NonLinearity"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          }
                        },
                        "$type": "torch.nn.modules.container.ModuleList"
                      },
                      "_output_layers": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "0": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 32,
                                "out_features": 1.0,
                                "$type": "torch.nn.modules.linear.Linear"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          }
                        },
                        "$type": "torch.nn.modules.container.ModuleList"
                      }
                    },
                    "_output_dim": 1.0,
                    "$type": "garage.torch.modules.mlp_module.MLPModule"
                  }
                },
                "_input_dim": 11.0,
                "_hidden_sizes": [
                  32,
                  32
                ],
                "_action_dim": 1.0,
                "_learn_std": true,
                "_std_hidden_sizes": [
                  32,
                  32
                ],
                "_min_std": 1e-06,
                "_max_std": "None",
                "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
                "_std_hidden_w_init": {
                  "$type": "builtins.function"
                },
                "_std_hidden_b_init": {
                  "$type": "builtins.function"
                },
                "_std_output_nonlinearity": "None",
                "_std_output_w_init": {
                  "$type": "builtins.function"
                },
                "_std_parameterization": "exp",
                "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
                "_hidden_w_init": {
                  "$type": "builtins.function"
                },
                "_hidden_b_init": {
                  "$type": "builtins.function"
                },
                "_output_nonlinearity": "None",
                "_output_w_init": {
                  "$type": "builtins.function"
                },
                "_output_b_init": {
                  "$type": "builtins.function"
                },
                "_layer_normalization": false,
                "_norm_dist_class": {
                  "$typename": "torch.distributions.normal.Normal"
                },
                "_min_std_param": {
                  "$type": "torch.Tensor"
                },
                "_max_std_param": "None",
                "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
              }
            },
            "_env_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_name": "GaussianMLPPolicy",
            "_obs_dim": 11.0,
            "_action_dim": 1.0,
            "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
          },
          "env": {
            "_env": {
              "env": {
                "env": {
                  "env": {
                    "env": {
                      "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                      "model": "<mujoco._structs.MjModel object at 0x7f1bfc82ed70>",
                      "data": "<mujoco._structs.MjData object at 0x7f1bfc82edb0>",
                      "init_qpos": "array([0., 0., 0.])",
                      "init_qvel": "array([0., 0., 0.])",
                      "_viewers": {},
                      "frame_skip": 5,
                      "viewer": "None",
                      "observation_space": {
                        "dtype": "dtype('float64')",
                        "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "_shape": [
                          11
                        ],
                        "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                        "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                        "low_repr": "-inf",
                        "high_repr": "inf",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "action_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True])",
                        "bounded_above": "array([ True])",
                        "_shape": [
                          1
                        ],
                        "low": "array([-1.], dtype=float32)",
                        "high": "array([1.], dtype=float32)",
                        "low_repr": "-1.0",
                        "high_repr": "1.0",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "render_mode": "None",
                      "renderer": {
                        "no_returns_render": [
                          "human"
                        ],
                        "single_render": [
                          "single_depth_array",
                          "single_rgb_array",
                          "single_state_pixels"
                        ],
                        "mode": "None",
                        "render": {
                          "$type": "functools.partial"
                        },
                        "render_list": [],
                        "$type": "gym.utils.renderer.Renderer"
                      },
                      "_ezpickle_args": [],
                      "_ezpickle_kwargs": {},
                      "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                    },
                    "_action_space": "None",
                    "_observation_space": "None",
                    "_reward_range": "None",
                    "_metadata": "None",
                    "new_step_api": true,
                    "checked_reset": false,
                    "checked_step": false,
                    "checked_render": false,
                    "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": false,
                  "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "_has_reset": false,
                "_disable_render_order_enforcing": false,
                "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "_max_episode_steps": 1000,
              "_elapsed_steps": "None",
              "$type": "gym.wrappers.time_limit.TimeLimit"
            },
            "_max_episode_length": 1000,
            "_render_modes": [
              "human",
              "rgb_array",
              "depth_array",
              "single_rgb_array",
              "single_depth_array"
            ],
            "_step_cnt": "None",
            "_visualize": false,
            "_action_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_env_info": "None",
            "$type": "garage.envs.gym_env.GymEnv"
          },
          "_env_steps": [],
          "_observations": [],
          "_last_observations": [],
          "_agent_infos": {},
          "_lengths": [],
          "_prev_obs": "None",
          "_eps_length": 0,
          "_episode_infos": {},
          "$type": "garage.sampler.default_worker.DefaultWorker"
        },
        {
          "_seed": "None",
          "_max_episode_length": 200,
          "_worker_number": 10,
          "agent": {
            "training": true,
            "_parameters": {},
            "_buffers": {},
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_module": {
                "training": true,
                "_parameters": {
                  "_init_std": {
                    "$type": "torch.nn.parameter.Parameter"
                  }
                },
                "_buffers": {
                  "min_std_param": {
                    "$type": "torch.Tensor"
                  }
                },
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_mean_module": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "_layers": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "0": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 11.0,
                                "out_features": 32,
                                "$type": "torch.nn.modules.linear.Linear"
                              },
                              "non_linearity": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                                "$type": "garage.torch._functions.NonLinearity"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          },
                          "1": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 32,
                                "out_features": 32,
                                "$type": "torch.nn.modules.linear.Linear"
                              },
                              "non_linearity": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                                "$type": "garage.torch._functions.NonLinearity"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          }
                        },
                        "$type": "torch.nn.modules.container.ModuleList"
                      },
                      "_output_layers": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "0": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 32,
                                "out_features": 1.0,
                                "$type": "torch.nn.modules.linear.Linear"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          }
                        },
                        "$type": "torch.nn.modules.container.ModuleList"
                      }
                    },
                    "_output_dim": 1.0,
                    "$type": "garage.torch.modules.mlp_module.MLPModule"
                  }
                },
                "_input_dim": 11.0,
                "_hidden_sizes": [
                  32,
                  32
                ],
                "_action_dim": 1.0,
                "_learn_std": true,
                "_std_hidden_sizes": [
                  32,
                  32
                ],
                "_min_std": 1e-06,
                "_max_std": "None",
                "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
                "_std_hidden_w_init": {
                  "$type": "builtins.function"
                },
                "_std_hidden_b_init": {
                  "$type": "builtins.function"
                },
                "_std_output_nonlinearity": "None",
                "_std_output_w_init": {
                  "$type": "builtins.function"
                },
                "_std_parameterization": "exp",
                "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
                "_hidden_w_init": {
                  "$type": "builtins.function"
                },
                "_hidden_b_init": {
                  "$type": "builtins.function"
                },
                "_output_nonlinearity": "None",
                "_output_w_init": {
                  "$type": "builtins.function"
                },
                "_output_b_init": {
                  "$type": "builtins.function"
                },
                "_layer_normalization": false,
                "_norm_dist_class": {
                  "$typename": "torch.distributions.normal.Normal"
                },
                "_min_std_param": {
                  "$type": "torch.Tensor"
                },
                "_max_std_param": "None",
                "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
              }
            },
            "_env_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_name": "GaussianMLPPolicy",
            "_obs_dim": 11.0,
            "_action_dim": 1.0,
            "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
          },
          "env": {
            "_env": {
              "env": {
                "env": {
                  "env": {
                    "env": {
                      "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                      "model": "<mujoco._structs.MjModel object at 0x7f1bfc814870>",
                      "data": "<mujoco._structs.MjData object at 0x7f1bfc8148b0>",
                      "init_qpos": "array([0., 0., 0.])",
                      "init_qvel": "array([0., 0., 0.])",
                      "_viewers": {},
                      "frame_skip": 5,
                      "viewer": "None",
                      "observation_space": {
                        "dtype": "dtype('float64')",
                        "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "_shape": [
                          11
                        ],
                        "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                        "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                        "low_repr": "-inf",
                        "high_repr": "inf",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "action_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True])",
                        "bounded_above": "array([ True])",
                        "_shape": [
                          1
                        ],
                        "low": "array([-1.], dtype=float32)",
                        "high": "array([1.], dtype=float32)",
                        "low_repr": "-1.0",
                        "high_repr": "1.0",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "render_mode": "None",
                      "renderer": {
                        "no_returns_render": [
                          "human"
                        ],
                        "single_render": [
                          "single_depth_array",
                          "single_rgb_array",
                          "single_state_pixels"
                        ],
                        "mode": "None",
                        "render": {
                          "$type": "functools.partial"
                        },
                        "render_list": [],
                        "$type": "gym.utils.renderer.Renderer"
                      },
                      "_ezpickle_args": [],
                      "_ezpickle_kwargs": {},
                      "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                    },
                    "_action_space": "None",
                    "_observation_space": "None",
                    "_reward_range": "None",
                    "_metadata": "None",
                    "new_step_api": true,
                    "checked_reset": false,
                    "checked_step": false,
                    "checked_render": false,
                    "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": false,
                  "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "_has_reset": false,
                "_disable_render_order_enforcing": false,
                "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "_max_episode_steps": 1000,
              "_elapsed_steps": "None",
              "$type": "gym.wrappers.time_limit.TimeLimit"
            },
            "_max_episode_length": 1000,
            "_render_modes": [
              "human",
              "rgb_array",
              "depth_array",
              "single_rgb_array",
              "single_depth_array"
            ],
            "_step_cnt": "None",
            "_visualize": false,
            "_action_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_env_info": "None",
            "$type": "garage.envs.gym_env.GymEnv"
          },
          "_env_steps": [],
          "_observations": [],
          "_last_observations": [],
          "_agent_infos": {},
          "_lengths": [],
          "_prev_obs": "None",
          "_eps_length": 0,
          "_episode_infos": {},
          "$type": "garage.sampler.default_worker.DefaultWorker"
        },
        {
          "_seed": "None",
          "_max_episode_length": 200,
          "_worker_number": 11,
          "agent": {
            "training": true,
            "_parameters": {},
            "_buffers": {},
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_module": {
                "training": true,
                "_parameters": {
                  "_init_std": {
                    "$type": "torch.nn.parameter.Parameter"
                  }
                },
                "_buffers": {
                  "min_std_param": {
                    "$type": "torch.Tensor"
                  }
                },
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_mean_module": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "_layers": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "0": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 11.0,
                                "out_features": 32,
                                "$type": "torch.nn.modules.linear.Linear"
                              },
                              "non_linearity": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                                "$type": "garage.torch._functions.NonLinearity"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          },
                          "1": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 32,
                                "out_features": 32,
                                "$type": "torch.nn.modules.linear.Linear"
                              },
                              "non_linearity": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                                "$type": "garage.torch._functions.NonLinearity"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          }
                        },
                        "$type": "torch.nn.modules.container.ModuleList"
                      },
                      "_output_layers": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "0": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 32,
                                "out_features": 1.0,
                                "$type": "torch.nn.modules.linear.Linear"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          }
                        },
                        "$type": "torch.nn.modules.container.ModuleList"
                      }
                    },
                    "_output_dim": 1.0,
                    "$type": "garage.torch.modules.mlp_module.MLPModule"
                  }
                },
                "_input_dim": 11.0,
                "_hidden_sizes": [
                  32,
                  32
                ],
                "_action_dim": 1.0,
                "_learn_std": true,
                "_std_hidden_sizes": [
                  32,
                  32
                ],
                "_min_std": 1e-06,
                "_max_std": "None",
                "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
                "_std_hidden_w_init": {
                  "$type": "builtins.function"
                },
                "_std_hidden_b_init": {
                  "$type": "builtins.function"
                },
                "_std_output_nonlinearity": "None",
                "_std_output_w_init": {
                  "$type": "builtins.function"
                },
                "_std_parameterization": "exp",
                "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
                "_hidden_w_init": {
                  "$type": "builtins.function"
                },
                "_hidden_b_init": {
                  "$type": "builtins.function"
                },
                "_output_nonlinearity": "None",
                "_output_w_init": {
                  "$type": "builtins.function"
                },
                "_output_b_init": {
                  "$type": "builtins.function"
                },
                "_layer_normalization": false,
                "_norm_dist_class": {
                  "$typename": "torch.distributions.normal.Normal"
                },
                "_min_std_param": {
                  "$type": "torch.Tensor"
                },
                "_max_std_param": "None",
                "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
              }
            },
            "_env_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_name": "GaussianMLPPolicy",
            "_obs_dim": 11.0,
            "_action_dim": 1.0,
            "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
          },
          "env": {
            "_env": {
              "env": {
                "env": {
                  "env": {
                    "env": {
                      "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                      "model": "<mujoco._structs.MjModel object at 0x7f1bfc814530>",
                      "data": "<mujoco._structs.MjData object at 0x7f1bfc8145b0>",
                      "init_qpos": "array([0., 0., 0.])",
                      "init_qvel": "array([0., 0., 0.])",
                      "_viewers": {},
                      "frame_skip": 5,
                      "viewer": "None",
                      "observation_space": {
                        "dtype": "dtype('float64')",
                        "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "_shape": [
                          11
                        ],
                        "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                        "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                        "low_repr": "-inf",
                        "high_repr": "inf",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "action_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True])",
                        "bounded_above": "array([ True])",
                        "_shape": [
                          1
                        ],
                        "low": "array([-1.], dtype=float32)",
                        "high": "array([1.], dtype=float32)",
                        "low_repr": "-1.0",
                        "high_repr": "1.0",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "render_mode": "None",
                      "renderer": {
                        "no_returns_render": [
                          "human"
                        ],
                        "single_render": [
                          "single_depth_array",
                          "single_rgb_array",
                          "single_state_pixels"
                        ],
                        "mode": "None",
                        "render": {
                          "$type": "functools.partial"
                        },
                        "render_list": [],
                        "$type": "gym.utils.renderer.Renderer"
                      },
                      "_ezpickle_args": [],
                      "_ezpickle_kwargs": {},
                      "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                    },
                    "_action_space": "None",
                    "_observation_space": "None",
                    "_reward_range": "None",
                    "_metadata": "None",
                    "new_step_api": true,
                    "checked_reset": false,
                    "checked_step": false,
                    "checked_render": false,
                    "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": false,
                  "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "_has_reset": false,
                "_disable_render_order_enforcing": false,
                "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "_max_episode_steps": 1000,
              "_elapsed_steps": "None",
              "$type": "gym.wrappers.time_limit.TimeLimit"
            },
            "_max_episode_length": 1000,
            "_render_modes": [
              "human",
              "rgb_array",
              "depth_array",
              "single_rgb_array",
              "single_depth_array"
            ],
            "_step_cnt": "None",
            "_visualize": false,
            "_action_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_env_info": "None",
            "$type": "garage.envs.gym_env.GymEnv"
          },
          "_env_steps": [],
          "_observations": [],
          "_last_observations": [],
          "_agent_infos": {},
          "_lengths": [],
          "_prev_obs": "None",
          "_eps_length": 0,
          "_episode_infos": {},
          "$type": "garage.sampler.default_worker.DefaultWorker"
        },
        {
          "_seed": "None",
          "_max_episode_length": 200,
          "_worker_number": 12,
          "agent": {
            "training": true,
            "_parameters": {},
            "_buffers": {},
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_module": {
                "training": true,
                "_parameters": {
                  "_init_std": {
                    "$type": "torch.nn.parameter.Parameter"
                  }
                },
                "_buffers": {
                  "min_std_param": {
                    "$type": "torch.Tensor"
                  }
                },
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_mean_module": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "_layers": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "0": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 11.0,
                                "out_features": 32,
                                "$type": "torch.nn.modules.linear.Linear"
                              },
                              "non_linearity": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                                "$type": "garage.torch._functions.NonLinearity"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          },
                          "1": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 32,
                                "out_features": 32,
                                "$type": "torch.nn.modules.linear.Linear"
                              },
                              "non_linearity": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                                "$type": "garage.torch._functions.NonLinearity"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          }
                        },
                        "$type": "torch.nn.modules.container.ModuleList"
                      },
                      "_output_layers": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "0": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 32,
                                "out_features": 1.0,
                                "$type": "torch.nn.modules.linear.Linear"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          }
                        },
                        "$type": "torch.nn.modules.container.ModuleList"
                      }
                    },
                    "_output_dim": 1.0,
                    "$type": "garage.torch.modules.mlp_module.MLPModule"
                  }
                },
                "_input_dim": 11.0,
                "_hidden_sizes": [
                  32,
                  32
                ],
                "_action_dim": 1.0,
                "_learn_std": true,
                "_std_hidden_sizes": [
                  32,
                  32
                ],
                "_min_std": 1e-06,
                "_max_std": "None",
                "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
                "_std_hidden_w_init": {
                  "$type": "builtins.function"
                },
                "_std_hidden_b_init": {
                  "$type": "builtins.function"
                },
                "_std_output_nonlinearity": "None",
                "_std_output_w_init": {
                  "$type": "builtins.function"
                },
                "_std_parameterization": "exp",
                "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
                "_hidden_w_init": {
                  "$type": "builtins.function"
                },
                "_hidden_b_init": {
                  "$type": "builtins.function"
                },
                "_output_nonlinearity": "None",
                "_output_w_init": {
                  "$type": "builtins.function"
                },
                "_output_b_init": {
                  "$type": "builtins.function"
                },
                "_layer_normalization": false,
                "_norm_dist_class": {
                  "$typename": "torch.distributions.normal.Normal"
                },
                "_min_std_param": {
                  "$type": "torch.Tensor"
                },
                "_max_std_param": "None",
                "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
              }
            },
            "_env_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_name": "GaussianMLPPolicy",
            "_obs_dim": 11.0,
            "_action_dim": 1.0,
            "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
          },
          "env": {
            "_env": {
              "env": {
                "env": {
                  "env": {
                    "env": {
                      "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                      "model": "<mujoco._structs.MjModel object at 0x7f1bfc91ba30>",
                      "data": "<mujoco._structs.MjData object at 0x7f1bfc91bab0>",
                      "init_qpos": "array([0., 0., 0.])",
                      "init_qvel": "array([0., 0., 0.])",
                      "_viewers": {},
                      "frame_skip": 5,
                      "viewer": "None",
                      "observation_space": {
                        "dtype": "dtype('float64')",
                        "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "_shape": [
                          11
                        ],
                        "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                        "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                        "low_repr": "-inf",
                        "high_repr": "inf",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "action_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True])",
                        "bounded_above": "array([ True])",
                        "_shape": [
                          1
                        ],
                        "low": "array([-1.], dtype=float32)",
                        "high": "array([1.], dtype=float32)",
                        "low_repr": "-1.0",
                        "high_repr": "1.0",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "render_mode": "None",
                      "renderer": {
                        "no_returns_render": [
                          "human"
                        ],
                        "single_render": [
                          "single_depth_array",
                          "single_rgb_array",
                          "single_state_pixels"
                        ],
                        "mode": "None",
                        "render": {
                          "$type": "functools.partial"
                        },
                        "render_list": [],
                        "$type": "gym.utils.renderer.Renderer"
                      },
                      "_ezpickle_args": [],
                      "_ezpickle_kwargs": {},
                      "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                    },
                    "_action_space": "None",
                    "_observation_space": "None",
                    "_reward_range": "None",
                    "_metadata": "None",
                    "new_step_api": true,
                    "checked_reset": false,
                    "checked_step": false,
                    "checked_render": false,
                    "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": false,
                  "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "_has_reset": false,
                "_disable_render_order_enforcing": false,
                "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "_max_episode_steps": 1000,
              "_elapsed_steps": "None",
              "$type": "gym.wrappers.time_limit.TimeLimit"
            },
            "_max_episode_length": 1000,
            "_render_modes": [
              "human",
              "rgb_array",
              "depth_array",
              "single_rgb_array",
              "single_depth_array"
            ],
            "_step_cnt": "None",
            "_visualize": false,
            "_action_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_env_info": "None",
            "$type": "garage.envs.gym_env.GymEnv"
          },
          "_env_steps": [],
          "_observations": [],
          "_last_observations": [],
          "_agent_infos": {},
          "_lengths": [],
          "_prev_obs": "None",
          "_eps_length": 0,
          "_episode_infos": {},
          "$type": "garage.sampler.default_worker.DefaultWorker"
        },
        {
          "_seed": "None",
          "_max_episode_length": 200,
          "_worker_number": 13,
          "agent": {
            "training": true,
            "_parameters": {},
            "_buffers": {},
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_module": {
                "training": true,
                "_parameters": {
                  "_init_std": {
                    "$type": "torch.nn.parameter.Parameter"
                  }
                },
                "_buffers": {
                  "min_std_param": {
                    "$type": "torch.Tensor"
                  }
                },
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_mean_module": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "_layers": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "0": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 11.0,
                                "out_features": 32,
                                "$type": "torch.nn.modules.linear.Linear"
                              },
                              "non_linearity": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                                "$type": "garage.torch._functions.NonLinearity"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          },
                          "1": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 32,
                                "out_features": 32,
                                "$type": "torch.nn.modules.linear.Linear"
                              },
                              "non_linearity": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                                "$type": "garage.torch._functions.NonLinearity"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          }
                        },
                        "$type": "torch.nn.modules.container.ModuleList"
                      },
                      "_output_layers": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "0": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 32,
                                "out_features": 1.0,
                                "$type": "torch.nn.modules.linear.Linear"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          }
                        },
                        "$type": "torch.nn.modules.container.ModuleList"
                      }
                    },
                    "_output_dim": 1.0,
                    "$type": "garage.torch.modules.mlp_module.MLPModule"
                  }
                },
                "_input_dim": 11.0,
                "_hidden_sizes": [
                  32,
                  32
                ],
                "_action_dim": 1.0,
                "_learn_std": true,
                "_std_hidden_sizes": [
                  32,
                  32
                ],
                "_min_std": 1e-06,
                "_max_std": "None",
                "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
                "_std_hidden_w_init": {
                  "$type": "builtins.function"
                },
                "_std_hidden_b_init": {
                  "$type": "builtins.function"
                },
                "_std_output_nonlinearity": "None",
                "_std_output_w_init": {
                  "$type": "builtins.function"
                },
                "_std_parameterization": "exp",
                "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
                "_hidden_w_init": {
                  "$type": "builtins.function"
                },
                "_hidden_b_init": {
                  "$type": "builtins.function"
                },
                "_output_nonlinearity": "None",
                "_output_w_init": {
                  "$type": "builtins.function"
                },
                "_output_b_init": {
                  "$type": "builtins.function"
                },
                "_layer_normalization": false,
                "_norm_dist_class": {
                  "$typename": "torch.distributions.normal.Normal"
                },
                "_min_std_param": {
                  "$type": "torch.Tensor"
                },
                "_max_std_param": "None",
                "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
              }
            },
            "_env_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_name": "GaussianMLPPolicy",
            "_obs_dim": 11.0,
            "_action_dim": 1.0,
            "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
          },
          "env": {
            "_env": {
              "env": {
                "env": {
                  "env": {
                    "env": {
                      "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                      "model": "<mujoco._structs.MjModel object at 0x7f1bfca011b0>",
                      "data": "<mujoco._structs.MjData object at 0x7f1bfd313b70>",
                      "init_qpos": "array([0., 0., 0.])",
                      "init_qvel": "array([0., 0., 0.])",
                      "_viewers": {},
                      "frame_skip": 5,
                      "viewer": "None",
                      "observation_space": {
                        "dtype": "dtype('float64')",
                        "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "_shape": [
                          11
                        ],
                        "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                        "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                        "low_repr": "-inf",
                        "high_repr": "inf",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "action_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True])",
                        "bounded_above": "array([ True])",
                        "_shape": [
                          1
                        ],
                        "low": "array([-1.], dtype=float32)",
                        "high": "array([1.], dtype=float32)",
                        "low_repr": "-1.0",
                        "high_repr": "1.0",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "render_mode": "None",
                      "renderer": {
                        "no_returns_render": [
                          "human"
                        ],
                        "single_render": [
                          "single_depth_array",
                          "single_rgb_array",
                          "single_state_pixels"
                        ],
                        "mode": "None",
                        "render": {
                          "$type": "functools.partial"
                        },
                        "render_list": [],
                        "$type": "gym.utils.renderer.Renderer"
                      },
                      "_ezpickle_args": [],
                      "_ezpickle_kwargs": {},
                      "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                    },
                    "_action_space": "None",
                    "_observation_space": "None",
                    "_reward_range": "None",
                    "_metadata": "None",
                    "new_step_api": true,
                    "checked_reset": false,
                    "checked_step": false,
                    "checked_render": false,
                    "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": false,
                  "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "_has_reset": false,
                "_disable_render_order_enforcing": false,
                "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "_max_episode_steps": 1000,
              "_elapsed_steps": "None",
              "$type": "gym.wrappers.time_limit.TimeLimit"
            },
            "_max_episode_length": 1000,
            "_render_modes": [
              "human",
              "rgb_array",
              "depth_array",
              "single_rgb_array",
              "single_depth_array"
            ],
            "_step_cnt": "None",
            "_visualize": false,
            "_action_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_env_info": "None",
            "$type": "garage.envs.gym_env.GymEnv"
          },
          "_env_steps": [],
          "_observations": [],
          "_last_observations": [],
          "_agent_infos": {},
          "_lengths": [],
          "_prev_obs": "None",
          "_eps_length": 0,
          "_episode_infos": {},
          "$type": "garage.sampler.default_worker.DefaultWorker"
        },
        {
          "_seed": "None",
          "_max_episode_length": 200,
          "_worker_number": 14,
          "agent": {
            "training": true,
            "_parameters": {},
            "_buffers": {},
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_module": {
                "training": true,
                "_parameters": {
                  "_init_std": {
                    "$type": "torch.nn.parameter.Parameter"
                  }
                },
                "_buffers": {
                  "min_std_param": {
                    "$type": "torch.Tensor"
                  }
                },
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_mean_module": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "_layers": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "0": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 11.0,
                                "out_features": 32,
                                "$type": "torch.nn.modules.linear.Linear"
                              },
                              "non_linearity": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                                "$type": "garage.torch._functions.NonLinearity"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          },
                          "1": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 32,
                                "out_features": 32,
                                "$type": "torch.nn.modules.linear.Linear"
                              },
                              "non_linearity": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                                "$type": "garage.torch._functions.NonLinearity"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          }
                        },
                        "$type": "torch.nn.modules.container.ModuleList"
                      },
                      "_output_layers": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "0": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 32,
                                "out_features": 1.0,
                                "$type": "torch.nn.modules.linear.Linear"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          }
                        },
                        "$type": "torch.nn.modules.container.ModuleList"
                      }
                    },
                    "_output_dim": 1.0,
                    "$type": "garage.torch.modules.mlp_module.MLPModule"
                  }
                },
                "_input_dim": 11.0,
                "_hidden_sizes": [
                  32,
                  32
                ],
                "_action_dim": 1.0,
                "_learn_std": true,
                "_std_hidden_sizes": [
                  32,
                  32
                ],
                "_min_std": 1e-06,
                "_max_std": "None",
                "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
                "_std_hidden_w_init": {
                  "$type": "builtins.function"
                },
                "_std_hidden_b_init": {
                  "$type": "builtins.function"
                },
                "_std_output_nonlinearity": "None",
                "_std_output_w_init": {
                  "$type": "builtins.function"
                },
                "_std_parameterization": "exp",
                "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
                "_hidden_w_init": {
                  "$type": "builtins.function"
                },
                "_hidden_b_init": {
                  "$type": "builtins.function"
                },
                "_output_nonlinearity": "None",
                "_output_w_init": {
                  "$type": "builtins.function"
                },
                "_output_b_init": {
                  "$type": "builtins.function"
                },
                "_layer_normalization": false,
                "_norm_dist_class": {
                  "$typename": "torch.distributions.normal.Normal"
                },
                "_min_std_param": {
                  "$type": "torch.Tensor"
                },
                "_max_std_param": "None",
                "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
              }
            },
            "_env_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_name": "GaussianMLPPolicy",
            "_obs_dim": 11.0,
            "_action_dim": 1.0,
            "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
          },
          "env": {
            "_env": {
              "env": {
                "env": {
                  "env": {
                    "env": {
                      "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                      "model": "<mujoco._structs.MjModel object at 0x7f1bfc7c8470>",
                      "data": "<mujoco._structs.MjData object at 0x7f1bfc7c84b0>",
                      "init_qpos": "array([0., 0., 0.])",
                      "init_qvel": "array([0., 0., 0.])",
                      "_viewers": {},
                      "frame_skip": 5,
                      "viewer": "None",
                      "observation_space": {
                        "dtype": "dtype('float64')",
                        "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "_shape": [
                          11
                        ],
                        "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                        "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                        "low_repr": "-inf",
                        "high_repr": "inf",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "action_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True])",
                        "bounded_above": "array([ True])",
                        "_shape": [
                          1
                        ],
                        "low": "array([-1.], dtype=float32)",
                        "high": "array([1.], dtype=float32)",
                        "low_repr": "-1.0",
                        "high_repr": "1.0",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "render_mode": "None",
                      "renderer": {
                        "no_returns_render": [
                          "human"
                        ],
                        "single_render": [
                          "single_depth_array",
                          "single_rgb_array",
                          "single_state_pixels"
                        ],
                        "mode": "None",
                        "render": {
                          "$type": "functools.partial"
                        },
                        "render_list": [],
                        "$type": "gym.utils.renderer.Renderer"
                      },
                      "_ezpickle_args": [],
                      "_ezpickle_kwargs": {},
                      "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                    },
                    "_action_space": "None",
                    "_observation_space": "None",
                    "_reward_range": "None",
                    "_metadata": "None",
                    "new_step_api": true,
                    "checked_reset": false,
                    "checked_step": false,
                    "checked_render": false,
                    "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": false,
                  "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "_has_reset": false,
                "_disable_render_order_enforcing": false,
                "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "_max_episode_steps": 1000,
              "_elapsed_steps": "None",
              "$type": "gym.wrappers.time_limit.TimeLimit"
            },
            "_max_episode_length": 1000,
            "_render_modes": [
              "human",
              "rgb_array",
              "depth_array",
              "single_rgb_array",
              "single_depth_array"
            ],
            "_step_cnt": "None",
            "_visualize": false,
            "_action_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_env_info": "None",
            "$type": "garage.envs.gym_env.GymEnv"
          },
          "_env_steps": [],
          "_observations": [],
          "_last_observations": [],
          "_agent_infos": {},
          "_lengths": [],
          "_prev_obs": "None",
          "_eps_length": 0,
          "_episode_infos": {},
          "$type": "garage.sampler.default_worker.DefaultWorker"
        },
        {
          "_seed": "None",
          "_max_episode_length": 200,
          "_worker_number": 15,
          "agent": {
            "training": true,
            "_parameters": {},
            "_buffers": {},
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_module": {
                "training": true,
                "_parameters": {
                  "_init_std": {
                    "$type": "torch.nn.parameter.Parameter"
                  }
                },
                "_buffers": {
                  "min_std_param": {
                    "$type": "torch.Tensor"
                  }
                },
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_mean_module": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "_layers": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "0": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 11.0,
                                "out_features": 32,
                                "$type": "torch.nn.modules.linear.Linear"
                              },
                              "non_linearity": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                                "$type": "garage.torch._functions.NonLinearity"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          },
                          "1": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 32,
                                "out_features": 32,
                                "$type": "torch.nn.modules.linear.Linear"
                              },
                              "non_linearity": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                                "$type": "garage.torch._functions.NonLinearity"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          }
                        },
                        "$type": "torch.nn.modules.container.ModuleList"
                      },
                      "_output_layers": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "0": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 32,
                                "out_features": 1.0,
                                "$type": "torch.nn.modules.linear.Linear"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          }
                        },
                        "$type": "torch.nn.modules.container.ModuleList"
                      }
                    },
                    "_output_dim": 1.0,
                    "$type": "garage.torch.modules.mlp_module.MLPModule"
                  }
                },
                "_input_dim": 11.0,
                "_hidden_sizes": [
                  32,
                  32
                ],
                "_action_dim": 1.0,
                "_learn_std": true,
                "_std_hidden_sizes": [
                  32,
                  32
                ],
                "_min_std": 1e-06,
                "_max_std": "None",
                "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
                "_std_hidden_w_init": {
                  "$type": "builtins.function"
                },
                "_std_hidden_b_init": {
                  "$type": "builtins.function"
                },
                "_std_output_nonlinearity": "None",
                "_std_output_w_init": {
                  "$type": "builtins.function"
                },
                "_std_parameterization": "exp",
                "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
                "_hidden_w_init": {
                  "$type": "builtins.function"
                },
                "_hidden_b_init": {
                  "$type": "builtins.function"
                },
                "_output_nonlinearity": "None",
                "_output_w_init": {
                  "$type": "builtins.function"
                },
                "_output_b_init": {
                  "$type": "builtins.function"
                },
                "_layer_normalization": false,
                "_norm_dist_class": {
                  "$typename": "torch.distributions.normal.Normal"
                },
                "_min_std_param": {
                  "$type": "torch.Tensor"
                },
                "_max_std_param": "None",
                "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
              }
            },
            "_env_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_name": "GaussianMLPPolicy",
            "_obs_dim": 11.0,
            "_action_dim": 1.0,
            "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
          },
          "env": {
            "_env": {
              "env": {
                "env": {
                  "env": {
                    "env": {
                      "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                      "model": "<mujoco._structs.MjModel object at 0x7f1bfc7c8c30>",
                      "data": "<mujoco._structs.MjData object at 0x7f1bfc7c8c70>",
                      "init_qpos": "array([0., 0., 0.])",
                      "init_qvel": "array([0., 0., 0.])",
                      "_viewers": {},
                      "frame_skip": 5,
                      "viewer": "None",
                      "observation_space": {
                        "dtype": "dtype('float64')",
                        "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "_shape": [
                          11
                        ],
                        "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                        "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                        "low_repr": "-inf",
                        "high_repr": "inf",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "action_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True])",
                        "bounded_above": "array([ True])",
                        "_shape": [
                          1
                        ],
                        "low": "array([-1.], dtype=float32)",
                        "high": "array([1.], dtype=float32)",
                        "low_repr": "-1.0",
                        "high_repr": "1.0",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "render_mode": "None",
                      "renderer": {
                        "no_returns_render": [
                          "human"
                        ],
                        "single_render": [
                          "single_depth_array",
                          "single_rgb_array",
                          "single_state_pixels"
                        ],
                        "mode": "None",
                        "render": {
                          "$type": "functools.partial"
                        },
                        "render_list": [],
                        "$type": "gym.utils.renderer.Renderer"
                      },
                      "_ezpickle_args": [],
                      "_ezpickle_kwargs": {},
                      "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                    },
                    "_action_space": "None",
                    "_observation_space": "None",
                    "_reward_range": "None",
                    "_metadata": "None",
                    "new_step_api": true,
                    "checked_reset": false,
                    "checked_step": false,
                    "checked_render": false,
                    "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": false,
                  "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "_has_reset": false,
                "_disable_render_order_enforcing": false,
                "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "_max_episode_steps": 1000,
              "_elapsed_steps": "None",
              "$type": "gym.wrappers.time_limit.TimeLimit"
            },
            "_max_episode_length": 1000,
            "_render_modes": [
              "human",
              "rgb_array",
              "depth_array",
              "single_rgb_array",
              "single_depth_array"
            ],
            "_step_cnt": "None",
            "_visualize": false,
            "_action_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_env_info": "None",
            "$type": "garage.envs.gym_env.GymEnv"
          },
          "_env_steps": [],
          "_observations": [],
          "_last_observations": [],
          "_agent_infos": {},
          "_lengths": [],
          "_prev_obs": "None",
          "_eps_length": 0,
          "_episode_infos": {},
          "$type": "garage.sampler.default_worker.DefaultWorker"
        },
        {
          "_seed": "None",
          "_max_episode_length": 200,
          "_worker_number": 16,
          "agent": {
            "training": true,
            "_parameters": {},
            "_buffers": {},
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_module": {
                "training": true,
                "_parameters": {
                  "_init_std": {
                    "$type": "torch.nn.parameter.Parameter"
                  }
                },
                "_buffers": {
                  "min_std_param": {
                    "$type": "torch.Tensor"
                  }
                },
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_mean_module": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "_layers": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "0": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 11.0,
                                "out_features": 32,
                                "$type": "torch.nn.modules.linear.Linear"
                              },
                              "non_linearity": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                                "$type": "garage.torch._functions.NonLinearity"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          },
                          "1": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 32,
                                "out_features": 32,
                                "$type": "torch.nn.modules.linear.Linear"
                              },
                              "non_linearity": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                                "$type": "garage.torch._functions.NonLinearity"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          }
                        },
                        "$type": "torch.nn.modules.container.ModuleList"
                      },
                      "_output_layers": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "0": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 32,
                                "out_features": 1.0,
                                "$type": "torch.nn.modules.linear.Linear"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          }
                        },
                        "$type": "torch.nn.modules.container.ModuleList"
                      }
                    },
                    "_output_dim": 1.0,
                    "$type": "garage.torch.modules.mlp_module.MLPModule"
                  }
                },
                "_input_dim": 11.0,
                "_hidden_sizes": [
                  32,
                  32
                ],
                "_action_dim": 1.0,
                "_learn_std": true,
                "_std_hidden_sizes": [
                  32,
                  32
                ],
                "_min_std": 1e-06,
                "_max_std": "None",
                "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
                "_std_hidden_w_init": {
                  "$type": "builtins.function"
                },
                "_std_hidden_b_init": {
                  "$type": "builtins.function"
                },
                "_std_output_nonlinearity": "None",
                "_std_output_w_init": {
                  "$type": "builtins.function"
                },
                "_std_parameterization": "exp",
                "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
                "_hidden_w_init": {
                  "$type": "builtins.function"
                },
                "_hidden_b_init": {
                  "$type": "builtins.function"
                },
                "_output_nonlinearity": "None",
                "_output_w_init": {
                  "$type": "builtins.function"
                },
                "_output_b_init": {
                  "$type": "builtins.function"
                },
                "_layer_normalization": false,
                "_norm_dist_class": {
                  "$typename": "torch.distributions.normal.Normal"
                },
                "_min_std_param": {
                  "$type": "torch.Tensor"
                },
                "_max_std_param": "None",
                "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
              }
            },
            "_env_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_name": "GaussianMLPPolicy",
            "_obs_dim": 11.0,
            "_action_dim": 1.0,
            "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
          },
          "env": {
            "_env": {
              "env": {
                "env": {
                  "env": {
                    "env": {
                      "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                      "model": "<mujoco._structs.MjModel object at 0x7f1bfc9156b0>",
                      "data": "<mujoco._structs.MjData object at 0x7f1bfc9156f0>",
                      "init_qpos": "array([0., 0., 0.])",
                      "init_qvel": "array([0., 0., 0.])",
                      "_viewers": {},
                      "frame_skip": 5,
                      "viewer": "None",
                      "observation_space": {
                        "dtype": "dtype('float64')",
                        "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "_shape": [
                          11
                        ],
                        "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                        "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                        "low_repr": "-inf",
                        "high_repr": "inf",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "action_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True])",
                        "bounded_above": "array([ True])",
                        "_shape": [
                          1
                        ],
                        "low": "array([-1.], dtype=float32)",
                        "high": "array([1.], dtype=float32)",
                        "low_repr": "-1.0",
                        "high_repr": "1.0",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "render_mode": "None",
                      "renderer": {
                        "no_returns_render": [
                          "human"
                        ],
                        "single_render": [
                          "single_depth_array",
                          "single_rgb_array",
                          "single_state_pixels"
                        ],
                        "mode": "None",
                        "render": {
                          "$type": "functools.partial"
                        },
                        "render_list": [],
                        "$type": "gym.utils.renderer.Renderer"
                      },
                      "_ezpickle_args": [],
                      "_ezpickle_kwargs": {},
                      "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                    },
                    "_action_space": "None",
                    "_observation_space": "None",
                    "_reward_range": "None",
                    "_metadata": "None",
                    "new_step_api": true,
                    "checked_reset": false,
                    "checked_step": false,
                    "checked_render": false,
                    "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": false,
                  "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "_has_reset": false,
                "_disable_render_order_enforcing": false,
                "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "_max_episode_steps": 1000,
              "_elapsed_steps": "None",
              "$type": "gym.wrappers.time_limit.TimeLimit"
            },
            "_max_episode_length": 1000,
            "_render_modes": [
              "human",
              "rgb_array",
              "depth_array",
              "single_rgb_array",
              "single_depth_array"
            ],
            "_step_cnt": "None",
            "_visualize": false,
            "_action_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_env_info": "None",
            "$type": "garage.envs.gym_env.GymEnv"
          },
          "_env_steps": [],
          "_observations": [],
          "_last_observations": [],
          "_agent_infos": {},
          "_lengths": [],
          "_prev_obs": "None",
          "_eps_length": 0,
          "_episode_infos": {},
          "$type": "garage.sampler.default_worker.DefaultWorker"
        },
        {
          "_seed": "None",
          "_max_episode_length": 200,
          "_worker_number": 17,
          "agent": {
            "training": true,
            "_parameters": {},
            "_buffers": {},
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_module": {
                "training": true,
                "_parameters": {
                  "_init_std": {
                    "$type": "torch.nn.parameter.Parameter"
                  }
                },
                "_buffers": {
                  "min_std_param": {
                    "$type": "torch.Tensor"
                  }
                },
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_mean_module": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "_layers": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "0": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 11.0,
                                "out_features": 32,
                                "$type": "torch.nn.modules.linear.Linear"
                              },
                              "non_linearity": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                                "$type": "garage.torch._functions.NonLinearity"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          },
                          "1": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 32,
                                "out_features": 32,
                                "$type": "torch.nn.modules.linear.Linear"
                              },
                              "non_linearity": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                                "$type": "garage.torch._functions.NonLinearity"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          }
                        },
                        "$type": "torch.nn.modules.container.ModuleList"
                      },
                      "_output_layers": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "0": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 32,
                                "out_features": 1.0,
                                "$type": "torch.nn.modules.linear.Linear"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          }
                        },
                        "$type": "torch.nn.modules.container.ModuleList"
                      }
                    },
                    "_output_dim": 1.0,
                    "$type": "garage.torch.modules.mlp_module.MLPModule"
                  }
                },
                "_input_dim": 11.0,
                "_hidden_sizes": [
                  32,
                  32
                ],
                "_action_dim": 1.0,
                "_learn_std": true,
                "_std_hidden_sizes": [
                  32,
                  32
                ],
                "_min_std": 1e-06,
                "_max_std": "None",
                "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
                "_std_hidden_w_init": {
                  "$type": "builtins.function"
                },
                "_std_hidden_b_init": {
                  "$type": "builtins.function"
                },
                "_std_output_nonlinearity": "None",
                "_std_output_w_init": {
                  "$type": "builtins.function"
                },
                "_std_parameterization": "exp",
                "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
                "_hidden_w_init": {
                  "$type": "builtins.function"
                },
                "_hidden_b_init": {
                  "$type": "builtins.function"
                },
                "_output_nonlinearity": "None",
                "_output_w_init": {
                  "$type": "builtins.function"
                },
                "_output_b_init": {
                  "$type": "builtins.function"
                },
                "_layer_normalization": false,
                "_norm_dist_class": {
                  "$typename": "torch.distributions.normal.Normal"
                },
                "_min_std_param": {
                  "$type": "torch.Tensor"
                },
                "_max_std_param": "None",
                "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
              }
            },
            "_env_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_name": "GaussianMLPPolicy",
            "_obs_dim": 11.0,
            "_action_dim": 1.0,
            "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
          },
          "env": {
            "_env": {
              "env": {
                "env": {
                  "env": {
                    "env": {
                      "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                      "model": "<mujoco._structs.MjModel object at 0x7f1bfc79a1b0>",
                      "data": "<mujoco._structs.MjData object at 0x7f1bfc79a1f0>",
                      "init_qpos": "array([0., 0., 0.])",
                      "init_qvel": "array([0., 0., 0.])",
                      "_viewers": {},
                      "frame_skip": 5,
                      "viewer": "None",
                      "observation_space": {
                        "dtype": "dtype('float64')",
                        "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "_shape": [
                          11
                        ],
                        "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                        "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                        "low_repr": "-inf",
                        "high_repr": "inf",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "action_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True])",
                        "bounded_above": "array([ True])",
                        "_shape": [
                          1
                        ],
                        "low": "array([-1.], dtype=float32)",
                        "high": "array([1.], dtype=float32)",
                        "low_repr": "-1.0",
                        "high_repr": "1.0",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "render_mode": "None",
                      "renderer": {
                        "no_returns_render": [
                          "human"
                        ],
                        "single_render": [
                          "single_depth_array",
                          "single_rgb_array",
                          "single_state_pixels"
                        ],
                        "mode": "None",
                        "render": {
                          "$type": "functools.partial"
                        },
                        "render_list": [],
                        "$type": "gym.utils.renderer.Renderer"
                      },
                      "_ezpickle_args": [],
                      "_ezpickle_kwargs": {},
                      "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                    },
                    "_action_space": "None",
                    "_observation_space": "None",
                    "_reward_range": "None",
                    "_metadata": "None",
                    "new_step_api": true,
                    "checked_reset": false,
                    "checked_step": false,
                    "checked_render": false,
                    "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": false,
                  "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "_has_reset": false,
                "_disable_render_order_enforcing": false,
                "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "_max_episode_steps": 1000,
              "_elapsed_steps": "None",
              "$type": "gym.wrappers.time_limit.TimeLimit"
            },
            "_max_episode_length": 1000,
            "_render_modes": [
              "human",
              "rgb_array",
              "depth_array",
              "single_rgb_array",
              "single_depth_array"
            ],
            "_step_cnt": "None",
            "_visualize": false,
            "_action_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_env_info": "None",
            "$type": "garage.envs.gym_env.GymEnv"
          },
          "_env_steps": [],
          "_observations": [],
          "_last_observations": [],
          "_agent_infos": {},
          "_lengths": [],
          "_prev_obs": "None",
          "_eps_length": 0,
          "_episode_infos": {},
          "$type": "garage.sampler.default_worker.DefaultWorker"
        },
        {
          "_seed": "None",
          "_max_episode_length": 200,
          "_worker_number": 18,
          "agent": {
            "training": true,
            "_parameters": {},
            "_buffers": {},
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_module": {
                "training": true,
                "_parameters": {
                  "_init_std": {
                    "$type": "torch.nn.parameter.Parameter"
                  }
                },
                "_buffers": {
                  "min_std_param": {
                    "$type": "torch.Tensor"
                  }
                },
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_mean_module": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "_layers": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "0": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 11.0,
                                "out_features": 32,
                                "$type": "torch.nn.modules.linear.Linear"
                              },
                              "non_linearity": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                                "$type": "garage.torch._functions.NonLinearity"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          },
                          "1": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 32,
                                "out_features": 32,
                                "$type": "torch.nn.modules.linear.Linear"
                              },
                              "non_linearity": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                                "$type": "garage.torch._functions.NonLinearity"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          }
                        },
                        "$type": "torch.nn.modules.container.ModuleList"
                      },
                      "_output_layers": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "0": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 32,
                                "out_features": 1.0,
                                "$type": "torch.nn.modules.linear.Linear"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          }
                        },
                        "$type": "torch.nn.modules.container.ModuleList"
                      }
                    },
                    "_output_dim": 1.0,
                    "$type": "garage.torch.modules.mlp_module.MLPModule"
                  }
                },
                "_input_dim": 11.0,
                "_hidden_sizes": [
                  32,
                  32
                ],
                "_action_dim": 1.0,
                "_learn_std": true,
                "_std_hidden_sizes": [
                  32,
                  32
                ],
                "_min_std": 1e-06,
                "_max_std": "None",
                "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
                "_std_hidden_w_init": {
                  "$type": "builtins.function"
                },
                "_std_hidden_b_init": {
                  "$type": "builtins.function"
                },
                "_std_output_nonlinearity": "None",
                "_std_output_w_init": {
                  "$type": "builtins.function"
                },
                "_std_parameterization": "exp",
                "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
                "_hidden_w_init": {
                  "$type": "builtins.function"
                },
                "_hidden_b_init": {
                  "$type": "builtins.function"
                },
                "_output_nonlinearity": "None",
                "_output_w_init": {
                  "$type": "builtins.function"
                },
                "_output_b_init": {
                  "$type": "builtins.function"
                },
                "_layer_normalization": false,
                "_norm_dist_class": {
                  "$typename": "torch.distributions.normal.Normal"
                },
                "_min_std_param": {
                  "$type": "torch.Tensor"
                },
                "_max_std_param": "None",
                "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
              }
            },
            "_env_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_name": "GaussianMLPPolicy",
            "_obs_dim": 11.0,
            "_action_dim": 1.0,
            "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
          },
          "env": {
            "_env": {
              "env": {
                "env": {
                  "env": {
                    "env": {
                      "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                      "model": "<mujoco._structs.MjModel object at 0x7f1bfc79ac70>",
                      "data": "<mujoco._structs.MjData object at 0x7f1bfc79acb0>",
                      "init_qpos": "array([0., 0., 0.])",
                      "init_qvel": "array([0., 0., 0.])",
                      "_viewers": {},
                      "frame_skip": 5,
                      "viewer": "None",
                      "observation_space": {
                        "dtype": "dtype('float64')",
                        "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "_shape": [
                          11
                        ],
                        "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                        "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                        "low_repr": "-inf",
                        "high_repr": "inf",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "action_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True])",
                        "bounded_above": "array([ True])",
                        "_shape": [
                          1
                        ],
                        "low": "array([-1.], dtype=float32)",
                        "high": "array([1.], dtype=float32)",
                        "low_repr": "-1.0",
                        "high_repr": "1.0",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "render_mode": "None",
                      "renderer": {
                        "no_returns_render": [
                          "human"
                        ],
                        "single_render": [
                          "single_depth_array",
                          "single_rgb_array",
                          "single_state_pixels"
                        ],
                        "mode": "None",
                        "render": {
                          "$type": "functools.partial"
                        },
                        "render_list": [],
                        "$type": "gym.utils.renderer.Renderer"
                      },
                      "_ezpickle_args": [],
                      "_ezpickle_kwargs": {},
                      "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                    },
                    "_action_space": "None",
                    "_observation_space": "None",
                    "_reward_range": "None",
                    "_metadata": "None",
                    "new_step_api": true,
                    "checked_reset": false,
                    "checked_step": false,
                    "checked_render": false,
                    "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": false,
                  "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "_has_reset": false,
                "_disable_render_order_enforcing": false,
                "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "_max_episode_steps": 1000,
              "_elapsed_steps": "None",
              "$type": "gym.wrappers.time_limit.TimeLimit"
            },
            "_max_episode_length": 1000,
            "_render_modes": [
              "human",
              "rgb_array",
              "depth_array",
              "single_rgb_array",
              "single_depth_array"
            ],
            "_step_cnt": "None",
            "_visualize": false,
            "_action_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_env_info": "None",
            "$type": "garage.envs.gym_env.GymEnv"
          },
          "_env_steps": [],
          "_observations": [],
          "_last_observations": [],
          "_agent_infos": {},
          "_lengths": [],
          "_prev_obs": "None",
          "_eps_length": 0,
          "_episode_infos": {},
          "$type": "garage.sampler.default_worker.DefaultWorker"
        },
        {
          "_seed": "None",
          "_max_episode_length": 200,
          "_worker_number": 19,
          "agent": {
            "training": true,
            "_parameters": {},
            "_buffers": {},
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_module": {
                "training": true,
                "_parameters": {
                  "_init_std": {
                    "$type": "torch.nn.parameter.Parameter"
                  }
                },
                "_buffers": {
                  "min_std_param": {
                    "$type": "torch.Tensor"
                  }
                },
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_mean_module": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "_layers": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "0": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 11.0,
                                "out_features": 32,
                                "$type": "torch.nn.modules.linear.Linear"
                              },
                              "non_linearity": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                                "$type": "garage.torch._functions.NonLinearity"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          },
                          "1": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 32,
                                "out_features": 32,
                                "$type": "torch.nn.modules.linear.Linear"
                              },
                              "non_linearity": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                                "$type": "garage.torch._functions.NonLinearity"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          }
                        },
                        "$type": "torch.nn.modules.container.ModuleList"
                      },
                      "_output_layers": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "0": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 32,
                                "out_features": 1.0,
                                "$type": "torch.nn.modules.linear.Linear"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          }
                        },
                        "$type": "torch.nn.modules.container.ModuleList"
                      }
                    },
                    "_output_dim": 1.0,
                    "$type": "garage.torch.modules.mlp_module.MLPModule"
                  }
                },
                "_input_dim": 11.0,
                "_hidden_sizes": [
                  32,
                  32
                ],
                "_action_dim": 1.0,
                "_learn_std": true,
                "_std_hidden_sizes": [
                  32,
                  32
                ],
                "_min_std": 1e-06,
                "_max_std": "None",
                "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
                "_std_hidden_w_init": {
                  "$type": "builtins.function"
                },
                "_std_hidden_b_init": {
                  "$type": "builtins.function"
                },
                "_std_output_nonlinearity": "None",
                "_std_output_w_init": {
                  "$type": "builtins.function"
                },
                "_std_parameterization": "exp",
                "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
                "_hidden_w_init": {
                  "$type": "builtins.function"
                },
                "_hidden_b_init": {
                  "$type": "builtins.function"
                },
                "_output_nonlinearity": "None",
                "_output_w_init": {
                  "$type": "builtins.function"
                },
                "_output_b_init": {
                  "$type": "builtins.function"
                },
                "_layer_normalization": false,
                "_norm_dist_class": {
                  "$typename": "torch.distributions.normal.Normal"
                },
                "_min_std_param": {
                  "$type": "torch.Tensor"
                },
                "_max_std_param": "None",
                "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
              }
            },
            "_env_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_name": "GaussianMLPPolicy",
            "_obs_dim": 11.0,
            "_action_dim": 1.0,
            "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
          },
          "env": {
            "_env": {
              "env": {
                "env": {
                  "env": {
                    "env": {
                      "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                      "model": "<mujoco._structs.MjModel object at 0x7f1bfc769770>",
                      "data": "<mujoco._structs.MjData object at 0x7f1bfc7697b0>",
                      "init_qpos": "array([0., 0., 0.])",
                      "init_qvel": "array([0., 0., 0.])",
                      "_viewers": {},
                      "frame_skip": 5,
                      "viewer": "None",
                      "observation_space": {
                        "dtype": "dtype('float64')",
                        "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "_shape": [
                          11
                        ],
                        "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                        "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                        "low_repr": "-inf",
                        "high_repr": "inf",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "action_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True])",
                        "bounded_above": "array([ True])",
                        "_shape": [
                          1
                        ],
                        "low": "array([-1.], dtype=float32)",
                        "high": "array([1.], dtype=float32)",
                        "low_repr": "-1.0",
                        "high_repr": "1.0",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "render_mode": "None",
                      "renderer": {
                        "no_returns_render": [
                          "human"
                        ],
                        "single_render": [
                          "single_depth_array",
                          "single_rgb_array",
                          "single_state_pixels"
                        ],
                        "mode": "None",
                        "render": {
                          "$type": "functools.partial"
                        },
                        "render_list": [],
                        "$type": "gym.utils.renderer.Renderer"
                      },
                      "_ezpickle_args": [],
                      "_ezpickle_kwargs": {},
                      "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                    },
                    "_action_space": "None",
                    "_observation_space": "None",
                    "_reward_range": "None",
                    "_metadata": "None",
                    "new_step_api": true,
                    "checked_reset": false,
                    "checked_step": false,
                    "checked_render": false,
                    "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": false,
                  "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "_has_reset": false,
                "_disable_render_order_enforcing": false,
                "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "_max_episode_steps": 1000,
              "_elapsed_steps": "None",
              "$type": "gym.wrappers.time_limit.TimeLimit"
            },
            "_max_episode_length": 1000,
            "_render_modes": [
              "human",
              "rgb_array",
              "depth_array",
              "single_rgb_array",
              "single_depth_array"
            ],
            "_step_cnt": "None",
            "_visualize": false,
            "_action_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_env_info": "None",
            "$type": "garage.envs.gym_env.GymEnv"
          },
          "_env_steps": [],
          "_observations": [],
          "_last_observations": [],
          "_agent_infos": {},
          "_lengths": [],
          "_prev_obs": "None",
          "_eps_length": 0,
          "_episode_infos": {},
          "$type": "garage.sampler.default_worker.DefaultWorker"
        },
        {
          "_seed": "None",
          "_max_episode_length": 200,
          "_worker_number": 20,
          "agent": {
            "training": true,
            "_parameters": {},
            "_buffers": {},
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_module": {
                "training": true,
                "_parameters": {
                  "_init_std": {
                    "$type": "torch.nn.parameter.Parameter"
                  }
                },
                "_buffers": {
                  "min_std_param": {
                    "$type": "torch.Tensor"
                  }
                },
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_mean_module": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "_layers": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "0": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 11.0,
                                "out_features": 32,
                                "$type": "torch.nn.modules.linear.Linear"
                              },
                              "non_linearity": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                                "$type": "garage.torch._functions.NonLinearity"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          },
                          "1": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 32,
                                "out_features": 32,
                                "$type": "torch.nn.modules.linear.Linear"
                              },
                              "non_linearity": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                                "$type": "garage.torch._functions.NonLinearity"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          }
                        },
                        "$type": "torch.nn.modules.container.ModuleList"
                      },
                      "_output_layers": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "0": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 32,
                                "out_features": 1.0,
                                "$type": "torch.nn.modules.linear.Linear"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          }
                        },
                        "$type": "torch.nn.modules.container.ModuleList"
                      }
                    },
                    "_output_dim": 1.0,
                    "$type": "garage.torch.modules.mlp_module.MLPModule"
                  }
                },
                "_input_dim": 11.0,
                "_hidden_sizes": [
                  32,
                  32
                ],
                "_action_dim": 1.0,
                "_learn_std": true,
                "_std_hidden_sizes": [
                  32,
                  32
                ],
                "_min_std": 1e-06,
                "_max_std": "None",
                "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
                "_std_hidden_w_init": {
                  "$type": "builtins.function"
                },
                "_std_hidden_b_init": {
                  "$type": "builtins.function"
                },
                "_std_output_nonlinearity": "None",
                "_std_output_w_init": {
                  "$type": "builtins.function"
                },
                "_std_parameterization": "exp",
                "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
                "_hidden_w_init": {
                  "$type": "builtins.function"
                },
                "_hidden_b_init": {
                  "$type": "builtins.function"
                },
                "_output_nonlinearity": "None",
                "_output_w_init": {
                  "$type": "builtins.function"
                },
                "_output_b_init": {
                  "$type": "builtins.function"
                },
                "_layer_normalization": false,
                "_norm_dist_class": {
                  "$typename": "torch.distributions.normal.Normal"
                },
                "_min_std_param": {
                  "$type": "torch.Tensor"
                },
                "_max_std_param": "None",
                "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
              }
            },
            "_env_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_name": "GaussianMLPPolicy",
            "_obs_dim": 11.0,
            "_action_dim": 1.0,
            "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
          },
          "env": {
            "_env": {
              "env": {
                "env": {
                  "env": {
                    "env": {
                      "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                      "model": "<mujoco._structs.MjModel object at 0x7f1bfc6b4270>",
                      "data": "<mujoco._structs.MjData object at 0x7f1bfc6b42b0>",
                      "init_qpos": "array([0., 0., 0.])",
                      "init_qvel": "array([0., 0., 0.])",
                      "_viewers": {},
                      "frame_skip": 5,
                      "viewer": "None",
                      "observation_space": {
                        "dtype": "dtype('float64')",
                        "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "_shape": [
                          11
                        ],
                        "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                        "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                        "low_repr": "-inf",
                        "high_repr": "inf",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "action_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True])",
                        "bounded_above": "array([ True])",
                        "_shape": [
                          1
                        ],
                        "low": "array([-1.], dtype=float32)",
                        "high": "array([1.], dtype=float32)",
                        "low_repr": "-1.0",
                        "high_repr": "1.0",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "render_mode": "None",
                      "renderer": {
                        "no_returns_render": [
                          "human"
                        ],
                        "single_render": [
                          "single_depth_array",
                          "single_rgb_array",
                          "single_state_pixels"
                        ],
                        "mode": "None",
                        "render": {
                          "$type": "functools.partial"
                        },
                        "render_list": [],
                        "$type": "gym.utils.renderer.Renderer"
                      },
                      "_ezpickle_args": [],
                      "_ezpickle_kwargs": {},
                      "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                    },
                    "_action_space": "None",
                    "_observation_space": "None",
                    "_reward_range": "None",
                    "_metadata": "None",
                    "new_step_api": true,
                    "checked_reset": false,
                    "checked_step": false,
                    "checked_render": false,
                    "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": false,
                  "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "_has_reset": false,
                "_disable_render_order_enforcing": false,
                "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "_max_episode_steps": 1000,
              "_elapsed_steps": "None",
              "$type": "gym.wrappers.time_limit.TimeLimit"
            },
            "_max_episode_length": 1000,
            "_render_modes": [
              "human",
              "rgb_array",
              "depth_array",
              "single_rgb_array",
              "single_depth_array"
            ],
            "_step_cnt": "None",
            "_visualize": false,
            "_action_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_env_info": "None",
            "$type": "garage.envs.gym_env.GymEnv"
          },
          "_env_steps": [],
          "_observations": [],
          "_last_observations": [],
          "_agent_infos": {},
          "_lengths": [],
          "_prev_obs": "None",
          "_eps_length": 0,
          "_episode_infos": {},
          "$type": "garage.sampler.default_worker.DefaultWorker"
        },
        {
          "_seed": "None",
          "_max_episode_length": 200,
          "_worker_number": 21,
          "agent": {
            "training": true,
            "_parameters": {},
            "_buffers": {},
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_module": {
                "training": true,
                "_parameters": {
                  "_init_std": {
                    "$type": "torch.nn.parameter.Parameter"
                  }
                },
                "_buffers": {
                  "min_std_param": {
                    "$type": "torch.Tensor"
                  }
                },
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_mean_module": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "_layers": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "0": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 11.0,
                                "out_features": 32,
                                "$type": "torch.nn.modules.linear.Linear"
                              },
                              "non_linearity": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                                "$type": "garage.torch._functions.NonLinearity"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          },
                          "1": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 32,
                                "out_features": 32,
                                "$type": "torch.nn.modules.linear.Linear"
                              },
                              "non_linearity": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                                "$type": "garage.torch._functions.NonLinearity"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          }
                        },
                        "$type": "torch.nn.modules.container.ModuleList"
                      },
                      "_output_layers": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "0": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 32,
                                "out_features": 1.0,
                                "$type": "torch.nn.modules.linear.Linear"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          }
                        },
                        "$type": "torch.nn.modules.container.ModuleList"
                      }
                    },
                    "_output_dim": 1.0,
                    "$type": "garage.torch.modules.mlp_module.MLPModule"
                  }
                },
                "_input_dim": 11.0,
                "_hidden_sizes": [
                  32,
                  32
                ],
                "_action_dim": 1.0,
                "_learn_std": true,
                "_std_hidden_sizes": [
                  32,
                  32
                ],
                "_min_std": 1e-06,
                "_max_std": "None",
                "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
                "_std_hidden_w_init": {
                  "$type": "builtins.function"
                },
                "_std_hidden_b_init": {
                  "$type": "builtins.function"
                },
                "_std_output_nonlinearity": "None",
                "_std_output_w_init": {
                  "$type": "builtins.function"
                },
                "_std_parameterization": "exp",
                "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
                "_hidden_w_init": {
                  "$type": "builtins.function"
                },
                "_hidden_b_init": {
                  "$type": "builtins.function"
                },
                "_output_nonlinearity": "None",
                "_output_w_init": {
                  "$type": "builtins.function"
                },
                "_output_b_init": {
                  "$type": "builtins.function"
                },
                "_layer_normalization": false,
                "_norm_dist_class": {
                  "$typename": "torch.distributions.normal.Normal"
                },
                "_min_std_param": {
                  "$type": "torch.Tensor"
                },
                "_max_std_param": "None",
                "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
              }
            },
            "_env_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_name": "GaussianMLPPolicy",
            "_obs_dim": 11.0,
            "_action_dim": 1.0,
            "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
          },
          "env": {
            "_env": {
              "env": {
                "env": {
                  "env": {
                    "env": {
                      "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                      "model": "<mujoco._structs.MjModel object at 0x7f1bfc6b4d30>",
                      "data": "<mujoco._structs.MjData object at 0x7f1bfc6b4d70>",
                      "init_qpos": "array([0., 0., 0.])",
                      "init_qvel": "array([0., 0., 0.])",
                      "_viewers": {},
                      "frame_skip": 5,
                      "viewer": "None",
                      "observation_space": {
                        "dtype": "dtype('float64')",
                        "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "_shape": [
                          11
                        ],
                        "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                        "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                        "low_repr": "-inf",
                        "high_repr": "inf",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "action_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True])",
                        "bounded_above": "array([ True])",
                        "_shape": [
                          1
                        ],
                        "low": "array([-1.], dtype=float32)",
                        "high": "array([1.], dtype=float32)",
                        "low_repr": "-1.0",
                        "high_repr": "1.0",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "render_mode": "None",
                      "renderer": {
                        "no_returns_render": [
                          "human"
                        ],
                        "single_render": [
                          "single_depth_array",
                          "single_rgb_array",
                          "single_state_pixels"
                        ],
                        "mode": "None",
                        "render": {
                          "$type": "functools.partial"
                        },
                        "render_list": [],
                        "$type": "gym.utils.renderer.Renderer"
                      },
                      "_ezpickle_args": [],
                      "_ezpickle_kwargs": {},
                      "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                    },
                    "_action_space": "None",
                    "_observation_space": "None",
                    "_reward_range": "None",
                    "_metadata": "None",
                    "new_step_api": true,
                    "checked_reset": false,
                    "checked_step": false,
                    "checked_render": false,
                    "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": false,
                  "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "_has_reset": false,
                "_disable_render_order_enforcing": false,
                "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "_max_episode_steps": 1000,
              "_elapsed_steps": "None",
              "$type": "gym.wrappers.time_limit.TimeLimit"
            },
            "_max_episode_length": 1000,
            "_render_modes": [
              "human",
              "rgb_array",
              "depth_array",
              "single_rgb_array",
              "single_depth_array"
            ],
            "_step_cnt": "None",
            "_visualize": false,
            "_action_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_env_info": "None",
            "$type": "garage.envs.gym_env.GymEnv"
          },
          "_env_steps": [],
          "_observations": [],
          "_last_observations": [],
          "_agent_infos": {},
          "_lengths": [],
          "_prev_obs": "None",
          "_eps_length": 0,
          "_episode_infos": {},
          "$type": "garage.sampler.default_worker.DefaultWorker"
        },
        {
          "_seed": "None",
          "_max_episode_length": 200,
          "_worker_number": 22,
          "agent": {
            "training": true,
            "_parameters": {},
            "_buffers": {},
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_module": {
                "training": true,
                "_parameters": {
                  "_init_std": {
                    "$type": "torch.nn.parameter.Parameter"
                  }
                },
                "_buffers": {
                  "min_std_param": {
                    "$type": "torch.Tensor"
                  }
                },
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_mean_module": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "_layers": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "0": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 11.0,
                                "out_features": 32,
                                "$type": "torch.nn.modules.linear.Linear"
                              },
                              "non_linearity": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                                "$type": "garage.torch._functions.NonLinearity"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          },
                          "1": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 32,
                                "out_features": 32,
                                "$type": "torch.nn.modules.linear.Linear"
                              },
                              "non_linearity": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                                "$type": "garage.torch._functions.NonLinearity"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          }
                        },
                        "$type": "torch.nn.modules.container.ModuleList"
                      },
                      "_output_layers": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "0": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 32,
                                "out_features": 1.0,
                                "$type": "torch.nn.modules.linear.Linear"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          }
                        },
                        "$type": "torch.nn.modules.container.ModuleList"
                      }
                    },
                    "_output_dim": 1.0,
                    "$type": "garage.torch.modules.mlp_module.MLPModule"
                  }
                },
                "_input_dim": 11.0,
                "_hidden_sizes": [
                  32,
                  32
                ],
                "_action_dim": 1.0,
                "_learn_std": true,
                "_std_hidden_sizes": [
                  32,
                  32
                ],
                "_min_std": 1e-06,
                "_max_std": "None",
                "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
                "_std_hidden_w_init": {
                  "$type": "builtins.function"
                },
                "_std_hidden_b_init": {
                  "$type": "builtins.function"
                },
                "_std_output_nonlinearity": "None",
                "_std_output_w_init": {
                  "$type": "builtins.function"
                },
                "_std_parameterization": "exp",
                "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
                "_hidden_w_init": {
                  "$type": "builtins.function"
                },
                "_hidden_b_init": {
                  "$type": "builtins.function"
                },
                "_output_nonlinearity": "None",
                "_output_w_init": {
                  "$type": "builtins.function"
                },
                "_output_b_init": {
                  "$type": "builtins.function"
                },
                "_layer_normalization": false,
                "_norm_dist_class": {
                  "$typename": "torch.distributions.normal.Normal"
                },
                "_min_std_param": {
                  "$type": "torch.Tensor"
                },
                "_max_std_param": "None",
                "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
              }
            },
            "_env_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_name": "GaussianMLPPolicy",
            "_obs_dim": 11.0,
            "_action_dim": 1.0,
            "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
          },
          "env": {
            "_env": {
              "env": {
                "env": {
                  "env": {
                    "env": {
                      "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                      "model": "<mujoco._structs.MjModel object at 0x7f1bfc683830>",
                      "data": "<mujoco._structs.MjData object at 0x7f1bfc683870>",
                      "init_qpos": "array([0., 0., 0.])",
                      "init_qvel": "array([0., 0., 0.])",
                      "_viewers": {},
                      "frame_skip": 5,
                      "viewer": "None",
                      "observation_space": {
                        "dtype": "dtype('float64')",
                        "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "_shape": [
                          11
                        ],
                        "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                        "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                        "low_repr": "-inf",
                        "high_repr": "inf",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "action_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True])",
                        "bounded_above": "array([ True])",
                        "_shape": [
                          1
                        ],
                        "low": "array([-1.], dtype=float32)",
                        "high": "array([1.], dtype=float32)",
                        "low_repr": "-1.0",
                        "high_repr": "1.0",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "render_mode": "None",
                      "renderer": {
                        "no_returns_render": [
                          "human"
                        ],
                        "single_render": [
                          "single_depth_array",
                          "single_rgb_array",
                          "single_state_pixels"
                        ],
                        "mode": "None",
                        "render": {
                          "$type": "functools.partial"
                        },
                        "render_list": [],
                        "$type": "gym.utils.renderer.Renderer"
                      },
                      "_ezpickle_args": [],
                      "_ezpickle_kwargs": {},
                      "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                    },
                    "_action_space": "None",
                    "_observation_space": "None",
                    "_reward_range": "None",
                    "_metadata": "None",
                    "new_step_api": true,
                    "checked_reset": false,
                    "checked_step": false,
                    "checked_render": false,
                    "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": false,
                  "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "_has_reset": false,
                "_disable_render_order_enforcing": false,
                "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "_max_episode_steps": 1000,
              "_elapsed_steps": "None",
              "$type": "gym.wrappers.time_limit.TimeLimit"
            },
            "_max_episode_length": 1000,
            "_render_modes": [
              "human",
              "rgb_array",
              "depth_array",
              "single_rgb_array",
              "single_depth_array"
            ],
            "_step_cnt": "None",
            "_visualize": false,
            "_action_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_env_info": "None",
            "$type": "garage.envs.gym_env.GymEnv"
          },
          "_env_steps": [],
          "_observations": [],
          "_last_observations": [],
          "_agent_infos": {},
          "_lengths": [],
          "_prev_obs": "None",
          "_eps_length": 0,
          "_episode_infos": {},
          "$type": "garage.sampler.default_worker.DefaultWorker"
        },
        {
          "_seed": "None",
          "_max_episode_length": 200,
          "_worker_number": 23,
          "agent": {
            "training": true,
            "_parameters": {},
            "_buffers": {},
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_module": {
                "training": true,
                "_parameters": {
                  "_init_std": {
                    "$type": "torch.nn.parameter.Parameter"
                  }
                },
                "_buffers": {
                  "min_std_param": {
                    "$type": "torch.Tensor"
                  }
                },
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_mean_module": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "_layers": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "0": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 11.0,
                                "out_features": 32,
                                "$type": "torch.nn.modules.linear.Linear"
                              },
                              "non_linearity": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                                "$type": "garage.torch._functions.NonLinearity"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          },
                          "1": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 32,
                                "out_features": 32,
                                "$type": "torch.nn.modules.linear.Linear"
                              },
                              "non_linearity": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                                "$type": "garage.torch._functions.NonLinearity"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          }
                        },
                        "$type": "torch.nn.modules.container.ModuleList"
                      },
                      "_output_layers": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "0": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 32,
                                "out_features": 1.0,
                                "$type": "torch.nn.modules.linear.Linear"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          }
                        },
                        "$type": "torch.nn.modules.container.ModuleList"
                      }
                    },
                    "_output_dim": 1.0,
                    "$type": "garage.torch.modules.mlp_module.MLPModule"
                  }
                },
                "_input_dim": 11.0,
                "_hidden_sizes": [
                  32,
                  32
                ],
                "_action_dim": 1.0,
                "_learn_std": true,
                "_std_hidden_sizes": [
                  32,
                  32
                ],
                "_min_std": 1e-06,
                "_max_std": "None",
                "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
                "_std_hidden_w_init": {
                  "$type": "builtins.function"
                },
                "_std_hidden_b_init": {
                  "$type": "builtins.function"
                },
                "_std_output_nonlinearity": "None",
                "_std_output_w_init": {
                  "$type": "builtins.function"
                },
                "_std_parameterization": "exp",
                "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
                "_hidden_w_init": {
                  "$type": "builtins.function"
                },
                "_hidden_b_init": {
                  "$type": "builtins.function"
                },
                "_output_nonlinearity": "None",
                "_output_w_init": {
                  "$type": "builtins.function"
                },
                "_output_b_init": {
                  "$type": "builtins.function"
                },
                "_layer_normalization": false,
                "_norm_dist_class": {
                  "$typename": "torch.distributions.normal.Normal"
                },
                "_min_std_param": {
                  "$type": "torch.Tensor"
                },
                "_max_std_param": "None",
                "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
              }
            },
            "_env_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_name": "GaussianMLPPolicy",
            "_obs_dim": 11.0,
            "_action_dim": 1.0,
            "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
          },
          "env": {
            "_env": {
              "env": {
                "env": {
                  "env": {
                    "env": {
                      "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                      "model": "<mujoco._structs.MjModel object at 0x7f1bfc683070>",
                      "data": "<mujoco._structs.MjData object at 0x7f1bfc683630>",
                      "init_qpos": "array([0., 0., 0.])",
                      "init_qvel": "array([0., 0., 0.])",
                      "_viewers": {},
                      "frame_skip": 5,
                      "viewer": "None",
                      "observation_space": {
                        "dtype": "dtype('float64')",
                        "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "_shape": [
                          11
                        ],
                        "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                        "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                        "low_repr": "-inf",
                        "high_repr": "inf",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "action_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True])",
                        "bounded_above": "array([ True])",
                        "_shape": [
                          1
                        ],
                        "low": "array([-1.], dtype=float32)",
                        "high": "array([1.], dtype=float32)",
                        "low_repr": "-1.0",
                        "high_repr": "1.0",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "render_mode": "None",
                      "renderer": {
                        "no_returns_render": [
                          "human"
                        ],
                        "single_render": [
                          "single_depth_array",
                          "single_rgb_array",
                          "single_state_pixels"
                        ],
                        "mode": "None",
                        "render": {
                          "$type": "functools.partial"
                        },
                        "render_list": [],
                        "$type": "gym.utils.renderer.Renderer"
                      },
                      "_ezpickle_args": [],
                      "_ezpickle_kwargs": {},
                      "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                    },
                    "_action_space": "None",
                    "_observation_space": "None",
                    "_reward_range": "None",
                    "_metadata": "None",
                    "new_step_api": true,
                    "checked_reset": false,
                    "checked_step": false,
                    "checked_render": false,
                    "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": false,
                  "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "_has_reset": false,
                "_disable_render_order_enforcing": false,
                "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "_max_episode_steps": 1000,
              "_elapsed_steps": "None",
              "$type": "gym.wrappers.time_limit.TimeLimit"
            },
            "_max_episode_length": 1000,
            "_render_modes": [
              "human",
              "rgb_array",
              "depth_array",
              "single_rgb_array",
              "single_depth_array"
            ],
            "_step_cnt": "None",
            "_visualize": false,
            "_action_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_env_info": "None",
            "$type": "garage.envs.gym_env.GymEnv"
          },
          "_env_steps": [],
          "_observations": [],
          "_last_observations": [],
          "_agent_infos": {},
          "_lengths": [],
          "_prev_obs": "None",
          "_eps_length": 0,
          "_episode_infos": {},
          "$type": "garage.sampler.default_worker.DefaultWorker"
        },
        {
          "_seed": "None",
          "_max_episode_length": 200,
          "_worker_number": 24,
          "agent": {
            "training": true,
            "_parameters": {},
            "_buffers": {},
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_module": {
                "training": true,
                "_parameters": {
                  "_init_std": {
                    "$type": "torch.nn.parameter.Parameter"
                  }
                },
                "_buffers": {
                  "min_std_param": {
                    "$type": "torch.Tensor"
                  }
                },
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_mean_module": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "_layers": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "0": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 11.0,
                                "out_features": 32,
                                "$type": "torch.nn.modules.linear.Linear"
                              },
                              "non_linearity": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                                "$type": "garage.torch._functions.NonLinearity"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          },
                          "1": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 32,
                                "out_features": 32,
                                "$type": "torch.nn.modules.linear.Linear"
                              },
                              "non_linearity": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                                "$type": "garage.torch._functions.NonLinearity"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          }
                        },
                        "$type": "torch.nn.modules.container.ModuleList"
                      },
                      "_output_layers": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "0": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 32,
                                "out_features": 1.0,
                                "$type": "torch.nn.modules.linear.Linear"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          }
                        },
                        "$type": "torch.nn.modules.container.ModuleList"
                      }
                    },
                    "_output_dim": 1.0,
                    "$type": "garage.torch.modules.mlp_module.MLPModule"
                  }
                },
                "_input_dim": 11.0,
                "_hidden_sizes": [
                  32,
                  32
                ],
                "_action_dim": 1.0,
                "_learn_std": true,
                "_std_hidden_sizes": [
                  32,
                  32
                ],
                "_min_std": 1e-06,
                "_max_std": "None",
                "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
                "_std_hidden_w_init": {
                  "$type": "builtins.function"
                },
                "_std_hidden_b_init": {
                  "$type": "builtins.function"
                },
                "_std_output_nonlinearity": "None",
                "_std_output_w_init": {
                  "$type": "builtins.function"
                },
                "_std_parameterization": "exp",
                "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
                "_hidden_w_init": {
                  "$type": "builtins.function"
                },
                "_hidden_b_init": {
                  "$type": "builtins.function"
                },
                "_output_nonlinearity": "None",
                "_output_w_init": {
                  "$type": "builtins.function"
                },
                "_output_b_init": {
                  "$type": "builtins.function"
                },
                "_layer_normalization": false,
                "_norm_dist_class": {
                  "$typename": "torch.distributions.normal.Normal"
                },
                "_min_std_param": {
                  "$type": "torch.Tensor"
                },
                "_max_std_param": "None",
                "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
              }
            },
            "_env_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_name": "GaussianMLPPolicy",
            "_obs_dim": 11.0,
            "_action_dim": 1.0,
            "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
          },
          "env": {
            "_env": {
              "env": {
                "env": {
                  "env": {
                    "env": {
                      "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                      "model": "<mujoco._structs.MjModel object at 0x7f1bfc79a730>",
                      "data": "<mujoco._structs.MjData object at 0x7f1bfc79af30>",
                      "init_qpos": "array([0., 0., 0.])",
                      "init_qvel": "array([0., 0., 0.])",
                      "_viewers": {},
                      "frame_skip": 5,
                      "viewer": "None",
                      "observation_space": {
                        "dtype": "dtype('float64')",
                        "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "_shape": [
                          11
                        ],
                        "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                        "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                        "low_repr": "-inf",
                        "high_repr": "inf",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "action_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True])",
                        "bounded_above": "array([ True])",
                        "_shape": [
                          1
                        ],
                        "low": "array([-1.], dtype=float32)",
                        "high": "array([1.], dtype=float32)",
                        "low_repr": "-1.0",
                        "high_repr": "1.0",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "render_mode": "None",
                      "renderer": {
                        "no_returns_render": [
                          "human"
                        ],
                        "single_render": [
                          "single_depth_array",
                          "single_rgb_array",
                          "single_state_pixels"
                        ],
                        "mode": "None",
                        "render": {
                          "$type": "functools.partial"
                        },
                        "render_list": [],
                        "$type": "gym.utils.renderer.Renderer"
                      },
                      "_ezpickle_args": [],
                      "_ezpickle_kwargs": {},
                      "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                    },
                    "_action_space": "None",
                    "_observation_space": "None",
                    "_reward_range": "None",
                    "_metadata": "None",
                    "new_step_api": true,
                    "checked_reset": false,
                    "checked_step": false,
                    "checked_render": false,
                    "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": false,
                  "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "_has_reset": false,
                "_disable_render_order_enforcing": false,
                "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "_max_episode_steps": 1000,
              "_elapsed_steps": "None",
              "$type": "gym.wrappers.time_limit.TimeLimit"
            },
            "_max_episode_length": 1000,
            "_render_modes": [
              "human",
              "rgb_array",
              "depth_array",
              "single_rgb_array",
              "single_depth_array"
            ],
            "_step_cnt": "None",
            "_visualize": false,
            "_action_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_env_info": "None",
            "$type": "garage.envs.gym_env.GymEnv"
          },
          "_env_steps": [],
          "_observations": [],
          "_last_observations": [],
          "_agent_infos": {},
          "_lengths": [],
          "_prev_obs": "None",
          "_eps_length": 0,
          "_episode_infos": {},
          "$type": "garage.sampler.default_worker.DefaultWorker"
        },
        {
          "_seed": "None",
          "_max_episode_length": 200,
          "_worker_number": 25,
          "agent": {
            "training": true,
            "_parameters": {},
            "_buffers": {},
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_module": {
                "training": true,
                "_parameters": {
                  "_init_std": {
                    "$type": "torch.nn.parameter.Parameter"
                  }
                },
                "_buffers": {
                  "min_std_param": {
                    "$type": "torch.Tensor"
                  }
                },
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_mean_module": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "_layers": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "0": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 11.0,
                                "out_features": 32,
                                "$type": "torch.nn.modules.linear.Linear"
                              },
                              "non_linearity": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                                "$type": "garage.torch._functions.NonLinearity"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          },
                          "1": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 32,
                                "out_features": 32,
                                "$type": "torch.nn.modules.linear.Linear"
                              },
                              "non_linearity": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                                "$type": "garage.torch._functions.NonLinearity"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          }
                        },
                        "$type": "torch.nn.modules.container.ModuleList"
                      },
                      "_output_layers": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "0": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 32,
                                "out_features": 1.0,
                                "$type": "torch.nn.modules.linear.Linear"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          }
                        },
                        "$type": "torch.nn.modules.container.ModuleList"
                      }
                    },
                    "_output_dim": 1.0,
                    "$type": "garage.torch.modules.mlp_module.MLPModule"
                  }
                },
                "_input_dim": 11.0,
                "_hidden_sizes": [
                  32,
                  32
                ],
                "_action_dim": 1.0,
                "_learn_std": true,
                "_std_hidden_sizes": [
                  32,
                  32
                ],
                "_min_std": 1e-06,
                "_max_std": "None",
                "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
                "_std_hidden_w_init": {
                  "$type": "builtins.function"
                },
                "_std_hidden_b_init": {
                  "$type": "builtins.function"
                },
                "_std_output_nonlinearity": "None",
                "_std_output_w_init": {
                  "$type": "builtins.function"
                },
                "_std_parameterization": "exp",
                "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
                "_hidden_w_init": {
                  "$type": "builtins.function"
                },
                "_hidden_b_init": {
                  "$type": "builtins.function"
                },
                "_output_nonlinearity": "None",
                "_output_w_init": {
                  "$type": "builtins.function"
                },
                "_output_b_init": {
                  "$type": "builtins.function"
                },
                "_layer_normalization": false,
                "_norm_dist_class": {
                  "$typename": "torch.distributions.normal.Normal"
                },
                "_min_std_param": {
                  "$type": "torch.Tensor"
                },
                "_max_std_param": "None",
                "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
              }
            },
            "_env_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_name": "GaussianMLPPolicy",
            "_obs_dim": 11.0,
            "_action_dim": 1.0,
            "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
          },
          "env": {
            "_env": {
              "env": {
                "env": {
                  "env": {
                    "env": {
                      "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                      "model": "<mujoco._structs.MjModel object at 0x7f1bfc7c8a70>",
                      "data": "<mujoco._structs.MjData object at 0x7f1bfc7c8a30>",
                      "init_qpos": "array([0., 0., 0.])",
                      "init_qvel": "array([0., 0., 0.])",
                      "_viewers": {},
                      "frame_skip": 5,
                      "viewer": "None",
                      "observation_space": {
                        "dtype": "dtype('float64')",
                        "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "_shape": [
                          11
                        ],
                        "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                        "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                        "low_repr": "-inf",
                        "high_repr": "inf",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "action_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True])",
                        "bounded_above": "array([ True])",
                        "_shape": [
                          1
                        ],
                        "low": "array([-1.], dtype=float32)",
                        "high": "array([1.], dtype=float32)",
                        "low_repr": "-1.0",
                        "high_repr": "1.0",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "render_mode": "None",
                      "renderer": {
                        "no_returns_render": [
                          "human"
                        ],
                        "single_render": [
                          "single_depth_array",
                          "single_rgb_array",
                          "single_state_pixels"
                        ],
                        "mode": "None",
                        "render": {
                          "$type": "functools.partial"
                        },
                        "render_list": [],
                        "$type": "gym.utils.renderer.Renderer"
                      },
                      "_ezpickle_args": [],
                      "_ezpickle_kwargs": {},
                      "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                    },
                    "_action_space": "None",
                    "_observation_space": "None",
                    "_reward_range": "None",
                    "_metadata": "None",
                    "new_step_api": true,
                    "checked_reset": false,
                    "checked_step": false,
                    "checked_render": false,
                    "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": false,
                  "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "_has_reset": false,
                "_disable_render_order_enforcing": false,
                "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "_max_episode_steps": 1000,
              "_elapsed_steps": "None",
              "$type": "gym.wrappers.time_limit.TimeLimit"
            },
            "_max_episode_length": 1000,
            "_render_modes": [
              "human",
              "rgb_array",
              "depth_array",
              "single_rgb_array",
              "single_depth_array"
            ],
            "_step_cnt": "None",
            "_visualize": false,
            "_action_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_env_info": "None",
            "$type": "garage.envs.gym_env.GymEnv"
          },
          "_env_steps": [],
          "_observations": [],
          "_last_observations": [],
          "_agent_infos": {},
          "_lengths": [],
          "_prev_obs": "None",
          "_eps_length": 0,
          "_episode_infos": {},
          "$type": "garage.sampler.default_worker.DefaultWorker"
        },
        {
          "_seed": "None",
          "_max_episode_length": 200,
          "_worker_number": 26,
          "agent": {
            "training": true,
            "_parameters": {},
            "_buffers": {},
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_module": {
                "training": true,
                "_parameters": {
                  "_init_std": {
                    "$type": "torch.nn.parameter.Parameter"
                  }
                },
                "_buffers": {
                  "min_std_param": {
                    "$type": "torch.Tensor"
                  }
                },
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_mean_module": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "_layers": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "0": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 11.0,
                                "out_features": 32,
                                "$type": "torch.nn.modules.linear.Linear"
                              },
                              "non_linearity": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                                "$type": "garage.torch._functions.NonLinearity"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          },
                          "1": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 32,
                                "out_features": 32,
                                "$type": "torch.nn.modules.linear.Linear"
                              },
                              "non_linearity": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                                "$type": "garage.torch._functions.NonLinearity"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          }
                        },
                        "$type": "torch.nn.modules.container.ModuleList"
                      },
                      "_output_layers": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "0": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 32,
                                "out_features": 1.0,
                                "$type": "torch.nn.modules.linear.Linear"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          }
                        },
                        "$type": "torch.nn.modules.container.ModuleList"
                      }
                    },
                    "_output_dim": 1.0,
                    "$type": "garage.torch.modules.mlp_module.MLPModule"
                  }
                },
                "_input_dim": 11.0,
                "_hidden_sizes": [
                  32,
                  32
                ],
                "_action_dim": 1.0,
                "_learn_std": true,
                "_std_hidden_sizes": [
                  32,
                  32
                ],
                "_min_std": 1e-06,
                "_max_std": "None",
                "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
                "_std_hidden_w_init": {
                  "$type": "builtins.function"
                },
                "_std_hidden_b_init": {
                  "$type": "builtins.function"
                },
                "_std_output_nonlinearity": "None",
                "_std_output_w_init": {
                  "$type": "builtins.function"
                },
                "_std_parameterization": "exp",
                "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
                "_hidden_w_init": {
                  "$type": "builtins.function"
                },
                "_hidden_b_init": {
                  "$type": "builtins.function"
                },
                "_output_nonlinearity": "None",
                "_output_w_init": {
                  "$type": "builtins.function"
                },
                "_output_b_init": {
                  "$type": "builtins.function"
                },
                "_layer_normalization": false,
                "_norm_dist_class": {
                  "$typename": "torch.distributions.normal.Normal"
                },
                "_min_std_param": {
                  "$type": "torch.Tensor"
                },
                "_max_std_param": "None",
                "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
              }
            },
            "_env_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_name": "GaussianMLPPolicy",
            "_obs_dim": 11.0,
            "_action_dim": 1.0,
            "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
          },
          "env": {
            "_env": {
              "env": {
                "env": {
                  "env": {
                    "env": {
                      "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                      "model": "<mujoco._structs.MjModel object at 0x7f1bfc879630>",
                      "data": "<mujoco._structs.MjData object at 0x7f1bfc879af0>",
                      "init_qpos": "array([0., 0., 0.])",
                      "init_qvel": "array([0., 0., 0.])",
                      "_viewers": {},
                      "frame_skip": 5,
                      "viewer": "None",
                      "observation_space": {
                        "dtype": "dtype('float64')",
                        "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "_shape": [
                          11
                        ],
                        "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                        "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                        "low_repr": "-inf",
                        "high_repr": "inf",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "action_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True])",
                        "bounded_above": "array([ True])",
                        "_shape": [
                          1
                        ],
                        "low": "array([-1.], dtype=float32)",
                        "high": "array([1.], dtype=float32)",
                        "low_repr": "-1.0",
                        "high_repr": "1.0",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "render_mode": "None",
                      "renderer": {
                        "no_returns_render": [
                          "human"
                        ],
                        "single_render": [
                          "single_depth_array",
                          "single_rgb_array",
                          "single_state_pixels"
                        ],
                        "mode": "None",
                        "render": {
                          "$type": "functools.partial"
                        },
                        "render_list": [],
                        "$type": "gym.utils.renderer.Renderer"
                      },
                      "_ezpickle_args": [],
                      "_ezpickle_kwargs": {},
                      "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                    },
                    "_action_space": "None",
                    "_observation_space": "None",
                    "_reward_range": "None",
                    "_metadata": "None",
                    "new_step_api": true,
                    "checked_reset": false,
                    "checked_step": false,
                    "checked_render": false,
                    "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": false,
                  "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "_has_reset": false,
                "_disable_render_order_enforcing": false,
                "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "_max_episode_steps": 1000,
              "_elapsed_steps": "None",
              "$type": "gym.wrappers.time_limit.TimeLimit"
            },
            "_max_episode_length": 1000,
            "_render_modes": [
              "human",
              "rgb_array",
              "depth_array",
              "single_rgb_array",
              "single_depth_array"
            ],
            "_step_cnt": "None",
            "_visualize": false,
            "_action_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_env_info": "None",
            "$type": "garage.envs.gym_env.GymEnv"
          },
          "_env_steps": [],
          "_observations": [],
          "_last_observations": [],
          "_agent_infos": {},
          "_lengths": [],
          "_prev_obs": "None",
          "_eps_length": 0,
          "_episode_infos": {},
          "$type": "garage.sampler.default_worker.DefaultWorker"
        },
        {
          "_seed": "None",
          "_max_episode_length": 200,
          "_worker_number": 27,
          "agent": {
            "training": true,
            "_parameters": {},
            "_buffers": {},
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_module": {
                "training": true,
                "_parameters": {
                  "_init_std": {
                    "$type": "torch.nn.parameter.Parameter"
                  }
                },
                "_buffers": {
                  "min_std_param": {
                    "$type": "torch.Tensor"
                  }
                },
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_mean_module": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "_layers": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "0": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 11.0,
                                "out_features": 32,
                                "$type": "torch.nn.modules.linear.Linear"
                              },
                              "non_linearity": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                                "$type": "garage.torch._functions.NonLinearity"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          },
                          "1": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 32,
                                "out_features": 32,
                                "$type": "torch.nn.modules.linear.Linear"
                              },
                              "non_linearity": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                                "$type": "garage.torch._functions.NonLinearity"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          }
                        },
                        "$type": "torch.nn.modules.container.ModuleList"
                      },
                      "_output_layers": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "0": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 32,
                                "out_features": 1.0,
                                "$type": "torch.nn.modules.linear.Linear"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          }
                        },
                        "$type": "torch.nn.modules.container.ModuleList"
                      }
                    },
                    "_output_dim": 1.0,
                    "$type": "garage.torch.modules.mlp_module.MLPModule"
                  }
                },
                "_input_dim": 11.0,
                "_hidden_sizes": [
                  32,
                  32
                ],
                "_action_dim": 1.0,
                "_learn_std": true,
                "_std_hidden_sizes": [
                  32,
                  32
                ],
                "_min_std": 1e-06,
                "_max_std": "None",
                "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
                "_std_hidden_w_init": {
                  "$type": "builtins.function"
                },
                "_std_hidden_b_init": {
                  "$type": "builtins.function"
                },
                "_std_output_nonlinearity": "None",
                "_std_output_w_init": {
                  "$type": "builtins.function"
                },
                "_std_parameterization": "exp",
                "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
                "_hidden_w_init": {
                  "$type": "builtins.function"
                },
                "_hidden_b_init": {
                  "$type": "builtins.function"
                },
                "_output_nonlinearity": "None",
                "_output_w_init": {
                  "$type": "builtins.function"
                },
                "_output_b_init": {
                  "$type": "builtins.function"
                },
                "_layer_normalization": false,
                "_norm_dist_class": {
                  "$typename": "torch.distributions.normal.Normal"
                },
                "_min_std_param": {
                  "$type": "torch.Tensor"
                },
                "_max_std_param": "None",
                "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
              }
            },
            "_env_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_name": "GaussianMLPPolicy",
            "_obs_dim": 11.0,
            "_action_dim": 1.0,
            "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
          },
          "env": {
            "_env": {
              "env": {
                "env": {
                  "env": {
                    "env": {
                      "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                      "model": "<mujoco._structs.MjModel object at 0x7f1bfc637870>",
                      "data": "<mujoco._structs.MjData object at 0x7f1bfc6378b0>",
                      "init_qpos": "array([0., 0., 0.])",
                      "init_qvel": "array([0., 0., 0.])",
                      "_viewers": {},
                      "frame_skip": 5,
                      "viewer": "None",
                      "observation_space": {
                        "dtype": "dtype('float64')",
                        "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "_shape": [
                          11
                        ],
                        "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                        "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                        "low_repr": "-inf",
                        "high_repr": "inf",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "action_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True])",
                        "bounded_above": "array([ True])",
                        "_shape": [
                          1
                        ],
                        "low": "array([-1.], dtype=float32)",
                        "high": "array([1.], dtype=float32)",
                        "low_repr": "-1.0",
                        "high_repr": "1.0",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "render_mode": "None",
                      "renderer": {
                        "no_returns_render": [
                          "human"
                        ],
                        "single_render": [
                          "single_depth_array",
                          "single_rgb_array",
                          "single_state_pixels"
                        ],
                        "mode": "None",
                        "render": {
                          "$type": "functools.partial"
                        },
                        "render_list": [],
                        "$type": "gym.utils.renderer.Renderer"
                      },
                      "_ezpickle_args": [],
                      "_ezpickle_kwargs": {},
                      "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                    },
                    "_action_space": "None",
                    "_observation_space": "None",
                    "_reward_range": "None",
                    "_metadata": "None",
                    "new_step_api": true,
                    "checked_reset": false,
                    "checked_step": false,
                    "checked_render": false,
                    "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": false,
                  "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "_has_reset": false,
                "_disable_render_order_enforcing": false,
                "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "_max_episode_steps": 1000,
              "_elapsed_steps": "None",
              "$type": "gym.wrappers.time_limit.TimeLimit"
            },
            "_max_episode_length": 1000,
            "_render_modes": [
              "human",
              "rgb_array",
              "depth_array",
              "single_rgb_array",
              "single_depth_array"
            ],
            "_step_cnt": "None",
            "_visualize": false,
            "_action_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_env_info": "None",
            "$type": "garage.envs.gym_env.GymEnv"
          },
          "_env_steps": [],
          "_observations": [],
          "_last_observations": [],
          "_agent_infos": {},
          "_lengths": [],
          "_prev_obs": "None",
          "_eps_length": 0,
          "_episode_infos": {},
          "$type": "garage.sampler.default_worker.DefaultWorker"
        }
      ],
      "total_env_steps": 0,
      "$type": "garage.sampler.local_sampler.LocalSampler"
    },
    "max_episode_length": 200,
    "_discount": 0.99,
    "_n_samples": 1,
    "_policy_opt": {
      "defaults": {
        "betas": [
          0.9,
          0.999
        ],
        "eps": 1e-08
      },
      "state": {
        "Parameter containing:\ntensor([0.], requires_grad=True)": {
          "momentum": {
            "$type": "torch.Tensor"
          },
          "oldg": {
            "$type": "torch.Tensor"
          }
        },
        "Parameter containing:\ntensor([[-0.2856,  0.1338, -0.2435, -0.2535,  0.0506, -0.0128,  0.2549, -0.1978,\n          0.1096,  0.1348, -0.3610],\n        [-0.0770,  0.0263, -0.2224,  0.3030, -0.3681,  0.2056, -0.0962, -0.3203,\n         -0.1914,  0.1949, -0.0264],\n        [ 0.1324,  0.3630,  0.2351,  0.1801,  0.3519,  0.0508, -0.1878, -0.2033,\n          0.2119, -0.1541, -0.2835],\n        [-0.0748, -0.3343, -0.2254,  0.2305, -0.1609,  0.0051, -0.3444, -0.1131,\n          0.1354,  0.1014,  0.0166],\n        [-0.0885, -0.3027,  0.1149,  0.0434,  0.2245, -0.3469,  0.2461,  0.2868,\n         -0.2437,  0.1745,  0.1742],\n        [ 0.1218, -0.0585,  0.1541,  0.2419, -0.2776, -0.3289, -0.1700,  0.1666,\n          0.1472,  0.2837, -0.1448],\n        [-0.0632, -0.2964, -0.1765,  0.1824, -0.3713, -0.1454, -0.1748, -0.3600,\n         -0.0199, -0.0534, -0.2951],\n        [-0.3507, -0.0882, -0.0264, -0.1088,  0.3377, -0.1693, -0.2118,  0.0296,\n          0.2202, -0.0419, -0.0780],\n        [-0.2647, -0.0705,  0.2413,  0.1262,  0.0646,  0.0748,  0.0150, -0.0046,\n         -0.1249,  0.1599,  0.1402],\n        [ 0.2537, -0.2027, -0.2519,  0.1579,  0.2083, -0.0846, -0.2801,  0.1147,\n         -0.1852, -0.1895, -0.2409],\n        [ 0.1670,  0.2317, -0.2852, -0.2467, -0.1258,  0.2875,  0.3053,  0.1737,\n         -0.2543,  0.3389, -0.1786],\n        [ 0.3225, -0.0318,  0.3454, -0.0004,  0.0857, -0.2664, -0.3729,  0.1152,\n         -0.1032, -0.0797,  0.0650],\n        [ 0.1872,  0.0421,  0.1016,  0.0775,  0.2645, -0.1813,  0.1800, -0.0787,\n          0.0762,  0.3015,  0.3280],\n        [-0.1724,  0.3513, -0.0785, -0.0342,  0.2584,  0.3013, -0.1903, -0.1752,\n         -0.1278, -0.2196,  0.1154],\n        [ 0.3117,  0.1885, -0.1857,  0.2696,  0.0954,  0.3047, -0.1720, -0.3017,\n         -0.3596, -0.1275,  0.2820],\n        [-0.1640, -0.1476, -0.2276, -0.2283, -0.0798,  0.3433,  0.2763, -0.2266,\n          0.0233,  0.1351, -0.0703],\n        [-0.3729,  0.3059, -0.2596, -0.0749,  0.2194, -0.1382,  0.3070, -0.3641,\n         -0.2770, -0.3222,  0.2282],\n        [-0.0345,  0.3350, -0.1586, -0.3188,  0.2520,  0.0861, -0.1671,  0.0074,\n          0.2421,  0.0469, -0.3467],\n        [ 0.1184, -0.3686,  0.0741,  0.2919,  0.3216,  0.1885,  0.3181, -0.1935,\n         -0.3618, -0.2196,  0.0125],\n        [ 0.1237,  0.3293,  0.0898,  0.3243,  0.1931, -0.3678,  0.1634,  0.0321,\n          0.0469, -0.2391, -0.3653],\n        [-0.0148, -0.3402,  0.1804, -0.1075,  0.2743, -0.1025,  0.1449, -0.0180,\n         -0.1602,  0.0940, -0.1220],\n        [ 0.1396, -0.2812, -0.0306, -0.2001,  0.1956,  0.0531, -0.2285,  0.2959,\n         -0.1680,  0.2417, -0.2174],\n        [-0.3260,  0.0642,  0.2253, -0.3082, -0.2838,  0.0350, -0.3494,  0.0113,\n         -0.1749, -0.0015, -0.1721],\n        [ 0.3505,  0.1765,  0.0095, -0.0208,  0.1357, -0.1617, -0.1597,  0.2038,\n         -0.3578, -0.1731,  0.2125],\n        [-0.1848,  0.1857,  0.3423, -0.1695,  0.1491,  0.1421, -0.0243,  0.2288,\n         -0.3292,  0.0446, -0.1656],\n        [-0.2945,  0.1111, -0.3560,  0.1068,  0.0401,  0.1777,  0.0734,  0.2682,\n         -0.0947,  0.0899, -0.2884],\n        [ 0.3453, -0.2911, -0.2540,  0.3509, -0.1634,  0.3028,  0.0239,  0.2819,\n         -0.2771, -0.0633,  0.1089],\n        [ 0.0778, -0.1205, -0.2158, -0.0556,  0.1608, -0.2842, -0.2562,  0.0455,\n          0.1804,  0.0645,  0.0243],\n        [ 0.2102,  0.2494, -0.0291,  0.0828, -0.1319,  0.0190, -0.0158,  0.1332,\n          0.0617, -0.1199,  0.2780],\n        [ 0.1226, -0.2921, -0.1073, -0.1593, -0.3697, -0.0381,  0.0078, -0.0938,\n         -0.2821, -0.2018, -0.1650],\n        [-0.3094,  0.3552,  0.3380,  0.2587, -0.2283, -0.3018, -0.0426, -0.1534,\n         -0.2410,  0.3259,  0.2697],\n        [-0.0027, -0.0652,  0.3084, -0.1228, -0.3417,  0.1065,  0.2277,  0.3117,\n          0.2713,  0.0147,  0.1878]], requires_grad=True)": {
          "momentum": {
            "$type": "torch.Tensor"
          },
          "oldg": {
            "$type": "torch.Tensor"
          }
        },
        "Parameter containing:\ntensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n        0., 0., 0., 0., 0., 0., 0., 0.], requires_grad=True)": {
          "momentum": {
            "$type": "torch.Tensor"
          },
          "oldg": {
            "$type": "torch.Tensor"
          }
        },
        "Parameter containing:\ntensor([[ 0.2578,  0.0004, -0.0430,  ..., -0.0518,  0.2416,  0.2799],\n        [-0.2206,  0.0921, -0.1159,  ..., -0.0621,  0.1688, -0.0277],\n        [-0.1072, -0.2002, -0.1422,  ...,  0.0046, -0.1570, -0.1287],\n        ...,\n        [-0.0749, -0.1210,  0.1971,  ..., -0.0150,  0.0496, -0.2645],\n        [ 0.2374,  0.1925,  0.2469,  ...,  0.0734, -0.2801, -0.1453],\n        [ 0.1565, -0.2415,  0.3010,  ..., -0.2179,  0.2517,  0.0820]],\n       requires_grad=True)": {
          "momentum": {
            "$type": "torch.Tensor"
          },
          "oldg": {
            "$type": "torch.Tensor"
          }
        },
        "Parameter containing:\ntensor([[ 0.2678,  0.2627,  0.0035,  0.1089, -0.2708,  0.3687, -0.1811, -0.0505,\n          0.2919,  0.1129, -0.1573,  0.1410, -0.0728, -0.1599,  0.4226,  0.4217,\n          0.0628,  0.1359,  0.2310, -0.3957,  0.2993,  0.3953,  0.1988,  0.3090,\n         -0.3436,  0.2367, -0.4193,  0.2297, -0.0340,  0.2684,  0.1884, -0.2415]],\n       requires_grad=True)": {
          "momentum": {
            "$type": "torch.Tensor"
          },
          "oldg": {
            "$type": "torch.Tensor"
          }
        }
      },
      "param_groups": [
        {
          "params": [
            {
              "$type": "torch.nn.parameter.Parameter"
            },
            {
              "$type": "torch.nn.parameter.Parameter"
            },
            {
              "$type": "torch.nn.parameter.Parameter"
            },
            {
              "$type": "torch.nn.parameter.Parameter"
            },
            {
              "$type": "torch.nn.parameter.Parameter"
            },
            {
              "$type": "torch.nn.parameter.Parameter"
            },
            {
              "$type": "torch.nn.parameter.Parameter"
            }
          ],
          "betas": [
            0.9,
            0.999
          ],
          "eps": 1e-08
        }
      ],
      "_params": [
        {
          "$type": "torch.nn.parameter.Parameter"
        },
        {
          "$type": "torch.nn.parameter.Parameter"
        },
        {
          "$type": "torch.nn.parameter.Parameter"
        },
        {
          "$type": "torch.nn.parameter.Parameter"
        },
        {
          "$type": "torch.nn.parameter.Parameter"
        },
        {
          "$type": "torch.nn.parameter.Parameter"
        },
        {
          "$type": "torch.nn.parameter.Parameter"
        }
      ],
      "_numel_cache": "None",
      "freq": 1,
      "_max_iter_adj": 15,
      "option_tr": "p",
      "Q": {
        "$type": "torch.Tensor"
      },
      "c": {
        "$type": "torch.Tensor"
      },
      "G": {
        "$type": "torch.Tensor"
      },
      "iter": 0,
      "alpha": "None",
      "alpha_norm": 0.0,
      "gamma": 0.01,
      "gammalb": 1e-12,
      "beta1": 5,
      "beta2": 3,
      "delta_max": 10.0,
      "eta": 0.08,
      "zeta1": 0.25,
      "zeta2": 0.75,
      "hessian_window": 1,
      "Qa": [],
      "ca": [],
      "Ga": [],
      "thetas": [
        0.9,
        0.999
      ],
      "ghg": 0.0,
      "logline": "None",
      "$type": "drsom3d.DRSOMF"
    },
    "$type": "__main__.VPG_opt"
  },
  "_env": {
    "_env": {
      "env": {
        "env": {
          "env": {
            "env": {
              "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
              "model": "<mujoco._structs.MjModel object at 0x7f1bfd313470>",
              "data": "<mujoco._structs.MjData object at 0x7f1bfd8b07b0>",
              "init_qpos": "array([0., 0., 0.])",
              "init_qvel": "array([0., 0., 0.])",
              "_viewers": {},
              "frame_skip": 5,
              "viewer": "None",
              "observation_space": {
                "dtype": "dtype('float64')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "gym.spaces.box.Box"
              },
              "action_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "gym.spaces.box.Box"
              },
              "render_mode": "None",
              "renderer": {
                "no_returns_render": [
                  "human"
                ],
                "single_render": [
                  "single_depth_array",
                  "single_rgb_array",
                  "single_state_pixels"
                ],
                "mode": "None",
                "render": {
                  "$type": "functools.partial"
                },
                "render_list": [],
                "$type": "gym.utils.renderer.Renderer"
              },
              "_ezpickle_args": [],
              "_ezpickle_kwargs": {},
              "spec": {
                "id": "InvertedDoublePendulum-v4",
                "entry_point": "gym.envs.mujoco.inverted_double_pendulum_v4:InvertedDoublePendulumEnv",
                "reward_threshold": 9100.0,
                "nondeterministic": false,
                "max_episode_steps": 1000,
                "order_enforce": true,
                "autoreset": false,
                "disable_env_checker": false,
                "new_step_api": false,
                "kwargs": {},
                "namespace": "None",
                "name": "InvertedDoublePendulum",
                "version": 4,
                "$type": "gym.envs.registration.EnvSpec"
              },
              "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": true,
            "checked_reset": false,
            "checked_step": false,
            "checked_render": false,
            "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
          },
          "_action_space": "None",
          "_observation_space": "None",
          "_reward_range": "None",
          "_metadata": "None",
          "new_step_api": false,
          "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
        },
        "_action_space": "None",
        "_observation_space": "None",
        "_reward_range": "None",
        "_metadata": "None",
        "new_step_api": true,
        "_has_reset": false,
        "_disable_render_order_enforcing": false,
        "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
      },
      "_action_space": "None",
      "_observation_space": "None",
      "_reward_range": "None",
      "_metadata": "None",
      "new_step_api": false,
      "_max_episode_steps": 1000,
      "_elapsed_steps": "None",
      "$type": "gym.wrappers.time_limit.TimeLimit"
    },
    "_max_episode_length": 1000,
    "_render_modes": [
      "human",
      "rgb_array",
      "depth_array",
      "single_rgb_array",
      "single_depth_array"
    ],
    "_step_cnt": "None",
    "_visualize": false,
    "_action_space": {
      "dtype": "dtype('float32')",
      "bounded_below": "array([ True])",
      "bounded_above": "array([ True])",
      "_shape": [
        1
      ],
      "low": "array([-1.], dtype=float32)",
      "high": "array([1.], dtype=float32)",
      "low_repr": "-1.0",
      "high_repr": "1.0",
      "_np_random": "None",
      "$type": "akro.box.Box"
    },
    "_observation_space": {
      "dtype": "dtype('float32')",
      "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
      "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
      "_shape": [
        11
      ],
      "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
      "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
      "low_repr": "-inf",
      "high_repr": "inf",
      "_np_random": "None",
      "$type": "akro.box.Box"
    },
    "_spec": {
      "max_episode_length": 1000,
      "input_space": {
        "dtype": "dtype('float32')",
        "bounded_below": "array([ True])",
        "bounded_above": "array([ True])",
        "_shape": [
          1
        ],
        "low": "array([-1.], dtype=float32)",
        "high": "array([1.], dtype=float32)",
        "low_repr": "-1.0",
        "high_repr": "1.0",
        "_np_random": "None",
        "$type": "akro.box.Box"
      },
      "output_space": {
        "dtype": "dtype('float32')",
        "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
        "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
        "_shape": [
          11
        ],
        "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
        "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
        "low_repr": "-inf",
        "high_repr": "inf",
        "_np_random": "None",
        "$type": "akro.box.Box"
      },
      "$type": "garage._environment.EnvSpec"
    },
    "_env_info": "None",
    "$type": "garage.envs.gym_env.GymEnv"
  },
  "_sampler": {
    "_factory": {
      "n_workers": 28,
      "_seed": "None",
      "_max_episode_length": 200,
      "_worker_class": {
        "$typename": "garage.sampler.default_worker.DefaultWorker"
      },
      "_worker_args": {},
      "$type": "garage.sampler.worker_factory.WorkerFactory"
    },
    "_agents": [
      {
        "training": true,
        "_parameters": {},
        "_buffers": {},
        "_non_persistent_buffers_set": [],
        "_backward_hooks": {},
        "_forward_hooks": {},
        "_forward_pre_hooks": {},
        "_state_dict_hooks": {},
        "_load_state_dict_pre_hooks": {},
        "_modules": {
          "_module": {
            "training": true,
            "_parameters": {
              "_init_std": {
                "$type": "torch.nn.parameter.Parameter"
              }
            },
            "_buffers": {
              "min_std_param": {
                "$type": "torch.Tensor"
              }
            },
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_mean_module": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 11.0,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      },
                      "1": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  },
                  "_output_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 1.0,
                            "$type": "torch.nn.modules.linear.Linear"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  }
                },
                "_output_dim": 1.0,
                "$type": "garage.torch.modules.mlp_module.MLPModule"
              }
            },
            "_input_dim": 11.0,
            "_hidden_sizes": [
              32,
              32
            ],
            "_action_dim": 1.0,
            "_learn_std": true,
            "_std_hidden_sizes": [
              32,
              32
            ],
            "_min_std": 1e-06,
            "_max_std": "None",
            "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
            "_std_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_std_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_std_output_nonlinearity": "None",
            "_std_output_w_init": {
              "$type": "builtins.function"
            },
            "_std_parameterization": "exp",
            "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
            "_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_output_nonlinearity": "None",
            "_output_w_init": {
              "$type": "builtins.function"
            },
            "_output_b_init": {
              "$type": "builtins.function"
            },
            "_layer_normalization": false,
            "_norm_dist_class": {
              "$typename": "torch.distributions.normal.Normal"
            },
            "_min_std_param": {
              "$type": "torch.Tensor"
            },
            "_max_std_param": "None",
            "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
          }
        },
        "_env_spec": {
          "max_episode_length": 1000,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_name": "GaussianMLPPolicy",
        "_obs_dim": 11.0,
        "_action_dim": 1.0,
        "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
      },
      {
        "training": true,
        "_parameters": {},
        "_buffers": {},
        "_non_persistent_buffers_set": [],
        "_backward_hooks": {},
        "_forward_hooks": {},
        "_forward_pre_hooks": {},
        "_state_dict_hooks": {},
        "_load_state_dict_pre_hooks": {},
        "_modules": {
          "_module": {
            "training": true,
            "_parameters": {
              "_init_std": {
                "$type": "torch.nn.parameter.Parameter"
              }
            },
            "_buffers": {
              "min_std_param": {
                "$type": "torch.Tensor"
              }
            },
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_mean_module": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 11.0,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      },
                      "1": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  },
                  "_output_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 1.0,
                            "$type": "torch.nn.modules.linear.Linear"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  }
                },
                "_output_dim": 1.0,
                "$type": "garage.torch.modules.mlp_module.MLPModule"
              }
            },
            "_input_dim": 11.0,
            "_hidden_sizes": [
              32,
              32
            ],
            "_action_dim": 1.0,
            "_learn_std": true,
            "_std_hidden_sizes": [
              32,
              32
            ],
            "_min_std": 1e-06,
            "_max_std": "None",
            "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
            "_std_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_std_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_std_output_nonlinearity": "None",
            "_std_output_w_init": {
              "$type": "builtins.function"
            },
            "_std_parameterization": "exp",
            "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
            "_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_output_nonlinearity": "None",
            "_output_w_init": {
              "$type": "builtins.function"
            },
            "_output_b_init": {
              "$type": "builtins.function"
            },
            "_layer_normalization": false,
            "_norm_dist_class": {
              "$typename": "torch.distributions.normal.Normal"
            },
            "_min_std_param": {
              "$type": "torch.Tensor"
            },
            "_max_std_param": "None",
            "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
          }
        },
        "_env_spec": {
          "max_episode_length": 1000,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_name": "GaussianMLPPolicy",
        "_obs_dim": 11.0,
        "_action_dim": 1.0,
        "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
      },
      {
        "training": true,
        "_parameters": {},
        "_buffers": {},
        "_non_persistent_buffers_set": [],
        "_backward_hooks": {},
        "_forward_hooks": {},
        "_forward_pre_hooks": {},
        "_state_dict_hooks": {},
        "_load_state_dict_pre_hooks": {},
        "_modules": {
          "_module": {
            "training": true,
            "_parameters": {
              "_init_std": {
                "$type": "torch.nn.parameter.Parameter"
              }
            },
            "_buffers": {
              "min_std_param": {
                "$type": "torch.Tensor"
              }
            },
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_mean_module": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 11.0,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      },
                      "1": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  },
                  "_output_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 1.0,
                            "$type": "torch.nn.modules.linear.Linear"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  }
                },
                "_output_dim": 1.0,
                "$type": "garage.torch.modules.mlp_module.MLPModule"
              }
            },
            "_input_dim": 11.0,
            "_hidden_sizes": [
              32,
              32
            ],
            "_action_dim": 1.0,
            "_learn_std": true,
            "_std_hidden_sizes": [
              32,
              32
            ],
            "_min_std": 1e-06,
            "_max_std": "None",
            "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
            "_std_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_std_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_std_output_nonlinearity": "None",
            "_std_output_w_init": {
              "$type": "builtins.function"
            },
            "_std_parameterization": "exp",
            "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
            "_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_output_nonlinearity": "None",
            "_output_w_init": {
              "$type": "builtins.function"
            },
            "_output_b_init": {
              "$type": "builtins.function"
            },
            "_layer_normalization": false,
            "_norm_dist_class": {
              "$typename": "torch.distributions.normal.Normal"
            },
            "_min_std_param": {
              "$type": "torch.Tensor"
            },
            "_max_std_param": "None",
            "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
          }
        },
        "_env_spec": {
          "max_episode_length": 1000,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_name": "GaussianMLPPolicy",
        "_obs_dim": 11.0,
        "_action_dim": 1.0,
        "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
      },
      {
        "training": true,
        "_parameters": {},
        "_buffers": {},
        "_non_persistent_buffers_set": [],
        "_backward_hooks": {},
        "_forward_hooks": {},
        "_forward_pre_hooks": {},
        "_state_dict_hooks": {},
        "_load_state_dict_pre_hooks": {},
        "_modules": {
          "_module": {
            "training": true,
            "_parameters": {
              "_init_std": {
                "$type": "torch.nn.parameter.Parameter"
              }
            },
            "_buffers": {
              "min_std_param": {
                "$type": "torch.Tensor"
              }
            },
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_mean_module": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 11.0,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      },
                      "1": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  },
                  "_output_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 1.0,
                            "$type": "torch.nn.modules.linear.Linear"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  }
                },
                "_output_dim": 1.0,
                "$type": "garage.torch.modules.mlp_module.MLPModule"
              }
            },
            "_input_dim": 11.0,
            "_hidden_sizes": [
              32,
              32
            ],
            "_action_dim": 1.0,
            "_learn_std": true,
            "_std_hidden_sizes": [
              32,
              32
            ],
            "_min_std": 1e-06,
            "_max_std": "None",
            "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
            "_std_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_std_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_std_output_nonlinearity": "None",
            "_std_output_w_init": {
              "$type": "builtins.function"
            },
            "_std_parameterization": "exp",
            "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
            "_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_output_nonlinearity": "None",
            "_output_w_init": {
              "$type": "builtins.function"
            },
            "_output_b_init": {
              "$type": "builtins.function"
            },
            "_layer_normalization": false,
            "_norm_dist_class": {
              "$typename": "torch.distributions.normal.Normal"
            },
            "_min_std_param": {
              "$type": "torch.Tensor"
            },
            "_max_std_param": "None",
            "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
          }
        },
        "_env_spec": {
          "max_episode_length": 1000,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_name": "GaussianMLPPolicy",
        "_obs_dim": 11.0,
        "_action_dim": 1.0,
        "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
      },
      {
        "training": true,
        "_parameters": {},
        "_buffers": {},
        "_non_persistent_buffers_set": [],
        "_backward_hooks": {},
        "_forward_hooks": {},
        "_forward_pre_hooks": {},
        "_state_dict_hooks": {},
        "_load_state_dict_pre_hooks": {},
        "_modules": {
          "_module": {
            "training": true,
            "_parameters": {
              "_init_std": {
                "$type": "torch.nn.parameter.Parameter"
              }
            },
            "_buffers": {
              "min_std_param": {
                "$type": "torch.Tensor"
              }
            },
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_mean_module": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 11.0,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      },
                      "1": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  },
                  "_output_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 1.0,
                            "$type": "torch.nn.modules.linear.Linear"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  }
                },
                "_output_dim": 1.0,
                "$type": "garage.torch.modules.mlp_module.MLPModule"
              }
            },
            "_input_dim": 11.0,
            "_hidden_sizes": [
              32,
              32
            ],
            "_action_dim": 1.0,
            "_learn_std": true,
            "_std_hidden_sizes": [
              32,
              32
            ],
            "_min_std": 1e-06,
            "_max_std": "None",
            "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
            "_std_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_std_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_std_output_nonlinearity": "None",
            "_std_output_w_init": {
              "$type": "builtins.function"
            },
            "_std_parameterization": "exp",
            "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
            "_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_output_nonlinearity": "None",
            "_output_w_init": {
              "$type": "builtins.function"
            },
            "_output_b_init": {
              "$type": "builtins.function"
            },
            "_layer_normalization": false,
            "_norm_dist_class": {
              "$typename": "torch.distributions.normal.Normal"
            },
            "_min_std_param": {
              "$type": "torch.Tensor"
            },
            "_max_std_param": "None",
            "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
          }
        },
        "_env_spec": {
          "max_episode_length": 1000,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_name": "GaussianMLPPolicy",
        "_obs_dim": 11.0,
        "_action_dim": 1.0,
        "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
      },
      {
        "training": true,
        "_parameters": {},
        "_buffers": {},
        "_non_persistent_buffers_set": [],
        "_backward_hooks": {},
        "_forward_hooks": {},
        "_forward_pre_hooks": {},
        "_state_dict_hooks": {},
        "_load_state_dict_pre_hooks": {},
        "_modules": {
          "_module": {
            "training": true,
            "_parameters": {
              "_init_std": {
                "$type": "torch.nn.parameter.Parameter"
              }
            },
            "_buffers": {
              "min_std_param": {
                "$type": "torch.Tensor"
              }
            },
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_mean_module": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 11.0,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      },
                      "1": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  },
                  "_output_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 1.0,
                            "$type": "torch.nn.modules.linear.Linear"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  }
                },
                "_output_dim": 1.0,
                "$type": "garage.torch.modules.mlp_module.MLPModule"
              }
            },
            "_input_dim": 11.0,
            "_hidden_sizes": [
              32,
              32
            ],
            "_action_dim": 1.0,
            "_learn_std": true,
            "_std_hidden_sizes": [
              32,
              32
            ],
            "_min_std": 1e-06,
            "_max_std": "None",
            "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
            "_std_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_std_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_std_output_nonlinearity": "None",
            "_std_output_w_init": {
              "$type": "builtins.function"
            },
            "_std_parameterization": "exp",
            "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
            "_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_output_nonlinearity": "None",
            "_output_w_init": {
              "$type": "builtins.function"
            },
            "_output_b_init": {
              "$type": "builtins.function"
            },
            "_layer_normalization": false,
            "_norm_dist_class": {
              "$typename": "torch.distributions.normal.Normal"
            },
            "_min_std_param": {
              "$type": "torch.Tensor"
            },
            "_max_std_param": "None",
            "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
          }
        },
        "_env_spec": {
          "max_episode_length": 1000,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_name": "GaussianMLPPolicy",
        "_obs_dim": 11.0,
        "_action_dim": 1.0,
        "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
      },
      {
        "training": true,
        "_parameters": {},
        "_buffers": {},
        "_non_persistent_buffers_set": [],
        "_backward_hooks": {},
        "_forward_hooks": {},
        "_forward_pre_hooks": {},
        "_state_dict_hooks": {},
        "_load_state_dict_pre_hooks": {},
        "_modules": {
          "_module": {
            "training": true,
            "_parameters": {
              "_init_std": {
                "$type": "torch.nn.parameter.Parameter"
              }
            },
            "_buffers": {
              "min_std_param": {
                "$type": "torch.Tensor"
              }
            },
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_mean_module": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 11.0,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      },
                      "1": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  },
                  "_output_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 1.0,
                            "$type": "torch.nn.modules.linear.Linear"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  }
                },
                "_output_dim": 1.0,
                "$type": "garage.torch.modules.mlp_module.MLPModule"
              }
            },
            "_input_dim": 11.0,
            "_hidden_sizes": [
              32,
              32
            ],
            "_action_dim": 1.0,
            "_learn_std": true,
            "_std_hidden_sizes": [
              32,
              32
            ],
            "_min_std": 1e-06,
            "_max_std": "None",
            "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
            "_std_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_std_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_std_output_nonlinearity": "None",
            "_std_output_w_init": {
              "$type": "builtins.function"
            },
            "_std_parameterization": "exp",
            "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
            "_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_output_nonlinearity": "None",
            "_output_w_init": {
              "$type": "builtins.function"
            },
            "_output_b_init": {
              "$type": "builtins.function"
            },
            "_layer_normalization": false,
            "_norm_dist_class": {
              "$typename": "torch.distributions.normal.Normal"
            },
            "_min_std_param": {
              "$type": "torch.Tensor"
            },
            "_max_std_param": "None",
            "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
          }
        },
        "_env_spec": {
          "max_episode_length": 1000,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_name": "GaussianMLPPolicy",
        "_obs_dim": 11.0,
        "_action_dim": 1.0,
        "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
      },
      {
        "training": true,
        "_parameters": {},
        "_buffers": {},
        "_non_persistent_buffers_set": [],
        "_backward_hooks": {},
        "_forward_hooks": {},
        "_forward_pre_hooks": {},
        "_state_dict_hooks": {},
        "_load_state_dict_pre_hooks": {},
        "_modules": {
          "_module": {
            "training": true,
            "_parameters": {
              "_init_std": {
                "$type": "torch.nn.parameter.Parameter"
              }
            },
            "_buffers": {
              "min_std_param": {
                "$type": "torch.Tensor"
              }
            },
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_mean_module": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 11.0,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      },
                      "1": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  },
                  "_output_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 1.0,
                            "$type": "torch.nn.modules.linear.Linear"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  }
                },
                "_output_dim": 1.0,
                "$type": "garage.torch.modules.mlp_module.MLPModule"
              }
            },
            "_input_dim": 11.0,
            "_hidden_sizes": [
              32,
              32
            ],
            "_action_dim": 1.0,
            "_learn_std": true,
            "_std_hidden_sizes": [
              32,
              32
            ],
            "_min_std": 1e-06,
            "_max_std": "None",
            "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
            "_std_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_std_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_std_output_nonlinearity": "None",
            "_std_output_w_init": {
              "$type": "builtins.function"
            },
            "_std_parameterization": "exp",
            "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
            "_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_output_nonlinearity": "None",
            "_output_w_init": {
              "$type": "builtins.function"
            },
            "_output_b_init": {
              "$type": "builtins.function"
            },
            "_layer_normalization": false,
            "_norm_dist_class": {
              "$typename": "torch.distributions.normal.Normal"
            },
            "_min_std_param": {
              "$type": "torch.Tensor"
            },
            "_max_std_param": "None",
            "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
          }
        },
        "_env_spec": {
          "max_episode_length": 1000,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_name": "GaussianMLPPolicy",
        "_obs_dim": 11.0,
        "_action_dim": 1.0,
        "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
      },
      {
        "training": true,
        "_parameters": {},
        "_buffers": {},
        "_non_persistent_buffers_set": [],
        "_backward_hooks": {},
        "_forward_hooks": {},
        "_forward_pre_hooks": {},
        "_state_dict_hooks": {},
        "_load_state_dict_pre_hooks": {},
        "_modules": {
          "_module": {
            "training": true,
            "_parameters": {
              "_init_std": {
                "$type": "torch.nn.parameter.Parameter"
              }
            },
            "_buffers": {
              "min_std_param": {
                "$type": "torch.Tensor"
              }
            },
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_mean_module": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 11.0,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      },
                      "1": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  },
                  "_output_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 1.0,
                            "$type": "torch.nn.modules.linear.Linear"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  }
                },
                "_output_dim": 1.0,
                "$type": "garage.torch.modules.mlp_module.MLPModule"
              }
            },
            "_input_dim": 11.0,
            "_hidden_sizes": [
              32,
              32
            ],
            "_action_dim": 1.0,
            "_learn_std": true,
            "_std_hidden_sizes": [
              32,
              32
            ],
            "_min_std": 1e-06,
            "_max_std": "None",
            "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
            "_std_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_std_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_std_output_nonlinearity": "None",
            "_std_output_w_init": {
              "$type": "builtins.function"
            },
            "_std_parameterization": "exp",
            "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
            "_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_output_nonlinearity": "None",
            "_output_w_init": {
              "$type": "builtins.function"
            },
            "_output_b_init": {
              "$type": "builtins.function"
            },
            "_layer_normalization": false,
            "_norm_dist_class": {
              "$typename": "torch.distributions.normal.Normal"
            },
            "_min_std_param": {
              "$type": "torch.Tensor"
            },
            "_max_std_param": "None",
            "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
          }
        },
        "_env_spec": {
          "max_episode_length": 1000,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_name": "GaussianMLPPolicy",
        "_obs_dim": 11.0,
        "_action_dim": 1.0,
        "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
      },
      {
        "training": true,
        "_parameters": {},
        "_buffers": {},
        "_non_persistent_buffers_set": [],
        "_backward_hooks": {},
        "_forward_hooks": {},
        "_forward_pre_hooks": {},
        "_state_dict_hooks": {},
        "_load_state_dict_pre_hooks": {},
        "_modules": {
          "_module": {
            "training": true,
            "_parameters": {
              "_init_std": {
                "$type": "torch.nn.parameter.Parameter"
              }
            },
            "_buffers": {
              "min_std_param": {
                "$type": "torch.Tensor"
              }
            },
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_mean_module": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 11.0,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      },
                      "1": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  },
                  "_output_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 1.0,
                            "$type": "torch.nn.modules.linear.Linear"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  }
                },
                "_output_dim": 1.0,
                "$type": "garage.torch.modules.mlp_module.MLPModule"
              }
            },
            "_input_dim": 11.0,
            "_hidden_sizes": [
              32,
              32
            ],
            "_action_dim": 1.0,
            "_learn_std": true,
            "_std_hidden_sizes": [
              32,
              32
            ],
            "_min_std": 1e-06,
            "_max_std": "None",
            "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
            "_std_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_std_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_std_output_nonlinearity": "None",
            "_std_output_w_init": {
              "$type": "builtins.function"
            },
            "_std_parameterization": "exp",
            "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
            "_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_output_nonlinearity": "None",
            "_output_w_init": {
              "$type": "builtins.function"
            },
            "_output_b_init": {
              "$type": "builtins.function"
            },
            "_layer_normalization": false,
            "_norm_dist_class": {
              "$typename": "torch.distributions.normal.Normal"
            },
            "_min_std_param": {
              "$type": "torch.Tensor"
            },
            "_max_std_param": "None",
            "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
          }
        },
        "_env_spec": {
          "max_episode_length": 1000,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_name": "GaussianMLPPolicy",
        "_obs_dim": 11.0,
        "_action_dim": 1.0,
        "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
      },
      {
        "training": true,
        "_parameters": {},
        "_buffers": {},
        "_non_persistent_buffers_set": [],
        "_backward_hooks": {},
        "_forward_hooks": {},
        "_forward_pre_hooks": {},
        "_state_dict_hooks": {},
        "_load_state_dict_pre_hooks": {},
        "_modules": {
          "_module": {
            "training": true,
            "_parameters": {
              "_init_std": {
                "$type": "torch.nn.parameter.Parameter"
              }
            },
            "_buffers": {
              "min_std_param": {
                "$type": "torch.Tensor"
              }
            },
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_mean_module": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 11.0,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      },
                      "1": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  },
                  "_output_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 1.0,
                            "$type": "torch.nn.modules.linear.Linear"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  }
                },
                "_output_dim": 1.0,
                "$type": "garage.torch.modules.mlp_module.MLPModule"
              }
            },
            "_input_dim": 11.0,
            "_hidden_sizes": [
              32,
              32
            ],
            "_action_dim": 1.0,
            "_learn_std": true,
            "_std_hidden_sizes": [
              32,
              32
            ],
            "_min_std": 1e-06,
            "_max_std": "None",
            "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
            "_std_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_std_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_std_output_nonlinearity": "None",
            "_std_output_w_init": {
              "$type": "builtins.function"
            },
            "_std_parameterization": "exp",
            "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
            "_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_output_nonlinearity": "None",
            "_output_w_init": {
              "$type": "builtins.function"
            },
            "_output_b_init": {
              "$type": "builtins.function"
            },
            "_layer_normalization": false,
            "_norm_dist_class": {
              "$typename": "torch.distributions.normal.Normal"
            },
            "_min_std_param": {
              "$type": "torch.Tensor"
            },
            "_max_std_param": "None",
            "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
          }
        },
        "_env_spec": {
          "max_episode_length": 1000,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_name": "GaussianMLPPolicy",
        "_obs_dim": 11.0,
        "_action_dim": 1.0,
        "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
      },
      {
        "training": true,
        "_parameters": {},
        "_buffers": {},
        "_non_persistent_buffers_set": [],
        "_backward_hooks": {},
        "_forward_hooks": {},
        "_forward_pre_hooks": {},
        "_state_dict_hooks": {},
        "_load_state_dict_pre_hooks": {},
        "_modules": {
          "_module": {
            "training": true,
            "_parameters": {
              "_init_std": {
                "$type": "torch.nn.parameter.Parameter"
              }
            },
            "_buffers": {
              "min_std_param": {
                "$type": "torch.Tensor"
              }
            },
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_mean_module": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 11.0,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      },
                      "1": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  },
                  "_output_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 1.0,
                            "$type": "torch.nn.modules.linear.Linear"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  }
                },
                "_output_dim": 1.0,
                "$type": "garage.torch.modules.mlp_module.MLPModule"
              }
            },
            "_input_dim": 11.0,
            "_hidden_sizes": [
              32,
              32
            ],
            "_action_dim": 1.0,
            "_learn_std": true,
            "_std_hidden_sizes": [
              32,
              32
            ],
            "_min_std": 1e-06,
            "_max_std": "None",
            "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
            "_std_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_std_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_std_output_nonlinearity": "None",
            "_std_output_w_init": {
              "$type": "builtins.function"
            },
            "_std_parameterization": "exp",
            "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
            "_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_output_nonlinearity": "None",
            "_output_w_init": {
              "$type": "builtins.function"
            },
            "_output_b_init": {
              "$type": "builtins.function"
            },
            "_layer_normalization": false,
            "_norm_dist_class": {
              "$typename": "torch.distributions.normal.Normal"
            },
            "_min_std_param": {
              "$type": "torch.Tensor"
            },
            "_max_std_param": "None",
            "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
          }
        },
        "_env_spec": {
          "max_episode_length": 1000,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_name": "GaussianMLPPolicy",
        "_obs_dim": 11.0,
        "_action_dim": 1.0,
        "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
      },
      {
        "training": true,
        "_parameters": {},
        "_buffers": {},
        "_non_persistent_buffers_set": [],
        "_backward_hooks": {},
        "_forward_hooks": {},
        "_forward_pre_hooks": {},
        "_state_dict_hooks": {},
        "_load_state_dict_pre_hooks": {},
        "_modules": {
          "_module": {
            "training": true,
            "_parameters": {
              "_init_std": {
                "$type": "torch.nn.parameter.Parameter"
              }
            },
            "_buffers": {
              "min_std_param": {
                "$type": "torch.Tensor"
              }
            },
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_mean_module": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 11.0,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      },
                      "1": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  },
                  "_output_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 1.0,
                            "$type": "torch.nn.modules.linear.Linear"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  }
                },
                "_output_dim": 1.0,
                "$type": "garage.torch.modules.mlp_module.MLPModule"
              }
            },
            "_input_dim": 11.0,
            "_hidden_sizes": [
              32,
              32
            ],
            "_action_dim": 1.0,
            "_learn_std": true,
            "_std_hidden_sizes": [
              32,
              32
            ],
            "_min_std": 1e-06,
            "_max_std": "None",
            "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
            "_std_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_std_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_std_output_nonlinearity": "None",
            "_std_output_w_init": {
              "$type": "builtins.function"
            },
            "_std_parameterization": "exp",
            "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
            "_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_output_nonlinearity": "None",
            "_output_w_init": {
              "$type": "builtins.function"
            },
            "_output_b_init": {
              "$type": "builtins.function"
            },
            "_layer_normalization": false,
            "_norm_dist_class": {
              "$typename": "torch.distributions.normal.Normal"
            },
            "_min_std_param": {
              "$type": "torch.Tensor"
            },
            "_max_std_param": "None",
            "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
          }
        },
        "_env_spec": {
          "max_episode_length": 1000,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_name": "GaussianMLPPolicy",
        "_obs_dim": 11.0,
        "_action_dim": 1.0,
        "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
      },
      {
        "training": true,
        "_parameters": {},
        "_buffers": {},
        "_non_persistent_buffers_set": [],
        "_backward_hooks": {},
        "_forward_hooks": {},
        "_forward_pre_hooks": {},
        "_state_dict_hooks": {},
        "_load_state_dict_pre_hooks": {},
        "_modules": {
          "_module": {
            "training": true,
            "_parameters": {
              "_init_std": {
                "$type": "torch.nn.parameter.Parameter"
              }
            },
            "_buffers": {
              "min_std_param": {
                "$type": "torch.Tensor"
              }
            },
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_mean_module": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 11.0,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      },
                      "1": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  },
                  "_output_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 1.0,
                            "$type": "torch.nn.modules.linear.Linear"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  }
                },
                "_output_dim": 1.0,
                "$type": "garage.torch.modules.mlp_module.MLPModule"
              }
            },
            "_input_dim": 11.0,
            "_hidden_sizes": [
              32,
              32
            ],
            "_action_dim": 1.0,
            "_learn_std": true,
            "_std_hidden_sizes": [
              32,
              32
            ],
            "_min_std": 1e-06,
            "_max_std": "None",
            "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
            "_std_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_std_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_std_output_nonlinearity": "None",
            "_std_output_w_init": {
              "$type": "builtins.function"
            },
            "_std_parameterization": "exp",
            "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
            "_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_output_nonlinearity": "None",
            "_output_w_init": {
              "$type": "builtins.function"
            },
            "_output_b_init": {
              "$type": "builtins.function"
            },
            "_layer_normalization": false,
            "_norm_dist_class": {
              "$typename": "torch.distributions.normal.Normal"
            },
            "_min_std_param": {
              "$type": "torch.Tensor"
            },
            "_max_std_param": "None",
            "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
          }
        },
        "_env_spec": {
          "max_episode_length": 1000,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_name": "GaussianMLPPolicy",
        "_obs_dim": 11.0,
        "_action_dim": 1.0,
        "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
      },
      {
        "training": true,
        "_parameters": {},
        "_buffers": {},
        "_non_persistent_buffers_set": [],
        "_backward_hooks": {},
        "_forward_hooks": {},
        "_forward_pre_hooks": {},
        "_state_dict_hooks": {},
        "_load_state_dict_pre_hooks": {},
        "_modules": {
          "_module": {
            "training": true,
            "_parameters": {
              "_init_std": {
                "$type": "torch.nn.parameter.Parameter"
              }
            },
            "_buffers": {
              "min_std_param": {
                "$type": "torch.Tensor"
              }
            },
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_mean_module": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 11.0,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      },
                      "1": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  },
                  "_output_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 1.0,
                            "$type": "torch.nn.modules.linear.Linear"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  }
                },
                "_output_dim": 1.0,
                "$type": "garage.torch.modules.mlp_module.MLPModule"
              }
            },
            "_input_dim": 11.0,
            "_hidden_sizes": [
              32,
              32
            ],
            "_action_dim": 1.0,
            "_learn_std": true,
            "_std_hidden_sizes": [
              32,
              32
            ],
            "_min_std": 1e-06,
            "_max_std": "None",
            "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
            "_std_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_std_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_std_output_nonlinearity": "None",
            "_std_output_w_init": {
              "$type": "builtins.function"
            },
            "_std_parameterization": "exp",
            "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
            "_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_output_nonlinearity": "None",
            "_output_w_init": {
              "$type": "builtins.function"
            },
            "_output_b_init": {
              "$type": "builtins.function"
            },
            "_layer_normalization": false,
            "_norm_dist_class": {
              "$typename": "torch.distributions.normal.Normal"
            },
            "_min_std_param": {
              "$type": "torch.Tensor"
            },
            "_max_std_param": "None",
            "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
          }
        },
        "_env_spec": {
          "max_episode_length": 1000,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_name": "GaussianMLPPolicy",
        "_obs_dim": 11.0,
        "_action_dim": 1.0,
        "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
      },
      {
        "training": true,
        "_parameters": {},
        "_buffers": {},
        "_non_persistent_buffers_set": [],
        "_backward_hooks": {},
        "_forward_hooks": {},
        "_forward_pre_hooks": {},
        "_state_dict_hooks": {},
        "_load_state_dict_pre_hooks": {},
        "_modules": {
          "_module": {
            "training": true,
            "_parameters": {
              "_init_std": {
                "$type": "torch.nn.parameter.Parameter"
              }
            },
            "_buffers": {
              "min_std_param": {
                "$type": "torch.Tensor"
              }
            },
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_mean_module": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 11.0,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      },
                      "1": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  },
                  "_output_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 1.0,
                            "$type": "torch.nn.modules.linear.Linear"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  }
                },
                "_output_dim": 1.0,
                "$type": "garage.torch.modules.mlp_module.MLPModule"
              }
            },
            "_input_dim": 11.0,
            "_hidden_sizes": [
              32,
              32
            ],
            "_action_dim": 1.0,
            "_learn_std": true,
            "_std_hidden_sizes": [
              32,
              32
            ],
            "_min_std": 1e-06,
            "_max_std": "None",
            "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
            "_std_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_std_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_std_output_nonlinearity": "None",
            "_std_output_w_init": {
              "$type": "builtins.function"
            },
            "_std_parameterization": "exp",
            "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
            "_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_output_nonlinearity": "None",
            "_output_w_init": {
              "$type": "builtins.function"
            },
            "_output_b_init": {
              "$type": "builtins.function"
            },
            "_layer_normalization": false,
            "_norm_dist_class": {
              "$typename": "torch.distributions.normal.Normal"
            },
            "_min_std_param": {
              "$type": "torch.Tensor"
            },
            "_max_std_param": "None",
            "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
          }
        },
        "_env_spec": {
          "max_episode_length": 1000,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_name": "GaussianMLPPolicy",
        "_obs_dim": 11.0,
        "_action_dim": 1.0,
        "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
      },
      {
        "training": true,
        "_parameters": {},
        "_buffers": {},
        "_non_persistent_buffers_set": [],
        "_backward_hooks": {},
        "_forward_hooks": {},
        "_forward_pre_hooks": {},
        "_state_dict_hooks": {},
        "_load_state_dict_pre_hooks": {},
        "_modules": {
          "_module": {
            "training": true,
            "_parameters": {
              "_init_std": {
                "$type": "torch.nn.parameter.Parameter"
              }
            },
            "_buffers": {
              "min_std_param": {
                "$type": "torch.Tensor"
              }
            },
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_mean_module": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 11.0,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      },
                      "1": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  },
                  "_output_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 1.0,
                            "$type": "torch.nn.modules.linear.Linear"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  }
                },
                "_output_dim": 1.0,
                "$type": "garage.torch.modules.mlp_module.MLPModule"
              }
            },
            "_input_dim": 11.0,
            "_hidden_sizes": [
              32,
              32
            ],
            "_action_dim": 1.0,
            "_learn_std": true,
            "_std_hidden_sizes": [
              32,
              32
            ],
            "_min_std": 1e-06,
            "_max_std": "None",
            "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
            "_std_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_std_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_std_output_nonlinearity": "None",
            "_std_output_w_init": {
              "$type": "builtins.function"
            },
            "_std_parameterization": "exp",
            "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
            "_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_output_nonlinearity": "None",
            "_output_w_init": {
              "$type": "builtins.function"
            },
            "_output_b_init": {
              "$type": "builtins.function"
            },
            "_layer_normalization": false,
            "_norm_dist_class": {
              "$typename": "torch.distributions.normal.Normal"
            },
            "_min_std_param": {
              "$type": "torch.Tensor"
            },
            "_max_std_param": "None",
            "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
          }
        },
        "_env_spec": {
          "max_episode_length": 1000,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_name": "GaussianMLPPolicy",
        "_obs_dim": 11.0,
        "_action_dim": 1.0,
        "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
      },
      {
        "training": true,
        "_parameters": {},
        "_buffers": {},
        "_non_persistent_buffers_set": [],
        "_backward_hooks": {},
        "_forward_hooks": {},
        "_forward_pre_hooks": {},
        "_state_dict_hooks": {},
        "_load_state_dict_pre_hooks": {},
        "_modules": {
          "_module": {
            "training": true,
            "_parameters": {
              "_init_std": {
                "$type": "torch.nn.parameter.Parameter"
              }
            },
            "_buffers": {
              "min_std_param": {
                "$type": "torch.Tensor"
              }
            },
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_mean_module": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 11.0,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      },
                      "1": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  },
                  "_output_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 1.0,
                            "$type": "torch.nn.modules.linear.Linear"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  }
                },
                "_output_dim": 1.0,
                "$type": "garage.torch.modules.mlp_module.MLPModule"
              }
            },
            "_input_dim": 11.0,
            "_hidden_sizes": [
              32,
              32
            ],
            "_action_dim": 1.0,
            "_learn_std": true,
            "_std_hidden_sizes": [
              32,
              32
            ],
            "_min_std": 1e-06,
            "_max_std": "None",
            "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
            "_std_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_std_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_std_output_nonlinearity": "None",
            "_std_output_w_init": {
              "$type": "builtins.function"
            },
            "_std_parameterization": "exp",
            "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
            "_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_output_nonlinearity": "None",
            "_output_w_init": {
              "$type": "builtins.function"
            },
            "_output_b_init": {
              "$type": "builtins.function"
            },
            "_layer_normalization": false,
            "_norm_dist_class": {
              "$typename": "torch.distributions.normal.Normal"
            },
            "_min_std_param": {
              "$type": "torch.Tensor"
            },
            "_max_std_param": "None",
            "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
          }
        },
        "_env_spec": {
          "max_episode_length": 1000,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_name": "GaussianMLPPolicy",
        "_obs_dim": 11.0,
        "_action_dim": 1.0,
        "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
      },
      {
        "training": true,
        "_parameters": {},
        "_buffers": {},
        "_non_persistent_buffers_set": [],
        "_backward_hooks": {},
        "_forward_hooks": {},
        "_forward_pre_hooks": {},
        "_state_dict_hooks": {},
        "_load_state_dict_pre_hooks": {},
        "_modules": {
          "_module": {
            "training": true,
            "_parameters": {
              "_init_std": {
                "$type": "torch.nn.parameter.Parameter"
              }
            },
            "_buffers": {
              "min_std_param": {
                "$type": "torch.Tensor"
              }
            },
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_mean_module": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 11.0,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      },
                      "1": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  },
                  "_output_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 1.0,
                            "$type": "torch.nn.modules.linear.Linear"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  }
                },
                "_output_dim": 1.0,
                "$type": "garage.torch.modules.mlp_module.MLPModule"
              }
            },
            "_input_dim": 11.0,
            "_hidden_sizes": [
              32,
              32
            ],
            "_action_dim": 1.0,
            "_learn_std": true,
            "_std_hidden_sizes": [
              32,
              32
            ],
            "_min_std": 1e-06,
            "_max_std": "None",
            "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
            "_std_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_std_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_std_output_nonlinearity": "None",
            "_std_output_w_init": {
              "$type": "builtins.function"
            },
            "_std_parameterization": "exp",
            "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
            "_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_output_nonlinearity": "None",
            "_output_w_init": {
              "$type": "builtins.function"
            },
            "_output_b_init": {
              "$type": "builtins.function"
            },
            "_layer_normalization": false,
            "_norm_dist_class": {
              "$typename": "torch.distributions.normal.Normal"
            },
            "_min_std_param": {
              "$type": "torch.Tensor"
            },
            "_max_std_param": "None",
            "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
          }
        },
        "_env_spec": {
          "max_episode_length": 1000,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_name": "GaussianMLPPolicy",
        "_obs_dim": 11.0,
        "_action_dim": 1.0,
        "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
      },
      {
        "training": true,
        "_parameters": {},
        "_buffers": {},
        "_non_persistent_buffers_set": [],
        "_backward_hooks": {},
        "_forward_hooks": {},
        "_forward_pre_hooks": {},
        "_state_dict_hooks": {},
        "_load_state_dict_pre_hooks": {},
        "_modules": {
          "_module": {
            "training": true,
            "_parameters": {
              "_init_std": {
                "$type": "torch.nn.parameter.Parameter"
              }
            },
            "_buffers": {
              "min_std_param": {
                "$type": "torch.Tensor"
              }
            },
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_mean_module": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 11.0,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      },
                      "1": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  },
                  "_output_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 1.0,
                            "$type": "torch.nn.modules.linear.Linear"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  }
                },
                "_output_dim": 1.0,
                "$type": "garage.torch.modules.mlp_module.MLPModule"
              }
            },
            "_input_dim": 11.0,
            "_hidden_sizes": [
              32,
              32
            ],
            "_action_dim": 1.0,
            "_learn_std": true,
            "_std_hidden_sizes": [
              32,
              32
            ],
            "_min_std": 1e-06,
            "_max_std": "None",
            "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
            "_std_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_std_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_std_output_nonlinearity": "None",
            "_std_output_w_init": {
              "$type": "builtins.function"
            },
            "_std_parameterization": "exp",
            "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
            "_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_output_nonlinearity": "None",
            "_output_w_init": {
              "$type": "builtins.function"
            },
            "_output_b_init": {
              "$type": "builtins.function"
            },
            "_layer_normalization": false,
            "_norm_dist_class": {
              "$typename": "torch.distributions.normal.Normal"
            },
            "_min_std_param": {
              "$type": "torch.Tensor"
            },
            "_max_std_param": "None",
            "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
          }
        },
        "_env_spec": {
          "max_episode_length": 1000,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_name": "GaussianMLPPolicy",
        "_obs_dim": 11.0,
        "_action_dim": 1.0,
        "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
      },
      {
        "training": true,
        "_parameters": {},
        "_buffers": {},
        "_non_persistent_buffers_set": [],
        "_backward_hooks": {},
        "_forward_hooks": {},
        "_forward_pre_hooks": {},
        "_state_dict_hooks": {},
        "_load_state_dict_pre_hooks": {},
        "_modules": {
          "_module": {
            "training": true,
            "_parameters": {
              "_init_std": {
                "$type": "torch.nn.parameter.Parameter"
              }
            },
            "_buffers": {
              "min_std_param": {
                "$type": "torch.Tensor"
              }
            },
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_mean_module": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 11.0,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      },
                      "1": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  },
                  "_output_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 1.0,
                            "$type": "torch.nn.modules.linear.Linear"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  }
                },
                "_output_dim": 1.0,
                "$type": "garage.torch.modules.mlp_module.MLPModule"
              }
            },
            "_input_dim": 11.0,
            "_hidden_sizes": [
              32,
              32
            ],
            "_action_dim": 1.0,
            "_learn_std": true,
            "_std_hidden_sizes": [
              32,
              32
            ],
            "_min_std": 1e-06,
            "_max_std": "None",
            "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
            "_std_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_std_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_std_output_nonlinearity": "None",
            "_std_output_w_init": {
              "$type": "builtins.function"
            },
            "_std_parameterization": "exp",
            "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
            "_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_output_nonlinearity": "None",
            "_output_w_init": {
              "$type": "builtins.function"
            },
            "_output_b_init": {
              "$type": "builtins.function"
            },
            "_layer_normalization": false,
            "_norm_dist_class": {
              "$typename": "torch.distributions.normal.Normal"
            },
            "_min_std_param": {
              "$type": "torch.Tensor"
            },
            "_max_std_param": "None",
            "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
          }
        },
        "_env_spec": {
          "max_episode_length": 1000,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_name": "GaussianMLPPolicy",
        "_obs_dim": 11.0,
        "_action_dim": 1.0,
        "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
      },
      {
        "training": true,
        "_parameters": {},
        "_buffers": {},
        "_non_persistent_buffers_set": [],
        "_backward_hooks": {},
        "_forward_hooks": {},
        "_forward_pre_hooks": {},
        "_state_dict_hooks": {},
        "_load_state_dict_pre_hooks": {},
        "_modules": {
          "_module": {
            "training": true,
            "_parameters": {
              "_init_std": {
                "$type": "torch.nn.parameter.Parameter"
              }
            },
            "_buffers": {
              "min_std_param": {
                "$type": "torch.Tensor"
              }
            },
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_mean_module": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 11.0,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      },
                      "1": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  },
                  "_output_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 1.0,
                            "$type": "torch.nn.modules.linear.Linear"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  }
                },
                "_output_dim": 1.0,
                "$type": "garage.torch.modules.mlp_module.MLPModule"
              }
            },
            "_input_dim": 11.0,
            "_hidden_sizes": [
              32,
              32
            ],
            "_action_dim": 1.0,
            "_learn_std": true,
            "_std_hidden_sizes": [
              32,
              32
            ],
            "_min_std": 1e-06,
            "_max_std": "None",
            "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
            "_std_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_std_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_std_output_nonlinearity": "None",
            "_std_output_w_init": {
              "$type": "builtins.function"
            },
            "_std_parameterization": "exp",
            "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
            "_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_output_nonlinearity": "None",
            "_output_w_init": {
              "$type": "builtins.function"
            },
            "_output_b_init": {
              "$type": "builtins.function"
            },
            "_layer_normalization": false,
            "_norm_dist_class": {
              "$typename": "torch.distributions.normal.Normal"
            },
            "_min_std_param": {
              "$type": "torch.Tensor"
            },
            "_max_std_param": "None",
            "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
          }
        },
        "_env_spec": {
          "max_episode_length": 1000,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_name": "GaussianMLPPolicy",
        "_obs_dim": 11.0,
        "_action_dim": 1.0,
        "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
      },
      {
        "training": true,
        "_parameters": {},
        "_buffers": {},
        "_non_persistent_buffers_set": [],
        "_backward_hooks": {},
        "_forward_hooks": {},
        "_forward_pre_hooks": {},
        "_state_dict_hooks": {},
        "_load_state_dict_pre_hooks": {},
        "_modules": {
          "_module": {
            "training": true,
            "_parameters": {
              "_init_std": {
                "$type": "torch.nn.parameter.Parameter"
              }
            },
            "_buffers": {
              "min_std_param": {
                "$type": "torch.Tensor"
              }
            },
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_mean_module": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 11.0,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      },
                      "1": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  },
                  "_output_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 1.0,
                            "$type": "torch.nn.modules.linear.Linear"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  }
                },
                "_output_dim": 1.0,
                "$type": "garage.torch.modules.mlp_module.MLPModule"
              }
            },
            "_input_dim": 11.0,
            "_hidden_sizes": [
              32,
              32
            ],
            "_action_dim": 1.0,
            "_learn_std": true,
            "_std_hidden_sizes": [
              32,
              32
            ],
            "_min_std": 1e-06,
            "_max_std": "None",
            "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
            "_std_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_std_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_std_output_nonlinearity": "None",
            "_std_output_w_init": {
              "$type": "builtins.function"
            },
            "_std_parameterization": "exp",
            "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
            "_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_output_nonlinearity": "None",
            "_output_w_init": {
              "$type": "builtins.function"
            },
            "_output_b_init": {
              "$type": "builtins.function"
            },
            "_layer_normalization": false,
            "_norm_dist_class": {
              "$typename": "torch.distributions.normal.Normal"
            },
            "_min_std_param": {
              "$type": "torch.Tensor"
            },
            "_max_std_param": "None",
            "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
          }
        },
        "_env_spec": {
          "max_episode_length": 1000,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_name": "GaussianMLPPolicy",
        "_obs_dim": 11.0,
        "_action_dim": 1.0,
        "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
      },
      {
        "training": true,
        "_parameters": {},
        "_buffers": {},
        "_non_persistent_buffers_set": [],
        "_backward_hooks": {},
        "_forward_hooks": {},
        "_forward_pre_hooks": {},
        "_state_dict_hooks": {},
        "_load_state_dict_pre_hooks": {},
        "_modules": {
          "_module": {
            "training": true,
            "_parameters": {
              "_init_std": {
                "$type": "torch.nn.parameter.Parameter"
              }
            },
            "_buffers": {
              "min_std_param": {
                "$type": "torch.Tensor"
              }
            },
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_mean_module": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 11.0,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      },
                      "1": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  },
                  "_output_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 1.0,
                            "$type": "torch.nn.modules.linear.Linear"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  }
                },
                "_output_dim": 1.0,
                "$type": "garage.torch.modules.mlp_module.MLPModule"
              }
            },
            "_input_dim": 11.0,
            "_hidden_sizes": [
              32,
              32
            ],
            "_action_dim": 1.0,
            "_learn_std": true,
            "_std_hidden_sizes": [
              32,
              32
            ],
            "_min_std": 1e-06,
            "_max_std": "None",
            "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
            "_std_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_std_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_std_output_nonlinearity": "None",
            "_std_output_w_init": {
              "$type": "builtins.function"
            },
            "_std_parameterization": "exp",
            "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
            "_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_output_nonlinearity": "None",
            "_output_w_init": {
              "$type": "builtins.function"
            },
            "_output_b_init": {
              "$type": "builtins.function"
            },
            "_layer_normalization": false,
            "_norm_dist_class": {
              "$typename": "torch.distributions.normal.Normal"
            },
            "_min_std_param": {
              "$type": "torch.Tensor"
            },
            "_max_std_param": "None",
            "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
          }
        },
        "_env_spec": {
          "max_episode_length": 1000,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_name": "GaussianMLPPolicy",
        "_obs_dim": 11.0,
        "_action_dim": 1.0,
        "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
      },
      {
        "training": true,
        "_parameters": {},
        "_buffers": {},
        "_non_persistent_buffers_set": [],
        "_backward_hooks": {},
        "_forward_hooks": {},
        "_forward_pre_hooks": {},
        "_state_dict_hooks": {},
        "_load_state_dict_pre_hooks": {},
        "_modules": {
          "_module": {
            "training": true,
            "_parameters": {
              "_init_std": {
                "$type": "torch.nn.parameter.Parameter"
              }
            },
            "_buffers": {
              "min_std_param": {
                "$type": "torch.Tensor"
              }
            },
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_mean_module": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 11.0,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      },
                      "1": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  },
                  "_output_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 1.0,
                            "$type": "torch.nn.modules.linear.Linear"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  }
                },
                "_output_dim": 1.0,
                "$type": "garage.torch.modules.mlp_module.MLPModule"
              }
            },
            "_input_dim": 11.0,
            "_hidden_sizes": [
              32,
              32
            ],
            "_action_dim": 1.0,
            "_learn_std": true,
            "_std_hidden_sizes": [
              32,
              32
            ],
            "_min_std": 1e-06,
            "_max_std": "None",
            "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
            "_std_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_std_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_std_output_nonlinearity": "None",
            "_std_output_w_init": {
              "$type": "builtins.function"
            },
            "_std_parameterization": "exp",
            "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
            "_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_output_nonlinearity": "None",
            "_output_w_init": {
              "$type": "builtins.function"
            },
            "_output_b_init": {
              "$type": "builtins.function"
            },
            "_layer_normalization": false,
            "_norm_dist_class": {
              "$typename": "torch.distributions.normal.Normal"
            },
            "_min_std_param": {
              "$type": "torch.Tensor"
            },
            "_max_std_param": "None",
            "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
          }
        },
        "_env_spec": {
          "max_episode_length": 1000,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_name": "GaussianMLPPolicy",
        "_obs_dim": 11.0,
        "_action_dim": 1.0,
        "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
      },
      {
        "training": true,
        "_parameters": {},
        "_buffers": {},
        "_non_persistent_buffers_set": [],
        "_backward_hooks": {},
        "_forward_hooks": {},
        "_forward_pre_hooks": {},
        "_state_dict_hooks": {},
        "_load_state_dict_pre_hooks": {},
        "_modules": {
          "_module": {
            "training": true,
            "_parameters": {
              "_init_std": {
                "$type": "torch.nn.parameter.Parameter"
              }
            },
            "_buffers": {
              "min_std_param": {
                "$type": "torch.Tensor"
              }
            },
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_mean_module": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 11.0,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      },
                      "1": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  },
                  "_output_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 1.0,
                            "$type": "torch.nn.modules.linear.Linear"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  }
                },
                "_output_dim": 1.0,
                "$type": "garage.torch.modules.mlp_module.MLPModule"
              }
            },
            "_input_dim": 11.0,
            "_hidden_sizes": [
              32,
              32
            ],
            "_action_dim": 1.0,
            "_learn_std": true,
            "_std_hidden_sizes": [
              32,
              32
            ],
            "_min_std": 1e-06,
            "_max_std": "None",
            "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
            "_std_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_std_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_std_output_nonlinearity": "None",
            "_std_output_w_init": {
              "$type": "builtins.function"
            },
            "_std_parameterization": "exp",
            "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
            "_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_output_nonlinearity": "None",
            "_output_w_init": {
              "$type": "builtins.function"
            },
            "_output_b_init": {
              "$type": "builtins.function"
            },
            "_layer_normalization": false,
            "_norm_dist_class": {
              "$typename": "torch.distributions.normal.Normal"
            },
            "_min_std_param": {
              "$type": "torch.Tensor"
            },
            "_max_std_param": "None",
            "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
          }
        },
        "_env_spec": {
          "max_episode_length": 1000,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_name": "GaussianMLPPolicy",
        "_obs_dim": 11.0,
        "_action_dim": 1.0,
        "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
      },
      {
        "training": true,
        "_parameters": {},
        "_buffers": {},
        "_non_persistent_buffers_set": [],
        "_backward_hooks": {},
        "_forward_hooks": {},
        "_forward_pre_hooks": {},
        "_state_dict_hooks": {},
        "_load_state_dict_pre_hooks": {},
        "_modules": {
          "_module": {
            "training": true,
            "_parameters": {
              "_init_std": {
                "$type": "torch.nn.parameter.Parameter"
              }
            },
            "_buffers": {
              "min_std_param": {
                "$type": "torch.Tensor"
              }
            },
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_mean_module": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 11.0,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      },
                      "1": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  },
                  "_output_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 1.0,
                            "$type": "torch.nn.modules.linear.Linear"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  }
                },
                "_output_dim": 1.0,
                "$type": "garage.torch.modules.mlp_module.MLPModule"
              }
            },
            "_input_dim": 11.0,
            "_hidden_sizes": [
              32,
              32
            ],
            "_action_dim": 1.0,
            "_learn_std": true,
            "_std_hidden_sizes": [
              32,
              32
            ],
            "_min_std": 1e-06,
            "_max_std": "None",
            "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
            "_std_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_std_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_std_output_nonlinearity": "None",
            "_std_output_w_init": {
              "$type": "builtins.function"
            },
            "_std_parameterization": "exp",
            "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
            "_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_output_nonlinearity": "None",
            "_output_w_init": {
              "$type": "builtins.function"
            },
            "_output_b_init": {
              "$type": "builtins.function"
            },
            "_layer_normalization": false,
            "_norm_dist_class": {
              "$typename": "torch.distributions.normal.Normal"
            },
            "_min_std_param": {
              "$type": "torch.Tensor"
            },
            "_max_std_param": "None",
            "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
          }
        },
        "_env_spec": {
          "max_episode_length": 1000,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_name": "GaussianMLPPolicy",
        "_obs_dim": 11.0,
        "_action_dim": 1.0,
        "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
      },
      {
        "training": true,
        "_parameters": {},
        "_buffers": {},
        "_non_persistent_buffers_set": [],
        "_backward_hooks": {},
        "_forward_hooks": {},
        "_forward_pre_hooks": {},
        "_state_dict_hooks": {},
        "_load_state_dict_pre_hooks": {},
        "_modules": {
          "_module": {
            "training": true,
            "_parameters": {
              "_init_std": {
                "$type": "torch.nn.parameter.Parameter"
              }
            },
            "_buffers": {
              "min_std_param": {
                "$type": "torch.Tensor"
              }
            },
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_mean_module": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 11.0,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      },
                      "1": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  },
                  "_output_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 1.0,
                            "$type": "torch.nn.modules.linear.Linear"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  }
                },
                "_output_dim": 1.0,
                "$type": "garage.torch.modules.mlp_module.MLPModule"
              }
            },
            "_input_dim": 11.0,
            "_hidden_sizes": [
              32,
              32
            ],
            "_action_dim": 1.0,
            "_learn_std": true,
            "_std_hidden_sizes": [
              32,
              32
            ],
            "_min_std": 1e-06,
            "_max_std": "None",
            "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
            "_std_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_std_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_std_output_nonlinearity": "None",
            "_std_output_w_init": {
              "$type": "builtins.function"
            },
            "_std_parameterization": "exp",
            "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
            "_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_output_nonlinearity": "None",
            "_output_w_init": {
              "$type": "builtins.function"
            },
            "_output_b_init": {
              "$type": "builtins.function"
            },
            "_layer_normalization": false,
            "_norm_dist_class": {
              "$typename": "torch.distributions.normal.Normal"
            },
            "_min_std_param": {
              "$type": "torch.Tensor"
            },
            "_max_std_param": "None",
            "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
          }
        },
        "_env_spec": {
          "max_episode_length": 1000,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_name": "GaussianMLPPolicy",
        "_obs_dim": 11.0,
        "_action_dim": 1.0,
        "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
      }
    ],
    "_envs": [
      {
        "_env": {
          "env": {
            "env": {
              "env": {
                "env": {
                  "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                  "model": "<mujoco._structs.MjModel object at 0x7f1bfd2c3070>",
                  "data": "<mujoco._structs.MjData object at 0x7f1bfcef6070>",
                  "init_qpos": "array([0., 0., 0.])",
                  "init_qvel": "array([0., 0., 0.])",
                  "_viewers": {},
                  "frame_skip": 5,
                  "viewer": "None",
                  "observation_space": {
                    "dtype": "dtype('float64')",
                    "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                    "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                    "_shape": [
                      11
                    ],
                    "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                    "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                    "low_repr": "-inf",
                    "high_repr": "inf",
                    "_np_random": "None",
                    "$type": "gym.spaces.box.Box"
                  },
                  "action_space": {
                    "dtype": "dtype('float32')",
                    "bounded_below": "array([ True])",
                    "bounded_above": "array([ True])",
                    "_shape": [
                      1
                    ],
                    "low": "array([-1.], dtype=float32)",
                    "high": "array([1.], dtype=float32)",
                    "low_repr": "-1.0",
                    "high_repr": "1.0",
                    "_np_random": "None",
                    "$type": "gym.spaces.box.Box"
                  },
                  "render_mode": "None",
                  "renderer": {
                    "no_returns_render": [
                      "human"
                    ],
                    "single_render": [
                      "single_depth_array",
                      "single_rgb_array",
                      "single_state_pixels"
                    ],
                    "mode": "None",
                    "render": {
                      "$type": "functools.partial"
                    },
                    "render_list": [],
                    "$type": "gym.utils.renderer.Renderer"
                  },
                  "_ezpickle_args": [],
                  "_ezpickle_kwargs": {},
                  "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "checked_reset": false,
                "checked_step": false,
                "checked_render": false,
                "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": true,
            "_has_reset": false,
            "_disable_render_order_enforcing": false,
            "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
          },
          "_action_space": "None",
          "_observation_space": "None",
          "_reward_range": "None",
          "_metadata": "None",
          "new_step_api": false,
          "_max_episode_steps": 1000,
          "_elapsed_steps": "None",
          "$type": "gym.wrappers.time_limit.TimeLimit"
        },
        "_max_episode_length": 1000,
        "_render_modes": [
          "human",
          "rgb_array",
          "depth_array",
          "single_rgb_array",
          "single_depth_array"
        ],
        "_step_cnt": "None",
        "_visualize": false,
        "_action_space": {
          "dtype": "dtype('float32')",
          "bounded_below": "array([ True])",
          "bounded_above": "array([ True])",
          "_shape": [
            1
          ],
          "low": "array([-1.], dtype=float32)",
          "high": "array([1.], dtype=float32)",
          "low_repr": "-1.0",
          "high_repr": "1.0",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "_observation_space": {
          "dtype": "dtype('float32')",
          "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
          "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
          "_shape": [
            11
          ],
          "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
          "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
          "low_repr": "-inf",
          "high_repr": "inf",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "_spec": {
          "max_episode_length": 1000,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_env_info": "None",
        "$type": "garage.envs.gym_env.GymEnv"
      },
      {
        "_env": {
          "env": {
            "env": {
              "env": {
                "env": {
                  "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                  "model": "<mujoco._structs.MjModel object at 0x7f1bfd8b05b0>",
                  "data": "<mujoco._structs.MjData object at 0x7f1bfd8b0970>",
                  "init_qpos": "array([0., 0., 0.])",
                  "init_qvel": "array([0., 0., 0.])",
                  "_viewers": {},
                  "frame_skip": 5,
                  "viewer": "None",
                  "observation_space": {
                    "dtype": "dtype('float64')",
                    "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                    "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                    "_shape": [
                      11
                    ],
                    "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                    "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                    "low_repr": "-inf",
                    "high_repr": "inf",
                    "_np_random": "None",
                    "$type": "gym.spaces.box.Box"
                  },
                  "action_space": {
                    "dtype": "dtype('float32')",
                    "bounded_below": "array([ True])",
                    "bounded_above": "array([ True])",
                    "_shape": [
                      1
                    ],
                    "low": "array([-1.], dtype=float32)",
                    "high": "array([1.], dtype=float32)",
                    "low_repr": "-1.0",
                    "high_repr": "1.0",
                    "_np_random": "None",
                    "$type": "gym.spaces.box.Box"
                  },
                  "render_mode": "None",
                  "renderer": {
                    "no_returns_render": [
                      "human"
                    ],
                    "single_render": [
                      "single_depth_array",
                      "single_rgb_array",
                      "single_state_pixels"
                    ],
                    "mode": "None",
                    "render": {
                      "$type": "functools.partial"
                    },
                    "render_list": [],
                    "$type": "gym.utils.renderer.Renderer"
                  },
                  "_ezpickle_args": [],
                  "_ezpickle_kwargs": {},
                  "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "checked_reset": false,
                "checked_step": false,
                "checked_render": false,
                "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": true,
            "_has_reset": false,
            "_disable_render_order_enforcing": false,
            "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
          },
          "_action_space": "None",
          "_observation_space": "None",
          "_reward_range": "None",
          "_metadata": "None",
          "new_step_api": false,
          "_max_episode_steps": 1000,
          "_elapsed_steps": "None",
          "$type": "gym.wrappers.time_limit.TimeLimit"
        },
        "_max_episode_length": 1000,
        "_render_modes": [
          "human",
          "rgb_array",
          "depth_array",
          "single_rgb_array",
          "single_depth_array"
        ],
        "_step_cnt": "None",
        "_visualize": false,
        "_action_space": {
          "dtype": "dtype('float32')",
          "bounded_below": "array([ True])",
          "bounded_above": "array([ True])",
          "_shape": [
            1
          ],
          "low": "array([-1.], dtype=float32)",
          "high": "array([1.], dtype=float32)",
          "low_repr": "-1.0",
          "high_repr": "1.0",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "_observation_space": {
          "dtype": "dtype('float32')",
          "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
          "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
          "_shape": [
            11
          ],
          "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
          "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
          "low_repr": "-inf",
          "high_repr": "inf",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "_spec": {
          "max_episode_length": 1000,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_env_info": "None",
        "$type": "garage.envs.gym_env.GymEnv"
      },
      {
        "_env": {
          "env": {
            "env": {
              "env": {
                "env": {
                  "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                  "model": "<mujoco._structs.MjModel object at 0x7f1bfca013b0>",
                  "data": "<mujoco._structs.MjData object at 0x7f1bfca013f0>",
                  "init_qpos": "array([0., 0., 0.])",
                  "init_qvel": "array([0., 0., 0.])",
                  "_viewers": {},
                  "frame_skip": 5,
                  "viewer": "None",
                  "observation_space": {
                    "dtype": "dtype('float64')",
                    "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                    "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                    "_shape": [
                      11
                    ],
                    "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                    "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                    "low_repr": "-inf",
                    "high_repr": "inf",
                    "_np_random": "None",
                    "$type": "gym.spaces.box.Box"
                  },
                  "action_space": {
                    "dtype": "dtype('float32')",
                    "bounded_below": "array([ True])",
                    "bounded_above": "array([ True])",
                    "_shape": [
                      1
                    ],
                    "low": "array([-1.], dtype=float32)",
                    "high": "array([1.], dtype=float32)",
                    "low_repr": "-1.0",
                    "high_repr": "1.0",
                    "_np_random": "None",
                    "$type": "gym.spaces.box.Box"
                  },
                  "render_mode": "None",
                  "renderer": {
                    "no_returns_render": [
                      "human"
                    ],
                    "single_render": [
                      "single_depth_array",
                      "single_rgb_array",
                      "single_state_pixels"
                    ],
                    "mode": "None",
                    "render": {
                      "$type": "functools.partial"
                    },
                    "render_list": [],
                    "$type": "gym.utils.renderer.Renderer"
                  },
                  "_ezpickle_args": [],
                  "_ezpickle_kwargs": {},
                  "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "checked_reset": false,
                "checked_step": false,
                "checked_render": false,
                "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": true,
            "_has_reset": false,
            "_disable_render_order_enforcing": false,
            "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
          },
          "_action_space": "None",
          "_observation_space": "None",
          "_reward_range": "None",
          "_metadata": "None",
          "new_step_api": false,
          "_max_episode_steps": 1000,
          "_elapsed_steps": "None",
          "$type": "gym.wrappers.time_limit.TimeLimit"
        },
        "_max_episode_length": 1000,
        "_render_modes": [
          "human",
          "rgb_array",
          "depth_array",
          "single_rgb_array",
          "single_depth_array"
        ],
        "_step_cnt": "None",
        "_visualize": false,
        "_action_space": {
          "dtype": "dtype('float32')",
          "bounded_below": "array([ True])",
          "bounded_above": "array([ True])",
          "_shape": [
            1
          ],
          "low": "array([-1.], dtype=float32)",
          "high": "array([1.], dtype=float32)",
          "low_repr": "-1.0",
          "high_repr": "1.0",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "_observation_space": {
          "dtype": "dtype('float32')",
          "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
          "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
          "_shape": [
            11
          ],
          "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
          "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
          "low_repr": "-inf",
          "high_repr": "inf",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "_spec": {
          "max_episode_length": 1000,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_env_info": "None",
        "$type": "garage.envs.gym_env.GymEnv"
      },
      {
        "_env": {
          "env": {
            "env": {
              "env": {
                "env": {
                  "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                  "model": "<mujoco._structs.MjModel object at 0x7f1bfca01df0>",
                  "data": "<mujoco._structs.MjData object at 0x7f1bfca01e30>",
                  "init_qpos": "array([0., 0., 0.])",
                  "init_qvel": "array([0., 0., 0.])",
                  "_viewers": {},
                  "frame_skip": 5,
                  "viewer": "None",
                  "observation_space": {
                    "dtype": "dtype('float64')",
                    "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                    "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                    "_shape": [
                      11
                    ],
                    "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                    "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                    "low_repr": "-inf",
                    "high_repr": "inf",
                    "_np_random": "None",
                    "$type": "gym.spaces.box.Box"
                  },
                  "action_space": {
                    "dtype": "dtype('float32')",
                    "bounded_below": "array([ True])",
                    "bounded_above": "array([ True])",
                    "_shape": [
                      1
                    ],
                    "low": "array([-1.], dtype=float32)",
                    "high": "array([1.], dtype=float32)",
                    "low_repr": "-1.0",
                    "high_repr": "1.0",
                    "_np_random": "None",
                    "$type": "gym.spaces.box.Box"
                  },
                  "render_mode": "None",
                  "renderer": {
                    "no_returns_render": [
                      "human"
                    ],
                    "single_render": [
                      "single_depth_array",
                      "single_rgb_array",
                      "single_state_pixels"
                    ],
                    "mode": "None",
                    "render": {
                      "$type": "functools.partial"
                    },
                    "render_list": [],
                    "$type": "gym.utils.renderer.Renderer"
                  },
                  "_ezpickle_args": [],
                  "_ezpickle_kwargs": {},
                  "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "checked_reset": false,
                "checked_step": false,
                "checked_render": false,
                "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": true,
            "_has_reset": false,
            "_disable_render_order_enforcing": false,
            "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
          },
          "_action_space": "None",
          "_observation_space": "None",
          "_reward_range": "None",
          "_metadata": "None",
          "new_step_api": false,
          "_max_episode_steps": 1000,
          "_elapsed_steps": "None",
          "$type": "gym.wrappers.time_limit.TimeLimit"
        },
        "_max_episode_length": 1000,
        "_render_modes": [
          "human",
          "rgb_array",
          "depth_array",
          "single_rgb_array",
          "single_depth_array"
        ],
        "_step_cnt": "None",
        "_visualize": false,
        "_action_space": {
          "dtype": "dtype('float32')",
          "bounded_below": "array([ True])",
          "bounded_above": "array([ True])",
          "_shape": [
            1
          ],
          "low": "array([-1.], dtype=float32)",
          "high": "array([1.], dtype=float32)",
          "low_repr": "-1.0",
          "high_repr": "1.0",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "_observation_space": {
          "dtype": "dtype('float32')",
          "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
          "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
          "_shape": [
            11
          ],
          "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
          "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
          "low_repr": "-inf",
          "high_repr": "inf",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "_spec": {
          "max_episode_length": 1000,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_env_info": "None",
        "$type": "garage.envs.gym_env.GymEnv"
      },
      {
        "_env": {
          "env": {
            "env": {
              "env": {
                "env": {
                  "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                  "model": "<mujoco._structs.MjModel object at 0x7f1bfc95f870>",
                  "data": "<mujoco._structs.MjData object at 0x7f1bfc95f8b0>",
                  "init_qpos": "array([0., 0., 0.])",
                  "init_qvel": "array([0., 0., 0.])",
                  "_viewers": {},
                  "frame_skip": 5,
                  "viewer": "None",
                  "observation_space": {
                    "dtype": "dtype('float64')",
                    "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                    "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                    "_shape": [
                      11
                    ],
                    "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                    "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                    "low_repr": "-inf",
                    "high_repr": "inf",
                    "_np_random": "None",
                    "$type": "gym.spaces.box.Box"
                  },
                  "action_space": {
                    "dtype": "dtype('float32')",
                    "bounded_below": "array([ True])",
                    "bounded_above": "array([ True])",
                    "_shape": [
                      1
                    ],
                    "low": "array([-1.], dtype=float32)",
                    "high": "array([1.], dtype=float32)",
                    "low_repr": "-1.0",
                    "high_repr": "1.0",
                    "_np_random": "None",
                    "$type": "gym.spaces.box.Box"
                  },
                  "render_mode": "None",
                  "renderer": {
                    "no_returns_render": [
                      "human"
                    ],
                    "single_render": [
                      "single_depth_array",
                      "single_rgb_array",
                      "single_state_pixels"
                    ],
                    "mode": "None",
                    "render": {
                      "$type": "functools.partial"
                    },
                    "render_list": [],
                    "$type": "gym.utils.renderer.Renderer"
                  },
                  "_ezpickle_args": [],
                  "_ezpickle_kwargs": {},
                  "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "checked_reset": false,
                "checked_step": false,
                "checked_render": false,
                "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": true,
            "_has_reset": false,
            "_disable_render_order_enforcing": false,
            "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
          },
          "_action_space": "None",
          "_observation_space": "None",
          "_reward_range": "None",
          "_metadata": "None",
          "new_step_api": false,
          "_max_episode_steps": 1000,
          "_elapsed_steps": "None",
          "$type": "gym.wrappers.time_limit.TimeLimit"
        },
        "_max_episode_length": 1000,
        "_render_modes": [
          "human",
          "rgb_array",
          "depth_array",
          "single_rgb_array",
          "single_depth_array"
        ],
        "_step_cnt": "None",
        "_visualize": false,
        "_action_space": {
          "dtype": "dtype('float32')",
          "bounded_below": "array([ True])",
          "bounded_above": "array([ True])",
          "_shape": [
            1
          ],
          "low": "array([-1.], dtype=float32)",
          "high": "array([1.], dtype=float32)",
          "low_repr": "-1.0",
          "high_repr": "1.0",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "_observation_space": {
          "dtype": "dtype('float32')",
          "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
          "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
          "_shape": [
            11
          ],
          "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
          "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
          "low_repr": "-inf",
          "high_repr": "inf",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "_spec": {
          "max_episode_length": 1000,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_env_info": "None",
        "$type": "garage.envs.gym_env.GymEnv"
      },
      {
        "_env": {
          "env": {
            "env": {
              "env": {
                "env": {
                  "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                  "model": "<mujoco._structs.MjModel object at 0x7f1bfc91b330>",
                  "data": "<mujoco._structs.MjData object at 0x7f1bfc91b370>",
                  "init_qpos": "array([0., 0., 0.])",
                  "init_qvel": "array([0., 0., 0.])",
                  "_viewers": {},
                  "frame_skip": 5,
                  "viewer": "None",
                  "observation_space": {
                    "dtype": "dtype('float64')",
                    "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                    "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                    "_shape": [
                      11
                    ],
                    "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                    "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                    "low_repr": "-inf",
                    "high_repr": "inf",
                    "_np_random": "None",
                    "$type": "gym.spaces.box.Box"
                  },
                  "action_space": {
                    "dtype": "dtype('float32')",
                    "bounded_below": "array([ True])",
                    "bounded_above": "array([ True])",
                    "_shape": [
                      1
                    ],
                    "low": "array([-1.], dtype=float32)",
                    "high": "array([1.], dtype=float32)",
                    "low_repr": "-1.0",
                    "high_repr": "1.0",
                    "_np_random": "None",
                    "$type": "gym.spaces.box.Box"
                  },
                  "render_mode": "None",
                  "renderer": {
                    "no_returns_render": [
                      "human"
                    ],
                    "single_render": [
                      "single_depth_array",
                      "single_rgb_array",
                      "single_state_pixels"
                    ],
                    "mode": "None",
                    "render": {
                      "$type": "functools.partial"
                    },
                    "render_list": [],
                    "$type": "gym.utils.renderer.Renderer"
                  },
                  "_ezpickle_args": [],
                  "_ezpickle_kwargs": {},
                  "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "checked_reset": false,
                "checked_step": false,
                "checked_render": false,
                "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": true,
            "_has_reset": false,
            "_disable_render_order_enforcing": false,
            "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
          },
          "_action_space": "None",
          "_observation_space": "None",
          "_reward_range": "None",
          "_metadata": "None",
          "new_step_api": false,
          "_max_episode_steps": 1000,
          "_elapsed_steps": "None",
          "$type": "gym.wrappers.time_limit.TimeLimit"
        },
        "_max_episode_length": 1000,
        "_render_modes": [
          "human",
          "rgb_array",
          "depth_array",
          "single_rgb_array",
          "single_depth_array"
        ],
        "_step_cnt": "None",
        "_visualize": false,
        "_action_space": {
          "dtype": "dtype('float32')",
          "bounded_below": "array([ True])",
          "bounded_above": "array([ True])",
          "_shape": [
            1
          ],
          "low": "array([-1.], dtype=float32)",
          "high": "array([1.], dtype=float32)",
          "low_repr": "-1.0",
          "high_repr": "1.0",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "_observation_space": {
          "dtype": "dtype('float32')",
          "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
          "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
          "_shape": [
            11
          ],
          "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
          "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
          "low_repr": "-inf",
          "high_repr": "inf",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "_spec": {
          "max_episode_length": 1000,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_env_info": "None",
        "$type": "garage.envs.gym_env.GymEnv"
      },
      {
        "_env": {
          "env": {
            "env": {
              "env": {
                "env": {
                  "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                  "model": "<mujoco._structs.MjModel object at 0x7f1bfc91bdb0>",
                  "data": "<mujoco._structs.MjData object at 0x7f1bfc91bdf0>",
                  "init_qpos": "array([0., 0., 0.])",
                  "init_qvel": "array([0., 0., 0.])",
                  "_viewers": {},
                  "frame_skip": 5,
                  "viewer": "None",
                  "observation_space": {
                    "dtype": "dtype('float64')",
                    "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                    "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                    "_shape": [
                      11
                    ],
                    "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                    "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                    "low_repr": "-inf",
                    "high_repr": "inf",
                    "_np_random": "None",
                    "$type": "gym.spaces.box.Box"
                  },
                  "action_space": {
                    "dtype": "dtype('float32')",
                    "bounded_below": "array([ True])",
                    "bounded_above": "array([ True])",
                    "_shape": [
                      1
                    ],
                    "low": "array([-1.], dtype=float32)",
                    "high": "array([1.], dtype=float32)",
                    "low_repr": "-1.0",
                    "high_repr": "1.0",
                    "_np_random": "None",
                    "$type": "gym.spaces.box.Box"
                  },
                  "render_mode": "None",
                  "renderer": {
                    "no_returns_render": [
                      "human"
                    ],
                    "single_render": [
                      "single_depth_array",
                      "single_rgb_array",
                      "single_state_pixels"
                    ],
                    "mode": "None",
                    "render": {
                      "$type": "functools.partial"
                    },
                    "render_list": [],
                    "$type": "gym.utils.renderer.Renderer"
                  },
                  "_ezpickle_args": [],
                  "_ezpickle_kwargs": {},
                  "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "checked_reset": false,
                "checked_step": false,
                "checked_render": false,
                "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": true,
            "_has_reset": false,
            "_disable_render_order_enforcing": false,
            "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
          },
          "_action_space": "None",
          "_observation_space": "None",
          "_reward_range": "None",
          "_metadata": "None",
          "new_step_api": false,
          "_max_episode_steps": 1000,
          "_elapsed_steps": "None",
          "$type": "gym.wrappers.time_limit.TimeLimit"
        },
        "_max_episode_length": 1000,
        "_render_modes": [
          "human",
          "rgb_array",
          "depth_array",
          "single_rgb_array",
          "single_depth_array"
        ],
        "_step_cnt": "None",
        "_visualize": false,
        "_action_space": {
          "dtype": "dtype('float32')",
          "bounded_below": "array([ True])",
          "bounded_above": "array([ True])",
          "_shape": [
            1
          ],
          "low": "array([-1.], dtype=float32)",
          "high": "array([1.], dtype=float32)",
          "low_repr": "-1.0",
          "high_repr": "1.0",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "_observation_space": {
          "dtype": "dtype('float32')",
          "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
          "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
          "_shape": [
            11
          ],
          "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
          "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
          "low_repr": "-inf",
          "high_repr": "inf",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "_spec": {
          "max_episode_length": 1000,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_env_info": "None",
        "$type": "garage.envs.gym_env.GymEnv"
      },
      {
        "_env": {
          "env": {
            "env": {
              "env": {
                "env": {
                  "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                  "model": "<mujoco._structs.MjModel object at 0x7f1bfc879830>",
                  "data": "<mujoco._structs.MjData object at 0x7f1bfc879870>",
                  "init_qpos": "array([0., 0., 0.])",
                  "init_qvel": "array([0., 0., 0.])",
                  "_viewers": {},
                  "frame_skip": 5,
                  "viewer": "None",
                  "observation_space": {
                    "dtype": "dtype('float64')",
                    "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                    "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                    "_shape": [
                      11
                    ],
                    "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                    "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                    "low_repr": "-inf",
                    "high_repr": "inf",
                    "_np_random": "None",
                    "$type": "gym.spaces.box.Box"
                  },
                  "action_space": {
                    "dtype": "dtype('float32')",
                    "bounded_below": "array([ True])",
                    "bounded_above": "array([ True])",
                    "_shape": [
                      1
                    ],
                    "low": "array([-1.], dtype=float32)",
                    "high": "array([1.], dtype=float32)",
                    "low_repr": "-1.0",
                    "high_repr": "1.0",
                    "_np_random": "None",
                    "$type": "gym.spaces.box.Box"
                  },
                  "render_mode": "None",
                  "renderer": {
                    "no_returns_render": [
                      "human"
                    ],
                    "single_render": [
                      "single_depth_array",
                      "single_rgb_array",
                      "single_state_pixels"
                    ],
                    "mode": "None",
                    "render": {
                      "$type": "functools.partial"
                    },
                    "render_list": [],
                    "$type": "gym.utils.renderer.Renderer"
                  },
                  "_ezpickle_args": [],
                  "_ezpickle_kwargs": {},
                  "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "checked_reset": false,
                "checked_step": false,
                "checked_render": false,
                "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": true,
            "_has_reset": false,
            "_disable_render_order_enforcing": false,
            "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
          },
          "_action_space": "None",
          "_observation_space": "None",
          "_reward_range": "None",
          "_metadata": "None",
          "new_step_api": false,
          "_max_episode_steps": 1000,
          "_elapsed_steps": "None",
          "$type": "gym.wrappers.time_limit.TimeLimit"
        },
        "_max_episode_length": 1000,
        "_render_modes": [
          "human",
          "rgb_array",
          "depth_array",
          "single_rgb_array",
          "single_depth_array"
        ],
        "_step_cnt": "None",
        "_visualize": false,
        "_action_space": {
          "dtype": "dtype('float32')",
          "bounded_below": "array([ True])",
          "bounded_above": "array([ True])",
          "_shape": [
            1
          ],
          "low": "array([-1.], dtype=float32)",
          "high": "array([1.], dtype=float32)",
          "low_repr": "-1.0",
          "high_repr": "1.0",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "_observation_space": {
          "dtype": "dtype('float32')",
          "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
          "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
          "_shape": [
            11
          ],
          "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
          "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
          "low_repr": "-inf",
          "high_repr": "inf",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "_spec": {
          "max_episode_length": 1000,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_env_info": "None",
        "$type": "garage.envs.gym_env.GymEnv"
      },
      {
        "_env": {
          "env": {
            "env": {
              "env": {
                "env": {
                  "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                  "model": "<mujoco._structs.MjModel object at 0x7f1bfc82e2f0>",
                  "data": "<mujoco._structs.MjData object at 0x7f1bfc82e330>",
                  "init_qpos": "array([0., 0., 0.])",
                  "init_qvel": "array([0., 0., 0.])",
                  "_viewers": {},
                  "frame_skip": 5,
                  "viewer": "None",
                  "observation_space": {
                    "dtype": "dtype('float64')",
                    "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                    "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                    "_shape": [
                      11
                    ],
                    "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                    "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                    "low_repr": "-inf",
                    "high_repr": "inf",
                    "_np_random": "None",
                    "$type": "gym.spaces.box.Box"
                  },
                  "action_space": {
                    "dtype": "dtype('float32')",
                    "bounded_below": "array([ True])",
                    "bounded_above": "array([ True])",
                    "_shape": [
                      1
                    ],
                    "low": "array([-1.], dtype=float32)",
                    "high": "array([1.], dtype=float32)",
                    "low_repr": "-1.0",
                    "high_repr": "1.0",
                    "_np_random": "None",
                    "$type": "gym.spaces.box.Box"
                  },
                  "render_mode": "None",
                  "renderer": {
                    "no_returns_render": [
                      "human"
                    ],
                    "single_render": [
                      "single_depth_array",
                      "single_rgb_array",
                      "single_state_pixels"
                    ],
                    "mode": "None",
                    "render": {
                      "$type": "functools.partial"
                    },
                    "render_list": [],
                    "$type": "gym.utils.renderer.Renderer"
                  },
                  "_ezpickle_args": [],
                  "_ezpickle_kwargs": {},
                  "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "checked_reset": false,
                "checked_step": false,
                "checked_render": false,
                "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": true,
            "_has_reset": false,
            "_disable_render_order_enforcing": false,
            "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
          },
          "_action_space": "None",
          "_observation_space": "None",
          "_reward_range": "None",
          "_metadata": "None",
          "new_step_api": false,
          "_max_episode_steps": 1000,
          "_elapsed_steps": "None",
          "$type": "gym.wrappers.time_limit.TimeLimit"
        },
        "_max_episode_length": 1000,
        "_render_modes": [
          "human",
          "rgb_array",
          "depth_array",
          "single_rgb_array",
          "single_depth_array"
        ],
        "_step_cnt": "None",
        "_visualize": false,
        "_action_space": {
          "dtype": "dtype('float32')",
          "bounded_below": "array([ True])",
          "bounded_above": "array([ True])",
          "_shape": [
            1
          ],
          "low": "array([-1.], dtype=float32)",
          "high": "array([1.], dtype=float32)",
          "low_repr": "-1.0",
          "high_repr": "1.0",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "_observation_space": {
          "dtype": "dtype('float32')",
          "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
          "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
          "_shape": [
            11
          ],
          "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
          "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
          "low_repr": "-inf",
          "high_repr": "inf",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "_spec": {
          "max_episode_length": 1000,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_env_info": "None",
        "$type": "garage.envs.gym_env.GymEnv"
      },
      {
        "_env": {
          "env": {
            "env": {
              "env": {
                "env": {
                  "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                  "model": "<mujoco._structs.MjModel object at 0x7f1bfc82ed70>",
                  "data": "<mujoco._structs.MjData object at 0x7f1bfc82edb0>",
                  "init_qpos": "array([0., 0., 0.])",
                  "init_qvel": "array([0., 0., 0.])",
                  "_viewers": {},
                  "frame_skip": 5,
                  "viewer": "None",
                  "observation_space": {
                    "dtype": "dtype('float64')",
                    "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                    "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                    "_shape": [
                      11
                    ],
                    "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                    "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                    "low_repr": "-inf",
                    "high_repr": "inf",
                    "_np_random": "None",
                    "$type": "gym.spaces.box.Box"
                  },
                  "action_space": {
                    "dtype": "dtype('float32')",
                    "bounded_below": "array([ True])",
                    "bounded_above": "array([ True])",
                    "_shape": [
                      1
                    ],
                    "low": "array([-1.], dtype=float32)",
                    "high": "array([1.], dtype=float32)",
                    "low_repr": "-1.0",
                    "high_repr": "1.0",
                    "_np_random": "None",
                    "$type": "gym.spaces.box.Box"
                  },
                  "render_mode": "None",
                  "renderer": {
                    "no_returns_render": [
                      "human"
                    ],
                    "single_render": [
                      "single_depth_array",
                      "single_rgb_array",
                      "single_state_pixels"
                    ],
                    "mode": "None",
                    "render": {
                      "$type": "functools.partial"
                    },
                    "render_list": [],
                    "$type": "gym.utils.renderer.Renderer"
                  },
                  "_ezpickle_args": [],
                  "_ezpickle_kwargs": {},
                  "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "checked_reset": false,
                "checked_step": false,
                "checked_render": false,
                "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": true,
            "_has_reset": false,
            "_disable_render_order_enforcing": false,
            "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
          },
          "_action_space": "None",
          "_observation_space": "None",
          "_reward_range": "None",
          "_metadata": "None",
          "new_step_api": false,
          "_max_episode_steps": 1000,
          "_elapsed_steps": "None",
          "$type": "gym.wrappers.time_limit.TimeLimit"
        },
        "_max_episode_length": 1000,
        "_render_modes": [
          "human",
          "rgb_array",
          "depth_array",
          "single_rgb_array",
          "single_depth_array"
        ],
        "_step_cnt": "None",
        "_visualize": false,
        "_action_space": {
          "dtype": "dtype('float32')",
          "bounded_below": "array([ True])",
          "bounded_above": "array([ True])",
          "_shape": [
            1
          ],
          "low": "array([-1.], dtype=float32)",
          "high": "array([1.], dtype=float32)",
          "low_repr": "-1.0",
          "high_repr": "1.0",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "_observation_space": {
          "dtype": "dtype('float32')",
          "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
          "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
          "_shape": [
            11
          ],
          "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
          "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
          "low_repr": "-inf",
          "high_repr": "inf",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "_spec": {
          "max_episode_length": 1000,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_env_info": "None",
        "$type": "garage.envs.gym_env.GymEnv"
      },
      {
        "_env": {
          "env": {
            "env": {
              "env": {
                "env": {
                  "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                  "model": "<mujoco._structs.MjModel object at 0x7f1bfc814870>",
                  "data": "<mujoco._structs.MjData object at 0x7f1bfc8148b0>",
                  "init_qpos": "array([0., 0., 0.])",
                  "init_qvel": "array([0., 0., 0.])",
                  "_viewers": {},
                  "frame_skip": 5,
                  "viewer": "None",
                  "observation_space": {
                    "dtype": "dtype('float64')",
                    "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                    "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                    "_shape": [
                      11
                    ],
                    "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                    "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                    "low_repr": "-inf",
                    "high_repr": "inf",
                    "_np_random": "None",
                    "$type": "gym.spaces.box.Box"
                  },
                  "action_space": {
                    "dtype": "dtype('float32')",
                    "bounded_below": "array([ True])",
                    "bounded_above": "array([ True])",
                    "_shape": [
                      1
                    ],
                    "low": "array([-1.], dtype=float32)",
                    "high": "array([1.], dtype=float32)",
                    "low_repr": "-1.0",
                    "high_repr": "1.0",
                    "_np_random": "None",
                    "$type": "gym.spaces.box.Box"
                  },
                  "render_mode": "None",
                  "renderer": {
                    "no_returns_render": [
                      "human"
                    ],
                    "single_render": [
                      "single_depth_array",
                      "single_rgb_array",
                      "single_state_pixels"
                    ],
                    "mode": "None",
                    "render": {
                      "$type": "functools.partial"
                    },
                    "render_list": [],
                    "$type": "gym.utils.renderer.Renderer"
                  },
                  "_ezpickle_args": [],
                  "_ezpickle_kwargs": {},
                  "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "checked_reset": false,
                "checked_step": false,
                "checked_render": false,
                "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": true,
            "_has_reset": false,
            "_disable_render_order_enforcing": false,
            "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
          },
          "_action_space": "None",
          "_observation_space": "None",
          "_reward_range": "None",
          "_metadata": "None",
          "new_step_api": false,
          "_max_episode_steps": 1000,
          "_elapsed_steps": "None",
          "$type": "gym.wrappers.time_limit.TimeLimit"
        },
        "_max_episode_length": 1000,
        "_render_modes": [
          "human",
          "rgb_array",
          "depth_array",
          "single_rgb_array",
          "single_depth_array"
        ],
        "_step_cnt": "None",
        "_visualize": false,
        "_action_space": {
          "dtype": "dtype('float32')",
          "bounded_below": "array([ True])",
          "bounded_above": "array([ True])",
          "_shape": [
            1
          ],
          "low": "array([-1.], dtype=float32)",
          "high": "array([1.], dtype=float32)",
          "low_repr": "-1.0",
          "high_repr": "1.0",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "_observation_space": {
          "dtype": "dtype('float32')",
          "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
          "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
          "_shape": [
            11
          ],
          "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
          "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
          "low_repr": "-inf",
          "high_repr": "inf",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "_spec": {
          "max_episode_length": 1000,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_env_info": "None",
        "$type": "garage.envs.gym_env.GymEnv"
      },
      {
        "_env": {
          "env": {
            "env": {
              "env": {
                "env": {
                  "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                  "model": "<mujoco._structs.MjModel object at 0x7f1bfc814530>",
                  "data": "<mujoco._structs.MjData object at 0x7f1bfc8145b0>",
                  "init_qpos": "array([0., 0., 0.])",
                  "init_qvel": "array([0., 0., 0.])",
                  "_viewers": {},
                  "frame_skip": 5,
                  "viewer": "None",
                  "observation_space": {
                    "dtype": "dtype('float64')",
                    "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                    "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                    "_shape": [
                      11
                    ],
                    "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                    "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                    "low_repr": "-inf",
                    "high_repr": "inf",
                    "_np_random": "None",
                    "$type": "gym.spaces.box.Box"
                  },
                  "action_space": {
                    "dtype": "dtype('float32')",
                    "bounded_below": "array([ True])",
                    "bounded_above": "array([ True])",
                    "_shape": [
                      1
                    ],
                    "low": "array([-1.], dtype=float32)",
                    "high": "array([1.], dtype=float32)",
                    "low_repr": "-1.0",
                    "high_repr": "1.0",
                    "_np_random": "None",
                    "$type": "gym.spaces.box.Box"
                  },
                  "render_mode": "None",
                  "renderer": {
                    "no_returns_render": [
                      "human"
                    ],
                    "single_render": [
                      "single_depth_array",
                      "single_rgb_array",
                      "single_state_pixels"
                    ],
                    "mode": "None",
                    "render": {
                      "$type": "functools.partial"
                    },
                    "render_list": [],
                    "$type": "gym.utils.renderer.Renderer"
                  },
                  "_ezpickle_args": [],
                  "_ezpickle_kwargs": {},
                  "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "checked_reset": false,
                "checked_step": false,
                "checked_render": false,
                "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": true,
            "_has_reset": false,
            "_disable_render_order_enforcing": false,
            "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
          },
          "_action_space": "None",
          "_observation_space": "None",
          "_reward_range": "None",
          "_metadata": "None",
          "new_step_api": false,
          "_max_episode_steps": 1000,
          "_elapsed_steps": "None",
          "$type": "gym.wrappers.time_limit.TimeLimit"
        },
        "_max_episode_length": 1000,
        "_render_modes": [
          "human",
          "rgb_array",
          "depth_array",
          "single_rgb_array",
          "single_depth_array"
        ],
        "_step_cnt": "None",
        "_visualize": false,
        "_action_space": {
          "dtype": "dtype('float32')",
          "bounded_below": "array([ True])",
          "bounded_above": "array([ True])",
          "_shape": [
            1
          ],
          "low": "array([-1.], dtype=float32)",
          "high": "array([1.], dtype=float32)",
          "low_repr": "-1.0",
          "high_repr": "1.0",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "_observation_space": {
          "dtype": "dtype('float32')",
          "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
          "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
          "_shape": [
            11
          ],
          "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
          "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
          "low_repr": "-inf",
          "high_repr": "inf",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "_spec": {
          "max_episode_length": 1000,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_env_info": "None",
        "$type": "garage.envs.gym_env.GymEnv"
      },
      {
        "_env": {
          "env": {
            "env": {
              "env": {
                "env": {
                  "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                  "model": "<mujoco._structs.MjModel object at 0x7f1bfc91ba30>",
                  "data": "<mujoco._structs.MjData object at 0x7f1bfc91bab0>",
                  "init_qpos": "array([0., 0., 0.])",
                  "init_qvel": "array([0., 0., 0.])",
                  "_viewers": {},
                  "frame_skip": 5,
                  "viewer": "None",
                  "observation_space": {
                    "dtype": "dtype('float64')",
                    "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                    "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                    "_shape": [
                      11
                    ],
                    "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                    "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                    "low_repr": "-inf",
                    "high_repr": "inf",
                    "_np_random": "None",
                    "$type": "gym.spaces.box.Box"
                  },
                  "action_space": {
                    "dtype": "dtype('float32')",
                    "bounded_below": "array([ True])",
                    "bounded_above": "array([ True])",
                    "_shape": [
                      1
                    ],
                    "low": "array([-1.], dtype=float32)",
                    "high": "array([1.], dtype=float32)",
                    "low_repr": "-1.0",
                    "high_repr": "1.0",
                    "_np_random": "None",
                    "$type": "gym.spaces.box.Box"
                  },
                  "render_mode": "None",
                  "renderer": {
                    "no_returns_render": [
                      "human"
                    ],
                    "single_render": [
                      "single_depth_array",
                      "single_rgb_array",
                      "single_state_pixels"
                    ],
                    "mode": "None",
                    "render": {
                      "$type": "functools.partial"
                    },
                    "render_list": [],
                    "$type": "gym.utils.renderer.Renderer"
                  },
                  "_ezpickle_args": [],
                  "_ezpickle_kwargs": {},
                  "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "checked_reset": false,
                "checked_step": false,
                "checked_render": false,
                "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": true,
            "_has_reset": false,
            "_disable_render_order_enforcing": false,
            "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
          },
          "_action_space": "None",
          "_observation_space": "None",
          "_reward_range": "None",
          "_metadata": "None",
          "new_step_api": false,
          "_max_episode_steps": 1000,
          "_elapsed_steps": "None",
          "$type": "gym.wrappers.time_limit.TimeLimit"
        },
        "_max_episode_length": 1000,
        "_render_modes": [
          "human",
          "rgb_array",
          "depth_array",
          "single_rgb_array",
          "single_depth_array"
        ],
        "_step_cnt": "None",
        "_visualize": false,
        "_action_space": {
          "dtype": "dtype('float32')",
          "bounded_below": "array([ True])",
          "bounded_above": "array([ True])",
          "_shape": [
            1
          ],
          "low": "array([-1.], dtype=float32)",
          "high": "array([1.], dtype=float32)",
          "low_repr": "-1.0",
          "high_repr": "1.0",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "_observation_space": {
          "dtype": "dtype('float32')",
          "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
          "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
          "_shape": [
            11
          ],
          "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
          "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
          "low_repr": "-inf",
          "high_repr": "inf",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "_spec": {
          "max_episode_length": 1000,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_env_info": "None",
        "$type": "garage.envs.gym_env.GymEnv"
      },
      {
        "_env": {
          "env": {
            "env": {
              "env": {
                "env": {
                  "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                  "model": "<mujoco._structs.MjModel object at 0x7f1bfca011b0>",
                  "data": "<mujoco._structs.MjData object at 0x7f1bfd313b70>",
                  "init_qpos": "array([0., 0., 0.])",
                  "init_qvel": "array([0., 0., 0.])",
                  "_viewers": {},
                  "frame_skip": 5,
                  "viewer": "None",
                  "observation_space": {
                    "dtype": "dtype('float64')",
                    "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                    "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                    "_shape": [
                      11
                    ],
                    "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                    "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                    "low_repr": "-inf",
                    "high_repr": "inf",
                    "_np_random": "None",
                    "$type": "gym.spaces.box.Box"
                  },
                  "action_space": {
                    "dtype": "dtype('float32')",
                    "bounded_below": "array([ True])",
                    "bounded_above": "array([ True])",
                    "_shape": [
                      1
                    ],
                    "low": "array([-1.], dtype=float32)",
                    "high": "array([1.], dtype=float32)",
                    "low_repr": "-1.0",
                    "high_repr": "1.0",
                    "_np_random": "None",
                    "$type": "gym.spaces.box.Box"
                  },
                  "render_mode": "None",
                  "renderer": {
                    "no_returns_render": [
                      "human"
                    ],
                    "single_render": [
                      "single_depth_array",
                      "single_rgb_array",
                      "single_state_pixels"
                    ],
                    "mode": "None",
                    "render": {
                      "$type": "functools.partial"
                    },
                    "render_list": [],
                    "$type": "gym.utils.renderer.Renderer"
                  },
                  "_ezpickle_args": [],
                  "_ezpickle_kwargs": {},
                  "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "checked_reset": false,
                "checked_step": false,
                "checked_render": false,
                "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": true,
            "_has_reset": false,
            "_disable_render_order_enforcing": false,
            "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
          },
          "_action_space": "None",
          "_observation_space": "None",
          "_reward_range": "None",
          "_metadata": "None",
          "new_step_api": false,
          "_max_episode_steps": 1000,
          "_elapsed_steps": "None",
          "$type": "gym.wrappers.time_limit.TimeLimit"
        },
        "_max_episode_length": 1000,
        "_render_modes": [
          "human",
          "rgb_array",
          "depth_array",
          "single_rgb_array",
          "single_depth_array"
        ],
        "_step_cnt": "None",
        "_visualize": false,
        "_action_space": {
          "dtype": "dtype('float32')",
          "bounded_below": "array([ True])",
          "bounded_above": "array([ True])",
          "_shape": [
            1
          ],
          "low": "array([-1.], dtype=float32)",
          "high": "array([1.], dtype=float32)",
          "low_repr": "-1.0",
          "high_repr": "1.0",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "_observation_space": {
          "dtype": "dtype('float32')",
          "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
          "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
          "_shape": [
            11
          ],
          "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
          "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
          "low_repr": "-inf",
          "high_repr": "inf",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "_spec": {
          "max_episode_length": 1000,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_env_info": "None",
        "$type": "garage.envs.gym_env.GymEnv"
      },
      {
        "_env": {
          "env": {
            "env": {
              "env": {
                "env": {
                  "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                  "model": "<mujoco._structs.MjModel object at 0x7f1bfc7c8470>",
                  "data": "<mujoco._structs.MjData object at 0x7f1bfc7c84b0>",
                  "init_qpos": "array([0., 0., 0.])",
                  "init_qvel": "array([0., 0., 0.])",
                  "_viewers": {},
                  "frame_skip": 5,
                  "viewer": "None",
                  "observation_space": {
                    "dtype": "dtype('float64')",
                    "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                    "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                    "_shape": [
                      11
                    ],
                    "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                    "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                    "low_repr": "-inf",
                    "high_repr": "inf",
                    "_np_random": "None",
                    "$type": "gym.spaces.box.Box"
                  },
                  "action_space": {
                    "dtype": "dtype('float32')",
                    "bounded_below": "array([ True])",
                    "bounded_above": "array([ True])",
                    "_shape": [
                      1
                    ],
                    "low": "array([-1.], dtype=float32)",
                    "high": "array([1.], dtype=float32)",
                    "low_repr": "-1.0",
                    "high_repr": "1.0",
                    "_np_random": "None",
                    "$type": "gym.spaces.box.Box"
                  },
                  "render_mode": "None",
                  "renderer": {
                    "no_returns_render": [
                      "human"
                    ],
                    "single_render": [
                      "single_depth_array",
                      "single_rgb_array",
                      "single_state_pixels"
                    ],
                    "mode": "None",
                    "render": {
                      "$type": "functools.partial"
                    },
                    "render_list": [],
                    "$type": "gym.utils.renderer.Renderer"
                  },
                  "_ezpickle_args": [],
                  "_ezpickle_kwargs": {},
                  "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "checked_reset": false,
                "checked_step": false,
                "checked_render": false,
                "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": true,
            "_has_reset": false,
            "_disable_render_order_enforcing": false,
            "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
          },
          "_action_space": "None",
          "_observation_space": "None",
          "_reward_range": "None",
          "_metadata": "None",
          "new_step_api": false,
          "_max_episode_steps": 1000,
          "_elapsed_steps": "None",
          "$type": "gym.wrappers.time_limit.TimeLimit"
        },
        "_max_episode_length": 1000,
        "_render_modes": [
          "human",
          "rgb_array",
          "depth_array",
          "single_rgb_array",
          "single_depth_array"
        ],
        "_step_cnt": "None",
        "_visualize": false,
        "_action_space": {
          "dtype": "dtype('float32')",
          "bounded_below": "array([ True])",
          "bounded_above": "array([ True])",
          "_shape": [
            1
          ],
          "low": "array([-1.], dtype=float32)",
          "high": "array([1.], dtype=float32)",
          "low_repr": "-1.0",
          "high_repr": "1.0",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "_observation_space": {
          "dtype": "dtype('float32')",
          "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
          "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
          "_shape": [
            11
          ],
          "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
          "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
          "low_repr": "-inf",
          "high_repr": "inf",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "_spec": {
          "max_episode_length": 1000,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_env_info": "None",
        "$type": "garage.envs.gym_env.GymEnv"
      },
      {
        "_env": {
          "env": {
            "env": {
              "env": {
                "env": {
                  "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                  "model": "<mujoco._structs.MjModel object at 0x7f1bfc7c8c30>",
                  "data": "<mujoco._structs.MjData object at 0x7f1bfc7c8c70>",
                  "init_qpos": "array([0., 0., 0.])",
                  "init_qvel": "array([0., 0., 0.])",
                  "_viewers": {},
                  "frame_skip": 5,
                  "viewer": "None",
                  "observation_space": {
                    "dtype": "dtype('float64')",
                    "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                    "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                    "_shape": [
                      11
                    ],
                    "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                    "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                    "low_repr": "-inf",
                    "high_repr": "inf",
                    "_np_random": "None",
                    "$type": "gym.spaces.box.Box"
                  },
                  "action_space": {
                    "dtype": "dtype('float32')",
                    "bounded_below": "array([ True])",
                    "bounded_above": "array([ True])",
                    "_shape": [
                      1
                    ],
                    "low": "array([-1.], dtype=float32)",
                    "high": "array([1.], dtype=float32)",
                    "low_repr": "-1.0",
                    "high_repr": "1.0",
                    "_np_random": "None",
                    "$type": "gym.spaces.box.Box"
                  },
                  "render_mode": "None",
                  "renderer": {
                    "no_returns_render": [
                      "human"
                    ],
                    "single_render": [
                      "single_depth_array",
                      "single_rgb_array",
                      "single_state_pixels"
                    ],
                    "mode": "None",
                    "render": {
                      "$type": "functools.partial"
                    },
                    "render_list": [],
                    "$type": "gym.utils.renderer.Renderer"
                  },
                  "_ezpickle_args": [],
                  "_ezpickle_kwargs": {},
                  "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "checked_reset": false,
                "checked_step": false,
                "checked_render": false,
                "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": true,
            "_has_reset": false,
            "_disable_render_order_enforcing": false,
            "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
          },
          "_action_space": "None",
          "_observation_space": "None",
          "_reward_range": "None",
          "_metadata": "None",
          "new_step_api": false,
          "_max_episode_steps": 1000,
          "_elapsed_steps": "None",
          "$type": "gym.wrappers.time_limit.TimeLimit"
        },
        "_max_episode_length": 1000,
        "_render_modes": [
          "human",
          "rgb_array",
          "depth_array",
          "single_rgb_array",
          "single_depth_array"
        ],
        "_step_cnt": "None",
        "_visualize": false,
        "_action_space": {
          "dtype": "dtype('float32')",
          "bounded_below": "array([ True])",
          "bounded_above": "array([ True])",
          "_shape": [
            1
          ],
          "low": "array([-1.], dtype=float32)",
          "high": "array([1.], dtype=float32)",
          "low_repr": "-1.0",
          "high_repr": "1.0",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "_observation_space": {
          "dtype": "dtype('float32')",
          "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
          "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
          "_shape": [
            11
          ],
          "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
          "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
          "low_repr": "-inf",
          "high_repr": "inf",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "_spec": {
          "max_episode_length": 1000,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_env_info": "None",
        "$type": "garage.envs.gym_env.GymEnv"
      },
      {
        "_env": {
          "env": {
            "env": {
              "env": {
                "env": {
                  "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                  "model": "<mujoco._structs.MjModel object at 0x7f1bfc9156b0>",
                  "data": "<mujoco._structs.MjData object at 0x7f1bfc9156f0>",
                  "init_qpos": "array([0., 0., 0.])",
                  "init_qvel": "array([0., 0., 0.])",
                  "_viewers": {},
                  "frame_skip": 5,
                  "viewer": "None",
                  "observation_space": {
                    "dtype": "dtype('float64')",
                    "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                    "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                    "_shape": [
                      11
                    ],
                    "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                    "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                    "low_repr": "-inf",
                    "high_repr": "inf",
                    "_np_random": "None",
                    "$type": "gym.spaces.box.Box"
                  },
                  "action_space": {
                    "dtype": "dtype('float32')",
                    "bounded_below": "array([ True])",
                    "bounded_above": "array([ True])",
                    "_shape": [
                      1
                    ],
                    "low": "array([-1.], dtype=float32)",
                    "high": "array([1.], dtype=float32)",
                    "low_repr": "-1.0",
                    "high_repr": "1.0",
                    "_np_random": "None",
                    "$type": "gym.spaces.box.Box"
                  },
                  "render_mode": "None",
                  "renderer": {
                    "no_returns_render": [
                      "human"
                    ],
                    "single_render": [
                      "single_depth_array",
                      "single_rgb_array",
                      "single_state_pixels"
                    ],
                    "mode": "None",
                    "render": {
                      "$type": "functools.partial"
                    },
                    "render_list": [],
                    "$type": "gym.utils.renderer.Renderer"
                  },
                  "_ezpickle_args": [],
                  "_ezpickle_kwargs": {},
                  "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "checked_reset": false,
                "checked_step": false,
                "checked_render": false,
                "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": true,
            "_has_reset": false,
            "_disable_render_order_enforcing": false,
            "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
          },
          "_action_space": "None",
          "_observation_space": "None",
          "_reward_range": "None",
          "_metadata": "None",
          "new_step_api": false,
          "_max_episode_steps": 1000,
          "_elapsed_steps": "None",
          "$type": "gym.wrappers.time_limit.TimeLimit"
        },
        "_max_episode_length": 1000,
        "_render_modes": [
          "human",
          "rgb_array",
          "depth_array",
          "single_rgb_array",
          "single_depth_array"
        ],
        "_step_cnt": "None",
        "_visualize": false,
        "_action_space": {
          "dtype": "dtype('float32')",
          "bounded_below": "array([ True])",
          "bounded_above": "array([ True])",
          "_shape": [
            1
          ],
          "low": "array([-1.], dtype=float32)",
          "high": "array([1.], dtype=float32)",
          "low_repr": "-1.0",
          "high_repr": "1.0",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "_observation_space": {
          "dtype": "dtype('float32')",
          "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
          "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
          "_shape": [
            11
          ],
          "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
          "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
          "low_repr": "-inf",
          "high_repr": "inf",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "_spec": {
          "max_episode_length": 1000,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_env_info": "None",
        "$type": "garage.envs.gym_env.GymEnv"
      },
      {
        "_env": {
          "env": {
            "env": {
              "env": {
                "env": {
                  "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                  "model": "<mujoco._structs.MjModel object at 0x7f1bfc79a1b0>",
                  "data": "<mujoco._structs.MjData object at 0x7f1bfc79a1f0>",
                  "init_qpos": "array([0., 0., 0.])",
                  "init_qvel": "array([0., 0., 0.])",
                  "_viewers": {},
                  "frame_skip": 5,
                  "viewer": "None",
                  "observation_space": {
                    "dtype": "dtype('float64')",
                    "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                    "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                    "_shape": [
                      11
                    ],
                    "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                    "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                    "low_repr": "-inf",
                    "high_repr": "inf",
                    "_np_random": "None",
                    "$type": "gym.spaces.box.Box"
                  },
                  "action_space": {
                    "dtype": "dtype('float32')",
                    "bounded_below": "array([ True])",
                    "bounded_above": "array([ True])",
                    "_shape": [
                      1
                    ],
                    "low": "array([-1.], dtype=float32)",
                    "high": "array([1.], dtype=float32)",
                    "low_repr": "-1.0",
                    "high_repr": "1.0",
                    "_np_random": "None",
                    "$type": "gym.spaces.box.Box"
                  },
                  "render_mode": "None",
                  "renderer": {
                    "no_returns_render": [
                      "human"
                    ],
                    "single_render": [
                      "single_depth_array",
                      "single_rgb_array",
                      "single_state_pixels"
                    ],
                    "mode": "None",
                    "render": {
                      "$type": "functools.partial"
                    },
                    "render_list": [],
                    "$type": "gym.utils.renderer.Renderer"
                  },
                  "_ezpickle_args": [],
                  "_ezpickle_kwargs": {},
                  "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "checked_reset": false,
                "checked_step": false,
                "checked_render": false,
                "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": true,
            "_has_reset": false,
            "_disable_render_order_enforcing": false,
            "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
          },
          "_action_space": "None",
          "_observation_space": "None",
          "_reward_range": "None",
          "_metadata": "None",
          "new_step_api": false,
          "_max_episode_steps": 1000,
          "_elapsed_steps": "None",
          "$type": "gym.wrappers.time_limit.TimeLimit"
        },
        "_max_episode_length": 1000,
        "_render_modes": [
          "human",
          "rgb_array",
          "depth_array",
          "single_rgb_array",
          "single_depth_array"
        ],
        "_step_cnt": "None",
        "_visualize": false,
        "_action_space": {
          "dtype": "dtype('float32')",
          "bounded_below": "array([ True])",
          "bounded_above": "array([ True])",
          "_shape": [
            1
          ],
          "low": "array([-1.], dtype=float32)",
          "high": "array([1.], dtype=float32)",
          "low_repr": "-1.0",
          "high_repr": "1.0",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "_observation_space": {
          "dtype": "dtype('float32')",
          "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
          "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
          "_shape": [
            11
          ],
          "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
          "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
          "low_repr": "-inf",
          "high_repr": "inf",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "_spec": {
          "max_episode_length": 1000,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_env_info": "None",
        "$type": "garage.envs.gym_env.GymEnv"
      },
      {
        "_env": {
          "env": {
            "env": {
              "env": {
                "env": {
                  "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                  "model": "<mujoco._structs.MjModel object at 0x7f1bfc79ac70>",
                  "data": "<mujoco._structs.MjData object at 0x7f1bfc79acb0>",
                  "init_qpos": "array([0., 0., 0.])",
                  "init_qvel": "array([0., 0., 0.])",
                  "_viewers": {},
                  "frame_skip": 5,
                  "viewer": "None",
                  "observation_space": {
                    "dtype": "dtype('float64')",
                    "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                    "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                    "_shape": [
                      11
                    ],
                    "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                    "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                    "low_repr": "-inf",
                    "high_repr": "inf",
                    "_np_random": "None",
                    "$type": "gym.spaces.box.Box"
                  },
                  "action_space": {
                    "dtype": "dtype('float32')",
                    "bounded_below": "array([ True])",
                    "bounded_above": "array([ True])",
                    "_shape": [
                      1
                    ],
                    "low": "array([-1.], dtype=float32)",
                    "high": "array([1.], dtype=float32)",
                    "low_repr": "-1.0",
                    "high_repr": "1.0",
                    "_np_random": "None",
                    "$type": "gym.spaces.box.Box"
                  },
                  "render_mode": "None",
                  "renderer": {
                    "no_returns_render": [
                      "human"
                    ],
                    "single_render": [
                      "single_depth_array",
                      "single_rgb_array",
                      "single_state_pixels"
                    ],
                    "mode": "None",
                    "render": {
                      "$type": "functools.partial"
                    },
                    "render_list": [],
                    "$type": "gym.utils.renderer.Renderer"
                  },
                  "_ezpickle_args": [],
                  "_ezpickle_kwargs": {},
                  "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "checked_reset": false,
                "checked_step": false,
                "checked_render": false,
                "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": true,
            "_has_reset": false,
            "_disable_render_order_enforcing": false,
            "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
          },
          "_action_space": "None",
          "_observation_space": "None",
          "_reward_range": "None",
          "_metadata": "None",
          "new_step_api": false,
          "_max_episode_steps": 1000,
          "_elapsed_steps": "None",
          "$type": "gym.wrappers.time_limit.TimeLimit"
        },
        "_max_episode_length": 1000,
        "_render_modes": [
          "human",
          "rgb_array",
          "depth_array",
          "single_rgb_array",
          "single_depth_array"
        ],
        "_step_cnt": "None",
        "_visualize": false,
        "_action_space": {
          "dtype": "dtype('float32')",
          "bounded_below": "array([ True])",
          "bounded_above": "array([ True])",
          "_shape": [
            1
          ],
          "low": "array([-1.], dtype=float32)",
          "high": "array([1.], dtype=float32)",
          "low_repr": "-1.0",
          "high_repr": "1.0",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "_observation_space": {
          "dtype": "dtype('float32')",
          "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
          "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
          "_shape": [
            11
          ],
          "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
          "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
          "low_repr": "-inf",
          "high_repr": "inf",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "_spec": {
          "max_episode_length": 1000,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_env_info": "None",
        "$type": "garage.envs.gym_env.GymEnv"
      },
      {
        "_env": {
          "env": {
            "env": {
              "env": {
                "env": {
                  "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                  "model": "<mujoco._structs.MjModel object at 0x7f1bfc769770>",
                  "data": "<mujoco._structs.MjData object at 0x7f1bfc7697b0>",
                  "init_qpos": "array([0., 0., 0.])",
                  "init_qvel": "array([0., 0., 0.])",
                  "_viewers": {},
                  "frame_skip": 5,
                  "viewer": "None",
                  "observation_space": {
                    "dtype": "dtype('float64')",
                    "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                    "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                    "_shape": [
                      11
                    ],
                    "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                    "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                    "low_repr": "-inf",
                    "high_repr": "inf",
                    "_np_random": "None",
                    "$type": "gym.spaces.box.Box"
                  },
                  "action_space": {
                    "dtype": "dtype('float32')",
                    "bounded_below": "array([ True])",
                    "bounded_above": "array([ True])",
                    "_shape": [
                      1
                    ],
                    "low": "array([-1.], dtype=float32)",
                    "high": "array([1.], dtype=float32)",
                    "low_repr": "-1.0",
                    "high_repr": "1.0",
                    "_np_random": "None",
                    "$type": "gym.spaces.box.Box"
                  },
                  "render_mode": "None",
                  "renderer": {
                    "no_returns_render": [
                      "human"
                    ],
                    "single_render": [
                      "single_depth_array",
                      "single_rgb_array",
                      "single_state_pixels"
                    ],
                    "mode": "None",
                    "render": {
                      "$type": "functools.partial"
                    },
                    "render_list": [],
                    "$type": "gym.utils.renderer.Renderer"
                  },
                  "_ezpickle_args": [],
                  "_ezpickle_kwargs": {},
                  "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "checked_reset": false,
                "checked_step": false,
                "checked_render": false,
                "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": true,
            "_has_reset": false,
            "_disable_render_order_enforcing": false,
            "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
          },
          "_action_space": "None",
          "_observation_space": "None",
          "_reward_range": "None",
          "_metadata": "None",
          "new_step_api": false,
          "_max_episode_steps": 1000,
          "_elapsed_steps": "None",
          "$type": "gym.wrappers.time_limit.TimeLimit"
        },
        "_max_episode_length": 1000,
        "_render_modes": [
          "human",
          "rgb_array",
          "depth_array",
          "single_rgb_array",
          "single_depth_array"
        ],
        "_step_cnt": "None",
        "_visualize": false,
        "_action_space": {
          "dtype": "dtype('float32')",
          "bounded_below": "array([ True])",
          "bounded_above": "array([ True])",
          "_shape": [
            1
          ],
          "low": "array([-1.], dtype=float32)",
          "high": "array([1.], dtype=float32)",
          "low_repr": "-1.0",
          "high_repr": "1.0",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "_observation_space": {
          "dtype": "dtype('float32')",
          "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
          "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
          "_shape": [
            11
          ],
          "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
          "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
          "low_repr": "-inf",
          "high_repr": "inf",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "_spec": {
          "max_episode_length": 1000,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_env_info": "None",
        "$type": "garage.envs.gym_env.GymEnv"
      },
      {
        "_env": {
          "env": {
            "env": {
              "env": {
                "env": {
                  "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                  "model": "<mujoco._structs.MjModel object at 0x7f1bfc6b4270>",
                  "data": "<mujoco._structs.MjData object at 0x7f1bfc6b42b0>",
                  "init_qpos": "array([0., 0., 0.])",
                  "init_qvel": "array([0., 0., 0.])",
                  "_viewers": {},
                  "frame_skip": 5,
                  "viewer": "None",
                  "observation_space": {
                    "dtype": "dtype('float64')",
                    "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                    "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                    "_shape": [
                      11
                    ],
                    "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                    "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                    "low_repr": "-inf",
                    "high_repr": "inf",
                    "_np_random": "None",
                    "$type": "gym.spaces.box.Box"
                  },
                  "action_space": {
                    "dtype": "dtype('float32')",
                    "bounded_below": "array([ True])",
                    "bounded_above": "array([ True])",
                    "_shape": [
                      1
                    ],
                    "low": "array([-1.], dtype=float32)",
                    "high": "array([1.], dtype=float32)",
                    "low_repr": "-1.0",
                    "high_repr": "1.0",
                    "_np_random": "None",
                    "$type": "gym.spaces.box.Box"
                  },
                  "render_mode": "None",
                  "renderer": {
                    "no_returns_render": [
                      "human"
                    ],
                    "single_render": [
                      "single_depth_array",
                      "single_rgb_array",
                      "single_state_pixels"
                    ],
                    "mode": "None",
                    "render": {
                      "$type": "functools.partial"
                    },
                    "render_list": [],
                    "$type": "gym.utils.renderer.Renderer"
                  },
                  "_ezpickle_args": [],
                  "_ezpickle_kwargs": {},
                  "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "checked_reset": false,
                "checked_step": false,
                "checked_render": false,
                "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": true,
            "_has_reset": false,
            "_disable_render_order_enforcing": false,
            "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
          },
          "_action_space": "None",
          "_observation_space": "None",
          "_reward_range": "None",
          "_metadata": "None",
          "new_step_api": false,
          "_max_episode_steps": 1000,
          "_elapsed_steps": "None",
          "$type": "gym.wrappers.time_limit.TimeLimit"
        },
        "_max_episode_length": 1000,
        "_render_modes": [
          "human",
          "rgb_array",
          "depth_array",
          "single_rgb_array",
          "single_depth_array"
        ],
        "_step_cnt": "None",
        "_visualize": false,
        "_action_space": {
          "dtype": "dtype('float32')",
          "bounded_below": "array([ True])",
          "bounded_above": "array([ True])",
          "_shape": [
            1
          ],
          "low": "array([-1.], dtype=float32)",
          "high": "array([1.], dtype=float32)",
          "low_repr": "-1.0",
          "high_repr": "1.0",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "_observation_space": {
          "dtype": "dtype('float32')",
          "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
          "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
          "_shape": [
            11
          ],
          "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
          "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
          "low_repr": "-inf",
          "high_repr": "inf",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "_spec": {
          "max_episode_length": 1000,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_env_info": "None",
        "$type": "garage.envs.gym_env.GymEnv"
      },
      {
        "_env": {
          "env": {
            "env": {
              "env": {
                "env": {
                  "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                  "model": "<mujoco._structs.MjModel object at 0x7f1bfc6b4d30>",
                  "data": "<mujoco._structs.MjData object at 0x7f1bfc6b4d70>",
                  "init_qpos": "array([0., 0., 0.])",
                  "init_qvel": "array([0., 0., 0.])",
                  "_viewers": {},
                  "frame_skip": 5,
                  "viewer": "None",
                  "observation_space": {
                    "dtype": "dtype('float64')",
                    "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                    "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                    "_shape": [
                      11
                    ],
                    "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                    "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                    "low_repr": "-inf",
                    "high_repr": "inf",
                    "_np_random": "None",
                    "$type": "gym.spaces.box.Box"
                  },
                  "action_space": {
                    "dtype": "dtype('float32')",
                    "bounded_below": "array([ True])",
                    "bounded_above": "array([ True])",
                    "_shape": [
                      1
                    ],
                    "low": "array([-1.], dtype=float32)",
                    "high": "array([1.], dtype=float32)",
                    "low_repr": "-1.0",
                    "high_repr": "1.0",
                    "_np_random": "None",
                    "$type": "gym.spaces.box.Box"
                  },
                  "render_mode": "None",
                  "renderer": {
                    "no_returns_render": [
                      "human"
                    ],
                    "single_render": [
                      "single_depth_array",
                      "single_rgb_array",
                      "single_state_pixels"
                    ],
                    "mode": "None",
                    "render": {
                      "$type": "functools.partial"
                    },
                    "render_list": [],
                    "$type": "gym.utils.renderer.Renderer"
                  },
                  "_ezpickle_args": [],
                  "_ezpickle_kwargs": {},
                  "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "checked_reset": false,
                "checked_step": false,
                "checked_render": false,
                "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": true,
            "_has_reset": false,
            "_disable_render_order_enforcing": false,
            "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
          },
          "_action_space": "None",
          "_observation_space": "None",
          "_reward_range": "None",
          "_metadata": "None",
          "new_step_api": false,
          "_max_episode_steps": 1000,
          "_elapsed_steps": "None",
          "$type": "gym.wrappers.time_limit.TimeLimit"
        },
        "_max_episode_length": 1000,
        "_render_modes": [
          "human",
          "rgb_array",
          "depth_array",
          "single_rgb_array",
          "single_depth_array"
        ],
        "_step_cnt": "None",
        "_visualize": false,
        "_action_space": {
          "dtype": "dtype('float32')",
          "bounded_below": "array([ True])",
          "bounded_above": "array([ True])",
          "_shape": [
            1
          ],
          "low": "array([-1.], dtype=float32)",
          "high": "array([1.], dtype=float32)",
          "low_repr": "-1.0",
          "high_repr": "1.0",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "_observation_space": {
          "dtype": "dtype('float32')",
          "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
          "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
          "_shape": [
            11
          ],
          "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
          "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
          "low_repr": "-inf",
          "high_repr": "inf",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "_spec": {
          "max_episode_length": 1000,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_env_info": "None",
        "$type": "garage.envs.gym_env.GymEnv"
      },
      {
        "_env": {
          "env": {
            "env": {
              "env": {
                "env": {
                  "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                  "model": "<mujoco._structs.MjModel object at 0x7f1bfc683830>",
                  "data": "<mujoco._structs.MjData object at 0x7f1bfc683870>",
                  "init_qpos": "array([0., 0., 0.])",
                  "init_qvel": "array([0., 0., 0.])",
                  "_viewers": {},
                  "frame_skip": 5,
                  "viewer": "None",
                  "observation_space": {
                    "dtype": "dtype('float64')",
                    "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                    "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                    "_shape": [
                      11
                    ],
                    "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                    "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                    "low_repr": "-inf",
                    "high_repr": "inf",
                    "_np_random": "None",
                    "$type": "gym.spaces.box.Box"
                  },
                  "action_space": {
                    "dtype": "dtype('float32')",
                    "bounded_below": "array([ True])",
                    "bounded_above": "array([ True])",
                    "_shape": [
                      1
                    ],
                    "low": "array([-1.], dtype=float32)",
                    "high": "array([1.], dtype=float32)",
                    "low_repr": "-1.0",
                    "high_repr": "1.0",
                    "_np_random": "None",
                    "$type": "gym.spaces.box.Box"
                  },
                  "render_mode": "None",
                  "renderer": {
                    "no_returns_render": [
                      "human"
                    ],
                    "single_render": [
                      "single_depth_array",
                      "single_rgb_array",
                      "single_state_pixels"
                    ],
                    "mode": "None",
                    "render": {
                      "$type": "functools.partial"
                    },
                    "render_list": [],
                    "$type": "gym.utils.renderer.Renderer"
                  },
                  "_ezpickle_args": [],
                  "_ezpickle_kwargs": {},
                  "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "checked_reset": false,
                "checked_step": false,
                "checked_render": false,
                "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": true,
            "_has_reset": false,
            "_disable_render_order_enforcing": false,
            "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
          },
          "_action_space": "None",
          "_observation_space": "None",
          "_reward_range": "None",
          "_metadata": "None",
          "new_step_api": false,
          "_max_episode_steps": 1000,
          "_elapsed_steps": "None",
          "$type": "gym.wrappers.time_limit.TimeLimit"
        },
        "_max_episode_length": 1000,
        "_render_modes": [
          "human",
          "rgb_array",
          "depth_array",
          "single_rgb_array",
          "single_depth_array"
        ],
        "_step_cnt": "None",
        "_visualize": false,
        "_action_space": {
          "dtype": "dtype('float32')",
          "bounded_below": "array([ True])",
          "bounded_above": "array([ True])",
          "_shape": [
            1
          ],
          "low": "array([-1.], dtype=float32)",
          "high": "array([1.], dtype=float32)",
          "low_repr": "-1.0",
          "high_repr": "1.0",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "_observation_space": {
          "dtype": "dtype('float32')",
          "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
          "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
          "_shape": [
            11
          ],
          "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
          "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
          "low_repr": "-inf",
          "high_repr": "inf",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "_spec": {
          "max_episode_length": 1000,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_env_info": "None",
        "$type": "garage.envs.gym_env.GymEnv"
      },
      {
        "_env": {
          "env": {
            "env": {
              "env": {
                "env": {
                  "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                  "model": "<mujoco._structs.MjModel object at 0x7f1bfc683070>",
                  "data": "<mujoco._structs.MjData object at 0x7f1bfc683630>",
                  "init_qpos": "array([0., 0., 0.])",
                  "init_qvel": "array([0., 0., 0.])",
                  "_viewers": {},
                  "frame_skip": 5,
                  "viewer": "None",
                  "observation_space": {
                    "dtype": "dtype('float64')",
                    "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                    "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                    "_shape": [
                      11
                    ],
                    "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                    "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                    "low_repr": "-inf",
                    "high_repr": "inf",
                    "_np_random": "None",
                    "$type": "gym.spaces.box.Box"
                  },
                  "action_space": {
                    "dtype": "dtype('float32')",
                    "bounded_below": "array([ True])",
                    "bounded_above": "array([ True])",
                    "_shape": [
                      1
                    ],
                    "low": "array([-1.], dtype=float32)",
                    "high": "array([1.], dtype=float32)",
                    "low_repr": "-1.0",
                    "high_repr": "1.0",
                    "_np_random": "None",
                    "$type": "gym.spaces.box.Box"
                  },
                  "render_mode": "None",
                  "renderer": {
                    "no_returns_render": [
                      "human"
                    ],
                    "single_render": [
                      "single_depth_array",
                      "single_rgb_array",
                      "single_state_pixels"
                    ],
                    "mode": "None",
                    "render": {
                      "$type": "functools.partial"
                    },
                    "render_list": [],
                    "$type": "gym.utils.renderer.Renderer"
                  },
                  "_ezpickle_args": [],
                  "_ezpickle_kwargs": {},
                  "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "checked_reset": false,
                "checked_step": false,
                "checked_render": false,
                "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": true,
            "_has_reset": false,
            "_disable_render_order_enforcing": false,
            "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
          },
          "_action_space": "None",
          "_observation_space": "None",
          "_reward_range": "None",
          "_metadata": "None",
          "new_step_api": false,
          "_max_episode_steps": 1000,
          "_elapsed_steps": "None",
          "$type": "gym.wrappers.time_limit.TimeLimit"
        },
        "_max_episode_length": 1000,
        "_render_modes": [
          "human",
          "rgb_array",
          "depth_array",
          "single_rgb_array",
          "single_depth_array"
        ],
        "_step_cnt": "None",
        "_visualize": false,
        "_action_space": {
          "dtype": "dtype('float32')",
          "bounded_below": "array([ True])",
          "bounded_above": "array([ True])",
          "_shape": [
            1
          ],
          "low": "array([-1.], dtype=float32)",
          "high": "array([1.], dtype=float32)",
          "low_repr": "-1.0",
          "high_repr": "1.0",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "_observation_space": {
          "dtype": "dtype('float32')",
          "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
          "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
          "_shape": [
            11
          ],
          "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
          "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
          "low_repr": "-inf",
          "high_repr": "inf",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "_spec": {
          "max_episode_length": 1000,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_env_info": "None",
        "$type": "garage.envs.gym_env.GymEnv"
      },
      {
        "_env": {
          "env": {
            "env": {
              "env": {
                "env": {
                  "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                  "model": "<mujoco._structs.MjModel object at 0x7f1bfc79a730>",
                  "data": "<mujoco._structs.MjData object at 0x7f1bfc79af30>",
                  "init_qpos": "array([0., 0., 0.])",
                  "init_qvel": "array([0., 0., 0.])",
                  "_viewers": {},
                  "frame_skip": 5,
                  "viewer": "None",
                  "observation_space": {
                    "dtype": "dtype('float64')",
                    "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                    "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                    "_shape": [
                      11
                    ],
                    "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                    "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                    "low_repr": "-inf",
                    "high_repr": "inf",
                    "_np_random": "None",
                    "$type": "gym.spaces.box.Box"
                  },
                  "action_space": {
                    "dtype": "dtype('float32')",
                    "bounded_below": "array([ True])",
                    "bounded_above": "array([ True])",
                    "_shape": [
                      1
                    ],
                    "low": "array([-1.], dtype=float32)",
                    "high": "array([1.], dtype=float32)",
                    "low_repr": "-1.0",
                    "high_repr": "1.0",
                    "_np_random": "None",
                    "$type": "gym.spaces.box.Box"
                  },
                  "render_mode": "None",
                  "renderer": {
                    "no_returns_render": [
                      "human"
                    ],
                    "single_render": [
                      "single_depth_array",
                      "single_rgb_array",
                      "single_state_pixels"
                    ],
                    "mode": "None",
                    "render": {
                      "$type": "functools.partial"
                    },
                    "render_list": [],
                    "$type": "gym.utils.renderer.Renderer"
                  },
                  "_ezpickle_args": [],
                  "_ezpickle_kwargs": {},
                  "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "checked_reset": false,
                "checked_step": false,
                "checked_render": false,
                "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": true,
            "_has_reset": false,
            "_disable_render_order_enforcing": false,
            "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
          },
          "_action_space": "None",
          "_observation_space": "None",
          "_reward_range": "None",
          "_metadata": "None",
          "new_step_api": false,
          "_max_episode_steps": 1000,
          "_elapsed_steps": "None",
          "$type": "gym.wrappers.time_limit.TimeLimit"
        },
        "_max_episode_length": 1000,
        "_render_modes": [
          "human",
          "rgb_array",
          "depth_array",
          "single_rgb_array",
          "single_depth_array"
        ],
        "_step_cnt": "None",
        "_visualize": false,
        "_action_space": {
          "dtype": "dtype('float32')",
          "bounded_below": "array([ True])",
          "bounded_above": "array([ True])",
          "_shape": [
            1
          ],
          "low": "array([-1.], dtype=float32)",
          "high": "array([1.], dtype=float32)",
          "low_repr": "-1.0",
          "high_repr": "1.0",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "_observation_space": {
          "dtype": "dtype('float32')",
          "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
          "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
          "_shape": [
            11
          ],
          "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
          "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
          "low_repr": "-inf",
          "high_repr": "inf",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "_spec": {
          "max_episode_length": 1000,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_env_info": "None",
        "$type": "garage.envs.gym_env.GymEnv"
      },
      {
        "_env": {
          "env": {
            "env": {
              "env": {
                "env": {
                  "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                  "model": "<mujoco._structs.MjModel object at 0x7f1bfc7c8a70>",
                  "data": "<mujoco._structs.MjData object at 0x7f1bfc7c8a30>",
                  "init_qpos": "array([0., 0., 0.])",
                  "init_qvel": "array([0., 0., 0.])",
                  "_viewers": {},
                  "frame_skip": 5,
                  "viewer": "None",
                  "observation_space": {
                    "dtype": "dtype('float64')",
                    "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                    "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                    "_shape": [
                      11
                    ],
                    "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                    "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                    "low_repr": "-inf",
                    "high_repr": "inf",
                    "_np_random": "None",
                    "$type": "gym.spaces.box.Box"
                  },
                  "action_space": {
                    "dtype": "dtype('float32')",
                    "bounded_below": "array([ True])",
                    "bounded_above": "array([ True])",
                    "_shape": [
                      1
                    ],
                    "low": "array([-1.], dtype=float32)",
                    "high": "array([1.], dtype=float32)",
                    "low_repr": "-1.0",
                    "high_repr": "1.0",
                    "_np_random": "None",
                    "$type": "gym.spaces.box.Box"
                  },
                  "render_mode": "None",
                  "renderer": {
                    "no_returns_render": [
                      "human"
                    ],
                    "single_render": [
                      "single_depth_array",
                      "single_rgb_array",
                      "single_state_pixels"
                    ],
                    "mode": "None",
                    "render": {
                      "$type": "functools.partial"
                    },
                    "render_list": [],
                    "$type": "gym.utils.renderer.Renderer"
                  },
                  "_ezpickle_args": [],
                  "_ezpickle_kwargs": {},
                  "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "checked_reset": false,
                "checked_step": false,
                "checked_render": false,
                "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": true,
            "_has_reset": false,
            "_disable_render_order_enforcing": false,
            "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
          },
          "_action_space": "None",
          "_observation_space": "None",
          "_reward_range": "None",
          "_metadata": "None",
          "new_step_api": false,
          "_max_episode_steps": 1000,
          "_elapsed_steps": "None",
          "$type": "gym.wrappers.time_limit.TimeLimit"
        },
        "_max_episode_length": 1000,
        "_render_modes": [
          "human",
          "rgb_array",
          "depth_array",
          "single_rgb_array",
          "single_depth_array"
        ],
        "_step_cnt": "None",
        "_visualize": false,
        "_action_space": {
          "dtype": "dtype('float32')",
          "bounded_below": "array([ True])",
          "bounded_above": "array([ True])",
          "_shape": [
            1
          ],
          "low": "array([-1.], dtype=float32)",
          "high": "array([1.], dtype=float32)",
          "low_repr": "-1.0",
          "high_repr": "1.0",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "_observation_space": {
          "dtype": "dtype('float32')",
          "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
          "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
          "_shape": [
            11
          ],
          "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
          "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
          "low_repr": "-inf",
          "high_repr": "inf",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "_spec": {
          "max_episode_length": 1000,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_env_info": "None",
        "$type": "garage.envs.gym_env.GymEnv"
      },
      {
        "_env": {
          "env": {
            "env": {
              "env": {
                "env": {
                  "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                  "model": "<mujoco._structs.MjModel object at 0x7f1bfc879630>",
                  "data": "<mujoco._structs.MjData object at 0x7f1bfc879af0>",
                  "init_qpos": "array([0., 0., 0.])",
                  "init_qvel": "array([0., 0., 0.])",
                  "_viewers": {},
                  "frame_skip": 5,
                  "viewer": "None",
                  "observation_space": {
                    "dtype": "dtype('float64')",
                    "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                    "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                    "_shape": [
                      11
                    ],
                    "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                    "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                    "low_repr": "-inf",
                    "high_repr": "inf",
                    "_np_random": "None",
                    "$type": "gym.spaces.box.Box"
                  },
                  "action_space": {
                    "dtype": "dtype('float32')",
                    "bounded_below": "array([ True])",
                    "bounded_above": "array([ True])",
                    "_shape": [
                      1
                    ],
                    "low": "array([-1.], dtype=float32)",
                    "high": "array([1.], dtype=float32)",
                    "low_repr": "-1.0",
                    "high_repr": "1.0",
                    "_np_random": "None",
                    "$type": "gym.spaces.box.Box"
                  },
                  "render_mode": "None",
                  "renderer": {
                    "no_returns_render": [
                      "human"
                    ],
                    "single_render": [
                      "single_depth_array",
                      "single_rgb_array",
                      "single_state_pixels"
                    ],
                    "mode": "None",
                    "render": {
                      "$type": "functools.partial"
                    },
                    "render_list": [],
                    "$type": "gym.utils.renderer.Renderer"
                  },
                  "_ezpickle_args": [],
                  "_ezpickle_kwargs": {},
                  "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "checked_reset": false,
                "checked_step": false,
                "checked_render": false,
                "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": true,
            "_has_reset": false,
            "_disable_render_order_enforcing": false,
            "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
          },
          "_action_space": "None",
          "_observation_space": "None",
          "_reward_range": "None",
          "_metadata": "None",
          "new_step_api": false,
          "_max_episode_steps": 1000,
          "_elapsed_steps": "None",
          "$type": "gym.wrappers.time_limit.TimeLimit"
        },
        "_max_episode_length": 1000,
        "_render_modes": [
          "human",
          "rgb_array",
          "depth_array",
          "single_rgb_array",
          "single_depth_array"
        ],
        "_step_cnt": "None",
        "_visualize": false,
        "_action_space": {
          "dtype": "dtype('float32')",
          "bounded_below": "array([ True])",
          "bounded_above": "array([ True])",
          "_shape": [
            1
          ],
          "low": "array([-1.], dtype=float32)",
          "high": "array([1.], dtype=float32)",
          "low_repr": "-1.0",
          "high_repr": "1.0",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "_observation_space": {
          "dtype": "dtype('float32')",
          "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
          "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
          "_shape": [
            11
          ],
          "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
          "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
          "low_repr": "-inf",
          "high_repr": "inf",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "_spec": {
          "max_episode_length": 1000,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_env_info": "None",
        "$type": "garage.envs.gym_env.GymEnv"
      },
      {
        "_env": {
          "env": {
            "env": {
              "env": {
                "env": {
                  "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                  "model": "<mujoco._structs.MjModel object at 0x7f1bfc637870>",
                  "data": "<mujoco._structs.MjData object at 0x7f1bfc6378b0>",
                  "init_qpos": "array([0., 0., 0.])",
                  "init_qvel": "array([0., 0., 0.])",
                  "_viewers": {},
                  "frame_skip": 5,
                  "viewer": "None",
                  "observation_space": {
                    "dtype": "dtype('float64')",
                    "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                    "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                    "_shape": [
                      11
                    ],
                    "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                    "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                    "low_repr": "-inf",
                    "high_repr": "inf",
                    "_np_random": "None",
                    "$type": "gym.spaces.box.Box"
                  },
                  "action_space": {
                    "dtype": "dtype('float32')",
                    "bounded_below": "array([ True])",
                    "bounded_above": "array([ True])",
                    "_shape": [
                      1
                    ],
                    "low": "array([-1.], dtype=float32)",
                    "high": "array([1.], dtype=float32)",
                    "low_repr": "-1.0",
                    "high_repr": "1.0",
                    "_np_random": "None",
                    "$type": "gym.spaces.box.Box"
                  },
                  "render_mode": "None",
                  "renderer": {
                    "no_returns_render": [
                      "human"
                    ],
                    "single_render": [
                      "single_depth_array",
                      "single_rgb_array",
                      "single_state_pixels"
                    ],
                    "mode": "None",
                    "render": {
                      "$type": "functools.partial"
                    },
                    "render_list": [],
                    "$type": "gym.utils.renderer.Renderer"
                  },
                  "_ezpickle_args": [],
                  "_ezpickle_kwargs": {},
                  "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "checked_reset": false,
                "checked_step": false,
                "checked_render": false,
                "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": true,
            "_has_reset": false,
            "_disable_render_order_enforcing": false,
            "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
          },
          "_action_space": "None",
          "_observation_space": "None",
          "_reward_range": "None",
          "_metadata": "None",
          "new_step_api": false,
          "_max_episode_steps": 1000,
          "_elapsed_steps": "None",
          "$type": "gym.wrappers.time_limit.TimeLimit"
        },
        "_max_episode_length": 1000,
        "_render_modes": [
          "human",
          "rgb_array",
          "depth_array",
          "single_rgb_array",
          "single_depth_array"
        ],
        "_step_cnt": "None",
        "_visualize": false,
        "_action_space": {
          "dtype": "dtype('float32')",
          "bounded_below": "array([ True])",
          "bounded_above": "array([ True])",
          "_shape": [
            1
          ],
          "low": "array([-1.], dtype=float32)",
          "high": "array([1.], dtype=float32)",
          "low_repr": "-1.0",
          "high_repr": "1.0",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "_observation_space": {
          "dtype": "dtype('float32')",
          "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
          "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
          "_shape": [
            11
          ],
          "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
          "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
          "low_repr": "-inf",
          "high_repr": "inf",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "_spec": {
          "max_episode_length": 1000,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_env_info": "None",
        "$type": "garage.envs.gym_env.GymEnv"
      }
    ],
    "_workers": [
      {
        "_seed": "None",
        "_max_episode_length": 200,
        "_worker_number": 0,
        "agent": {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_module": {
              "training": true,
              "_parameters": {
                "_init_std": {
                  "$type": "torch.nn.parameter.Parameter"
                }
              },
              "_buffers": {
                "min_std_param": {
                  "$type": "torch.Tensor"
                }
              },
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_mean_module": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 11.0,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    },
                    "_output_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 1.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    }
                  },
                  "_output_dim": 1.0,
                  "$type": "garage.torch.modules.mlp_module.MLPModule"
                }
              },
              "_input_dim": 11.0,
              "_hidden_sizes": [
                32,
                32
              ],
              "_action_dim": 1.0,
              "_learn_std": true,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_min_std": 1e-06,
              "_max_std": "None",
              "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
              "_std_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_std_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": "None",
              "_std_output_w_init": {
                "$type": "builtins.function"
              },
              "_std_parameterization": "exp",
              "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
              "_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_output_nonlinearity": "None",
              "_output_w_init": {
                "$type": "builtins.function"
              },
              "_output_b_init": {
                "$type": "builtins.function"
              },
              "_layer_normalization": false,
              "_norm_dist_class": {
                "$typename": "torch.distributions.normal.Normal"
              },
              "_min_std_param": {
                "$type": "torch.Tensor"
              },
              "_max_std_param": "None",
              "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
            }
          },
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
        },
        "env": {
          "_env": {
            "env": {
              "env": {
                "env": {
                  "env": {
                    "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                    "model": "<mujoco._structs.MjModel object at 0x7f1bfd2c3070>",
                    "data": "<mujoco._structs.MjData object at 0x7f1bfcef6070>",
                    "init_qpos": "array([0., 0., 0.])",
                    "init_qvel": "array([0., 0., 0.])",
                    "_viewers": {},
                    "frame_skip": 5,
                    "viewer": "None",
                    "observation_space": {
                      "dtype": "dtype('float64')",
                      "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "_shape": [
                        11
                      ],
                      "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                      "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                      "low_repr": "-inf",
                      "high_repr": "inf",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "action_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True])",
                      "bounded_above": "array([ True])",
                      "_shape": [
                        1
                      ],
                      "low": "array([-1.], dtype=float32)",
                      "high": "array([1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "render_mode": "None",
                    "renderer": {
                      "no_returns_render": [
                        "human"
                      ],
                      "single_render": [
                        "single_depth_array",
                        "single_rgb_array",
                        "single_state_pixels"
                      ],
                      "mode": "None",
                      "render": {
                        "$type": "functools.partial"
                      },
                      "render_list": [],
                      "$type": "gym.utils.renderer.Renderer"
                    },
                    "_ezpickle_args": [],
                    "_ezpickle_kwargs": {},
                    "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "checked_reset": false,
                  "checked_step": false,
                  "checked_render": false,
                  "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": true,
              "_has_reset": false,
              "_disable_render_order_enforcing": false,
              "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": false,
            "_max_episode_steps": 1000,
            "_elapsed_steps": "None",
            "$type": "gym.wrappers.time_limit.TimeLimit"
          },
          "_max_episode_length": 1000,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array",
            "single_rgb_array",
            "single_depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        "_env_steps": [],
        "_observations": [],
        "_last_observations": [],
        "_agent_infos": {},
        "_lengths": [],
        "_prev_obs": "None",
        "_eps_length": 0,
        "_episode_infos": {},
        "$type": "garage.sampler.default_worker.DefaultWorker"
      },
      {
        "_seed": "None",
        "_max_episode_length": 200,
        "_worker_number": 1,
        "agent": {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_module": {
              "training": true,
              "_parameters": {
                "_init_std": {
                  "$type": "torch.nn.parameter.Parameter"
                }
              },
              "_buffers": {
                "min_std_param": {
                  "$type": "torch.Tensor"
                }
              },
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_mean_module": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 11.0,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    },
                    "_output_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 1.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    }
                  },
                  "_output_dim": 1.0,
                  "$type": "garage.torch.modules.mlp_module.MLPModule"
                }
              },
              "_input_dim": 11.0,
              "_hidden_sizes": [
                32,
                32
              ],
              "_action_dim": 1.0,
              "_learn_std": true,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_min_std": 1e-06,
              "_max_std": "None",
              "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
              "_std_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_std_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": "None",
              "_std_output_w_init": {
                "$type": "builtins.function"
              },
              "_std_parameterization": "exp",
              "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
              "_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_output_nonlinearity": "None",
              "_output_w_init": {
                "$type": "builtins.function"
              },
              "_output_b_init": {
                "$type": "builtins.function"
              },
              "_layer_normalization": false,
              "_norm_dist_class": {
                "$typename": "torch.distributions.normal.Normal"
              },
              "_min_std_param": {
                "$type": "torch.Tensor"
              },
              "_max_std_param": "None",
              "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
            }
          },
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
        },
        "env": {
          "_env": {
            "env": {
              "env": {
                "env": {
                  "env": {
                    "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                    "model": "<mujoco._structs.MjModel object at 0x7f1bfd8b05b0>",
                    "data": "<mujoco._structs.MjData object at 0x7f1bfd8b0970>",
                    "init_qpos": "array([0., 0., 0.])",
                    "init_qvel": "array([0., 0., 0.])",
                    "_viewers": {},
                    "frame_skip": 5,
                    "viewer": "None",
                    "observation_space": {
                      "dtype": "dtype('float64')",
                      "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "_shape": [
                        11
                      ],
                      "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                      "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                      "low_repr": "-inf",
                      "high_repr": "inf",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "action_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True])",
                      "bounded_above": "array([ True])",
                      "_shape": [
                        1
                      ],
                      "low": "array([-1.], dtype=float32)",
                      "high": "array([1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "render_mode": "None",
                    "renderer": {
                      "no_returns_render": [
                        "human"
                      ],
                      "single_render": [
                        "single_depth_array",
                        "single_rgb_array",
                        "single_state_pixels"
                      ],
                      "mode": "None",
                      "render": {
                        "$type": "functools.partial"
                      },
                      "render_list": [],
                      "$type": "gym.utils.renderer.Renderer"
                    },
                    "_ezpickle_args": [],
                    "_ezpickle_kwargs": {},
                    "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "checked_reset": false,
                  "checked_step": false,
                  "checked_render": false,
                  "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": true,
              "_has_reset": false,
              "_disable_render_order_enforcing": false,
              "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": false,
            "_max_episode_steps": 1000,
            "_elapsed_steps": "None",
            "$type": "gym.wrappers.time_limit.TimeLimit"
          },
          "_max_episode_length": 1000,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array",
            "single_rgb_array",
            "single_depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        "_env_steps": [],
        "_observations": [],
        "_last_observations": [],
        "_agent_infos": {},
        "_lengths": [],
        "_prev_obs": "None",
        "_eps_length": 0,
        "_episode_infos": {},
        "$type": "garage.sampler.default_worker.DefaultWorker"
      },
      {
        "_seed": "None",
        "_max_episode_length": 200,
        "_worker_number": 2,
        "agent": {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_module": {
              "training": true,
              "_parameters": {
                "_init_std": {
                  "$type": "torch.nn.parameter.Parameter"
                }
              },
              "_buffers": {
                "min_std_param": {
                  "$type": "torch.Tensor"
                }
              },
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_mean_module": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 11.0,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    },
                    "_output_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 1.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    }
                  },
                  "_output_dim": 1.0,
                  "$type": "garage.torch.modules.mlp_module.MLPModule"
                }
              },
              "_input_dim": 11.0,
              "_hidden_sizes": [
                32,
                32
              ],
              "_action_dim": 1.0,
              "_learn_std": true,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_min_std": 1e-06,
              "_max_std": "None",
              "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
              "_std_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_std_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": "None",
              "_std_output_w_init": {
                "$type": "builtins.function"
              },
              "_std_parameterization": "exp",
              "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
              "_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_output_nonlinearity": "None",
              "_output_w_init": {
                "$type": "builtins.function"
              },
              "_output_b_init": {
                "$type": "builtins.function"
              },
              "_layer_normalization": false,
              "_norm_dist_class": {
                "$typename": "torch.distributions.normal.Normal"
              },
              "_min_std_param": {
                "$type": "torch.Tensor"
              },
              "_max_std_param": "None",
              "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
            }
          },
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
        },
        "env": {
          "_env": {
            "env": {
              "env": {
                "env": {
                  "env": {
                    "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                    "model": "<mujoco._structs.MjModel object at 0x7f1bfca013b0>",
                    "data": "<mujoco._structs.MjData object at 0x7f1bfca013f0>",
                    "init_qpos": "array([0., 0., 0.])",
                    "init_qvel": "array([0., 0., 0.])",
                    "_viewers": {},
                    "frame_skip": 5,
                    "viewer": "None",
                    "observation_space": {
                      "dtype": "dtype('float64')",
                      "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "_shape": [
                        11
                      ],
                      "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                      "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                      "low_repr": "-inf",
                      "high_repr": "inf",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "action_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True])",
                      "bounded_above": "array([ True])",
                      "_shape": [
                        1
                      ],
                      "low": "array([-1.], dtype=float32)",
                      "high": "array([1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "render_mode": "None",
                    "renderer": {
                      "no_returns_render": [
                        "human"
                      ],
                      "single_render": [
                        "single_depth_array",
                        "single_rgb_array",
                        "single_state_pixels"
                      ],
                      "mode": "None",
                      "render": {
                        "$type": "functools.partial"
                      },
                      "render_list": [],
                      "$type": "gym.utils.renderer.Renderer"
                    },
                    "_ezpickle_args": [],
                    "_ezpickle_kwargs": {},
                    "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "checked_reset": false,
                  "checked_step": false,
                  "checked_render": false,
                  "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": true,
              "_has_reset": false,
              "_disable_render_order_enforcing": false,
              "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": false,
            "_max_episode_steps": 1000,
            "_elapsed_steps": "None",
            "$type": "gym.wrappers.time_limit.TimeLimit"
          },
          "_max_episode_length": 1000,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array",
            "single_rgb_array",
            "single_depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        "_env_steps": [],
        "_observations": [],
        "_last_observations": [],
        "_agent_infos": {},
        "_lengths": [],
        "_prev_obs": "None",
        "_eps_length": 0,
        "_episode_infos": {},
        "$type": "garage.sampler.default_worker.DefaultWorker"
      },
      {
        "_seed": "None",
        "_max_episode_length": 200,
        "_worker_number": 3,
        "agent": {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_module": {
              "training": true,
              "_parameters": {
                "_init_std": {
                  "$type": "torch.nn.parameter.Parameter"
                }
              },
              "_buffers": {
                "min_std_param": {
                  "$type": "torch.Tensor"
                }
              },
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_mean_module": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 11.0,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    },
                    "_output_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 1.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    }
                  },
                  "_output_dim": 1.0,
                  "$type": "garage.torch.modules.mlp_module.MLPModule"
                }
              },
              "_input_dim": 11.0,
              "_hidden_sizes": [
                32,
                32
              ],
              "_action_dim": 1.0,
              "_learn_std": true,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_min_std": 1e-06,
              "_max_std": "None",
              "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
              "_std_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_std_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": "None",
              "_std_output_w_init": {
                "$type": "builtins.function"
              },
              "_std_parameterization": "exp",
              "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
              "_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_output_nonlinearity": "None",
              "_output_w_init": {
                "$type": "builtins.function"
              },
              "_output_b_init": {
                "$type": "builtins.function"
              },
              "_layer_normalization": false,
              "_norm_dist_class": {
                "$typename": "torch.distributions.normal.Normal"
              },
              "_min_std_param": {
                "$type": "torch.Tensor"
              },
              "_max_std_param": "None",
              "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
            }
          },
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
        },
        "env": {
          "_env": {
            "env": {
              "env": {
                "env": {
                  "env": {
                    "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                    "model": "<mujoco._structs.MjModel object at 0x7f1bfca01df0>",
                    "data": "<mujoco._structs.MjData object at 0x7f1bfca01e30>",
                    "init_qpos": "array([0., 0., 0.])",
                    "init_qvel": "array([0., 0., 0.])",
                    "_viewers": {},
                    "frame_skip": 5,
                    "viewer": "None",
                    "observation_space": {
                      "dtype": "dtype('float64')",
                      "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "_shape": [
                        11
                      ],
                      "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                      "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                      "low_repr": "-inf",
                      "high_repr": "inf",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "action_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True])",
                      "bounded_above": "array([ True])",
                      "_shape": [
                        1
                      ],
                      "low": "array([-1.], dtype=float32)",
                      "high": "array([1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "render_mode": "None",
                    "renderer": {
                      "no_returns_render": [
                        "human"
                      ],
                      "single_render": [
                        "single_depth_array",
                        "single_rgb_array",
                        "single_state_pixels"
                      ],
                      "mode": "None",
                      "render": {
                        "$type": "functools.partial"
                      },
                      "render_list": [],
                      "$type": "gym.utils.renderer.Renderer"
                    },
                    "_ezpickle_args": [],
                    "_ezpickle_kwargs": {},
                    "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "checked_reset": false,
                  "checked_step": false,
                  "checked_render": false,
                  "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": true,
              "_has_reset": false,
              "_disable_render_order_enforcing": false,
              "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": false,
            "_max_episode_steps": 1000,
            "_elapsed_steps": "None",
            "$type": "gym.wrappers.time_limit.TimeLimit"
          },
          "_max_episode_length": 1000,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array",
            "single_rgb_array",
            "single_depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        "_env_steps": [],
        "_observations": [],
        "_last_observations": [],
        "_agent_infos": {},
        "_lengths": [],
        "_prev_obs": "None",
        "_eps_length": 0,
        "_episode_infos": {},
        "$type": "garage.sampler.default_worker.DefaultWorker"
      },
      {
        "_seed": "None",
        "_max_episode_length": 200,
        "_worker_number": 4,
        "agent": {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_module": {
              "training": true,
              "_parameters": {
                "_init_std": {
                  "$type": "torch.nn.parameter.Parameter"
                }
              },
              "_buffers": {
                "min_std_param": {
                  "$type": "torch.Tensor"
                }
              },
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_mean_module": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 11.0,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    },
                    "_output_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 1.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    }
                  },
                  "_output_dim": 1.0,
                  "$type": "garage.torch.modules.mlp_module.MLPModule"
                }
              },
              "_input_dim": 11.0,
              "_hidden_sizes": [
                32,
                32
              ],
              "_action_dim": 1.0,
              "_learn_std": true,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_min_std": 1e-06,
              "_max_std": "None",
              "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
              "_std_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_std_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": "None",
              "_std_output_w_init": {
                "$type": "builtins.function"
              },
              "_std_parameterization": "exp",
              "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
              "_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_output_nonlinearity": "None",
              "_output_w_init": {
                "$type": "builtins.function"
              },
              "_output_b_init": {
                "$type": "builtins.function"
              },
              "_layer_normalization": false,
              "_norm_dist_class": {
                "$typename": "torch.distributions.normal.Normal"
              },
              "_min_std_param": {
                "$type": "torch.Tensor"
              },
              "_max_std_param": "None",
              "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
            }
          },
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
        },
        "env": {
          "_env": {
            "env": {
              "env": {
                "env": {
                  "env": {
                    "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                    "model": "<mujoco._structs.MjModel object at 0x7f1bfc95f870>",
                    "data": "<mujoco._structs.MjData object at 0x7f1bfc95f8b0>",
                    "init_qpos": "array([0., 0., 0.])",
                    "init_qvel": "array([0., 0., 0.])",
                    "_viewers": {},
                    "frame_skip": 5,
                    "viewer": "None",
                    "observation_space": {
                      "dtype": "dtype('float64')",
                      "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "_shape": [
                        11
                      ],
                      "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                      "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                      "low_repr": "-inf",
                      "high_repr": "inf",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "action_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True])",
                      "bounded_above": "array([ True])",
                      "_shape": [
                        1
                      ],
                      "low": "array([-1.], dtype=float32)",
                      "high": "array([1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "render_mode": "None",
                    "renderer": {
                      "no_returns_render": [
                        "human"
                      ],
                      "single_render": [
                        "single_depth_array",
                        "single_rgb_array",
                        "single_state_pixels"
                      ],
                      "mode": "None",
                      "render": {
                        "$type": "functools.partial"
                      },
                      "render_list": [],
                      "$type": "gym.utils.renderer.Renderer"
                    },
                    "_ezpickle_args": [],
                    "_ezpickle_kwargs": {},
                    "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "checked_reset": false,
                  "checked_step": false,
                  "checked_render": false,
                  "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": true,
              "_has_reset": false,
              "_disable_render_order_enforcing": false,
              "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": false,
            "_max_episode_steps": 1000,
            "_elapsed_steps": "None",
            "$type": "gym.wrappers.time_limit.TimeLimit"
          },
          "_max_episode_length": 1000,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array",
            "single_rgb_array",
            "single_depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        "_env_steps": [],
        "_observations": [],
        "_last_observations": [],
        "_agent_infos": {},
        "_lengths": [],
        "_prev_obs": "None",
        "_eps_length": 0,
        "_episode_infos": {},
        "$type": "garage.sampler.default_worker.DefaultWorker"
      },
      {
        "_seed": "None",
        "_max_episode_length": 200,
        "_worker_number": 5,
        "agent": {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_module": {
              "training": true,
              "_parameters": {
                "_init_std": {
                  "$type": "torch.nn.parameter.Parameter"
                }
              },
              "_buffers": {
                "min_std_param": {
                  "$type": "torch.Tensor"
                }
              },
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_mean_module": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 11.0,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    },
                    "_output_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 1.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    }
                  },
                  "_output_dim": 1.0,
                  "$type": "garage.torch.modules.mlp_module.MLPModule"
                }
              },
              "_input_dim": 11.0,
              "_hidden_sizes": [
                32,
                32
              ],
              "_action_dim": 1.0,
              "_learn_std": true,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_min_std": 1e-06,
              "_max_std": "None",
              "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
              "_std_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_std_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": "None",
              "_std_output_w_init": {
                "$type": "builtins.function"
              },
              "_std_parameterization": "exp",
              "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
              "_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_output_nonlinearity": "None",
              "_output_w_init": {
                "$type": "builtins.function"
              },
              "_output_b_init": {
                "$type": "builtins.function"
              },
              "_layer_normalization": false,
              "_norm_dist_class": {
                "$typename": "torch.distributions.normal.Normal"
              },
              "_min_std_param": {
                "$type": "torch.Tensor"
              },
              "_max_std_param": "None",
              "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
            }
          },
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
        },
        "env": {
          "_env": {
            "env": {
              "env": {
                "env": {
                  "env": {
                    "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                    "model": "<mujoco._structs.MjModel object at 0x7f1bfc91b330>",
                    "data": "<mujoco._structs.MjData object at 0x7f1bfc91b370>",
                    "init_qpos": "array([0., 0., 0.])",
                    "init_qvel": "array([0., 0., 0.])",
                    "_viewers": {},
                    "frame_skip": 5,
                    "viewer": "None",
                    "observation_space": {
                      "dtype": "dtype('float64')",
                      "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "_shape": [
                        11
                      ],
                      "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                      "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                      "low_repr": "-inf",
                      "high_repr": "inf",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "action_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True])",
                      "bounded_above": "array([ True])",
                      "_shape": [
                        1
                      ],
                      "low": "array([-1.], dtype=float32)",
                      "high": "array([1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "render_mode": "None",
                    "renderer": {
                      "no_returns_render": [
                        "human"
                      ],
                      "single_render": [
                        "single_depth_array",
                        "single_rgb_array",
                        "single_state_pixels"
                      ],
                      "mode": "None",
                      "render": {
                        "$type": "functools.partial"
                      },
                      "render_list": [],
                      "$type": "gym.utils.renderer.Renderer"
                    },
                    "_ezpickle_args": [],
                    "_ezpickle_kwargs": {},
                    "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "checked_reset": false,
                  "checked_step": false,
                  "checked_render": false,
                  "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": true,
              "_has_reset": false,
              "_disable_render_order_enforcing": false,
              "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": false,
            "_max_episode_steps": 1000,
            "_elapsed_steps": "None",
            "$type": "gym.wrappers.time_limit.TimeLimit"
          },
          "_max_episode_length": 1000,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array",
            "single_rgb_array",
            "single_depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        "_env_steps": [],
        "_observations": [],
        "_last_observations": [],
        "_agent_infos": {},
        "_lengths": [],
        "_prev_obs": "None",
        "_eps_length": 0,
        "_episode_infos": {},
        "$type": "garage.sampler.default_worker.DefaultWorker"
      },
      {
        "_seed": "None",
        "_max_episode_length": 200,
        "_worker_number": 6,
        "agent": {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_module": {
              "training": true,
              "_parameters": {
                "_init_std": {
                  "$type": "torch.nn.parameter.Parameter"
                }
              },
              "_buffers": {
                "min_std_param": {
                  "$type": "torch.Tensor"
                }
              },
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_mean_module": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 11.0,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    },
                    "_output_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 1.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    }
                  },
                  "_output_dim": 1.0,
                  "$type": "garage.torch.modules.mlp_module.MLPModule"
                }
              },
              "_input_dim": 11.0,
              "_hidden_sizes": [
                32,
                32
              ],
              "_action_dim": 1.0,
              "_learn_std": true,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_min_std": 1e-06,
              "_max_std": "None",
              "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
              "_std_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_std_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": "None",
              "_std_output_w_init": {
                "$type": "builtins.function"
              },
              "_std_parameterization": "exp",
              "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
              "_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_output_nonlinearity": "None",
              "_output_w_init": {
                "$type": "builtins.function"
              },
              "_output_b_init": {
                "$type": "builtins.function"
              },
              "_layer_normalization": false,
              "_norm_dist_class": {
                "$typename": "torch.distributions.normal.Normal"
              },
              "_min_std_param": {
                "$type": "torch.Tensor"
              },
              "_max_std_param": "None",
              "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
            }
          },
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
        },
        "env": {
          "_env": {
            "env": {
              "env": {
                "env": {
                  "env": {
                    "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                    "model": "<mujoco._structs.MjModel object at 0x7f1bfc91bdb0>",
                    "data": "<mujoco._structs.MjData object at 0x7f1bfc91bdf0>",
                    "init_qpos": "array([0., 0., 0.])",
                    "init_qvel": "array([0., 0., 0.])",
                    "_viewers": {},
                    "frame_skip": 5,
                    "viewer": "None",
                    "observation_space": {
                      "dtype": "dtype('float64')",
                      "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "_shape": [
                        11
                      ],
                      "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                      "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                      "low_repr": "-inf",
                      "high_repr": "inf",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "action_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True])",
                      "bounded_above": "array([ True])",
                      "_shape": [
                        1
                      ],
                      "low": "array([-1.], dtype=float32)",
                      "high": "array([1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "render_mode": "None",
                    "renderer": {
                      "no_returns_render": [
                        "human"
                      ],
                      "single_render": [
                        "single_depth_array",
                        "single_rgb_array",
                        "single_state_pixels"
                      ],
                      "mode": "None",
                      "render": {
                        "$type": "functools.partial"
                      },
                      "render_list": [],
                      "$type": "gym.utils.renderer.Renderer"
                    },
                    "_ezpickle_args": [],
                    "_ezpickle_kwargs": {},
                    "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "checked_reset": false,
                  "checked_step": false,
                  "checked_render": false,
                  "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": true,
              "_has_reset": false,
              "_disable_render_order_enforcing": false,
              "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": false,
            "_max_episode_steps": 1000,
            "_elapsed_steps": "None",
            "$type": "gym.wrappers.time_limit.TimeLimit"
          },
          "_max_episode_length": 1000,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array",
            "single_rgb_array",
            "single_depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        "_env_steps": [],
        "_observations": [],
        "_last_observations": [],
        "_agent_infos": {},
        "_lengths": [],
        "_prev_obs": "None",
        "_eps_length": 0,
        "_episode_infos": {},
        "$type": "garage.sampler.default_worker.DefaultWorker"
      },
      {
        "_seed": "None",
        "_max_episode_length": 200,
        "_worker_number": 7,
        "agent": {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_module": {
              "training": true,
              "_parameters": {
                "_init_std": {
                  "$type": "torch.nn.parameter.Parameter"
                }
              },
              "_buffers": {
                "min_std_param": {
                  "$type": "torch.Tensor"
                }
              },
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_mean_module": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 11.0,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    },
                    "_output_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 1.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    }
                  },
                  "_output_dim": 1.0,
                  "$type": "garage.torch.modules.mlp_module.MLPModule"
                }
              },
              "_input_dim": 11.0,
              "_hidden_sizes": [
                32,
                32
              ],
              "_action_dim": 1.0,
              "_learn_std": true,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_min_std": 1e-06,
              "_max_std": "None",
              "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
              "_std_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_std_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": "None",
              "_std_output_w_init": {
                "$type": "builtins.function"
              },
              "_std_parameterization": "exp",
              "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
              "_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_output_nonlinearity": "None",
              "_output_w_init": {
                "$type": "builtins.function"
              },
              "_output_b_init": {
                "$type": "builtins.function"
              },
              "_layer_normalization": false,
              "_norm_dist_class": {
                "$typename": "torch.distributions.normal.Normal"
              },
              "_min_std_param": {
                "$type": "torch.Tensor"
              },
              "_max_std_param": "None",
              "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
            }
          },
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
        },
        "env": {
          "_env": {
            "env": {
              "env": {
                "env": {
                  "env": {
                    "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                    "model": "<mujoco._structs.MjModel object at 0x7f1bfc879830>",
                    "data": "<mujoco._structs.MjData object at 0x7f1bfc879870>",
                    "init_qpos": "array([0., 0., 0.])",
                    "init_qvel": "array([0., 0., 0.])",
                    "_viewers": {},
                    "frame_skip": 5,
                    "viewer": "None",
                    "observation_space": {
                      "dtype": "dtype('float64')",
                      "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "_shape": [
                        11
                      ],
                      "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                      "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                      "low_repr": "-inf",
                      "high_repr": "inf",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "action_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True])",
                      "bounded_above": "array([ True])",
                      "_shape": [
                        1
                      ],
                      "low": "array([-1.], dtype=float32)",
                      "high": "array([1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "render_mode": "None",
                    "renderer": {
                      "no_returns_render": [
                        "human"
                      ],
                      "single_render": [
                        "single_depth_array",
                        "single_rgb_array",
                        "single_state_pixels"
                      ],
                      "mode": "None",
                      "render": {
                        "$type": "functools.partial"
                      },
                      "render_list": [],
                      "$type": "gym.utils.renderer.Renderer"
                    },
                    "_ezpickle_args": [],
                    "_ezpickle_kwargs": {},
                    "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "checked_reset": false,
                  "checked_step": false,
                  "checked_render": false,
                  "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": true,
              "_has_reset": false,
              "_disable_render_order_enforcing": false,
              "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": false,
            "_max_episode_steps": 1000,
            "_elapsed_steps": "None",
            "$type": "gym.wrappers.time_limit.TimeLimit"
          },
          "_max_episode_length": 1000,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array",
            "single_rgb_array",
            "single_depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        "_env_steps": [],
        "_observations": [],
        "_last_observations": [],
        "_agent_infos": {},
        "_lengths": [],
        "_prev_obs": "None",
        "_eps_length": 0,
        "_episode_infos": {},
        "$type": "garage.sampler.default_worker.DefaultWorker"
      },
      {
        "_seed": "None",
        "_max_episode_length": 200,
        "_worker_number": 8,
        "agent": {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_module": {
              "training": true,
              "_parameters": {
                "_init_std": {
                  "$type": "torch.nn.parameter.Parameter"
                }
              },
              "_buffers": {
                "min_std_param": {
                  "$type": "torch.Tensor"
                }
              },
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_mean_module": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 11.0,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    },
                    "_output_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 1.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    }
                  },
                  "_output_dim": 1.0,
                  "$type": "garage.torch.modules.mlp_module.MLPModule"
                }
              },
              "_input_dim": 11.0,
              "_hidden_sizes": [
                32,
                32
              ],
              "_action_dim": 1.0,
              "_learn_std": true,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_min_std": 1e-06,
              "_max_std": "None",
              "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
              "_std_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_std_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": "None",
              "_std_output_w_init": {
                "$type": "builtins.function"
              },
              "_std_parameterization": "exp",
              "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
              "_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_output_nonlinearity": "None",
              "_output_w_init": {
                "$type": "builtins.function"
              },
              "_output_b_init": {
                "$type": "builtins.function"
              },
              "_layer_normalization": false,
              "_norm_dist_class": {
                "$typename": "torch.distributions.normal.Normal"
              },
              "_min_std_param": {
                "$type": "torch.Tensor"
              },
              "_max_std_param": "None",
              "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
            }
          },
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
        },
        "env": {
          "_env": {
            "env": {
              "env": {
                "env": {
                  "env": {
                    "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                    "model": "<mujoco._structs.MjModel object at 0x7f1bfc82e2f0>",
                    "data": "<mujoco._structs.MjData object at 0x7f1bfc82e330>",
                    "init_qpos": "array([0., 0., 0.])",
                    "init_qvel": "array([0., 0., 0.])",
                    "_viewers": {},
                    "frame_skip": 5,
                    "viewer": "None",
                    "observation_space": {
                      "dtype": "dtype('float64')",
                      "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "_shape": [
                        11
                      ],
                      "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                      "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                      "low_repr": "-inf",
                      "high_repr": "inf",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "action_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True])",
                      "bounded_above": "array([ True])",
                      "_shape": [
                        1
                      ],
                      "low": "array([-1.], dtype=float32)",
                      "high": "array([1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "render_mode": "None",
                    "renderer": {
                      "no_returns_render": [
                        "human"
                      ],
                      "single_render": [
                        "single_depth_array",
                        "single_rgb_array",
                        "single_state_pixels"
                      ],
                      "mode": "None",
                      "render": {
                        "$type": "functools.partial"
                      },
                      "render_list": [],
                      "$type": "gym.utils.renderer.Renderer"
                    },
                    "_ezpickle_args": [],
                    "_ezpickle_kwargs": {},
                    "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "checked_reset": false,
                  "checked_step": false,
                  "checked_render": false,
                  "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": true,
              "_has_reset": false,
              "_disable_render_order_enforcing": false,
              "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": false,
            "_max_episode_steps": 1000,
            "_elapsed_steps": "None",
            "$type": "gym.wrappers.time_limit.TimeLimit"
          },
          "_max_episode_length": 1000,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array",
            "single_rgb_array",
            "single_depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        "_env_steps": [],
        "_observations": [],
        "_last_observations": [],
        "_agent_infos": {},
        "_lengths": [],
        "_prev_obs": "None",
        "_eps_length": 0,
        "_episode_infos": {},
        "$type": "garage.sampler.default_worker.DefaultWorker"
      },
      {
        "_seed": "None",
        "_max_episode_length": 200,
        "_worker_number": 9,
        "agent": {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_module": {
              "training": true,
              "_parameters": {
                "_init_std": {
                  "$type": "torch.nn.parameter.Parameter"
                }
              },
              "_buffers": {
                "min_std_param": {
                  "$type": "torch.Tensor"
                }
              },
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_mean_module": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 11.0,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    },
                    "_output_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 1.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    }
                  },
                  "_output_dim": 1.0,
                  "$type": "garage.torch.modules.mlp_module.MLPModule"
                }
              },
              "_input_dim": 11.0,
              "_hidden_sizes": [
                32,
                32
              ],
              "_action_dim": 1.0,
              "_learn_std": true,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_min_std": 1e-06,
              "_max_std": "None",
              "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
              "_std_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_std_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": "None",
              "_std_output_w_init": {
                "$type": "builtins.function"
              },
              "_std_parameterization": "exp",
              "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
              "_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_output_nonlinearity": "None",
              "_output_w_init": {
                "$type": "builtins.function"
              },
              "_output_b_init": {
                "$type": "builtins.function"
              },
              "_layer_normalization": false,
              "_norm_dist_class": {
                "$typename": "torch.distributions.normal.Normal"
              },
              "_min_std_param": {
                "$type": "torch.Tensor"
              },
              "_max_std_param": "None",
              "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
            }
          },
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
        },
        "env": {
          "_env": {
            "env": {
              "env": {
                "env": {
                  "env": {
                    "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                    "model": "<mujoco._structs.MjModel object at 0x7f1bfc82ed70>",
                    "data": "<mujoco._structs.MjData object at 0x7f1bfc82edb0>",
                    "init_qpos": "array([0., 0., 0.])",
                    "init_qvel": "array([0., 0., 0.])",
                    "_viewers": {},
                    "frame_skip": 5,
                    "viewer": "None",
                    "observation_space": {
                      "dtype": "dtype('float64')",
                      "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "_shape": [
                        11
                      ],
                      "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                      "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                      "low_repr": "-inf",
                      "high_repr": "inf",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "action_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True])",
                      "bounded_above": "array([ True])",
                      "_shape": [
                        1
                      ],
                      "low": "array([-1.], dtype=float32)",
                      "high": "array([1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "render_mode": "None",
                    "renderer": {
                      "no_returns_render": [
                        "human"
                      ],
                      "single_render": [
                        "single_depth_array",
                        "single_rgb_array",
                        "single_state_pixels"
                      ],
                      "mode": "None",
                      "render": {
                        "$type": "functools.partial"
                      },
                      "render_list": [],
                      "$type": "gym.utils.renderer.Renderer"
                    },
                    "_ezpickle_args": [],
                    "_ezpickle_kwargs": {},
                    "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "checked_reset": false,
                  "checked_step": false,
                  "checked_render": false,
                  "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": true,
              "_has_reset": false,
              "_disable_render_order_enforcing": false,
              "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": false,
            "_max_episode_steps": 1000,
            "_elapsed_steps": "None",
            "$type": "gym.wrappers.time_limit.TimeLimit"
          },
          "_max_episode_length": 1000,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array",
            "single_rgb_array",
            "single_depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        "_env_steps": [],
        "_observations": [],
        "_last_observations": [],
        "_agent_infos": {},
        "_lengths": [],
        "_prev_obs": "None",
        "_eps_length": 0,
        "_episode_infos": {},
        "$type": "garage.sampler.default_worker.DefaultWorker"
      },
      {
        "_seed": "None",
        "_max_episode_length": 200,
        "_worker_number": 10,
        "agent": {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_module": {
              "training": true,
              "_parameters": {
                "_init_std": {
                  "$type": "torch.nn.parameter.Parameter"
                }
              },
              "_buffers": {
                "min_std_param": {
                  "$type": "torch.Tensor"
                }
              },
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_mean_module": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 11.0,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    },
                    "_output_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 1.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    }
                  },
                  "_output_dim": 1.0,
                  "$type": "garage.torch.modules.mlp_module.MLPModule"
                }
              },
              "_input_dim": 11.0,
              "_hidden_sizes": [
                32,
                32
              ],
              "_action_dim": 1.0,
              "_learn_std": true,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_min_std": 1e-06,
              "_max_std": "None",
              "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
              "_std_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_std_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": "None",
              "_std_output_w_init": {
                "$type": "builtins.function"
              },
              "_std_parameterization": "exp",
              "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
              "_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_output_nonlinearity": "None",
              "_output_w_init": {
                "$type": "builtins.function"
              },
              "_output_b_init": {
                "$type": "builtins.function"
              },
              "_layer_normalization": false,
              "_norm_dist_class": {
                "$typename": "torch.distributions.normal.Normal"
              },
              "_min_std_param": {
                "$type": "torch.Tensor"
              },
              "_max_std_param": "None",
              "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
            }
          },
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
        },
        "env": {
          "_env": {
            "env": {
              "env": {
                "env": {
                  "env": {
                    "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                    "model": "<mujoco._structs.MjModel object at 0x7f1bfc814870>",
                    "data": "<mujoco._structs.MjData object at 0x7f1bfc8148b0>",
                    "init_qpos": "array([0., 0., 0.])",
                    "init_qvel": "array([0., 0., 0.])",
                    "_viewers": {},
                    "frame_skip": 5,
                    "viewer": "None",
                    "observation_space": {
                      "dtype": "dtype('float64')",
                      "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "_shape": [
                        11
                      ],
                      "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                      "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                      "low_repr": "-inf",
                      "high_repr": "inf",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "action_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True])",
                      "bounded_above": "array([ True])",
                      "_shape": [
                        1
                      ],
                      "low": "array([-1.], dtype=float32)",
                      "high": "array([1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "render_mode": "None",
                    "renderer": {
                      "no_returns_render": [
                        "human"
                      ],
                      "single_render": [
                        "single_depth_array",
                        "single_rgb_array",
                        "single_state_pixels"
                      ],
                      "mode": "None",
                      "render": {
                        "$type": "functools.partial"
                      },
                      "render_list": [],
                      "$type": "gym.utils.renderer.Renderer"
                    },
                    "_ezpickle_args": [],
                    "_ezpickle_kwargs": {},
                    "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "checked_reset": false,
                  "checked_step": false,
                  "checked_render": false,
                  "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": true,
              "_has_reset": false,
              "_disable_render_order_enforcing": false,
              "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": false,
            "_max_episode_steps": 1000,
            "_elapsed_steps": "None",
            "$type": "gym.wrappers.time_limit.TimeLimit"
          },
          "_max_episode_length": 1000,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array",
            "single_rgb_array",
            "single_depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        "_env_steps": [],
        "_observations": [],
        "_last_observations": [],
        "_agent_infos": {},
        "_lengths": [],
        "_prev_obs": "None",
        "_eps_length": 0,
        "_episode_infos": {},
        "$type": "garage.sampler.default_worker.DefaultWorker"
      },
      {
        "_seed": "None",
        "_max_episode_length": 200,
        "_worker_number": 11,
        "agent": {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_module": {
              "training": true,
              "_parameters": {
                "_init_std": {
                  "$type": "torch.nn.parameter.Parameter"
                }
              },
              "_buffers": {
                "min_std_param": {
                  "$type": "torch.Tensor"
                }
              },
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_mean_module": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 11.0,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    },
                    "_output_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 1.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    }
                  },
                  "_output_dim": 1.0,
                  "$type": "garage.torch.modules.mlp_module.MLPModule"
                }
              },
              "_input_dim": 11.0,
              "_hidden_sizes": [
                32,
                32
              ],
              "_action_dim": 1.0,
              "_learn_std": true,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_min_std": 1e-06,
              "_max_std": "None",
              "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
              "_std_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_std_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": "None",
              "_std_output_w_init": {
                "$type": "builtins.function"
              },
              "_std_parameterization": "exp",
              "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
              "_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_output_nonlinearity": "None",
              "_output_w_init": {
                "$type": "builtins.function"
              },
              "_output_b_init": {
                "$type": "builtins.function"
              },
              "_layer_normalization": false,
              "_norm_dist_class": {
                "$typename": "torch.distributions.normal.Normal"
              },
              "_min_std_param": {
                "$type": "torch.Tensor"
              },
              "_max_std_param": "None",
              "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
            }
          },
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
        },
        "env": {
          "_env": {
            "env": {
              "env": {
                "env": {
                  "env": {
                    "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                    "model": "<mujoco._structs.MjModel object at 0x7f1bfc814530>",
                    "data": "<mujoco._structs.MjData object at 0x7f1bfc8145b0>",
                    "init_qpos": "array([0., 0., 0.])",
                    "init_qvel": "array([0., 0., 0.])",
                    "_viewers": {},
                    "frame_skip": 5,
                    "viewer": "None",
                    "observation_space": {
                      "dtype": "dtype('float64')",
                      "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "_shape": [
                        11
                      ],
                      "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                      "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                      "low_repr": "-inf",
                      "high_repr": "inf",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "action_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True])",
                      "bounded_above": "array([ True])",
                      "_shape": [
                        1
                      ],
                      "low": "array([-1.], dtype=float32)",
                      "high": "array([1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "render_mode": "None",
                    "renderer": {
                      "no_returns_render": [
                        "human"
                      ],
                      "single_render": [
                        "single_depth_array",
                        "single_rgb_array",
                        "single_state_pixels"
                      ],
                      "mode": "None",
                      "render": {
                        "$type": "functools.partial"
                      },
                      "render_list": [],
                      "$type": "gym.utils.renderer.Renderer"
                    },
                    "_ezpickle_args": [],
                    "_ezpickle_kwargs": {},
                    "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "checked_reset": false,
                  "checked_step": false,
                  "checked_render": false,
                  "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": true,
              "_has_reset": false,
              "_disable_render_order_enforcing": false,
              "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": false,
            "_max_episode_steps": 1000,
            "_elapsed_steps": "None",
            "$type": "gym.wrappers.time_limit.TimeLimit"
          },
          "_max_episode_length": 1000,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array",
            "single_rgb_array",
            "single_depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        "_env_steps": [],
        "_observations": [],
        "_last_observations": [],
        "_agent_infos": {},
        "_lengths": [],
        "_prev_obs": "None",
        "_eps_length": 0,
        "_episode_infos": {},
        "$type": "garage.sampler.default_worker.DefaultWorker"
      },
      {
        "_seed": "None",
        "_max_episode_length": 200,
        "_worker_number": 12,
        "agent": {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_module": {
              "training": true,
              "_parameters": {
                "_init_std": {
                  "$type": "torch.nn.parameter.Parameter"
                }
              },
              "_buffers": {
                "min_std_param": {
                  "$type": "torch.Tensor"
                }
              },
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_mean_module": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 11.0,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    },
                    "_output_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 1.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    }
                  },
                  "_output_dim": 1.0,
                  "$type": "garage.torch.modules.mlp_module.MLPModule"
                }
              },
              "_input_dim": 11.0,
              "_hidden_sizes": [
                32,
                32
              ],
              "_action_dim": 1.0,
              "_learn_std": true,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_min_std": 1e-06,
              "_max_std": "None",
              "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
              "_std_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_std_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": "None",
              "_std_output_w_init": {
                "$type": "builtins.function"
              },
              "_std_parameterization": "exp",
              "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
              "_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_output_nonlinearity": "None",
              "_output_w_init": {
                "$type": "builtins.function"
              },
              "_output_b_init": {
                "$type": "builtins.function"
              },
              "_layer_normalization": false,
              "_norm_dist_class": {
                "$typename": "torch.distributions.normal.Normal"
              },
              "_min_std_param": {
                "$type": "torch.Tensor"
              },
              "_max_std_param": "None",
              "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
            }
          },
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
        },
        "env": {
          "_env": {
            "env": {
              "env": {
                "env": {
                  "env": {
                    "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                    "model": "<mujoco._structs.MjModel object at 0x7f1bfc91ba30>",
                    "data": "<mujoco._structs.MjData object at 0x7f1bfc91bab0>",
                    "init_qpos": "array([0., 0., 0.])",
                    "init_qvel": "array([0., 0., 0.])",
                    "_viewers": {},
                    "frame_skip": 5,
                    "viewer": "None",
                    "observation_space": {
                      "dtype": "dtype('float64')",
                      "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "_shape": [
                        11
                      ],
                      "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                      "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                      "low_repr": "-inf",
                      "high_repr": "inf",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "action_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True])",
                      "bounded_above": "array([ True])",
                      "_shape": [
                        1
                      ],
                      "low": "array([-1.], dtype=float32)",
                      "high": "array([1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "render_mode": "None",
                    "renderer": {
                      "no_returns_render": [
                        "human"
                      ],
                      "single_render": [
                        "single_depth_array",
                        "single_rgb_array",
                        "single_state_pixels"
                      ],
                      "mode": "None",
                      "render": {
                        "$type": "functools.partial"
                      },
                      "render_list": [],
                      "$type": "gym.utils.renderer.Renderer"
                    },
                    "_ezpickle_args": [],
                    "_ezpickle_kwargs": {},
                    "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "checked_reset": false,
                  "checked_step": false,
                  "checked_render": false,
                  "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": true,
              "_has_reset": false,
              "_disable_render_order_enforcing": false,
              "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": false,
            "_max_episode_steps": 1000,
            "_elapsed_steps": "None",
            "$type": "gym.wrappers.time_limit.TimeLimit"
          },
          "_max_episode_length": 1000,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array",
            "single_rgb_array",
            "single_depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        "_env_steps": [],
        "_observations": [],
        "_last_observations": [],
        "_agent_infos": {},
        "_lengths": [],
        "_prev_obs": "None",
        "_eps_length": 0,
        "_episode_infos": {},
        "$type": "garage.sampler.default_worker.DefaultWorker"
      },
      {
        "_seed": "None",
        "_max_episode_length": 200,
        "_worker_number": 13,
        "agent": {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_module": {
              "training": true,
              "_parameters": {
                "_init_std": {
                  "$type": "torch.nn.parameter.Parameter"
                }
              },
              "_buffers": {
                "min_std_param": {
                  "$type": "torch.Tensor"
                }
              },
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_mean_module": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 11.0,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    },
                    "_output_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 1.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    }
                  },
                  "_output_dim": 1.0,
                  "$type": "garage.torch.modules.mlp_module.MLPModule"
                }
              },
              "_input_dim": 11.0,
              "_hidden_sizes": [
                32,
                32
              ],
              "_action_dim": 1.0,
              "_learn_std": true,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_min_std": 1e-06,
              "_max_std": "None",
              "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
              "_std_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_std_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": "None",
              "_std_output_w_init": {
                "$type": "builtins.function"
              },
              "_std_parameterization": "exp",
              "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
              "_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_output_nonlinearity": "None",
              "_output_w_init": {
                "$type": "builtins.function"
              },
              "_output_b_init": {
                "$type": "builtins.function"
              },
              "_layer_normalization": false,
              "_norm_dist_class": {
                "$typename": "torch.distributions.normal.Normal"
              },
              "_min_std_param": {
                "$type": "torch.Tensor"
              },
              "_max_std_param": "None",
              "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
            }
          },
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
        },
        "env": {
          "_env": {
            "env": {
              "env": {
                "env": {
                  "env": {
                    "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                    "model": "<mujoco._structs.MjModel object at 0x7f1bfca011b0>",
                    "data": "<mujoco._structs.MjData object at 0x7f1bfd313b70>",
                    "init_qpos": "array([0., 0., 0.])",
                    "init_qvel": "array([0., 0., 0.])",
                    "_viewers": {},
                    "frame_skip": 5,
                    "viewer": "None",
                    "observation_space": {
                      "dtype": "dtype('float64')",
                      "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "_shape": [
                        11
                      ],
                      "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                      "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                      "low_repr": "-inf",
                      "high_repr": "inf",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "action_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True])",
                      "bounded_above": "array([ True])",
                      "_shape": [
                        1
                      ],
                      "low": "array([-1.], dtype=float32)",
                      "high": "array([1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "render_mode": "None",
                    "renderer": {
                      "no_returns_render": [
                        "human"
                      ],
                      "single_render": [
                        "single_depth_array",
                        "single_rgb_array",
                        "single_state_pixels"
                      ],
                      "mode": "None",
                      "render": {
                        "$type": "functools.partial"
                      },
                      "render_list": [],
                      "$type": "gym.utils.renderer.Renderer"
                    },
                    "_ezpickle_args": [],
                    "_ezpickle_kwargs": {},
                    "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "checked_reset": false,
                  "checked_step": false,
                  "checked_render": false,
                  "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": true,
              "_has_reset": false,
              "_disable_render_order_enforcing": false,
              "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": false,
            "_max_episode_steps": 1000,
            "_elapsed_steps": "None",
            "$type": "gym.wrappers.time_limit.TimeLimit"
          },
          "_max_episode_length": 1000,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array",
            "single_rgb_array",
            "single_depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        "_env_steps": [],
        "_observations": [],
        "_last_observations": [],
        "_agent_infos": {},
        "_lengths": [],
        "_prev_obs": "None",
        "_eps_length": 0,
        "_episode_infos": {},
        "$type": "garage.sampler.default_worker.DefaultWorker"
      },
      {
        "_seed": "None",
        "_max_episode_length": 200,
        "_worker_number": 14,
        "agent": {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_module": {
              "training": true,
              "_parameters": {
                "_init_std": {
                  "$type": "torch.nn.parameter.Parameter"
                }
              },
              "_buffers": {
                "min_std_param": {
                  "$type": "torch.Tensor"
                }
              },
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_mean_module": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 11.0,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    },
                    "_output_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 1.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    }
                  },
                  "_output_dim": 1.0,
                  "$type": "garage.torch.modules.mlp_module.MLPModule"
                }
              },
              "_input_dim": 11.0,
              "_hidden_sizes": [
                32,
                32
              ],
              "_action_dim": 1.0,
              "_learn_std": true,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_min_std": 1e-06,
              "_max_std": "None",
              "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
              "_std_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_std_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": "None",
              "_std_output_w_init": {
                "$type": "builtins.function"
              },
              "_std_parameterization": "exp",
              "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
              "_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_output_nonlinearity": "None",
              "_output_w_init": {
                "$type": "builtins.function"
              },
              "_output_b_init": {
                "$type": "builtins.function"
              },
              "_layer_normalization": false,
              "_norm_dist_class": {
                "$typename": "torch.distributions.normal.Normal"
              },
              "_min_std_param": {
                "$type": "torch.Tensor"
              },
              "_max_std_param": "None",
              "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
            }
          },
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
        },
        "env": {
          "_env": {
            "env": {
              "env": {
                "env": {
                  "env": {
                    "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                    "model": "<mujoco._structs.MjModel object at 0x7f1bfc7c8470>",
                    "data": "<mujoco._structs.MjData object at 0x7f1bfc7c84b0>",
                    "init_qpos": "array([0., 0., 0.])",
                    "init_qvel": "array([0., 0., 0.])",
                    "_viewers": {},
                    "frame_skip": 5,
                    "viewer": "None",
                    "observation_space": {
                      "dtype": "dtype('float64')",
                      "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "_shape": [
                        11
                      ],
                      "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                      "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                      "low_repr": "-inf",
                      "high_repr": "inf",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "action_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True])",
                      "bounded_above": "array([ True])",
                      "_shape": [
                        1
                      ],
                      "low": "array([-1.], dtype=float32)",
                      "high": "array([1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "render_mode": "None",
                    "renderer": {
                      "no_returns_render": [
                        "human"
                      ],
                      "single_render": [
                        "single_depth_array",
                        "single_rgb_array",
                        "single_state_pixels"
                      ],
                      "mode": "None",
                      "render": {
                        "$type": "functools.partial"
                      },
                      "render_list": [],
                      "$type": "gym.utils.renderer.Renderer"
                    },
                    "_ezpickle_args": [],
                    "_ezpickle_kwargs": {},
                    "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "checked_reset": false,
                  "checked_step": false,
                  "checked_render": false,
                  "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": true,
              "_has_reset": false,
              "_disable_render_order_enforcing": false,
              "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": false,
            "_max_episode_steps": 1000,
            "_elapsed_steps": "None",
            "$type": "gym.wrappers.time_limit.TimeLimit"
          },
          "_max_episode_length": 1000,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array",
            "single_rgb_array",
            "single_depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        "_env_steps": [],
        "_observations": [],
        "_last_observations": [],
        "_agent_infos": {},
        "_lengths": [],
        "_prev_obs": "None",
        "_eps_length": 0,
        "_episode_infos": {},
        "$type": "garage.sampler.default_worker.DefaultWorker"
      },
      {
        "_seed": "None",
        "_max_episode_length": 200,
        "_worker_number": 15,
        "agent": {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_module": {
              "training": true,
              "_parameters": {
                "_init_std": {
                  "$type": "torch.nn.parameter.Parameter"
                }
              },
              "_buffers": {
                "min_std_param": {
                  "$type": "torch.Tensor"
                }
              },
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_mean_module": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 11.0,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    },
                    "_output_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 1.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    }
                  },
                  "_output_dim": 1.0,
                  "$type": "garage.torch.modules.mlp_module.MLPModule"
                }
              },
              "_input_dim": 11.0,
              "_hidden_sizes": [
                32,
                32
              ],
              "_action_dim": 1.0,
              "_learn_std": true,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_min_std": 1e-06,
              "_max_std": "None",
              "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
              "_std_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_std_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": "None",
              "_std_output_w_init": {
                "$type": "builtins.function"
              },
              "_std_parameterization": "exp",
              "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
              "_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_output_nonlinearity": "None",
              "_output_w_init": {
                "$type": "builtins.function"
              },
              "_output_b_init": {
                "$type": "builtins.function"
              },
              "_layer_normalization": false,
              "_norm_dist_class": {
                "$typename": "torch.distributions.normal.Normal"
              },
              "_min_std_param": {
                "$type": "torch.Tensor"
              },
              "_max_std_param": "None",
              "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
            }
          },
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
        },
        "env": {
          "_env": {
            "env": {
              "env": {
                "env": {
                  "env": {
                    "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                    "model": "<mujoco._structs.MjModel object at 0x7f1bfc7c8c30>",
                    "data": "<mujoco._structs.MjData object at 0x7f1bfc7c8c70>",
                    "init_qpos": "array([0., 0., 0.])",
                    "init_qvel": "array([0., 0., 0.])",
                    "_viewers": {},
                    "frame_skip": 5,
                    "viewer": "None",
                    "observation_space": {
                      "dtype": "dtype('float64')",
                      "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "_shape": [
                        11
                      ],
                      "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                      "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                      "low_repr": "-inf",
                      "high_repr": "inf",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "action_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True])",
                      "bounded_above": "array([ True])",
                      "_shape": [
                        1
                      ],
                      "low": "array([-1.], dtype=float32)",
                      "high": "array([1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "render_mode": "None",
                    "renderer": {
                      "no_returns_render": [
                        "human"
                      ],
                      "single_render": [
                        "single_depth_array",
                        "single_rgb_array",
                        "single_state_pixels"
                      ],
                      "mode": "None",
                      "render": {
                        "$type": "functools.partial"
                      },
                      "render_list": [],
                      "$type": "gym.utils.renderer.Renderer"
                    },
                    "_ezpickle_args": [],
                    "_ezpickle_kwargs": {},
                    "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "checked_reset": false,
                  "checked_step": false,
                  "checked_render": false,
                  "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": true,
              "_has_reset": false,
              "_disable_render_order_enforcing": false,
              "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": false,
            "_max_episode_steps": 1000,
            "_elapsed_steps": "None",
            "$type": "gym.wrappers.time_limit.TimeLimit"
          },
          "_max_episode_length": 1000,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array",
            "single_rgb_array",
            "single_depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        "_env_steps": [],
        "_observations": [],
        "_last_observations": [],
        "_agent_infos": {},
        "_lengths": [],
        "_prev_obs": "None",
        "_eps_length": 0,
        "_episode_infos": {},
        "$type": "garage.sampler.default_worker.DefaultWorker"
      },
      {
        "_seed": "None",
        "_max_episode_length": 200,
        "_worker_number": 16,
        "agent": {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_module": {
              "training": true,
              "_parameters": {
                "_init_std": {
                  "$type": "torch.nn.parameter.Parameter"
                }
              },
              "_buffers": {
                "min_std_param": {
                  "$type": "torch.Tensor"
                }
              },
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_mean_module": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 11.0,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    },
                    "_output_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 1.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    }
                  },
                  "_output_dim": 1.0,
                  "$type": "garage.torch.modules.mlp_module.MLPModule"
                }
              },
              "_input_dim": 11.0,
              "_hidden_sizes": [
                32,
                32
              ],
              "_action_dim": 1.0,
              "_learn_std": true,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_min_std": 1e-06,
              "_max_std": "None",
              "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
              "_std_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_std_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": "None",
              "_std_output_w_init": {
                "$type": "builtins.function"
              },
              "_std_parameterization": "exp",
              "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
              "_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_output_nonlinearity": "None",
              "_output_w_init": {
                "$type": "builtins.function"
              },
              "_output_b_init": {
                "$type": "builtins.function"
              },
              "_layer_normalization": false,
              "_norm_dist_class": {
                "$typename": "torch.distributions.normal.Normal"
              },
              "_min_std_param": {
                "$type": "torch.Tensor"
              },
              "_max_std_param": "None",
              "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
            }
          },
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
        },
        "env": {
          "_env": {
            "env": {
              "env": {
                "env": {
                  "env": {
                    "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                    "model": "<mujoco._structs.MjModel object at 0x7f1bfc9156b0>",
                    "data": "<mujoco._structs.MjData object at 0x7f1bfc9156f0>",
                    "init_qpos": "array([0., 0., 0.])",
                    "init_qvel": "array([0., 0., 0.])",
                    "_viewers": {},
                    "frame_skip": 5,
                    "viewer": "None",
                    "observation_space": {
                      "dtype": "dtype('float64')",
                      "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "_shape": [
                        11
                      ],
                      "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                      "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                      "low_repr": "-inf",
                      "high_repr": "inf",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "action_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True])",
                      "bounded_above": "array([ True])",
                      "_shape": [
                        1
                      ],
                      "low": "array([-1.], dtype=float32)",
                      "high": "array([1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "render_mode": "None",
                    "renderer": {
                      "no_returns_render": [
                        "human"
                      ],
                      "single_render": [
                        "single_depth_array",
                        "single_rgb_array",
                        "single_state_pixels"
                      ],
                      "mode": "None",
                      "render": {
                        "$type": "functools.partial"
                      },
                      "render_list": [],
                      "$type": "gym.utils.renderer.Renderer"
                    },
                    "_ezpickle_args": [],
                    "_ezpickle_kwargs": {},
                    "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "checked_reset": false,
                  "checked_step": false,
                  "checked_render": false,
                  "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": true,
              "_has_reset": false,
              "_disable_render_order_enforcing": false,
              "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": false,
            "_max_episode_steps": 1000,
            "_elapsed_steps": "None",
            "$type": "gym.wrappers.time_limit.TimeLimit"
          },
          "_max_episode_length": 1000,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array",
            "single_rgb_array",
            "single_depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        "_env_steps": [],
        "_observations": [],
        "_last_observations": [],
        "_agent_infos": {},
        "_lengths": [],
        "_prev_obs": "None",
        "_eps_length": 0,
        "_episode_infos": {},
        "$type": "garage.sampler.default_worker.DefaultWorker"
      },
      {
        "_seed": "None",
        "_max_episode_length": 200,
        "_worker_number": 17,
        "agent": {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_module": {
              "training": true,
              "_parameters": {
                "_init_std": {
                  "$type": "torch.nn.parameter.Parameter"
                }
              },
              "_buffers": {
                "min_std_param": {
                  "$type": "torch.Tensor"
                }
              },
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_mean_module": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 11.0,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    },
                    "_output_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 1.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    }
                  },
                  "_output_dim": 1.0,
                  "$type": "garage.torch.modules.mlp_module.MLPModule"
                }
              },
              "_input_dim": 11.0,
              "_hidden_sizes": [
                32,
                32
              ],
              "_action_dim": 1.0,
              "_learn_std": true,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_min_std": 1e-06,
              "_max_std": "None",
              "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
              "_std_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_std_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": "None",
              "_std_output_w_init": {
                "$type": "builtins.function"
              },
              "_std_parameterization": "exp",
              "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
              "_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_output_nonlinearity": "None",
              "_output_w_init": {
                "$type": "builtins.function"
              },
              "_output_b_init": {
                "$type": "builtins.function"
              },
              "_layer_normalization": false,
              "_norm_dist_class": {
                "$typename": "torch.distributions.normal.Normal"
              },
              "_min_std_param": {
                "$type": "torch.Tensor"
              },
              "_max_std_param": "None",
              "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
            }
          },
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
        },
        "env": {
          "_env": {
            "env": {
              "env": {
                "env": {
                  "env": {
                    "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                    "model": "<mujoco._structs.MjModel object at 0x7f1bfc79a1b0>",
                    "data": "<mujoco._structs.MjData object at 0x7f1bfc79a1f0>",
                    "init_qpos": "array([0., 0., 0.])",
                    "init_qvel": "array([0., 0., 0.])",
                    "_viewers": {},
                    "frame_skip": 5,
                    "viewer": "None",
                    "observation_space": {
                      "dtype": "dtype('float64')",
                      "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "_shape": [
                        11
                      ],
                      "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                      "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                      "low_repr": "-inf",
                      "high_repr": "inf",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "action_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True])",
                      "bounded_above": "array([ True])",
                      "_shape": [
                        1
                      ],
                      "low": "array([-1.], dtype=float32)",
                      "high": "array([1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "render_mode": "None",
                    "renderer": {
                      "no_returns_render": [
                        "human"
                      ],
                      "single_render": [
                        "single_depth_array",
                        "single_rgb_array",
                        "single_state_pixels"
                      ],
                      "mode": "None",
                      "render": {
                        "$type": "functools.partial"
                      },
                      "render_list": [],
                      "$type": "gym.utils.renderer.Renderer"
                    },
                    "_ezpickle_args": [],
                    "_ezpickle_kwargs": {},
                    "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "checked_reset": false,
                  "checked_step": false,
                  "checked_render": false,
                  "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": true,
              "_has_reset": false,
              "_disable_render_order_enforcing": false,
              "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": false,
            "_max_episode_steps": 1000,
            "_elapsed_steps": "None",
            "$type": "gym.wrappers.time_limit.TimeLimit"
          },
          "_max_episode_length": 1000,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array",
            "single_rgb_array",
            "single_depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        "_env_steps": [],
        "_observations": [],
        "_last_observations": [],
        "_agent_infos": {},
        "_lengths": [],
        "_prev_obs": "None",
        "_eps_length": 0,
        "_episode_infos": {},
        "$type": "garage.sampler.default_worker.DefaultWorker"
      },
      {
        "_seed": "None",
        "_max_episode_length": 200,
        "_worker_number": 18,
        "agent": {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_module": {
              "training": true,
              "_parameters": {
                "_init_std": {
                  "$type": "torch.nn.parameter.Parameter"
                }
              },
              "_buffers": {
                "min_std_param": {
                  "$type": "torch.Tensor"
                }
              },
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_mean_module": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 11.0,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    },
                    "_output_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 1.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    }
                  },
                  "_output_dim": 1.0,
                  "$type": "garage.torch.modules.mlp_module.MLPModule"
                }
              },
              "_input_dim": 11.0,
              "_hidden_sizes": [
                32,
                32
              ],
              "_action_dim": 1.0,
              "_learn_std": true,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_min_std": 1e-06,
              "_max_std": "None",
              "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
              "_std_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_std_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": "None",
              "_std_output_w_init": {
                "$type": "builtins.function"
              },
              "_std_parameterization": "exp",
              "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
              "_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_output_nonlinearity": "None",
              "_output_w_init": {
                "$type": "builtins.function"
              },
              "_output_b_init": {
                "$type": "builtins.function"
              },
              "_layer_normalization": false,
              "_norm_dist_class": {
                "$typename": "torch.distributions.normal.Normal"
              },
              "_min_std_param": {
                "$type": "torch.Tensor"
              },
              "_max_std_param": "None",
              "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
            }
          },
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
        },
        "env": {
          "_env": {
            "env": {
              "env": {
                "env": {
                  "env": {
                    "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                    "model": "<mujoco._structs.MjModel object at 0x7f1bfc79ac70>",
                    "data": "<mujoco._structs.MjData object at 0x7f1bfc79acb0>",
                    "init_qpos": "array([0., 0., 0.])",
                    "init_qvel": "array([0., 0., 0.])",
                    "_viewers": {},
                    "frame_skip": 5,
                    "viewer": "None",
                    "observation_space": {
                      "dtype": "dtype('float64')",
                      "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "_shape": [
                        11
                      ],
                      "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                      "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                      "low_repr": "-inf",
                      "high_repr": "inf",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "action_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True])",
                      "bounded_above": "array([ True])",
                      "_shape": [
                        1
                      ],
                      "low": "array([-1.], dtype=float32)",
                      "high": "array([1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "render_mode": "None",
                    "renderer": {
                      "no_returns_render": [
                        "human"
                      ],
                      "single_render": [
                        "single_depth_array",
                        "single_rgb_array",
                        "single_state_pixels"
                      ],
                      "mode": "None",
                      "render": {
                        "$type": "functools.partial"
                      },
                      "render_list": [],
                      "$type": "gym.utils.renderer.Renderer"
                    },
                    "_ezpickle_args": [],
                    "_ezpickle_kwargs": {},
                    "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "checked_reset": false,
                  "checked_step": false,
                  "checked_render": false,
                  "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": true,
              "_has_reset": false,
              "_disable_render_order_enforcing": false,
              "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": false,
            "_max_episode_steps": 1000,
            "_elapsed_steps": "None",
            "$type": "gym.wrappers.time_limit.TimeLimit"
          },
          "_max_episode_length": 1000,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array",
            "single_rgb_array",
            "single_depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        "_env_steps": [],
        "_observations": [],
        "_last_observations": [],
        "_agent_infos": {},
        "_lengths": [],
        "_prev_obs": "None",
        "_eps_length": 0,
        "_episode_infos": {},
        "$type": "garage.sampler.default_worker.DefaultWorker"
      },
      {
        "_seed": "None",
        "_max_episode_length": 200,
        "_worker_number": 19,
        "agent": {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_module": {
              "training": true,
              "_parameters": {
                "_init_std": {
                  "$type": "torch.nn.parameter.Parameter"
                }
              },
              "_buffers": {
                "min_std_param": {
                  "$type": "torch.Tensor"
                }
              },
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_mean_module": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 11.0,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    },
                    "_output_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 1.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    }
                  },
                  "_output_dim": 1.0,
                  "$type": "garage.torch.modules.mlp_module.MLPModule"
                }
              },
              "_input_dim": 11.0,
              "_hidden_sizes": [
                32,
                32
              ],
              "_action_dim": 1.0,
              "_learn_std": true,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_min_std": 1e-06,
              "_max_std": "None",
              "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
              "_std_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_std_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": "None",
              "_std_output_w_init": {
                "$type": "builtins.function"
              },
              "_std_parameterization": "exp",
              "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
              "_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_output_nonlinearity": "None",
              "_output_w_init": {
                "$type": "builtins.function"
              },
              "_output_b_init": {
                "$type": "builtins.function"
              },
              "_layer_normalization": false,
              "_norm_dist_class": {
                "$typename": "torch.distributions.normal.Normal"
              },
              "_min_std_param": {
                "$type": "torch.Tensor"
              },
              "_max_std_param": "None",
              "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
            }
          },
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
        },
        "env": {
          "_env": {
            "env": {
              "env": {
                "env": {
                  "env": {
                    "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                    "model": "<mujoco._structs.MjModel object at 0x7f1bfc769770>",
                    "data": "<mujoco._structs.MjData object at 0x7f1bfc7697b0>",
                    "init_qpos": "array([0., 0., 0.])",
                    "init_qvel": "array([0., 0., 0.])",
                    "_viewers": {},
                    "frame_skip": 5,
                    "viewer": "None",
                    "observation_space": {
                      "dtype": "dtype('float64')",
                      "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "_shape": [
                        11
                      ],
                      "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                      "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                      "low_repr": "-inf",
                      "high_repr": "inf",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "action_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True])",
                      "bounded_above": "array([ True])",
                      "_shape": [
                        1
                      ],
                      "low": "array([-1.], dtype=float32)",
                      "high": "array([1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "render_mode": "None",
                    "renderer": {
                      "no_returns_render": [
                        "human"
                      ],
                      "single_render": [
                        "single_depth_array",
                        "single_rgb_array",
                        "single_state_pixels"
                      ],
                      "mode": "None",
                      "render": {
                        "$type": "functools.partial"
                      },
                      "render_list": [],
                      "$type": "gym.utils.renderer.Renderer"
                    },
                    "_ezpickle_args": [],
                    "_ezpickle_kwargs": {},
                    "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "checked_reset": false,
                  "checked_step": false,
                  "checked_render": false,
                  "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": true,
              "_has_reset": false,
              "_disable_render_order_enforcing": false,
              "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": false,
            "_max_episode_steps": 1000,
            "_elapsed_steps": "None",
            "$type": "gym.wrappers.time_limit.TimeLimit"
          },
          "_max_episode_length": 1000,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array",
            "single_rgb_array",
            "single_depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        "_env_steps": [],
        "_observations": [],
        "_last_observations": [],
        "_agent_infos": {},
        "_lengths": [],
        "_prev_obs": "None",
        "_eps_length": 0,
        "_episode_infos": {},
        "$type": "garage.sampler.default_worker.DefaultWorker"
      },
      {
        "_seed": "None",
        "_max_episode_length": 200,
        "_worker_number": 20,
        "agent": {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_module": {
              "training": true,
              "_parameters": {
                "_init_std": {
                  "$type": "torch.nn.parameter.Parameter"
                }
              },
              "_buffers": {
                "min_std_param": {
                  "$type": "torch.Tensor"
                }
              },
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_mean_module": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 11.0,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    },
                    "_output_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 1.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    }
                  },
                  "_output_dim": 1.0,
                  "$type": "garage.torch.modules.mlp_module.MLPModule"
                }
              },
              "_input_dim": 11.0,
              "_hidden_sizes": [
                32,
                32
              ],
              "_action_dim": 1.0,
              "_learn_std": true,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_min_std": 1e-06,
              "_max_std": "None",
              "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
              "_std_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_std_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": "None",
              "_std_output_w_init": {
                "$type": "builtins.function"
              },
              "_std_parameterization": "exp",
              "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
              "_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_output_nonlinearity": "None",
              "_output_w_init": {
                "$type": "builtins.function"
              },
              "_output_b_init": {
                "$type": "builtins.function"
              },
              "_layer_normalization": false,
              "_norm_dist_class": {
                "$typename": "torch.distributions.normal.Normal"
              },
              "_min_std_param": {
                "$type": "torch.Tensor"
              },
              "_max_std_param": "None",
              "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
            }
          },
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
        },
        "env": {
          "_env": {
            "env": {
              "env": {
                "env": {
                  "env": {
                    "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                    "model": "<mujoco._structs.MjModel object at 0x7f1bfc6b4270>",
                    "data": "<mujoco._structs.MjData object at 0x7f1bfc6b42b0>",
                    "init_qpos": "array([0., 0., 0.])",
                    "init_qvel": "array([0., 0., 0.])",
                    "_viewers": {},
                    "frame_skip": 5,
                    "viewer": "None",
                    "observation_space": {
                      "dtype": "dtype('float64')",
                      "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "_shape": [
                        11
                      ],
                      "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                      "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                      "low_repr": "-inf",
                      "high_repr": "inf",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "action_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True])",
                      "bounded_above": "array([ True])",
                      "_shape": [
                        1
                      ],
                      "low": "array([-1.], dtype=float32)",
                      "high": "array([1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "render_mode": "None",
                    "renderer": {
                      "no_returns_render": [
                        "human"
                      ],
                      "single_render": [
                        "single_depth_array",
                        "single_rgb_array",
                        "single_state_pixels"
                      ],
                      "mode": "None",
                      "render": {
                        "$type": "functools.partial"
                      },
                      "render_list": [],
                      "$type": "gym.utils.renderer.Renderer"
                    },
                    "_ezpickle_args": [],
                    "_ezpickle_kwargs": {},
                    "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "checked_reset": false,
                  "checked_step": false,
                  "checked_render": false,
                  "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": true,
              "_has_reset": false,
              "_disable_render_order_enforcing": false,
              "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": false,
            "_max_episode_steps": 1000,
            "_elapsed_steps": "None",
            "$type": "gym.wrappers.time_limit.TimeLimit"
          },
          "_max_episode_length": 1000,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array",
            "single_rgb_array",
            "single_depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        "_env_steps": [],
        "_observations": [],
        "_last_observations": [],
        "_agent_infos": {},
        "_lengths": [],
        "_prev_obs": "None",
        "_eps_length": 0,
        "_episode_infos": {},
        "$type": "garage.sampler.default_worker.DefaultWorker"
      },
      {
        "_seed": "None",
        "_max_episode_length": 200,
        "_worker_number": 21,
        "agent": {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_module": {
              "training": true,
              "_parameters": {
                "_init_std": {
                  "$type": "torch.nn.parameter.Parameter"
                }
              },
              "_buffers": {
                "min_std_param": {
                  "$type": "torch.Tensor"
                }
              },
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_mean_module": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 11.0,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    },
                    "_output_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 1.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    }
                  },
                  "_output_dim": 1.0,
                  "$type": "garage.torch.modules.mlp_module.MLPModule"
                }
              },
              "_input_dim": 11.0,
              "_hidden_sizes": [
                32,
                32
              ],
              "_action_dim": 1.0,
              "_learn_std": true,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_min_std": 1e-06,
              "_max_std": "None",
              "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
              "_std_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_std_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": "None",
              "_std_output_w_init": {
                "$type": "builtins.function"
              },
              "_std_parameterization": "exp",
              "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
              "_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_output_nonlinearity": "None",
              "_output_w_init": {
                "$type": "builtins.function"
              },
              "_output_b_init": {
                "$type": "builtins.function"
              },
              "_layer_normalization": false,
              "_norm_dist_class": {
                "$typename": "torch.distributions.normal.Normal"
              },
              "_min_std_param": {
                "$type": "torch.Tensor"
              },
              "_max_std_param": "None",
              "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
            }
          },
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
        },
        "env": {
          "_env": {
            "env": {
              "env": {
                "env": {
                  "env": {
                    "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                    "model": "<mujoco._structs.MjModel object at 0x7f1bfc6b4d30>",
                    "data": "<mujoco._structs.MjData object at 0x7f1bfc6b4d70>",
                    "init_qpos": "array([0., 0., 0.])",
                    "init_qvel": "array([0., 0., 0.])",
                    "_viewers": {},
                    "frame_skip": 5,
                    "viewer": "None",
                    "observation_space": {
                      "dtype": "dtype('float64')",
                      "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "_shape": [
                        11
                      ],
                      "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                      "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                      "low_repr": "-inf",
                      "high_repr": "inf",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "action_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True])",
                      "bounded_above": "array([ True])",
                      "_shape": [
                        1
                      ],
                      "low": "array([-1.], dtype=float32)",
                      "high": "array([1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "render_mode": "None",
                    "renderer": {
                      "no_returns_render": [
                        "human"
                      ],
                      "single_render": [
                        "single_depth_array",
                        "single_rgb_array",
                        "single_state_pixels"
                      ],
                      "mode": "None",
                      "render": {
                        "$type": "functools.partial"
                      },
                      "render_list": [],
                      "$type": "gym.utils.renderer.Renderer"
                    },
                    "_ezpickle_args": [],
                    "_ezpickle_kwargs": {},
                    "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "checked_reset": false,
                  "checked_step": false,
                  "checked_render": false,
                  "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": true,
              "_has_reset": false,
              "_disable_render_order_enforcing": false,
              "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": false,
            "_max_episode_steps": 1000,
            "_elapsed_steps": "None",
            "$type": "gym.wrappers.time_limit.TimeLimit"
          },
          "_max_episode_length": 1000,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array",
            "single_rgb_array",
            "single_depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        "_env_steps": [],
        "_observations": [],
        "_last_observations": [],
        "_agent_infos": {},
        "_lengths": [],
        "_prev_obs": "None",
        "_eps_length": 0,
        "_episode_infos": {},
        "$type": "garage.sampler.default_worker.DefaultWorker"
      },
      {
        "_seed": "None",
        "_max_episode_length": 200,
        "_worker_number": 22,
        "agent": {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_module": {
              "training": true,
              "_parameters": {
                "_init_std": {
                  "$type": "torch.nn.parameter.Parameter"
                }
              },
              "_buffers": {
                "min_std_param": {
                  "$type": "torch.Tensor"
                }
              },
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_mean_module": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 11.0,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    },
                    "_output_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 1.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    }
                  },
                  "_output_dim": 1.0,
                  "$type": "garage.torch.modules.mlp_module.MLPModule"
                }
              },
              "_input_dim": 11.0,
              "_hidden_sizes": [
                32,
                32
              ],
              "_action_dim": 1.0,
              "_learn_std": true,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_min_std": 1e-06,
              "_max_std": "None",
              "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
              "_std_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_std_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": "None",
              "_std_output_w_init": {
                "$type": "builtins.function"
              },
              "_std_parameterization": "exp",
              "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
              "_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_output_nonlinearity": "None",
              "_output_w_init": {
                "$type": "builtins.function"
              },
              "_output_b_init": {
                "$type": "builtins.function"
              },
              "_layer_normalization": false,
              "_norm_dist_class": {
                "$typename": "torch.distributions.normal.Normal"
              },
              "_min_std_param": {
                "$type": "torch.Tensor"
              },
              "_max_std_param": "None",
              "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
            }
          },
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
        },
        "env": {
          "_env": {
            "env": {
              "env": {
                "env": {
                  "env": {
                    "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                    "model": "<mujoco._structs.MjModel object at 0x7f1bfc683830>",
                    "data": "<mujoco._structs.MjData object at 0x7f1bfc683870>",
                    "init_qpos": "array([0., 0., 0.])",
                    "init_qvel": "array([0., 0., 0.])",
                    "_viewers": {},
                    "frame_skip": 5,
                    "viewer": "None",
                    "observation_space": {
                      "dtype": "dtype('float64')",
                      "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "_shape": [
                        11
                      ],
                      "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                      "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                      "low_repr": "-inf",
                      "high_repr": "inf",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "action_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True])",
                      "bounded_above": "array([ True])",
                      "_shape": [
                        1
                      ],
                      "low": "array([-1.], dtype=float32)",
                      "high": "array([1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "render_mode": "None",
                    "renderer": {
                      "no_returns_render": [
                        "human"
                      ],
                      "single_render": [
                        "single_depth_array",
                        "single_rgb_array",
                        "single_state_pixels"
                      ],
                      "mode": "None",
                      "render": {
                        "$type": "functools.partial"
                      },
                      "render_list": [],
                      "$type": "gym.utils.renderer.Renderer"
                    },
                    "_ezpickle_args": [],
                    "_ezpickle_kwargs": {},
                    "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "checked_reset": false,
                  "checked_step": false,
                  "checked_render": false,
                  "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": true,
              "_has_reset": false,
              "_disable_render_order_enforcing": false,
              "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": false,
            "_max_episode_steps": 1000,
            "_elapsed_steps": "None",
            "$type": "gym.wrappers.time_limit.TimeLimit"
          },
          "_max_episode_length": 1000,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array",
            "single_rgb_array",
            "single_depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        "_env_steps": [],
        "_observations": [],
        "_last_observations": [],
        "_agent_infos": {},
        "_lengths": [],
        "_prev_obs": "None",
        "_eps_length": 0,
        "_episode_infos": {},
        "$type": "garage.sampler.default_worker.DefaultWorker"
      },
      {
        "_seed": "None",
        "_max_episode_length": 200,
        "_worker_number": 23,
        "agent": {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_module": {
              "training": true,
              "_parameters": {
                "_init_std": {
                  "$type": "torch.nn.parameter.Parameter"
                }
              },
              "_buffers": {
                "min_std_param": {
                  "$type": "torch.Tensor"
                }
              },
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_mean_module": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 11.0,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    },
                    "_output_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 1.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    }
                  },
                  "_output_dim": 1.0,
                  "$type": "garage.torch.modules.mlp_module.MLPModule"
                }
              },
              "_input_dim": 11.0,
              "_hidden_sizes": [
                32,
                32
              ],
              "_action_dim": 1.0,
              "_learn_std": true,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_min_std": 1e-06,
              "_max_std": "None",
              "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
              "_std_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_std_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": "None",
              "_std_output_w_init": {
                "$type": "builtins.function"
              },
              "_std_parameterization": "exp",
              "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
              "_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_output_nonlinearity": "None",
              "_output_w_init": {
                "$type": "builtins.function"
              },
              "_output_b_init": {
                "$type": "builtins.function"
              },
              "_layer_normalization": false,
              "_norm_dist_class": {
                "$typename": "torch.distributions.normal.Normal"
              },
              "_min_std_param": {
                "$type": "torch.Tensor"
              },
              "_max_std_param": "None",
              "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
            }
          },
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
        },
        "env": {
          "_env": {
            "env": {
              "env": {
                "env": {
                  "env": {
                    "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                    "model": "<mujoco._structs.MjModel object at 0x7f1bfc683070>",
                    "data": "<mujoco._structs.MjData object at 0x7f1bfc683630>",
                    "init_qpos": "array([0., 0., 0.])",
                    "init_qvel": "array([0., 0., 0.])",
                    "_viewers": {},
                    "frame_skip": 5,
                    "viewer": "None",
                    "observation_space": {
                      "dtype": "dtype('float64')",
                      "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "_shape": [
                        11
                      ],
                      "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                      "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                      "low_repr": "-inf",
                      "high_repr": "inf",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "action_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True])",
                      "bounded_above": "array([ True])",
                      "_shape": [
                        1
                      ],
                      "low": "array([-1.], dtype=float32)",
                      "high": "array([1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "render_mode": "None",
                    "renderer": {
                      "no_returns_render": [
                        "human"
                      ],
                      "single_render": [
                        "single_depth_array",
                        "single_rgb_array",
                        "single_state_pixels"
                      ],
                      "mode": "None",
                      "render": {
                        "$type": "functools.partial"
                      },
                      "render_list": [],
                      "$type": "gym.utils.renderer.Renderer"
                    },
                    "_ezpickle_args": [],
                    "_ezpickle_kwargs": {},
                    "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "checked_reset": false,
                  "checked_step": false,
                  "checked_render": false,
                  "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": true,
              "_has_reset": false,
              "_disable_render_order_enforcing": false,
              "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": false,
            "_max_episode_steps": 1000,
            "_elapsed_steps": "None",
            "$type": "gym.wrappers.time_limit.TimeLimit"
          },
          "_max_episode_length": 1000,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array",
            "single_rgb_array",
            "single_depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        "_env_steps": [],
        "_observations": [],
        "_last_observations": [],
        "_agent_infos": {},
        "_lengths": [],
        "_prev_obs": "None",
        "_eps_length": 0,
        "_episode_infos": {},
        "$type": "garage.sampler.default_worker.DefaultWorker"
      },
      {
        "_seed": "None",
        "_max_episode_length": 200,
        "_worker_number": 24,
        "agent": {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_module": {
              "training": true,
              "_parameters": {
                "_init_std": {
                  "$type": "torch.nn.parameter.Parameter"
                }
              },
              "_buffers": {
                "min_std_param": {
                  "$type": "torch.Tensor"
                }
              },
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_mean_module": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 11.0,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    },
                    "_output_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 1.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    }
                  },
                  "_output_dim": 1.0,
                  "$type": "garage.torch.modules.mlp_module.MLPModule"
                }
              },
              "_input_dim": 11.0,
              "_hidden_sizes": [
                32,
                32
              ],
              "_action_dim": 1.0,
              "_learn_std": true,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_min_std": 1e-06,
              "_max_std": "None",
              "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
              "_std_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_std_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": "None",
              "_std_output_w_init": {
                "$type": "builtins.function"
              },
              "_std_parameterization": "exp",
              "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
              "_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_output_nonlinearity": "None",
              "_output_w_init": {
                "$type": "builtins.function"
              },
              "_output_b_init": {
                "$type": "builtins.function"
              },
              "_layer_normalization": false,
              "_norm_dist_class": {
                "$typename": "torch.distributions.normal.Normal"
              },
              "_min_std_param": {
                "$type": "torch.Tensor"
              },
              "_max_std_param": "None",
              "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
            }
          },
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
        },
        "env": {
          "_env": {
            "env": {
              "env": {
                "env": {
                  "env": {
                    "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                    "model": "<mujoco._structs.MjModel object at 0x7f1bfc79a730>",
                    "data": "<mujoco._structs.MjData object at 0x7f1bfc79af30>",
                    "init_qpos": "array([0., 0., 0.])",
                    "init_qvel": "array([0., 0., 0.])",
                    "_viewers": {},
                    "frame_skip": 5,
                    "viewer": "None",
                    "observation_space": {
                      "dtype": "dtype('float64')",
                      "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "_shape": [
                        11
                      ],
                      "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                      "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                      "low_repr": "-inf",
                      "high_repr": "inf",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "action_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True])",
                      "bounded_above": "array([ True])",
                      "_shape": [
                        1
                      ],
                      "low": "array([-1.], dtype=float32)",
                      "high": "array([1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "render_mode": "None",
                    "renderer": {
                      "no_returns_render": [
                        "human"
                      ],
                      "single_render": [
                        "single_depth_array",
                        "single_rgb_array",
                        "single_state_pixels"
                      ],
                      "mode": "None",
                      "render": {
                        "$type": "functools.partial"
                      },
                      "render_list": [],
                      "$type": "gym.utils.renderer.Renderer"
                    },
                    "_ezpickle_args": [],
                    "_ezpickle_kwargs": {},
                    "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "checked_reset": false,
                  "checked_step": false,
                  "checked_render": false,
                  "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": true,
              "_has_reset": false,
              "_disable_render_order_enforcing": false,
              "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": false,
            "_max_episode_steps": 1000,
            "_elapsed_steps": "None",
            "$type": "gym.wrappers.time_limit.TimeLimit"
          },
          "_max_episode_length": 1000,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array",
            "single_rgb_array",
            "single_depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        "_env_steps": [],
        "_observations": [],
        "_last_observations": [],
        "_agent_infos": {},
        "_lengths": [],
        "_prev_obs": "None",
        "_eps_length": 0,
        "_episode_infos": {},
        "$type": "garage.sampler.default_worker.DefaultWorker"
      },
      {
        "_seed": "None",
        "_max_episode_length": 200,
        "_worker_number": 25,
        "agent": {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_module": {
              "training": true,
              "_parameters": {
                "_init_std": {
                  "$type": "torch.nn.parameter.Parameter"
                }
              },
              "_buffers": {
                "min_std_param": {
                  "$type": "torch.Tensor"
                }
              },
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_mean_module": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 11.0,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    },
                    "_output_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 1.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    }
                  },
                  "_output_dim": 1.0,
                  "$type": "garage.torch.modules.mlp_module.MLPModule"
                }
              },
              "_input_dim": 11.0,
              "_hidden_sizes": [
                32,
                32
              ],
              "_action_dim": 1.0,
              "_learn_std": true,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_min_std": 1e-06,
              "_max_std": "None",
              "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
              "_std_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_std_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": "None",
              "_std_output_w_init": {
                "$type": "builtins.function"
              },
              "_std_parameterization": "exp",
              "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
              "_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_output_nonlinearity": "None",
              "_output_w_init": {
                "$type": "builtins.function"
              },
              "_output_b_init": {
                "$type": "builtins.function"
              },
              "_layer_normalization": false,
              "_norm_dist_class": {
                "$typename": "torch.distributions.normal.Normal"
              },
              "_min_std_param": {
                "$type": "torch.Tensor"
              },
              "_max_std_param": "None",
              "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
            }
          },
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
        },
        "env": {
          "_env": {
            "env": {
              "env": {
                "env": {
                  "env": {
                    "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                    "model": "<mujoco._structs.MjModel object at 0x7f1bfc7c8a70>",
                    "data": "<mujoco._structs.MjData object at 0x7f1bfc7c8a30>",
                    "init_qpos": "array([0., 0., 0.])",
                    "init_qvel": "array([0., 0., 0.])",
                    "_viewers": {},
                    "frame_skip": 5,
                    "viewer": "None",
                    "observation_space": {
                      "dtype": "dtype('float64')",
                      "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "_shape": [
                        11
                      ],
                      "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                      "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                      "low_repr": "-inf",
                      "high_repr": "inf",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "action_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True])",
                      "bounded_above": "array([ True])",
                      "_shape": [
                        1
                      ],
                      "low": "array([-1.], dtype=float32)",
                      "high": "array([1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "render_mode": "None",
                    "renderer": {
                      "no_returns_render": [
                        "human"
                      ],
                      "single_render": [
                        "single_depth_array",
                        "single_rgb_array",
                        "single_state_pixels"
                      ],
                      "mode": "None",
                      "render": {
                        "$type": "functools.partial"
                      },
                      "render_list": [],
                      "$type": "gym.utils.renderer.Renderer"
                    },
                    "_ezpickle_args": [],
                    "_ezpickle_kwargs": {},
                    "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "checked_reset": false,
                  "checked_step": false,
                  "checked_render": false,
                  "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": true,
              "_has_reset": false,
              "_disable_render_order_enforcing": false,
              "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": false,
            "_max_episode_steps": 1000,
            "_elapsed_steps": "None",
            "$type": "gym.wrappers.time_limit.TimeLimit"
          },
          "_max_episode_length": 1000,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array",
            "single_rgb_array",
            "single_depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        "_env_steps": [],
        "_observations": [],
        "_last_observations": [],
        "_agent_infos": {},
        "_lengths": [],
        "_prev_obs": "None",
        "_eps_length": 0,
        "_episode_infos": {},
        "$type": "garage.sampler.default_worker.DefaultWorker"
      },
      {
        "_seed": "None",
        "_max_episode_length": 200,
        "_worker_number": 26,
        "agent": {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_module": {
              "training": true,
              "_parameters": {
                "_init_std": {
                  "$type": "torch.nn.parameter.Parameter"
                }
              },
              "_buffers": {
                "min_std_param": {
                  "$type": "torch.Tensor"
                }
              },
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_mean_module": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 11.0,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    },
                    "_output_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 1.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    }
                  },
                  "_output_dim": 1.0,
                  "$type": "garage.torch.modules.mlp_module.MLPModule"
                }
              },
              "_input_dim": 11.0,
              "_hidden_sizes": [
                32,
                32
              ],
              "_action_dim": 1.0,
              "_learn_std": true,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_min_std": 1e-06,
              "_max_std": "None",
              "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
              "_std_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_std_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": "None",
              "_std_output_w_init": {
                "$type": "builtins.function"
              },
              "_std_parameterization": "exp",
              "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
              "_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_output_nonlinearity": "None",
              "_output_w_init": {
                "$type": "builtins.function"
              },
              "_output_b_init": {
                "$type": "builtins.function"
              },
              "_layer_normalization": false,
              "_norm_dist_class": {
                "$typename": "torch.distributions.normal.Normal"
              },
              "_min_std_param": {
                "$type": "torch.Tensor"
              },
              "_max_std_param": "None",
              "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
            }
          },
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
        },
        "env": {
          "_env": {
            "env": {
              "env": {
                "env": {
                  "env": {
                    "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                    "model": "<mujoco._structs.MjModel object at 0x7f1bfc879630>",
                    "data": "<mujoco._structs.MjData object at 0x7f1bfc879af0>",
                    "init_qpos": "array([0., 0., 0.])",
                    "init_qvel": "array([0., 0., 0.])",
                    "_viewers": {},
                    "frame_skip": 5,
                    "viewer": "None",
                    "observation_space": {
                      "dtype": "dtype('float64')",
                      "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "_shape": [
                        11
                      ],
                      "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                      "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                      "low_repr": "-inf",
                      "high_repr": "inf",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "action_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True])",
                      "bounded_above": "array([ True])",
                      "_shape": [
                        1
                      ],
                      "low": "array([-1.], dtype=float32)",
                      "high": "array([1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "render_mode": "None",
                    "renderer": {
                      "no_returns_render": [
                        "human"
                      ],
                      "single_render": [
                        "single_depth_array",
                        "single_rgb_array",
                        "single_state_pixels"
                      ],
                      "mode": "None",
                      "render": {
                        "$type": "functools.partial"
                      },
                      "render_list": [],
                      "$type": "gym.utils.renderer.Renderer"
                    },
                    "_ezpickle_args": [],
                    "_ezpickle_kwargs": {},
                    "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "checked_reset": false,
                  "checked_step": false,
                  "checked_render": false,
                  "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": true,
              "_has_reset": false,
              "_disable_render_order_enforcing": false,
              "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": false,
            "_max_episode_steps": 1000,
            "_elapsed_steps": "None",
            "$type": "gym.wrappers.time_limit.TimeLimit"
          },
          "_max_episode_length": 1000,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array",
            "single_rgb_array",
            "single_depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        "_env_steps": [],
        "_observations": [],
        "_last_observations": [],
        "_agent_infos": {},
        "_lengths": [],
        "_prev_obs": "None",
        "_eps_length": 0,
        "_episode_infos": {},
        "$type": "garage.sampler.default_worker.DefaultWorker"
      },
      {
        "_seed": "None",
        "_max_episode_length": 200,
        "_worker_number": 27,
        "agent": {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_module": {
              "training": true,
              "_parameters": {
                "_init_std": {
                  "$type": "torch.nn.parameter.Parameter"
                }
              },
              "_buffers": {
                "min_std_param": {
                  "$type": "torch.Tensor"
                }
              },
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_mean_module": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 11.0,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x7f1c917965a0>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    },
                    "_output_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 1.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    }
                  },
                  "_output_dim": 1.0,
                  "$type": "garage.torch.modules.mlp_module.MLPModule"
                }
              },
              "_input_dim": 11.0,
              "_hidden_sizes": [
                32,
                32
              ],
              "_action_dim": 1.0,
              "_learn_std": true,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_min_std": 1e-06,
              "_max_std": "None",
              "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
              "_std_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_std_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": "None",
              "_std_output_w_init": {
                "$type": "builtins.function"
              },
              "_std_parameterization": "exp",
              "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f1c917965a0>",
              "_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_output_nonlinearity": "None",
              "_output_w_init": {
                "$type": "builtins.function"
              },
              "_output_b_init": {
                "$type": "builtins.function"
              },
              "_layer_normalization": false,
              "_norm_dist_class": {
                "$typename": "torch.distributions.normal.Normal"
              },
              "_min_std_param": {
                "$type": "torch.Tensor"
              },
              "_max_std_param": "None",
              "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
            }
          },
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "$type": "policies.gaussian_mlp_policy.GaussianMLPPolicy"
        },
        "env": {
          "_env": {
            "env": {
              "env": {
                "env": {
                  "env": {
                    "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                    "model": "<mujoco._structs.MjModel object at 0x7f1bfc637870>",
                    "data": "<mujoco._structs.MjData object at 0x7f1bfc6378b0>",
                    "init_qpos": "array([0., 0., 0.])",
                    "init_qvel": "array([0., 0., 0.])",
                    "_viewers": {},
                    "frame_skip": 5,
                    "viewer": "None",
                    "observation_space": {
                      "dtype": "dtype('float64')",
                      "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "_shape": [
                        11
                      ],
                      "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                      "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                      "low_repr": "-inf",
                      "high_repr": "inf",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "action_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True])",
                      "bounded_above": "array([ True])",
                      "_shape": [
                        1
                      ],
                      "low": "array([-1.], dtype=float32)",
                      "high": "array([1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "render_mode": "None",
                    "renderer": {
                      "no_returns_render": [
                        "human"
                      ],
                      "single_render": [
                        "single_depth_array",
                        "single_rgb_array",
                        "single_state_pixels"
                      ],
                      "mode": "None",
                      "render": {
                        "$type": "functools.partial"
                      },
                      "render_list": [],
                      "$type": "gym.utils.renderer.Renderer"
                    },
                    "_ezpickle_args": [],
                    "_ezpickle_kwargs": {},
                    "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "checked_reset": false,
                  "checked_step": false,
                  "checked_render": false,
                  "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": true,
              "_has_reset": false,
              "_disable_render_order_enforcing": false,
              "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": false,
            "_max_episode_steps": 1000,
            "_elapsed_steps": "None",
            "$type": "gym.wrappers.time_limit.TimeLimit"
          },
          "_max_episode_length": 1000,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array",
            "single_rgb_array",
            "single_depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        "_env_steps": [],
        "_observations": [],
        "_last_observations": [],
        "_agent_infos": {},
        "_lengths": [],
        "_prev_obs": "None",
        "_eps_length": 0,
        "_episode_infos": {},
        "$type": "garage.sampler.default_worker.DefaultWorker"
      }
    ],
    "total_env_steps": 0,
    "$type": "garage.sampler.local_sampler.LocalSampler"
  },
  "_plotter": "None",
  "_start_time": "None",
  "_itr_start_time": "None",
  "step_itr": "None",
  "step_episode": "None",
  "enable_logging": true,
  "_n_workers": "None",
  "_worker_class": "None",
  "_worker_args": "None",
  "$type": "garage.trainer.Trainer"
}