{
  "_snapshotter": {
    "_snapshot_dir": "/home/lw/shanshu/MBPG/data/local/experiment/run_task",
    "_snapshot_mode": "last",
    "_snapshot_gap": 1,
    "$type": "garage.experiment.snapshotter.Snapshotter"
  },
  "_has_setup": true,
  "_plot": false,
  "_seed": 100,
  "_train_args": {
    "n_epochs": 200,
    "batch_size": 4000,
    "plot": false,
    "store_episodes": false,
    "pause_for_plot": false,
    "start_epoch": 0,
    "$type": "garage.trainer.TrainArgs"
  },
  "_stats": {
    "total_epoch": 0,
    "total_itr": 0,
    "total_env_steps": 0,
    "last_episode": "None",
    "$type": "garage.trainer.ExperimentStats"
  },
  "_algo": {
    "_sampler": {
      "_factory": {
        "n_workers": 28,
        "_seed": "None",
        "_max_episode_length": 200,
        "_worker_class": {
          "$typename": "garage.sampler.default_worker.DefaultWorker"
        },
        "_worker_args": {},
        "$type": "garage.sampler.worker_factory.WorkerFactory"
      },
      "_agents": [
        {
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "training": true,
          "_parameters": {
            "_init_std": {
              "$type": "torch.nn.parameter.Parameter"
            }
          },
          "_buffers": {
            "min_std_param": {
              "$type": "torch.Tensor"
            }
          },
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_mean_module": {
              "training": true,
              "_parameters": {},
              "_buffers": {},
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_layers": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "0": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 11.0,
                          "out_features": 32,
                          "$type": "torch.nn.modules.linear.Linear"
                        },
                        "non_linearity": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                          "$type": "garage.torch._functions.NonLinearity"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    },
                    "1": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 32,
                          "out_features": 32,
                          "$type": "torch.nn.modules.linear.Linear"
                        },
                        "non_linearity": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                          "$type": "garage.torch._functions.NonLinearity"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    }
                  },
                  "$type": "torch.nn.modules.container.ModuleList"
                },
                "_output_layers": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "0": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 32,
                          "out_features": 1.0,
                          "$type": "torch.nn.modules.linear.Linear"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    }
                  },
                  "$type": "torch.nn.modules.container.ModuleList"
                }
              },
              "_output_dim": 1.0,
              "$type": "garage.torch.modules.mlp_module.MLPModule"
            }
          },
          "_input_dim": 11.0,
          "_hidden_sizes": [
            32,
            32
          ],
          "_learn_std": true,
          "_std_hidden_sizes": [
            32,
            32
          ],
          "_min_std": 1e-06,
          "_max_std": "None",
          "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
          "_std_hidden_w_init": {
            "$type": "builtins.function"
          },
          "_std_hidden_b_init": {
            "$type": "builtins.function"
          },
          "_std_output_nonlinearity": "None",
          "_std_output_w_init": {
            "$type": "builtins.function"
          },
          "_std_parameterization": "exp",
          "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
          "_hidden_w_init": {
            "$type": "builtins.function"
          },
          "_hidden_b_init": {
            "$type": "builtins.function"
          },
          "_output_nonlinearity": "None",
          "_output_w_init": {
            "$type": "builtins.function"
          },
          "_output_b_init": {
            "$type": "builtins.function"
          },
          "_layer_normalization": false,
          "_norm_dist_class": {
            "$typename": "torch.distributions.normal.Normal"
          },
          "_min_std_param": {
            "$type": "torch.Tensor"
          },
          "_max_std_param": "None",
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "$type": "Policy.GaussianMLPPolicy.GaussianMLPPolicy"
        },
        {
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "training": true,
          "_parameters": {
            "_init_std": {
              "$type": "torch.nn.parameter.Parameter"
            }
          },
          "_buffers": {
            "min_std_param": {
              "$type": "torch.Tensor"
            }
          },
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_mean_module": {
              "training": true,
              "_parameters": {},
              "_buffers": {},
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_layers": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "0": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 11.0,
                          "out_features": 32,
                          "$type": "torch.nn.modules.linear.Linear"
                        },
                        "non_linearity": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                          "$type": "garage.torch._functions.NonLinearity"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    },
                    "1": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 32,
                          "out_features": 32,
                          "$type": "torch.nn.modules.linear.Linear"
                        },
                        "non_linearity": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                          "$type": "garage.torch._functions.NonLinearity"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    }
                  },
                  "$type": "torch.nn.modules.container.ModuleList"
                },
                "_output_layers": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "0": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 32,
                          "out_features": 1.0,
                          "$type": "torch.nn.modules.linear.Linear"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    }
                  },
                  "$type": "torch.nn.modules.container.ModuleList"
                }
              },
              "_output_dim": 1.0,
              "$type": "garage.torch.modules.mlp_module.MLPModule"
            }
          },
          "_input_dim": 11.0,
          "_hidden_sizes": [
            32,
            32
          ],
          "_learn_std": true,
          "_std_hidden_sizes": [
            32,
            32
          ],
          "_min_std": 1e-06,
          "_max_std": "None",
          "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
          "_std_hidden_w_init": {
            "$type": "builtins.function"
          },
          "_std_hidden_b_init": {
            "$type": "builtins.function"
          },
          "_std_output_nonlinearity": "None",
          "_std_output_w_init": {
            "$type": "builtins.function"
          },
          "_std_parameterization": "exp",
          "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
          "_hidden_w_init": {
            "$type": "builtins.function"
          },
          "_hidden_b_init": {
            "$type": "builtins.function"
          },
          "_output_nonlinearity": "None",
          "_output_w_init": {
            "$type": "builtins.function"
          },
          "_output_b_init": {
            "$type": "builtins.function"
          },
          "_layer_normalization": false,
          "_norm_dist_class": {
            "$typename": "torch.distributions.normal.Normal"
          },
          "_min_std_param": {
            "$type": "torch.Tensor"
          },
          "_max_std_param": "None",
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "$type": "Policy.GaussianMLPPolicy.GaussianMLPPolicy"
        },
        {
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "training": true,
          "_parameters": {
            "_init_std": {
              "$type": "torch.nn.parameter.Parameter"
            }
          },
          "_buffers": {
            "min_std_param": {
              "$type": "torch.Tensor"
            }
          },
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_mean_module": {
              "training": true,
              "_parameters": {},
              "_buffers": {},
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_layers": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "0": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 11.0,
                          "out_features": 32,
                          "$type": "torch.nn.modules.linear.Linear"
                        },
                        "non_linearity": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                          "$type": "garage.torch._functions.NonLinearity"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    },
                    "1": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 32,
                          "out_features": 32,
                          "$type": "torch.nn.modules.linear.Linear"
                        },
                        "non_linearity": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                          "$type": "garage.torch._functions.NonLinearity"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    }
                  },
                  "$type": "torch.nn.modules.container.ModuleList"
                },
                "_output_layers": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "0": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 32,
                          "out_features": 1.0,
                          "$type": "torch.nn.modules.linear.Linear"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    }
                  },
                  "$type": "torch.nn.modules.container.ModuleList"
                }
              },
              "_output_dim": 1.0,
              "$type": "garage.torch.modules.mlp_module.MLPModule"
            }
          },
          "_input_dim": 11.0,
          "_hidden_sizes": [
            32,
            32
          ],
          "_learn_std": true,
          "_std_hidden_sizes": [
            32,
            32
          ],
          "_min_std": 1e-06,
          "_max_std": "None",
          "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
          "_std_hidden_w_init": {
            "$type": "builtins.function"
          },
          "_std_hidden_b_init": {
            "$type": "builtins.function"
          },
          "_std_output_nonlinearity": "None",
          "_std_output_w_init": {
            "$type": "builtins.function"
          },
          "_std_parameterization": "exp",
          "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
          "_hidden_w_init": {
            "$type": "builtins.function"
          },
          "_hidden_b_init": {
            "$type": "builtins.function"
          },
          "_output_nonlinearity": "None",
          "_output_w_init": {
            "$type": "builtins.function"
          },
          "_output_b_init": {
            "$type": "builtins.function"
          },
          "_layer_normalization": false,
          "_norm_dist_class": {
            "$typename": "torch.distributions.normal.Normal"
          },
          "_min_std_param": {
            "$type": "torch.Tensor"
          },
          "_max_std_param": "None",
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "$type": "Policy.GaussianMLPPolicy.GaussianMLPPolicy"
        },
        {
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "training": true,
          "_parameters": {
            "_init_std": {
              "$type": "torch.nn.parameter.Parameter"
            }
          },
          "_buffers": {
            "min_std_param": {
              "$type": "torch.Tensor"
            }
          },
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_mean_module": {
              "training": true,
              "_parameters": {},
              "_buffers": {},
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_layers": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "0": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 11.0,
                          "out_features": 32,
                          "$type": "torch.nn.modules.linear.Linear"
                        },
                        "non_linearity": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                          "$type": "garage.torch._functions.NonLinearity"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    },
                    "1": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 32,
                          "out_features": 32,
                          "$type": "torch.nn.modules.linear.Linear"
                        },
                        "non_linearity": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                          "$type": "garage.torch._functions.NonLinearity"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    }
                  },
                  "$type": "torch.nn.modules.container.ModuleList"
                },
                "_output_layers": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "0": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 32,
                          "out_features": 1.0,
                          "$type": "torch.nn.modules.linear.Linear"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    }
                  },
                  "$type": "torch.nn.modules.container.ModuleList"
                }
              },
              "_output_dim": 1.0,
              "$type": "garage.torch.modules.mlp_module.MLPModule"
            }
          },
          "_input_dim": 11.0,
          "_hidden_sizes": [
            32,
            32
          ],
          "_learn_std": true,
          "_std_hidden_sizes": [
            32,
            32
          ],
          "_min_std": 1e-06,
          "_max_std": "None",
          "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
          "_std_hidden_w_init": {
            "$type": "builtins.function"
          },
          "_std_hidden_b_init": {
            "$type": "builtins.function"
          },
          "_std_output_nonlinearity": "None",
          "_std_output_w_init": {
            "$type": "builtins.function"
          },
          "_std_parameterization": "exp",
          "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
          "_hidden_w_init": {
            "$type": "builtins.function"
          },
          "_hidden_b_init": {
            "$type": "builtins.function"
          },
          "_output_nonlinearity": "None",
          "_output_w_init": {
            "$type": "builtins.function"
          },
          "_output_b_init": {
            "$type": "builtins.function"
          },
          "_layer_normalization": false,
          "_norm_dist_class": {
            "$typename": "torch.distributions.normal.Normal"
          },
          "_min_std_param": {
            "$type": "torch.Tensor"
          },
          "_max_std_param": "None",
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "$type": "Policy.GaussianMLPPolicy.GaussianMLPPolicy"
        },
        {
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "training": true,
          "_parameters": {
            "_init_std": {
              "$type": "torch.nn.parameter.Parameter"
            }
          },
          "_buffers": {
            "min_std_param": {
              "$type": "torch.Tensor"
            }
          },
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_mean_module": {
              "training": true,
              "_parameters": {},
              "_buffers": {},
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_layers": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "0": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 11.0,
                          "out_features": 32,
                          "$type": "torch.nn.modules.linear.Linear"
                        },
                        "non_linearity": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                          "$type": "garage.torch._functions.NonLinearity"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    },
                    "1": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 32,
                          "out_features": 32,
                          "$type": "torch.nn.modules.linear.Linear"
                        },
                        "non_linearity": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                          "$type": "garage.torch._functions.NonLinearity"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    }
                  },
                  "$type": "torch.nn.modules.container.ModuleList"
                },
                "_output_layers": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "0": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 32,
                          "out_features": 1.0,
                          "$type": "torch.nn.modules.linear.Linear"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    }
                  },
                  "$type": "torch.nn.modules.container.ModuleList"
                }
              },
              "_output_dim": 1.0,
              "$type": "garage.torch.modules.mlp_module.MLPModule"
            }
          },
          "_input_dim": 11.0,
          "_hidden_sizes": [
            32,
            32
          ],
          "_learn_std": true,
          "_std_hidden_sizes": [
            32,
            32
          ],
          "_min_std": 1e-06,
          "_max_std": "None",
          "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
          "_std_hidden_w_init": {
            "$type": "builtins.function"
          },
          "_std_hidden_b_init": {
            "$type": "builtins.function"
          },
          "_std_output_nonlinearity": "None",
          "_std_output_w_init": {
            "$type": "builtins.function"
          },
          "_std_parameterization": "exp",
          "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
          "_hidden_w_init": {
            "$type": "builtins.function"
          },
          "_hidden_b_init": {
            "$type": "builtins.function"
          },
          "_output_nonlinearity": "None",
          "_output_w_init": {
            "$type": "builtins.function"
          },
          "_output_b_init": {
            "$type": "builtins.function"
          },
          "_layer_normalization": false,
          "_norm_dist_class": {
            "$typename": "torch.distributions.normal.Normal"
          },
          "_min_std_param": {
            "$type": "torch.Tensor"
          },
          "_max_std_param": "None",
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "$type": "Policy.GaussianMLPPolicy.GaussianMLPPolicy"
        },
        {
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "training": true,
          "_parameters": {
            "_init_std": {
              "$type": "torch.nn.parameter.Parameter"
            }
          },
          "_buffers": {
            "min_std_param": {
              "$type": "torch.Tensor"
            }
          },
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_mean_module": {
              "training": true,
              "_parameters": {},
              "_buffers": {},
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_layers": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "0": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 11.0,
                          "out_features": 32,
                          "$type": "torch.nn.modules.linear.Linear"
                        },
                        "non_linearity": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                          "$type": "garage.torch._functions.NonLinearity"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    },
                    "1": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 32,
                          "out_features": 32,
                          "$type": "torch.nn.modules.linear.Linear"
                        },
                        "non_linearity": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                          "$type": "garage.torch._functions.NonLinearity"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    }
                  },
                  "$type": "torch.nn.modules.container.ModuleList"
                },
                "_output_layers": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "0": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 32,
                          "out_features": 1.0,
                          "$type": "torch.nn.modules.linear.Linear"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    }
                  },
                  "$type": "torch.nn.modules.container.ModuleList"
                }
              },
              "_output_dim": 1.0,
              "$type": "garage.torch.modules.mlp_module.MLPModule"
            }
          },
          "_input_dim": 11.0,
          "_hidden_sizes": [
            32,
            32
          ],
          "_learn_std": true,
          "_std_hidden_sizes": [
            32,
            32
          ],
          "_min_std": 1e-06,
          "_max_std": "None",
          "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
          "_std_hidden_w_init": {
            "$type": "builtins.function"
          },
          "_std_hidden_b_init": {
            "$type": "builtins.function"
          },
          "_std_output_nonlinearity": "None",
          "_std_output_w_init": {
            "$type": "builtins.function"
          },
          "_std_parameterization": "exp",
          "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
          "_hidden_w_init": {
            "$type": "builtins.function"
          },
          "_hidden_b_init": {
            "$type": "builtins.function"
          },
          "_output_nonlinearity": "None",
          "_output_w_init": {
            "$type": "builtins.function"
          },
          "_output_b_init": {
            "$type": "builtins.function"
          },
          "_layer_normalization": false,
          "_norm_dist_class": {
            "$typename": "torch.distributions.normal.Normal"
          },
          "_min_std_param": {
            "$type": "torch.Tensor"
          },
          "_max_std_param": "None",
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "$type": "Policy.GaussianMLPPolicy.GaussianMLPPolicy"
        },
        {
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "training": true,
          "_parameters": {
            "_init_std": {
              "$type": "torch.nn.parameter.Parameter"
            }
          },
          "_buffers": {
            "min_std_param": {
              "$type": "torch.Tensor"
            }
          },
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_mean_module": {
              "training": true,
              "_parameters": {},
              "_buffers": {},
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_layers": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "0": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 11.0,
                          "out_features": 32,
                          "$type": "torch.nn.modules.linear.Linear"
                        },
                        "non_linearity": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                          "$type": "garage.torch._functions.NonLinearity"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    },
                    "1": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 32,
                          "out_features": 32,
                          "$type": "torch.nn.modules.linear.Linear"
                        },
                        "non_linearity": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                          "$type": "garage.torch._functions.NonLinearity"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    }
                  },
                  "$type": "torch.nn.modules.container.ModuleList"
                },
                "_output_layers": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "0": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 32,
                          "out_features": 1.0,
                          "$type": "torch.nn.modules.linear.Linear"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    }
                  },
                  "$type": "torch.nn.modules.container.ModuleList"
                }
              },
              "_output_dim": 1.0,
              "$type": "garage.torch.modules.mlp_module.MLPModule"
            }
          },
          "_input_dim": 11.0,
          "_hidden_sizes": [
            32,
            32
          ],
          "_learn_std": true,
          "_std_hidden_sizes": [
            32,
            32
          ],
          "_min_std": 1e-06,
          "_max_std": "None",
          "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
          "_std_hidden_w_init": {
            "$type": "builtins.function"
          },
          "_std_hidden_b_init": {
            "$type": "builtins.function"
          },
          "_std_output_nonlinearity": "None",
          "_std_output_w_init": {
            "$type": "builtins.function"
          },
          "_std_parameterization": "exp",
          "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
          "_hidden_w_init": {
            "$type": "builtins.function"
          },
          "_hidden_b_init": {
            "$type": "builtins.function"
          },
          "_output_nonlinearity": "None",
          "_output_w_init": {
            "$type": "builtins.function"
          },
          "_output_b_init": {
            "$type": "builtins.function"
          },
          "_layer_normalization": false,
          "_norm_dist_class": {
            "$typename": "torch.distributions.normal.Normal"
          },
          "_min_std_param": {
            "$type": "torch.Tensor"
          },
          "_max_std_param": "None",
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "$type": "Policy.GaussianMLPPolicy.GaussianMLPPolicy"
        },
        {
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "training": true,
          "_parameters": {
            "_init_std": {
              "$type": "torch.nn.parameter.Parameter"
            }
          },
          "_buffers": {
            "min_std_param": {
              "$type": "torch.Tensor"
            }
          },
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_mean_module": {
              "training": true,
              "_parameters": {},
              "_buffers": {},
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_layers": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "0": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 11.0,
                          "out_features": 32,
                          "$type": "torch.nn.modules.linear.Linear"
                        },
                        "non_linearity": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                          "$type": "garage.torch._functions.NonLinearity"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    },
                    "1": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 32,
                          "out_features": 32,
                          "$type": "torch.nn.modules.linear.Linear"
                        },
                        "non_linearity": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                          "$type": "garage.torch._functions.NonLinearity"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    }
                  },
                  "$type": "torch.nn.modules.container.ModuleList"
                },
                "_output_layers": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "0": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 32,
                          "out_features": 1.0,
                          "$type": "torch.nn.modules.linear.Linear"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    }
                  },
                  "$type": "torch.nn.modules.container.ModuleList"
                }
              },
              "_output_dim": 1.0,
              "$type": "garage.torch.modules.mlp_module.MLPModule"
            }
          },
          "_input_dim": 11.0,
          "_hidden_sizes": [
            32,
            32
          ],
          "_learn_std": true,
          "_std_hidden_sizes": [
            32,
            32
          ],
          "_min_std": 1e-06,
          "_max_std": "None",
          "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
          "_std_hidden_w_init": {
            "$type": "builtins.function"
          },
          "_std_hidden_b_init": {
            "$type": "builtins.function"
          },
          "_std_output_nonlinearity": "None",
          "_std_output_w_init": {
            "$type": "builtins.function"
          },
          "_std_parameterization": "exp",
          "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
          "_hidden_w_init": {
            "$type": "builtins.function"
          },
          "_hidden_b_init": {
            "$type": "builtins.function"
          },
          "_output_nonlinearity": "None",
          "_output_w_init": {
            "$type": "builtins.function"
          },
          "_output_b_init": {
            "$type": "builtins.function"
          },
          "_layer_normalization": false,
          "_norm_dist_class": {
            "$typename": "torch.distributions.normal.Normal"
          },
          "_min_std_param": {
            "$type": "torch.Tensor"
          },
          "_max_std_param": "None",
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "$type": "Policy.GaussianMLPPolicy.GaussianMLPPolicy"
        },
        {
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "training": true,
          "_parameters": {
            "_init_std": {
              "$type": "torch.nn.parameter.Parameter"
            }
          },
          "_buffers": {
            "min_std_param": {
              "$type": "torch.Tensor"
            }
          },
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_mean_module": {
              "training": true,
              "_parameters": {},
              "_buffers": {},
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_layers": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "0": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 11.0,
                          "out_features": 32,
                          "$type": "torch.nn.modules.linear.Linear"
                        },
                        "non_linearity": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                          "$type": "garage.torch._functions.NonLinearity"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    },
                    "1": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 32,
                          "out_features": 32,
                          "$type": "torch.nn.modules.linear.Linear"
                        },
                        "non_linearity": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                          "$type": "garage.torch._functions.NonLinearity"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    }
                  },
                  "$type": "torch.nn.modules.container.ModuleList"
                },
                "_output_layers": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "0": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 32,
                          "out_features": 1.0,
                          "$type": "torch.nn.modules.linear.Linear"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    }
                  },
                  "$type": "torch.nn.modules.container.ModuleList"
                }
              },
              "_output_dim": 1.0,
              "$type": "garage.torch.modules.mlp_module.MLPModule"
            }
          },
          "_input_dim": 11.0,
          "_hidden_sizes": [
            32,
            32
          ],
          "_learn_std": true,
          "_std_hidden_sizes": [
            32,
            32
          ],
          "_min_std": 1e-06,
          "_max_std": "None",
          "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
          "_std_hidden_w_init": {
            "$type": "builtins.function"
          },
          "_std_hidden_b_init": {
            "$type": "builtins.function"
          },
          "_std_output_nonlinearity": "None",
          "_std_output_w_init": {
            "$type": "builtins.function"
          },
          "_std_parameterization": "exp",
          "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
          "_hidden_w_init": {
            "$type": "builtins.function"
          },
          "_hidden_b_init": {
            "$type": "builtins.function"
          },
          "_output_nonlinearity": "None",
          "_output_w_init": {
            "$type": "builtins.function"
          },
          "_output_b_init": {
            "$type": "builtins.function"
          },
          "_layer_normalization": false,
          "_norm_dist_class": {
            "$typename": "torch.distributions.normal.Normal"
          },
          "_min_std_param": {
            "$type": "torch.Tensor"
          },
          "_max_std_param": "None",
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "$type": "Policy.GaussianMLPPolicy.GaussianMLPPolicy"
        },
        {
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "training": true,
          "_parameters": {
            "_init_std": {
              "$type": "torch.nn.parameter.Parameter"
            }
          },
          "_buffers": {
            "min_std_param": {
              "$type": "torch.Tensor"
            }
          },
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_mean_module": {
              "training": true,
              "_parameters": {},
              "_buffers": {},
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_layers": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "0": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 11.0,
                          "out_features": 32,
                          "$type": "torch.nn.modules.linear.Linear"
                        },
                        "non_linearity": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                          "$type": "garage.torch._functions.NonLinearity"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    },
                    "1": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 32,
                          "out_features": 32,
                          "$type": "torch.nn.modules.linear.Linear"
                        },
                        "non_linearity": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                          "$type": "garage.torch._functions.NonLinearity"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    }
                  },
                  "$type": "torch.nn.modules.container.ModuleList"
                },
                "_output_layers": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "0": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 32,
                          "out_features": 1.0,
                          "$type": "torch.nn.modules.linear.Linear"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    }
                  },
                  "$type": "torch.nn.modules.container.ModuleList"
                }
              },
              "_output_dim": 1.0,
              "$type": "garage.torch.modules.mlp_module.MLPModule"
            }
          },
          "_input_dim": 11.0,
          "_hidden_sizes": [
            32,
            32
          ],
          "_learn_std": true,
          "_std_hidden_sizes": [
            32,
            32
          ],
          "_min_std": 1e-06,
          "_max_std": "None",
          "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
          "_std_hidden_w_init": {
            "$type": "builtins.function"
          },
          "_std_hidden_b_init": {
            "$type": "builtins.function"
          },
          "_std_output_nonlinearity": "None",
          "_std_output_w_init": {
            "$type": "builtins.function"
          },
          "_std_parameterization": "exp",
          "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
          "_hidden_w_init": {
            "$type": "builtins.function"
          },
          "_hidden_b_init": {
            "$type": "builtins.function"
          },
          "_output_nonlinearity": "None",
          "_output_w_init": {
            "$type": "builtins.function"
          },
          "_output_b_init": {
            "$type": "builtins.function"
          },
          "_layer_normalization": false,
          "_norm_dist_class": {
            "$typename": "torch.distributions.normal.Normal"
          },
          "_min_std_param": {
            "$type": "torch.Tensor"
          },
          "_max_std_param": "None",
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "$type": "Policy.GaussianMLPPolicy.GaussianMLPPolicy"
        },
        {
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "training": true,
          "_parameters": {
            "_init_std": {
              "$type": "torch.nn.parameter.Parameter"
            }
          },
          "_buffers": {
            "min_std_param": {
              "$type": "torch.Tensor"
            }
          },
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_mean_module": {
              "training": true,
              "_parameters": {},
              "_buffers": {},
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_layers": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "0": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 11.0,
                          "out_features": 32,
                          "$type": "torch.nn.modules.linear.Linear"
                        },
                        "non_linearity": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                          "$type": "garage.torch._functions.NonLinearity"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    },
                    "1": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 32,
                          "out_features": 32,
                          "$type": "torch.nn.modules.linear.Linear"
                        },
                        "non_linearity": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                          "$type": "garage.torch._functions.NonLinearity"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    }
                  },
                  "$type": "torch.nn.modules.container.ModuleList"
                },
                "_output_layers": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "0": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 32,
                          "out_features": 1.0,
                          "$type": "torch.nn.modules.linear.Linear"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    }
                  },
                  "$type": "torch.nn.modules.container.ModuleList"
                }
              },
              "_output_dim": 1.0,
              "$type": "garage.torch.modules.mlp_module.MLPModule"
            }
          },
          "_input_dim": 11.0,
          "_hidden_sizes": [
            32,
            32
          ],
          "_learn_std": true,
          "_std_hidden_sizes": [
            32,
            32
          ],
          "_min_std": 1e-06,
          "_max_std": "None",
          "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
          "_std_hidden_w_init": {
            "$type": "builtins.function"
          },
          "_std_hidden_b_init": {
            "$type": "builtins.function"
          },
          "_std_output_nonlinearity": "None",
          "_std_output_w_init": {
            "$type": "builtins.function"
          },
          "_std_parameterization": "exp",
          "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
          "_hidden_w_init": {
            "$type": "builtins.function"
          },
          "_hidden_b_init": {
            "$type": "builtins.function"
          },
          "_output_nonlinearity": "None",
          "_output_w_init": {
            "$type": "builtins.function"
          },
          "_output_b_init": {
            "$type": "builtins.function"
          },
          "_layer_normalization": false,
          "_norm_dist_class": {
            "$typename": "torch.distributions.normal.Normal"
          },
          "_min_std_param": {
            "$type": "torch.Tensor"
          },
          "_max_std_param": "None",
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "$type": "Policy.GaussianMLPPolicy.GaussianMLPPolicy"
        },
        {
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "training": true,
          "_parameters": {
            "_init_std": {
              "$type": "torch.nn.parameter.Parameter"
            }
          },
          "_buffers": {
            "min_std_param": {
              "$type": "torch.Tensor"
            }
          },
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_mean_module": {
              "training": true,
              "_parameters": {},
              "_buffers": {},
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_layers": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "0": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 11.0,
                          "out_features": 32,
                          "$type": "torch.nn.modules.linear.Linear"
                        },
                        "non_linearity": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                          "$type": "garage.torch._functions.NonLinearity"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    },
                    "1": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 32,
                          "out_features": 32,
                          "$type": "torch.nn.modules.linear.Linear"
                        },
                        "non_linearity": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                          "$type": "garage.torch._functions.NonLinearity"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    }
                  },
                  "$type": "torch.nn.modules.container.ModuleList"
                },
                "_output_layers": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "0": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 32,
                          "out_features": 1.0,
                          "$type": "torch.nn.modules.linear.Linear"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    }
                  },
                  "$type": "torch.nn.modules.container.ModuleList"
                }
              },
              "_output_dim": 1.0,
              "$type": "garage.torch.modules.mlp_module.MLPModule"
            }
          },
          "_input_dim": 11.0,
          "_hidden_sizes": [
            32,
            32
          ],
          "_learn_std": true,
          "_std_hidden_sizes": [
            32,
            32
          ],
          "_min_std": 1e-06,
          "_max_std": "None",
          "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
          "_std_hidden_w_init": {
            "$type": "builtins.function"
          },
          "_std_hidden_b_init": {
            "$type": "builtins.function"
          },
          "_std_output_nonlinearity": "None",
          "_std_output_w_init": {
            "$type": "builtins.function"
          },
          "_std_parameterization": "exp",
          "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
          "_hidden_w_init": {
            "$type": "builtins.function"
          },
          "_hidden_b_init": {
            "$type": "builtins.function"
          },
          "_output_nonlinearity": "None",
          "_output_w_init": {
            "$type": "builtins.function"
          },
          "_output_b_init": {
            "$type": "builtins.function"
          },
          "_layer_normalization": false,
          "_norm_dist_class": {
            "$typename": "torch.distributions.normal.Normal"
          },
          "_min_std_param": {
            "$type": "torch.Tensor"
          },
          "_max_std_param": "None",
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "$type": "Policy.GaussianMLPPolicy.GaussianMLPPolicy"
        },
        {
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "training": true,
          "_parameters": {
            "_init_std": {
              "$type": "torch.nn.parameter.Parameter"
            }
          },
          "_buffers": {
            "min_std_param": {
              "$type": "torch.Tensor"
            }
          },
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_mean_module": {
              "training": true,
              "_parameters": {},
              "_buffers": {},
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_layers": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "0": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 11.0,
                          "out_features": 32,
                          "$type": "torch.nn.modules.linear.Linear"
                        },
                        "non_linearity": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                          "$type": "garage.torch._functions.NonLinearity"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    },
                    "1": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 32,
                          "out_features": 32,
                          "$type": "torch.nn.modules.linear.Linear"
                        },
                        "non_linearity": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                          "$type": "garage.torch._functions.NonLinearity"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    }
                  },
                  "$type": "torch.nn.modules.container.ModuleList"
                },
                "_output_layers": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "0": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 32,
                          "out_features": 1.0,
                          "$type": "torch.nn.modules.linear.Linear"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    }
                  },
                  "$type": "torch.nn.modules.container.ModuleList"
                }
              },
              "_output_dim": 1.0,
              "$type": "garage.torch.modules.mlp_module.MLPModule"
            }
          },
          "_input_dim": 11.0,
          "_hidden_sizes": [
            32,
            32
          ],
          "_learn_std": true,
          "_std_hidden_sizes": [
            32,
            32
          ],
          "_min_std": 1e-06,
          "_max_std": "None",
          "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
          "_std_hidden_w_init": {
            "$type": "builtins.function"
          },
          "_std_hidden_b_init": {
            "$type": "builtins.function"
          },
          "_std_output_nonlinearity": "None",
          "_std_output_w_init": {
            "$type": "builtins.function"
          },
          "_std_parameterization": "exp",
          "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
          "_hidden_w_init": {
            "$type": "builtins.function"
          },
          "_hidden_b_init": {
            "$type": "builtins.function"
          },
          "_output_nonlinearity": "None",
          "_output_w_init": {
            "$type": "builtins.function"
          },
          "_output_b_init": {
            "$type": "builtins.function"
          },
          "_layer_normalization": false,
          "_norm_dist_class": {
            "$typename": "torch.distributions.normal.Normal"
          },
          "_min_std_param": {
            "$type": "torch.Tensor"
          },
          "_max_std_param": "None",
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "$type": "Policy.GaussianMLPPolicy.GaussianMLPPolicy"
        },
        {
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "training": true,
          "_parameters": {
            "_init_std": {
              "$type": "torch.nn.parameter.Parameter"
            }
          },
          "_buffers": {
            "min_std_param": {
              "$type": "torch.Tensor"
            }
          },
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_mean_module": {
              "training": true,
              "_parameters": {},
              "_buffers": {},
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_layers": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "0": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 11.0,
                          "out_features": 32,
                          "$type": "torch.nn.modules.linear.Linear"
                        },
                        "non_linearity": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                          "$type": "garage.torch._functions.NonLinearity"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    },
                    "1": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 32,
                          "out_features": 32,
                          "$type": "torch.nn.modules.linear.Linear"
                        },
                        "non_linearity": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                          "$type": "garage.torch._functions.NonLinearity"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    }
                  },
                  "$type": "torch.nn.modules.container.ModuleList"
                },
                "_output_layers": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "0": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 32,
                          "out_features": 1.0,
                          "$type": "torch.nn.modules.linear.Linear"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    }
                  },
                  "$type": "torch.nn.modules.container.ModuleList"
                }
              },
              "_output_dim": 1.0,
              "$type": "garage.torch.modules.mlp_module.MLPModule"
            }
          },
          "_input_dim": 11.0,
          "_hidden_sizes": [
            32,
            32
          ],
          "_learn_std": true,
          "_std_hidden_sizes": [
            32,
            32
          ],
          "_min_std": 1e-06,
          "_max_std": "None",
          "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
          "_std_hidden_w_init": {
            "$type": "builtins.function"
          },
          "_std_hidden_b_init": {
            "$type": "builtins.function"
          },
          "_std_output_nonlinearity": "None",
          "_std_output_w_init": {
            "$type": "builtins.function"
          },
          "_std_parameterization": "exp",
          "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
          "_hidden_w_init": {
            "$type": "builtins.function"
          },
          "_hidden_b_init": {
            "$type": "builtins.function"
          },
          "_output_nonlinearity": "None",
          "_output_w_init": {
            "$type": "builtins.function"
          },
          "_output_b_init": {
            "$type": "builtins.function"
          },
          "_layer_normalization": false,
          "_norm_dist_class": {
            "$typename": "torch.distributions.normal.Normal"
          },
          "_min_std_param": {
            "$type": "torch.Tensor"
          },
          "_max_std_param": "None",
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "$type": "Policy.GaussianMLPPolicy.GaussianMLPPolicy"
        },
        {
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "training": true,
          "_parameters": {
            "_init_std": {
              "$type": "torch.nn.parameter.Parameter"
            }
          },
          "_buffers": {
            "min_std_param": {
              "$type": "torch.Tensor"
            }
          },
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_mean_module": {
              "training": true,
              "_parameters": {},
              "_buffers": {},
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_layers": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "0": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 11.0,
                          "out_features": 32,
                          "$type": "torch.nn.modules.linear.Linear"
                        },
                        "non_linearity": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                          "$type": "garage.torch._functions.NonLinearity"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    },
                    "1": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 32,
                          "out_features": 32,
                          "$type": "torch.nn.modules.linear.Linear"
                        },
                        "non_linearity": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                          "$type": "garage.torch._functions.NonLinearity"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    }
                  },
                  "$type": "torch.nn.modules.container.ModuleList"
                },
                "_output_layers": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "0": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 32,
                          "out_features": 1.0,
                          "$type": "torch.nn.modules.linear.Linear"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    }
                  },
                  "$type": "torch.nn.modules.container.ModuleList"
                }
              },
              "_output_dim": 1.0,
              "$type": "garage.torch.modules.mlp_module.MLPModule"
            }
          },
          "_input_dim": 11.0,
          "_hidden_sizes": [
            32,
            32
          ],
          "_learn_std": true,
          "_std_hidden_sizes": [
            32,
            32
          ],
          "_min_std": 1e-06,
          "_max_std": "None",
          "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
          "_std_hidden_w_init": {
            "$type": "builtins.function"
          },
          "_std_hidden_b_init": {
            "$type": "builtins.function"
          },
          "_std_output_nonlinearity": "None",
          "_std_output_w_init": {
            "$type": "builtins.function"
          },
          "_std_parameterization": "exp",
          "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
          "_hidden_w_init": {
            "$type": "builtins.function"
          },
          "_hidden_b_init": {
            "$type": "builtins.function"
          },
          "_output_nonlinearity": "None",
          "_output_w_init": {
            "$type": "builtins.function"
          },
          "_output_b_init": {
            "$type": "builtins.function"
          },
          "_layer_normalization": false,
          "_norm_dist_class": {
            "$typename": "torch.distributions.normal.Normal"
          },
          "_min_std_param": {
            "$type": "torch.Tensor"
          },
          "_max_std_param": "None",
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "$type": "Policy.GaussianMLPPolicy.GaussianMLPPolicy"
        },
        {
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "training": true,
          "_parameters": {
            "_init_std": {
              "$type": "torch.nn.parameter.Parameter"
            }
          },
          "_buffers": {
            "min_std_param": {
              "$type": "torch.Tensor"
            }
          },
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_mean_module": {
              "training": true,
              "_parameters": {},
              "_buffers": {},
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_layers": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "0": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 11.0,
                          "out_features": 32,
                          "$type": "torch.nn.modules.linear.Linear"
                        },
                        "non_linearity": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                          "$type": "garage.torch._functions.NonLinearity"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    },
                    "1": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 32,
                          "out_features": 32,
                          "$type": "torch.nn.modules.linear.Linear"
                        },
                        "non_linearity": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                          "$type": "garage.torch._functions.NonLinearity"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    }
                  },
                  "$type": "torch.nn.modules.container.ModuleList"
                },
                "_output_layers": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "0": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 32,
                          "out_features": 1.0,
                          "$type": "torch.nn.modules.linear.Linear"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    }
                  },
                  "$type": "torch.nn.modules.container.ModuleList"
                }
              },
              "_output_dim": 1.0,
              "$type": "garage.torch.modules.mlp_module.MLPModule"
            }
          },
          "_input_dim": 11.0,
          "_hidden_sizes": [
            32,
            32
          ],
          "_learn_std": true,
          "_std_hidden_sizes": [
            32,
            32
          ],
          "_min_std": 1e-06,
          "_max_std": "None",
          "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
          "_std_hidden_w_init": {
            "$type": "builtins.function"
          },
          "_std_hidden_b_init": {
            "$type": "builtins.function"
          },
          "_std_output_nonlinearity": "None",
          "_std_output_w_init": {
            "$type": "builtins.function"
          },
          "_std_parameterization": "exp",
          "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
          "_hidden_w_init": {
            "$type": "builtins.function"
          },
          "_hidden_b_init": {
            "$type": "builtins.function"
          },
          "_output_nonlinearity": "None",
          "_output_w_init": {
            "$type": "builtins.function"
          },
          "_output_b_init": {
            "$type": "builtins.function"
          },
          "_layer_normalization": false,
          "_norm_dist_class": {
            "$typename": "torch.distributions.normal.Normal"
          },
          "_min_std_param": {
            "$type": "torch.Tensor"
          },
          "_max_std_param": "None",
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "$type": "Policy.GaussianMLPPolicy.GaussianMLPPolicy"
        },
        {
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "training": true,
          "_parameters": {
            "_init_std": {
              "$type": "torch.nn.parameter.Parameter"
            }
          },
          "_buffers": {
            "min_std_param": {
              "$type": "torch.Tensor"
            }
          },
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_mean_module": {
              "training": true,
              "_parameters": {},
              "_buffers": {},
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_layers": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "0": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 11.0,
                          "out_features": 32,
                          "$type": "torch.nn.modules.linear.Linear"
                        },
                        "non_linearity": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                          "$type": "garage.torch._functions.NonLinearity"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    },
                    "1": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 32,
                          "out_features": 32,
                          "$type": "torch.nn.modules.linear.Linear"
                        },
                        "non_linearity": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                          "$type": "garage.torch._functions.NonLinearity"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    }
                  },
                  "$type": "torch.nn.modules.container.ModuleList"
                },
                "_output_layers": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "0": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 32,
                          "out_features": 1.0,
                          "$type": "torch.nn.modules.linear.Linear"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    }
                  },
                  "$type": "torch.nn.modules.container.ModuleList"
                }
              },
              "_output_dim": 1.0,
              "$type": "garage.torch.modules.mlp_module.MLPModule"
            }
          },
          "_input_dim": 11.0,
          "_hidden_sizes": [
            32,
            32
          ],
          "_learn_std": true,
          "_std_hidden_sizes": [
            32,
            32
          ],
          "_min_std": 1e-06,
          "_max_std": "None",
          "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
          "_std_hidden_w_init": {
            "$type": "builtins.function"
          },
          "_std_hidden_b_init": {
            "$type": "builtins.function"
          },
          "_std_output_nonlinearity": "None",
          "_std_output_w_init": {
            "$type": "builtins.function"
          },
          "_std_parameterization": "exp",
          "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
          "_hidden_w_init": {
            "$type": "builtins.function"
          },
          "_hidden_b_init": {
            "$type": "builtins.function"
          },
          "_output_nonlinearity": "None",
          "_output_w_init": {
            "$type": "builtins.function"
          },
          "_output_b_init": {
            "$type": "builtins.function"
          },
          "_layer_normalization": false,
          "_norm_dist_class": {
            "$typename": "torch.distributions.normal.Normal"
          },
          "_min_std_param": {
            "$type": "torch.Tensor"
          },
          "_max_std_param": "None",
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "$type": "Policy.GaussianMLPPolicy.GaussianMLPPolicy"
        },
        {
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "training": true,
          "_parameters": {
            "_init_std": {
              "$type": "torch.nn.parameter.Parameter"
            }
          },
          "_buffers": {
            "min_std_param": {
              "$type": "torch.Tensor"
            }
          },
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_mean_module": {
              "training": true,
              "_parameters": {},
              "_buffers": {},
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_layers": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "0": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 11.0,
                          "out_features": 32,
                          "$type": "torch.nn.modules.linear.Linear"
                        },
                        "non_linearity": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                          "$type": "garage.torch._functions.NonLinearity"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    },
                    "1": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 32,
                          "out_features": 32,
                          "$type": "torch.nn.modules.linear.Linear"
                        },
                        "non_linearity": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                          "$type": "garage.torch._functions.NonLinearity"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    }
                  },
                  "$type": "torch.nn.modules.container.ModuleList"
                },
                "_output_layers": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "0": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 32,
                          "out_features": 1.0,
                          "$type": "torch.nn.modules.linear.Linear"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    }
                  },
                  "$type": "torch.nn.modules.container.ModuleList"
                }
              },
              "_output_dim": 1.0,
              "$type": "garage.torch.modules.mlp_module.MLPModule"
            }
          },
          "_input_dim": 11.0,
          "_hidden_sizes": [
            32,
            32
          ],
          "_learn_std": true,
          "_std_hidden_sizes": [
            32,
            32
          ],
          "_min_std": 1e-06,
          "_max_std": "None",
          "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
          "_std_hidden_w_init": {
            "$type": "builtins.function"
          },
          "_std_hidden_b_init": {
            "$type": "builtins.function"
          },
          "_std_output_nonlinearity": "None",
          "_std_output_w_init": {
            "$type": "builtins.function"
          },
          "_std_parameterization": "exp",
          "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
          "_hidden_w_init": {
            "$type": "builtins.function"
          },
          "_hidden_b_init": {
            "$type": "builtins.function"
          },
          "_output_nonlinearity": "None",
          "_output_w_init": {
            "$type": "builtins.function"
          },
          "_output_b_init": {
            "$type": "builtins.function"
          },
          "_layer_normalization": false,
          "_norm_dist_class": {
            "$typename": "torch.distributions.normal.Normal"
          },
          "_min_std_param": {
            "$type": "torch.Tensor"
          },
          "_max_std_param": "None",
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "$type": "Policy.GaussianMLPPolicy.GaussianMLPPolicy"
        },
        {
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "training": true,
          "_parameters": {
            "_init_std": {
              "$type": "torch.nn.parameter.Parameter"
            }
          },
          "_buffers": {
            "min_std_param": {
              "$type": "torch.Tensor"
            }
          },
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_mean_module": {
              "training": true,
              "_parameters": {},
              "_buffers": {},
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_layers": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "0": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 11.0,
                          "out_features": 32,
                          "$type": "torch.nn.modules.linear.Linear"
                        },
                        "non_linearity": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                          "$type": "garage.torch._functions.NonLinearity"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    },
                    "1": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 32,
                          "out_features": 32,
                          "$type": "torch.nn.modules.linear.Linear"
                        },
                        "non_linearity": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                          "$type": "garage.torch._functions.NonLinearity"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    }
                  },
                  "$type": "torch.nn.modules.container.ModuleList"
                },
                "_output_layers": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "0": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 32,
                          "out_features": 1.0,
                          "$type": "torch.nn.modules.linear.Linear"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    }
                  },
                  "$type": "torch.nn.modules.container.ModuleList"
                }
              },
              "_output_dim": 1.0,
              "$type": "garage.torch.modules.mlp_module.MLPModule"
            }
          },
          "_input_dim": 11.0,
          "_hidden_sizes": [
            32,
            32
          ],
          "_learn_std": true,
          "_std_hidden_sizes": [
            32,
            32
          ],
          "_min_std": 1e-06,
          "_max_std": "None",
          "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
          "_std_hidden_w_init": {
            "$type": "builtins.function"
          },
          "_std_hidden_b_init": {
            "$type": "builtins.function"
          },
          "_std_output_nonlinearity": "None",
          "_std_output_w_init": {
            "$type": "builtins.function"
          },
          "_std_parameterization": "exp",
          "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
          "_hidden_w_init": {
            "$type": "builtins.function"
          },
          "_hidden_b_init": {
            "$type": "builtins.function"
          },
          "_output_nonlinearity": "None",
          "_output_w_init": {
            "$type": "builtins.function"
          },
          "_output_b_init": {
            "$type": "builtins.function"
          },
          "_layer_normalization": false,
          "_norm_dist_class": {
            "$typename": "torch.distributions.normal.Normal"
          },
          "_min_std_param": {
            "$type": "torch.Tensor"
          },
          "_max_std_param": "None",
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "$type": "Policy.GaussianMLPPolicy.GaussianMLPPolicy"
        },
        {
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "training": true,
          "_parameters": {
            "_init_std": {
              "$type": "torch.nn.parameter.Parameter"
            }
          },
          "_buffers": {
            "min_std_param": {
              "$type": "torch.Tensor"
            }
          },
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_mean_module": {
              "training": true,
              "_parameters": {},
              "_buffers": {},
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_layers": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "0": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 11.0,
                          "out_features": 32,
                          "$type": "torch.nn.modules.linear.Linear"
                        },
                        "non_linearity": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                          "$type": "garage.torch._functions.NonLinearity"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    },
                    "1": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 32,
                          "out_features": 32,
                          "$type": "torch.nn.modules.linear.Linear"
                        },
                        "non_linearity": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                          "$type": "garage.torch._functions.NonLinearity"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    }
                  },
                  "$type": "torch.nn.modules.container.ModuleList"
                },
                "_output_layers": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "0": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 32,
                          "out_features": 1.0,
                          "$type": "torch.nn.modules.linear.Linear"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    }
                  },
                  "$type": "torch.nn.modules.container.ModuleList"
                }
              },
              "_output_dim": 1.0,
              "$type": "garage.torch.modules.mlp_module.MLPModule"
            }
          },
          "_input_dim": 11.0,
          "_hidden_sizes": [
            32,
            32
          ],
          "_learn_std": true,
          "_std_hidden_sizes": [
            32,
            32
          ],
          "_min_std": 1e-06,
          "_max_std": "None",
          "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
          "_std_hidden_w_init": {
            "$type": "builtins.function"
          },
          "_std_hidden_b_init": {
            "$type": "builtins.function"
          },
          "_std_output_nonlinearity": "None",
          "_std_output_w_init": {
            "$type": "builtins.function"
          },
          "_std_parameterization": "exp",
          "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
          "_hidden_w_init": {
            "$type": "builtins.function"
          },
          "_hidden_b_init": {
            "$type": "builtins.function"
          },
          "_output_nonlinearity": "None",
          "_output_w_init": {
            "$type": "builtins.function"
          },
          "_output_b_init": {
            "$type": "builtins.function"
          },
          "_layer_normalization": false,
          "_norm_dist_class": {
            "$typename": "torch.distributions.normal.Normal"
          },
          "_min_std_param": {
            "$type": "torch.Tensor"
          },
          "_max_std_param": "None",
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "$type": "Policy.GaussianMLPPolicy.GaussianMLPPolicy"
        },
        {
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "training": true,
          "_parameters": {
            "_init_std": {
              "$type": "torch.nn.parameter.Parameter"
            }
          },
          "_buffers": {
            "min_std_param": {
              "$type": "torch.Tensor"
            }
          },
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_mean_module": {
              "training": true,
              "_parameters": {},
              "_buffers": {},
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_layers": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "0": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 11.0,
                          "out_features": 32,
                          "$type": "torch.nn.modules.linear.Linear"
                        },
                        "non_linearity": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                          "$type": "garage.torch._functions.NonLinearity"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    },
                    "1": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 32,
                          "out_features": 32,
                          "$type": "torch.nn.modules.linear.Linear"
                        },
                        "non_linearity": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                          "$type": "garage.torch._functions.NonLinearity"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    }
                  },
                  "$type": "torch.nn.modules.container.ModuleList"
                },
                "_output_layers": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "0": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 32,
                          "out_features": 1.0,
                          "$type": "torch.nn.modules.linear.Linear"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    }
                  },
                  "$type": "torch.nn.modules.container.ModuleList"
                }
              },
              "_output_dim": 1.0,
              "$type": "garage.torch.modules.mlp_module.MLPModule"
            }
          },
          "_input_dim": 11.0,
          "_hidden_sizes": [
            32,
            32
          ],
          "_learn_std": true,
          "_std_hidden_sizes": [
            32,
            32
          ],
          "_min_std": 1e-06,
          "_max_std": "None",
          "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
          "_std_hidden_w_init": {
            "$type": "builtins.function"
          },
          "_std_hidden_b_init": {
            "$type": "builtins.function"
          },
          "_std_output_nonlinearity": "None",
          "_std_output_w_init": {
            "$type": "builtins.function"
          },
          "_std_parameterization": "exp",
          "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
          "_hidden_w_init": {
            "$type": "builtins.function"
          },
          "_hidden_b_init": {
            "$type": "builtins.function"
          },
          "_output_nonlinearity": "None",
          "_output_w_init": {
            "$type": "builtins.function"
          },
          "_output_b_init": {
            "$type": "builtins.function"
          },
          "_layer_normalization": false,
          "_norm_dist_class": {
            "$typename": "torch.distributions.normal.Normal"
          },
          "_min_std_param": {
            "$type": "torch.Tensor"
          },
          "_max_std_param": "None",
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "$type": "Policy.GaussianMLPPolicy.GaussianMLPPolicy"
        },
        {
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "training": true,
          "_parameters": {
            "_init_std": {
              "$type": "torch.nn.parameter.Parameter"
            }
          },
          "_buffers": {
            "min_std_param": {
              "$type": "torch.Tensor"
            }
          },
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_mean_module": {
              "training": true,
              "_parameters": {},
              "_buffers": {},
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_layers": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "0": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 11.0,
                          "out_features": 32,
                          "$type": "torch.nn.modules.linear.Linear"
                        },
                        "non_linearity": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                          "$type": "garage.torch._functions.NonLinearity"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    },
                    "1": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 32,
                          "out_features": 32,
                          "$type": "torch.nn.modules.linear.Linear"
                        },
                        "non_linearity": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                          "$type": "garage.torch._functions.NonLinearity"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    }
                  },
                  "$type": "torch.nn.modules.container.ModuleList"
                },
                "_output_layers": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "0": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 32,
                          "out_features": 1.0,
                          "$type": "torch.nn.modules.linear.Linear"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    }
                  },
                  "$type": "torch.nn.modules.container.ModuleList"
                }
              },
              "_output_dim": 1.0,
              "$type": "garage.torch.modules.mlp_module.MLPModule"
            }
          },
          "_input_dim": 11.0,
          "_hidden_sizes": [
            32,
            32
          ],
          "_learn_std": true,
          "_std_hidden_sizes": [
            32,
            32
          ],
          "_min_std": 1e-06,
          "_max_std": "None",
          "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
          "_std_hidden_w_init": {
            "$type": "builtins.function"
          },
          "_std_hidden_b_init": {
            "$type": "builtins.function"
          },
          "_std_output_nonlinearity": "None",
          "_std_output_w_init": {
            "$type": "builtins.function"
          },
          "_std_parameterization": "exp",
          "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
          "_hidden_w_init": {
            "$type": "builtins.function"
          },
          "_hidden_b_init": {
            "$type": "builtins.function"
          },
          "_output_nonlinearity": "None",
          "_output_w_init": {
            "$type": "builtins.function"
          },
          "_output_b_init": {
            "$type": "builtins.function"
          },
          "_layer_normalization": false,
          "_norm_dist_class": {
            "$typename": "torch.distributions.normal.Normal"
          },
          "_min_std_param": {
            "$type": "torch.Tensor"
          },
          "_max_std_param": "None",
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "$type": "Policy.GaussianMLPPolicy.GaussianMLPPolicy"
        },
        {
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "training": true,
          "_parameters": {
            "_init_std": {
              "$type": "torch.nn.parameter.Parameter"
            }
          },
          "_buffers": {
            "min_std_param": {
              "$type": "torch.Tensor"
            }
          },
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_mean_module": {
              "training": true,
              "_parameters": {},
              "_buffers": {},
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_layers": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "0": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 11.0,
                          "out_features": 32,
                          "$type": "torch.nn.modules.linear.Linear"
                        },
                        "non_linearity": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                          "$type": "garage.torch._functions.NonLinearity"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    },
                    "1": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 32,
                          "out_features": 32,
                          "$type": "torch.nn.modules.linear.Linear"
                        },
                        "non_linearity": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                          "$type": "garage.torch._functions.NonLinearity"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    }
                  },
                  "$type": "torch.nn.modules.container.ModuleList"
                },
                "_output_layers": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "0": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 32,
                          "out_features": 1.0,
                          "$type": "torch.nn.modules.linear.Linear"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    }
                  },
                  "$type": "torch.nn.modules.container.ModuleList"
                }
              },
              "_output_dim": 1.0,
              "$type": "garage.torch.modules.mlp_module.MLPModule"
            }
          },
          "_input_dim": 11.0,
          "_hidden_sizes": [
            32,
            32
          ],
          "_learn_std": true,
          "_std_hidden_sizes": [
            32,
            32
          ],
          "_min_std": 1e-06,
          "_max_std": "None",
          "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
          "_std_hidden_w_init": {
            "$type": "builtins.function"
          },
          "_std_hidden_b_init": {
            "$type": "builtins.function"
          },
          "_std_output_nonlinearity": "None",
          "_std_output_w_init": {
            "$type": "builtins.function"
          },
          "_std_parameterization": "exp",
          "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
          "_hidden_w_init": {
            "$type": "builtins.function"
          },
          "_hidden_b_init": {
            "$type": "builtins.function"
          },
          "_output_nonlinearity": "None",
          "_output_w_init": {
            "$type": "builtins.function"
          },
          "_output_b_init": {
            "$type": "builtins.function"
          },
          "_layer_normalization": false,
          "_norm_dist_class": {
            "$typename": "torch.distributions.normal.Normal"
          },
          "_min_std_param": {
            "$type": "torch.Tensor"
          },
          "_max_std_param": "None",
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "$type": "Policy.GaussianMLPPolicy.GaussianMLPPolicy"
        },
        {
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "training": true,
          "_parameters": {
            "_init_std": {
              "$type": "torch.nn.parameter.Parameter"
            }
          },
          "_buffers": {
            "min_std_param": {
              "$type": "torch.Tensor"
            }
          },
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_mean_module": {
              "training": true,
              "_parameters": {},
              "_buffers": {},
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_layers": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "0": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 11.0,
                          "out_features": 32,
                          "$type": "torch.nn.modules.linear.Linear"
                        },
                        "non_linearity": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                          "$type": "garage.torch._functions.NonLinearity"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    },
                    "1": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 32,
                          "out_features": 32,
                          "$type": "torch.nn.modules.linear.Linear"
                        },
                        "non_linearity": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                          "$type": "garage.torch._functions.NonLinearity"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    }
                  },
                  "$type": "torch.nn.modules.container.ModuleList"
                },
                "_output_layers": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "0": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 32,
                          "out_features": 1.0,
                          "$type": "torch.nn.modules.linear.Linear"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    }
                  },
                  "$type": "torch.nn.modules.container.ModuleList"
                }
              },
              "_output_dim": 1.0,
              "$type": "garage.torch.modules.mlp_module.MLPModule"
            }
          },
          "_input_dim": 11.0,
          "_hidden_sizes": [
            32,
            32
          ],
          "_learn_std": true,
          "_std_hidden_sizes": [
            32,
            32
          ],
          "_min_std": 1e-06,
          "_max_std": "None",
          "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
          "_std_hidden_w_init": {
            "$type": "builtins.function"
          },
          "_std_hidden_b_init": {
            "$type": "builtins.function"
          },
          "_std_output_nonlinearity": "None",
          "_std_output_w_init": {
            "$type": "builtins.function"
          },
          "_std_parameterization": "exp",
          "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
          "_hidden_w_init": {
            "$type": "builtins.function"
          },
          "_hidden_b_init": {
            "$type": "builtins.function"
          },
          "_output_nonlinearity": "None",
          "_output_w_init": {
            "$type": "builtins.function"
          },
          "_output_b_init": {
            "$type": "builtins.function"
          },
          "_layer_normalization": false,
          "_norm_dist_class": {
            "$typename": "torch.distributions.normal.Normal"
          },
          "_min_std_param": {
            "$type": "torch.Tensor"
          },
          "_max_std_param": "None",
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "$type": "Policy.GaussianMLPPolicy.GaussianMLPPolicy"
        },
        {
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "training": true,
          "_parameters": {
            "_init_std": {
              "$type": "torch.nn.parameter.Parameter"
            }
          },
          "_buffers": {
            "min_std_param": {
              "$type": "torch.Tensor"
            }
          },
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_mean_module": {
              "training": true,
              "_parameters": {},
              "_buffers": {},
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_layers": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "0": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 11.0,
                          "out_features": 32,
                          "$type": "torch.nn.modules.linear.Linear"
                        },
                        "non_linearity": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                          "$type": "garage.torch._functions.NonLinearity"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    },
                    "1": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 32,
                          "out_features": 32,
                          "$type": "torch.nn.modules.linear.Linear"
                        },
                        "non_linearity": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                          "$type": "garage.torch._functions.NonLinearity"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    }
                  },
                  "$type": "torch.nn.modules.container.ModuleList"
                },
                "_output_layers": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "0": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 32,
                          "out_features": 1.0,
                          "$type": "torch.nn.modules.linear.Linear"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    }
                  },
                  "$type": "torch.nn.modules.container.ModuleList"
                }
              },
              "_output_dim": 1.0,
              "$type": "garage.torch.modules.mlp_module.MLPModule"
            }
          },
          "_input_dim": 11.0,
          "_hidden_sizes": [
            32,
            32
          ],
          "_learn_std": true,
          "_std_hidden_sizes": [
            32,
            32
          ],
          "_min_std": 1e-06,
          "_max_std": "None",
          "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
          "_std_hidden_w_init": {
            "$type": "builtins.function"
          },
          "_std_hidden_b_init": {
            "$type": "builtins.function"
          },
          "_std_output_nonlinearity": "None",
          "_std_output_w_init": {
            "$type": "builtins.function"
          },
          "_std_parameterization": "exp",
          "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
          "_hidden_w_init": {
            "$type": "builtins.function"
          },
          "_hidden_b_init": {
            "$type": "builtins.function"
          },
          "_output_nonlinearity": "None",
          "_output_w_init": {
            "$type": "builtins.function"
          },
          "_output_b_init": {
            "$type": "builtins.function"
          },
          "_layer_normalization": false,
          "_norm_dist_class": {
            "$typename": "torch.distributions.normal.Normal"
          },
          "_min_std_param": {
            "$type": "torch.Tensor"
          },
          "_max_std_param": "None",
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "$type": "Policy.GaussianMLPPolicy.GaussianMLPPolicy"
        },
        {
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "training": true,
          "_parameters": {
            "_init_std": {
              "$type": "torch.nn.parameter.Parameter"
            }
          },
          "_buffers": {
            "min_std_param": {
              "$type": "torch.Tensor"
            }
          },
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_mean_module": {
              "training": true,
              "_parameters": {},
              "_buffers": {},
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_layers": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "0": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 11.0,
                          "out_features": 32,
                          "$type": "torch.nn.modules.linear.Linear"
                        },
                        "non_linearity": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                          "$type": "garage.torch._functions.NonLinearity"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    },
                    "1": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 32,
                          "out_features": 32,
                          "$type": "torch.nn.modules.linear.Linear"
                        },
                        "non_linearity": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                          "$type": "garage.torch._functions.NonLinearity"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    }
                  },
                  "$type": "torch.nn.modules.container.ModuleList"
                },
                "_output_layers": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "0": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 32,
                          "out_features": 1.0,
                          "$type": "torch.nn.modules.linear.Linear"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    }
                  },
                  "$type": "torch.nn.modules.container.ModuleList"
                }
              },
              "_output_dim": 1.0,
              "$type": "garage.torch.modules.mlp_module.MLPModule"
            }
          },
          "_input_dim": 11.0,
          "_hidden_sizes": [
            32,
            32
          ],
          "_learn_std": true,
          "_std_hidden_sizes": [
            32,
            32
          ],
          "_min_std": 1e-06,
          "_max_std": "None",
          "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
          "_std_hidden_w_init": {
            "$type": "builtins.function"
          },
          "_std_hidden_b_init": {
            "$type": "builtins.function"
          },
          "_std_output_nonlinearity": "None",
          "_std_output_w_init": {
            "$type": "builtins.function"
          },
          "_std_parameterization": "exp",
          "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
          "_hidden_w_init": {
            "$type": "builtins.function"
          },
          "_hidden_b_init": {
            "$type": "builtins.function"
          },
          "_output_nonlinearity": "None",
          "_output_w_init": {
            "$type": "builtins.function"
          },
          "_output_b_init": {
            "$type": "builtins.function"
          },
          "_layer_normalization": false,
          "_norm_dist_class": {
            "$typename": "torch.distributions.normal.Normal"
          },
          "_min_std_param": {
            "$type": "torch.Tensor"
          },
          "_max_std_param": "None",
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "$type": "Policy.GaussianMLPPolicy.GaussianMLPPolicy"
        },
        {
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "training": true,
          "_parameters": {
            "_init_std": {
              "$type": "torch.nn.parameter.Parameter"
            }
          },
          "_buffers": {
            "min_std_param": {
              "$type": "torch.Tensor"
            }
          },
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_mean_module": {
              "training": true,
              "_parameters": {},
              "_buffers": {},
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_layers": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "0": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 11.0,
                          "out_features": 32,
                          "$type": "torch.nn.modules.linear.Linear"
                        },
                        "non_linearity": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                          "$type": "garage.torch._functions.NonLinearity"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    },
                    "1": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 32,
                          "out_features": 32,
                          "$type": "torch.nn.modules.linear.Linear"
                        },
                        "non_linearity": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                          "$type": "garage.torch._functions.NonLinearity"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    }
                  },
                  "$type": "torch.nn.modules.container.ModuleList"
                },
                "_output_layers": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "0": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 32,
                          "out_features": 1.0,
                          "$type": "torch.nn.modules.linear.Linear"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    }
                  },
                  "$type": "torch.nn.modules.container.ModuleList"
                }
              },
              "_output_dim": 1.0,
              "$type": "garage.torch.modules.mlp_module.MLPModule"
            }
          },
          "_input_dim": 11.0,
          "_hidden_sizes": [
            32,
            32
          ],
          "_learn_std": true,
          "_std_hidden_sizes": [
            32,
            32
          ],
          "_min_std": 1e-06,
          "_max_std": "None",
          "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
          "_std_hidden_w_init": {
            "$type": "builtins.function"
          },
          "_std_hidden_b_init": {
            "$type": "builtins.function"
          },
          "_std_output_nonlinearity": "None",
          "_std_output_w_init": {
            "$type": "builtins.function"
          },
          "_std_parameterization": "exp",
          "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
          "_hidden_w_init": {
            "$type": "builtins.function"
          },
          "_hidden_b_init": {
            "$type": "builtins.function"
          },
          "_output_nonlinearity": "None",
          "_output_w_init": {
            "$type": "builtins.function"
          },
          "_output_b_init": {
            "$type": "builtins.function"
          },
          "_layer_normalization": false,
          "_norm_dist_class": {
            "$typename": "torch.distributions.normal.Normal"
          },
          "_min_std_param": {
            "$type": "torch.Tensor"
          },
          "_max_std_param": "None",
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "$type": "Policy.GaussianMLPPolicy.GaussianMLPPolicy"
        },
        {
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "training": true,
          "_parameters": {
            "_init_std": {
              "$type": "torch.nn.parameter.Parameter"
            }
          },
          "_buffers": {
            "min_std_param": {
              "$type": "torch.Tensor"
            }
          },
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_mean_module": {
              "training": true,
              "_parameters": {},
              "_buffers": {},
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_layers": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "0": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 11.0,
                          "out_features": 32,
                          "$type": "torch.nn.modules.linear.Linear"
                        },
                        "non_linearity": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                          "$type": "garage.torch._functions.NonLinearity"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    },
                    "1": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 32,
                          "out_features": 32,
                          "$type": "torch.nn.modules.linear.Linear"
                        },
                        "non_linearity": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                          "$type": "garage.torch._functions.NonLinearity"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    }
                  },
                  "$type": "torch.nn.modules.container.ModuleList"
                },
                "_output_layers": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "0": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 32,
                          "out_features": 1.0,
                          "$type": "torch.nn.modules.linear.Linear"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    }
                  },
                  "$type": "torch.nn.modules.container.ModuleList"
                }
              },
              "_output_dim": 1.0,
              "$type": "garage.torch.modules.mlp_module.MLPModule"
            }
          },
          "_input_dim": 11.0,
          "_hidden_sizes": [
            32,
            32
          ],
          "_learn_std": true,
          "_std_hidden_sizes": [
            32,
            32
          ],
          "_min_std": 1e-06,
          "_max_std": "None",
          "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
          "_std_hidden_w_init": {
            "$type": "builtins.function"
          },
          "_std_hidden_b_init": {
            "$type": "builtins.function"
          },
          "_std_output_nonlinearity": "None",
          "_std_output_w_init": {
            "$type": "builtins.function"
          },
          "_std_parameterization": "exp",
          "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
          "_hidden_w_init": {
            "$type": "builtins.function"
          },
          "_hidden_b_init": {
            "$type": "builtins.function"
          },
          "_output_nonlinearity": "None",
          "_output_w_init": {
            "$type": "builtins.function"
          },
          "_output_b_init": {
            "$type": "builtins.function"
          },
          "_layer_normalization": false,
          "_norm_dist_class": {
            "$typename": "torch.distributions.normal.Normal"
          },
          "_min_std_param": {
            "$type": "torch.Tensor"
          },
          "_max_std_param": "None",
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "$type": "Policy.GaussianMLPPolicy.GaussianMLPPolicy"
        }
      ],
      "_envs": [
        {
          "_env": {
            "env": {
              "env": {
                "env": {
                  "env": {
                    "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                    "model": "<mujoco._structs.MjModel object at 0x7f904e734470>",
                    "data": "<mujoco._structs.MjData object at 0x7f904e148670>",
                    "init_qpos": "array([0., 0., 0.])",
                    "init_qvel": "array([0., 0., 0.])",
                    "_viewers": {},
                    "frame_skip": 5,
                    "viewer": "None",
                    "observation_space": {
                      "dtype": "dtype('float64')",
                      "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "_shape": [
                        11
                      ],
                      "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                      "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                      "low_repr": "-inf",
                      "high_repr": "inf",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "action_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True])",
                      "bounded_above": "array([ True])",
                      "_shape": [
                        1
                      ],
                      "low": "array([-1.], dtype=float32)",
                      "high": "array([1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "render_mode": "None",
                    "renderer": {
                      "no_returns_render": [
                        "human"
                      ],
                      "single_render": [
                        "single_state_pixels",
                        "single_rgb_array",
                        "single_depth_array"
                      ],
                      "mode": "None",
                      "render": {
                        "$type": "functools.partial"
                      },
                      "render_list": [],
                      "$type": "gym.utils.renderer.Renderer"
                    },
                    "_ezpickle_args": [],
                    "_ezpickle_kwargs": {},
                    "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "checked_reset": false,
                  "checked_step": false,
                  "checked_render": false,
                  "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": true,
              "_has_reset": false,
              "_disable_render_order_enforcing": false,
              "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": false,
            "_max_episode_steps": 1000,
            "_elapsed_steps": "None",
            "$type": "gym.wrappers.time_limit.TimeLimit"
          },
          "_max_episode_length": 1000,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array",
            "single_rgb_array",
            "single_depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        {
          "_env": {
            "env": {
              "env": {
                "env": {
                  "env": {
                    "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                    "model": "<mujoco._structs.MjModel object at 0x7f904e72eb30>",
                    "data": "<mujoco._structs.MjData object at 0x7f904e17fd70>",
                    "init_qpos": "array([0., 0., 0.])",
                    "init_qvel": "array([0., 0., 0.])",
                    "_viewers": {},
                    "frame_skip": 5,
                    "viewer": "None",
                    "observation_space": {
                      "dtype": "dtype('float64')",
                      "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "_shape": [
                        11
                      ],
                      "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                      "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                      "low_repr": "-inf",
                      "high_repr": "inf",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "action_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True])",
                      "bounded_above": "array([ True])",
                      "_shape": [
                        1
                      ],
                      "low": "array([-1.], dtype=float32)",
                      "high": "array([1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "render_mode": "None",
                    "renderer": {
                      "no_returns_render": [
                        "human"
                      ],
                      "single_render": [
                        "single_state_pixels",
                        "single_rgb_array",
                        "single_depth_array"
                      ],
                      "mode": "None",
                      "render": {
                        "$type": "functools.partial"
                      },
                      "render_list": [],
                      "$type": "gym.utils.renderer.Renderer"
                    },
                    "_ezpickle_args": [],
                    "_ezpickle_kwargs": {},
                    "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "checked_reset": false,
                  "checked_step": false,
                  "checked_render": false,
                  "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": true,
              "_has_reset": false,
              "_disable_render_order_enforcing": false,
              "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": false,
            "_max_episode_steps": 1000,
            "_elapsed_steps": "None",
            "$type": "gym.wrappers.time_limit.TimeLimit"
          },
          "_max_episode_length": 1000,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array",
            "single_rgb_array",
            "single_depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        {
          "_env": {
            "env": {
              "env": {
                "env": {
                  "env": {
                    "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                    "model": "<mujoco._structs.MjModel object at 0x7f904e730e70>",
                    "data": "<mujoco._structs.MjData object at 0x7f904e730330>",
                    "init_qpos": "array([0., 0., 0.])",
                    "init_qvel": "array([0., 0., 0.])",
                    "_viewers": {},
                    "frame_skip": 5,
                    "viewer": "None",
                    "observation_space": {
                      "dtype": "dtype('float64')",
                      "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "_shape": [
                        11
                      ],
                      "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                      "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                      "low_repr": "-inf",
                      "high_repr": "inf",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "action_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True])",
                      "bounded_above": "array([ True])",
                      "_shape": [
                        1
                      ],
                      "low": "array([-1.], dtype=float32)",
                      "high": "array([1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "render_mode": "None",
                    "renderer": {
                      "no_returns_render": [
                        "human"
                      ],
                      "single_render": [
                        "single_state_pixels",
                        "single_rgb_array",
                        "single_depth_array"
                      ],
                      "mode": "None",
                      "render": {
                        "$type": "functools.partial"
                      },
                      "render_list": [],
                      "$type": "gym.utils.renderer.Renderer"
                    },
                    "_ezpickle_args": [],
                    "_ezpickle_kwargs": {},
                    "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "checked_reset": false,
                  "checked_step": false,
                  "checked_render": false,
                  "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": true,
              "_has_reset": false,
              "_disable_render_order_enforcing": false,
              "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": false,
            "_max_episode_steps": 1000,
            "_elapsed_steps": "None",
            "$type": "gym.wrappers.time_limit.TimeLimit"
          },
          "_max_episode_length": 1000,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array",
            "single_rgb_array",
            "single_depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        {
          "_env": {
            "env": {
              "env": {
                "env": {
                  "env": {
                    "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                    "model": "<mujoco._structs.MjModel object at 0x7f904d8e9cb0>",
                    "data": "<mujoco._structs.MjData object at 0x7f904d8e9cf0>",
                    "init_qpos": "array([0., 0., 0.])",
                    "init_qvel": "array([0., 0., 0.])",
                    "_viewers": {},
                    "frame_skip": 5,
                    "viewer": "None",
                    "observation_space": {
                      "dtype": "dtype('float64')",
                      "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "_shape": [
                        11
                      ],
                      "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                      "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                      "low_repr": "-inf",
                      "high_repr": "inf",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "action_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True])",
                      "bounded_above": "array([ True])",
                      "_shape": [
                        1
                      ],
                      "low": "array([-1.], dtype=float32)",
                      "high": "array([1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "render_mode": "None",
                    "renderer": {
                      "no_returns_render": [
                        "human"
                      ],
                      "single_render": [
                        "single_state_pixels",
                        "single_rgb_array",
                        "single_depth_array"
                      ],
                      "mode": "None",
                      "render": {
                        "$type": "functools.partial"
                      },
                      "render_list": [],
                      "$type": "gym.utils.renderer.Renderer"
                    },
                    "_ezpickle_args": [],
                    "_ezpickle_kwargs": {},
                    "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "checked_reset": false,
                  "checked_step": false,
                  "checked_render": false,
                  "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": true,
              "_has_reset": false,
              "_disable_render_order_enforcing": false,
              "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": false,
            "_max_episode_steps": 1000,
            "_elapsed_steps": "None",
            "$type": "gym.wrappers.time_limit.TimeLimit"
          },
          "_max_episode_length": 1000,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array",
            "single_rgb_array",
            "single_depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        {
          "_env": {
            "env": {
              "env": {
                "env": {
                  "env": {
                    "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                    "model": "<mujoco._structs.MjModel object at 0x7f904d7cc730>",
                    "data": "<mujoco._structs.MjData object at 0x7f904d7cc770>",
                    "init_qpos": "array([0., 0., 0.])",
                    "init_qvel": "array([0., 0., 0.])",
                    "_viewers": {},
                    "frame_skip": 5,
                    "viewer": "None",
                    "observation_space": {
                      "dtype": "dtype('float64')",
                      "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "_shape": [
                        11
                      ],
                      "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                      "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                      "low_repr": "-inf",
                      "high_repr": "inf",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "action_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True])",
                      "bounded_above": "array([ True])",
                      "_shape": [
                        1
                      ],
                      "low": "array([-1.], dtype=float32)",
                      "high": "array([1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "render_mode": "None",
                    "renderer": {
                      "no_returns_render": [
                        "human"
                      ],
                      "single_render": [
                        "single_state_pixels",
                        "single_rgb_array",
                        "single_depth_array"
                      ],
                      "mode": "None",
                      "render": {
                        "$type": "functools.partial"
                      },
                      "render_list": [],
                      "$type": "gym.utils.renderer.Renderer"
                    },
                    "_ezpickle_args": [],
                    "_ezpickle_kwargs": {},
                    "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "checked_reset": false,
                  "checked_step": false,
                  "checked_render": false,
                  "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": true,
              "_has_reset": false,
              "_disable_render_order_enforcing": false,
              "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": false,
            "_max_episode_steps": 1000,
            "_elapsed_steps": "None",
            "$type": "gym.wrappers.time_limit.TimeLimit"
          },
          "_max_episode_length": 1000,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array",
            "single_rgb_array",
            "single_depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        {
          "_env": {
            "env": {
              "env": {
                "env": {
                  "env": {
                    "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                    "model": "<mujoco._structs.MjModel object at 0x7f904d7981f0>",
                    "data": "<mujoco._structs.MjData object at 0x7f904d798230>",
                    "init_qpos": "array([0., 0., 0.])",
                    "init_qvel": "array([0., 0., 0.])",
                    "_viewers": {},
                    "frame_skip": 5,
                    "viewer": "None",
                    "observation_space": {
                      "dtype": "dtype('float64')",
                      "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "_shape": [
                        11
                      ],
                      "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                      "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                      "low_repr": "-inf",
                      "high_repr": "inf",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "action_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True])",
                      "bounded_above": "array([ True])",
                      "_shape": [
                        1
                      ],
                      "low": "array([-1.], dtype=float32)",
                      "high": "array([1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "render_mode": "None",
                    "renderer": {
                      "no_returns_render": [
                        "human"
                      ],
                      "single_render": [
                        "single_state_pixels",
                        "single_rgb_array",
                        "single_depth_array"
                      ],
                      "mode": "None",
                      "render": {
                        "$type": "functools.partial"
                      },
                      "render_list": [],
                      "$type": "gym.utils.renderer.Renderer"
                    },
                    "_ezpickle_args": [],
                    "_ezpickle_kwargs": {},
                    "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "checked_reset": false,
                  "checked_step": false,
                  "checked_render": false,
                  "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": true,
              "_has_reset": false,
              "_disable_render_order_enforcing": false,
              "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": false,
            "_max_episode_steps": 1000,
            "_elapsed_steps": "None",
            "$type": "gym.wrappers.time_limit.TimeLimit"
          },
          "_max_episode_length": 1000,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array",
            "single_rgb_array",
            "single_depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        {
          "_env": {
            "env": {
              "env": {
                "env": {
                  "env": {
                    "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                    "model": "<mujoco._structs.MjModel object at 0x7f904d798c70>",
                    "data": "<mujoco._structs.MjData object at 0x7f904d798cb0>",
                    "init_qpos": "array([0., 0., 0.])",
                    "init_qvel": "array([0., 0., 0.])",
                    "_viewers": {},
                    "frame_skip": 5,
                    "viewer": "None",
                    "observation_space": {
                      "dtype": "dtype('float64')",
                      "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "_shape": [
                        11
                      ],
                      "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                      "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                      "low_repr": "-inf",
                      "high_repr": "inf",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "action_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True])",
                      "bounded_above": "array([ True])",
                      "_shape": [
                        1
                      ],
                      "low": "array([-1.], dtype=float32)",
                      "high": "array([1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "render_mode": "None",
                    "renderer": {
                      "no_returns_render": [
                        "human"
                      ],
                      "single_render": [
                        "single_state_pixels",
                        "single_rgb_array",
                        "single_depth_array"
                      ],
                      "mode": "None",
                      "render": {
                        "$type": "functools.partial"
                      },
                      "render_list": [],
                      "$type": "gym.utils.renderer.Renderer"
                    },
                    "_ezpickle_args": [],
                    "_ezpickle_kwargs": {},
                    "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "checked_reset": false,
                  "checked_step": false,
                  "checked_render": false,
                  "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": true,
              "_has_reset": false,
              "_disable_render_order_enforcing": false,
              "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": false,
            "_max_episode_steps": 1000,
            "_elapsed_steps": "None",
            "$type": "gym.wrappers.time_limit.TimeLimit"
          },
          "_max_episode_length": 1000,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array",
            "single_rgb_array",
            "single_depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        {
          "_env": {
            "env": {
              "env": {
                "env": {
                  "env": {
                    "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                    "model": "<mujoco._structs.MjModel object at 0x7f904d7676f0>",
                    "data": "<mujoco._structs.MjData object at 0x7f904d767730>",
                    "init_qpos": "array([0., 0., 0.])",
                    "init_qvel": "array([0., 0., 0.])",
                    "_viewers": {},
                    "frame_skip": 5,
                    "viewer": "None",
                    "observation_space": {
                      "dtype": "dtype('float64')",
                      "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "_shape": [
                        11
                      ],
                      "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                      "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                      "low_repr": "-inf",
                      "high_repr": "inf",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "action_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True])",
                      "bounded_above": "array([ True])",
                      "_shape": [
                        1
                      ],
                      "low": "array([-1.], dtype=float32)",
                      "high": "array([1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "render_mode": "None",
                    "renderer": {
                      "no_returns_render": [
                        "human"
                      ],
                      "single_render": [
                        "single_state_pixels",
                        "single_rgb_array",
                        "single_depth_array"
                      ],
                      "mode": "None",
                      "render": {
                        "$type": "functools.partial"
                      },
                      "render_list": [],
                      "$type": "gym.utils.renderer.Renderer"
                    },
                    "_ezpickle_args": [],
                    "_ezpickle_kwargs": {},
                    "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "checked_reset": false,
                  "checked_step": false,
                  "checked_render": false,
                  "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": true,
              "_has_reset": false,
              "_disable_render_order_enforcing": false,
              "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": false,
            "_max_episode_steps": 1000,
            "_elapsed_steps": "None",
            "$type": "gym.wrappers.time_limit.TimeLimit"
          },
          "_max_episode_length": 1000,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array",
            "single_rgb_array",
            "single_depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        {
          "_env": {
            "env": {
              "env": {
                "env": {
                  "env": {
                    "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                    "model": "<mujoco._structs.MjModel object at 0x7f904d6b41b0>",
                    "data": "<mujoco._structs.MjData object at 0x7f904d6b41f0>",
                    "init_qpos": "array([0., 0., 0.])",
                    "init_qvel": "array([0., 0., 0.])",
                    "_viewers": {},
                    "frame_skip": 5,
                    "viewer": "None",
                    "observation_space": {
                      "dtype": "dtype('float64')",
                      "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "_shape": [
                        11
                      ],
                      "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                      "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                      "low_repr": "-inf",
                      "high_repr": "inf",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "action_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True])",
                      "bounded_above": "array([ True])",
                      "_shape": [
                        1
                      ],
                      "low": "array([-1.], dtype=float32)",
                      "high": "array([1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "render_mode": "None",
                    "renderer": {
                      "no_returns_render": [
                        "human"
                      ],
                      "single_render": [
                        "single_state_pixels",
                        "single_rgb_array",
                        "single_depth_array"
                      ],
                      "mode": "None",
                      "render": {
                        "$type": "functools.partial"
                      },
                      "render_list": [],
                      "$type": "gym.utils.renderer.Renderer"
                    },
                    "_ezpickle_args": [],
                    "_ezpickle_kwargs": {},
                    "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "checked_reset": false,
                  "checked_step": false,
                  "checked_render": false,
                  "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": true,
              "_has_reset": false,
              "_disable_render_order_enforcing": false,
              "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": false,
            "_max_episode_steps": 1000,
            "_elapsed_steps": "None",
            "$type": "gym.wrappers.time_limit.TimeLimit"
          },
          "_max_episode_length": 1000,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array",
            "single_rgb_array",
            "single_depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        {
          "_env": {
            "env": {
              "env": {
                "env": {
                  "env": {
                    "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                    "model": "<mujoco._structs.MjModel object at 0x7f904d6b4c30>",
                    "data": "<mujoco._structs.MjData object at 0x7f904d6b4c70>",
                    "init_qpos": "array([0., 0., 0.])",
                    "init_qvel": "array([0., 0., 0.])",
                    "_viewers": {},
                    "frame_skip": 5,
                    "viewer": "None",
                    "observation_space": {
                      "dtype": "dtype('float64')",
                      "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "_shape": [
                        11
                      ],
                      "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                      "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                      "low_repr": "-inf",
                      "high_repr": "inf",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "action_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True])",
                      "bounded_above": "array([ True])",
                      "_shape": [
                        1
                      ],
                      "low": "array([-1.], dtype=float32)",
                      "high": "array([1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "render_mode": "None",
                    "renderer": {
                      "no_returns_render": [
                        "human"
                      ],
                      "single_render": [
                        "single_state_pixels",
                        "single_rgb_array",
                        "single_depth_array"
                      ],
                      "mode": "None",
                      "render": {
                        "$type": "functools.partial"
                      },
                      "render_list": [],
                      "$type": "gym.utils.renderer.Renderer"
                    },
                    "_ezpickle_args": [],
                    "_ezpickle_kwargs": {},
                    "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "checked_reset": false,
                  "checked_step": false,
                  "checked_render": false,
                  "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": true,
              "_has_reset": false,
              "_disable_render_order_enforcing": false,
              "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": false,
            "_max_episode_steps": 1000,
            "_elapsed_steps": "None",
            "$type": "gym.wrappers.time_limit.TimeLimit"
          },
          "_max_episode_length": 1000,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array",
            "single_rgb_array",
            "single_depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        {
          "_env": {
            "env": {
              "env": {
                "env": {
                  "env": {
                    "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                    "model": "<mujoco._structs.MjModel object at 0x7f904d682730>",
                    "data": "<mujoco._structs.MjData object at 0x7f904d682770>",
                    "init_qpos": "array([0., 0., 0.])",
                    "init_qvel": "array([0., 0., 0.])",
                    "_viewers": {},
                    "frame_skip": 5,
                    "viewer": "None",
                    "observation_space": {
                      "dtype": "dtype('float64')",
                      "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "_shape": [
                        11
                      ],
                      "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                      "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                      "low_repr": "-inf",
                      "high_repr": "inf",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "action_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True])",
                      "bounded_above": "array([ True])",
                      "_shape": [
                        1
                      ],
                      "low": "array([-1.], dtype=float32)",
                      "high": "array([1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "render_mode": "None",
                    "renderer": {
                      "no_returns_render": [
                        "human"
                      ],
                      "single_render": [
                        "single_state_pixels",
                        "single_rgb_array",
                        "single_depth_array"
                      ],
                      "mode": "None",
                      "render": {
                        "$type": "functools.partial"
                      },
                      "render_list": [],
                      "$type": "gym.utils.renderer.Renderer"
                    },
                    "_ezpickle_args": [],
                    "_ezpickle_kwargs": {},
                    "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "checked_reset": false,
                  "checked_step": false,
                  "checked_render": false,
                  "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": true,
              "_has_reset": false,
              "_disable_render_order_enforcing": false,
              "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": false,
            "_max_episode_steps": 1000,
            "_elapsed_steps": "None",
            "$type": "gym.wrappers.time_limit.TimeLimit"
          },
          "_max_episode_length": 1000,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array",
            "single_rgb_array",
            "single_depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        {
          "_env": {
            "env": {
              "env": {
                "env": {
                  "env": {
                    "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                    "model": "<mujoco._structs.MjModel object at 0x7f904d6824f0>",
                    "data": "<mujoco._structs.MjData object at 0x7f904d6822b0>",
                    "init_qpos": "array([0., 0., 0.])",
                    "init_qvel": "array([0., 0., 0.])",
                    "_viewers": {},
                    "frame_skip": 5,
                    "viewer": "None",
                    "observation_space": {
                      "dtype": "dtype('float64')",
                      "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "_shape": [
                        11
                      ],
                      "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                      "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                      "low_repr": "-inf",
                      "high_repr": "inf",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "action_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True])",
                      "bounded_above": "array([ True])",
                      "_shape": [
                        1
                      ],
                      "low": "array([-1.], dtype=float32)",
                      "high": "array([1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "render_mode": "None",
                    "renderer": {
                      "no_returns_render": [
                        "human"
                      ],
                      "single_render": [
                        "single_state_pixels",
                        "single_rgb_array",
                        "single_depth_array"
                      ],
                      "mode": "None",
                      "render": {
                        "$type": "functools.partial"
                      },
                      "render_list": [],
                      "$type": "gym.utils.renderer.Renderer"
                    },
                    "_ezpickle_args": [],
                    "_ezpickle_kwargs": {},
                    "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "checked_reset": false,
                  "checked_step": false,
                  "checked_render": false,
                  "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": true,
              "_has_reset": false,
              "_disable_render_order_enforcing": false,
              "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": false,
            "_max_episode_steps": 1000,
            "_elapsed_steps": "None",
            "$type": "gym.wrappers.time_limit.TimeLimit"
          },
          "_max_episode_length": 1000,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array",
            "single_rgb_array",
            "single_depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        {
          "_env": {
            "env": {
              "env": {
                "env": {
                  "env": {
                    "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                    "model": "<mujoco._structs.MjModel object at 0x7f904d798ef0>",
                    "data": "<mujoco._structs.MjData object at 0x7f904d798a70>",
                    "init_qpos": "array([0., 0., 0.])",
                    "init_qvel": "array([0., 0., 0.])",
                    "_viewers": {},
                    "frame_skip": 5,
                    "viewer": "None",
                    "observation_space": {
                      "dtype": "dtype('float64')",
                      "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "_shape": [
                        11
                      ],
                      "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                      "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                      "low_repr": "-inf",
                      "high_repr": "inf",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "action_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True])",
                      "bounded_above": "array([ True])",
                      "_shape": [
                        1
                      ],
                      "low": "array([-1.], dtype=float32)",
                      "high": "array([1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "render_mode": "None",
                    "renderer": {
                      "no_returns_render": [
                        "human"
                      ],
                      "single_render": [
                        "single_state_pixels",
                        "single_rgb_array",
                        "single_depth_array"
                      ],
                      "mode": "None",
                      "render": {
                        "$type": "functools.partial"
                      },
                      "render_list": [],
                      "$type": "gym.utils.renderer.Renderer"
                    },
                    "_ezpickle_args": [],
                    "_ezpickle_kwargs": {},
                    "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "checked_reset": false,
                  "checked_step": false,
                  "checked_render": false,
                  "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": true,
              "_has_reset": false,
              "_disable_render_order_enforcing": false,
              "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": false,
            "_max_episode_steps": 1000,
            "_elapsed_steps": "None",
            "$type": "gym.wrappers.time_limit.TimeLimit"
          },
          "_max_episode_length": 1000,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array",
            "single_rgb_array",
            "single_depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        {
          "_env": {
            "env": {
              "env": {
                "env": {
                  "env": {
                    "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                    "model": "<mujoco._structs.MjModel object at 0x7f904d8e9ab0>",
                    "data": "<mujoco._structs.MjData object at 0x7f904d8e9a70>",
                    "init_qpos": "array([0., 0., 0.])",
                    "init_qvel": "array([0., 0., 0.])",
                    "_viewers": {},
                    "frame_skip": 5,
                    "viewer": "None",
                    "observation_space": {
                      "dtype": "dtype('float64')",
                      "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "_shape": [
                        11
                      ],
                      "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                      "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                      "low_repr": "-inf",
                      "high_repr": "inf",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "action_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True])",
                      "bounded_above": "array([ True])",
                      "_shape": [
                        1
                      ],
                      "low": "array([-1.], dtype=float32)",
                      "high": "array([1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "render_mode": "None",
                    "renderer": {
                      "no_returns_render": [
                        "human"
                      ],
                      "single_render": [
                        "single_state_pixels",
                        "single_rgb_array",
                        "single_depth_array"
                      ],
                      "mode": "None",
                      "render": {
                        "$type": "functools.partial"
                      },
                      "render_list": [],
                      "$type": "gym.utils.renderer.Renderer"
                    },
                    "_ezpickle_args": [],
                    "_ezpickle_kwargs": {},
                    "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "checked_reset": false,
                  "checked_step": false,
                  "checked_render": false,
                  "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": true,
              "_has_reset": false,
              "_disable_render_order_enforcing": false,
              "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": false,
            "_max_episode_steps": 1000,
            "_elapsed_steps": "None",
            "$type": "gym.wrappers.time_limit.TimeLimit"
          },
          "_max_episode_length": 1000,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array",
            "single_rgb_array",
            "single_depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        {
          "_env": {
            "env": {
              "env": {
                "env": {
                  "env": {
                    "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                    "model": "<mujoco._structs.MjModel object at 0x7f904e73a7b0>",
                    "data": "<mujoco._structs.MjData object at 0x7f904e19f370>",
                    "init_qpos": "array([0., 0., 0.])",
                    "init_qvel": "array([0., 0., 0.])",
                    "_viewers": {},
                    "frame_skip": 5,
                    "viewer": "None",
                    "observation_space": {
                      "dtype": "dtype('float64')",
                      "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "_shape": [
                        11
                      ],
                      "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                      "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                      "low_repr": "-inf",
                      "high_repr": "inf",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "action_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True])",
                      "bounded_above": "array([ True])",
                      "_shape": [
                        1
                      ],
                      "low": "array([-1.], dtype=float32)",
                      "high": "array([1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "render_mode": "None",
                    "renderer": {
                      "no_returns_render": [
                        "human"
                      ],
                      "single_render": [
                        "single_state_pixels",
                        "single_rgb_array",
                        "single_depth_array"
                      ],
                      "mode": "None",
                      "render": {
                        "$type": "functools.partial"
                      },
                      "render_list": [],
                      "$type": "gym.utils.renderer.Renderer"
                    },
                    "_ezpickle_args": [],
                    "_ezpickle_kwargs": {},
                    "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "checked_reset": false,
                  "checked_step": false,
                  "checked_render": false,
                  "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": true,
              "_has_reset": false,
              "_disable_render_order_enforcing": false,
              "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": false,
            "_max_episode_steps": 1000,
            "_elapsed_steps": "None",
            "$type": "gym.wrappers.time_limit.TimeLimit"
          },
          "_max_episode_length": 1000,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array",
            "single_rgb_array",
            "single_depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        {
          "_env": {
            "env": {
              "env": {
                "env": {
                  "env": {
                    "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                    "model": "<mujoco._structs.MjModel object at 0x7f904d64e7b0>",
                    "data": "<mujoco._structs.MjData object at 0x7f904d64e7f0>",
                    "init_qpos": "array([0., 0., 0.])",
                    "init_qvel": "array([0., 0., 0.])",
                    "_viewers": {},
                    "frame_skip": 5,
                    "viewer": "None",
                    "observation_space": {
                      "dtype": "dtype('float64')",
                      "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "_shape": [
                        11
                      ],
                      "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                      "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                      "low_repr": "-inf",
                      "high_repr": "inf",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "action_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True])",
                      "bounded_above": "array([ True])",
                      "_shape": [
                        1
                      ],
                      "low": "array([-1.], dtype=float32)",
                      "high": "array([1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "render_mode": "None",
                    "renderer": {
                      "no_returns_render": [
                        "human"
                      ],
                      "single_render": [
                        "single_state_pixels",
                        "single_rgb_array",
                        "single_depth_array"
                      ],
                      "mode": "None",
                      "render": {
                        "$type": "functools.partial"
                      },
                      "render_list": [],
                      "$type": "gym.utils.renderer.Renderer"
                    },
                    "_ezpickle_args": [],
                    "_ezpickle_kwargs": {},
                    "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "checked_reset": false,
                  "checked_step": false,
                  "checked_render": false,
                  "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": true,
              "_has_reset": false,
              "_disable_render_order_enforcing": false,
              "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": false,
            "_max_episode_steps": 1000,
            "_elapsed_steps": "None",
            "$type": "gym.wrappers.time_limit.TimeLimit"
          },
          "_max_episode_length": 1000,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array",
            "single_rgb_array",
            "single_depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        {
          "_env": {
            "env": {
              "env": {
                "env": {
                  "env": {
                    "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                    "model": "<mujoco._structs.MjModel object at 0x7f904d6f6230>",
                    "data": "<mujoco._structs.MjData object at 0x7f904d6f6270>",
                    "init_qpos": "array([0., 0., 0.])",
                    "init_qvel": "array([0., 0., 0.])",
                    "_viewers": {},
                    "frame_skip": 5,
                    "viewer": "None",
                    "observation_space": {
                      "dtype": "dtype('float64')",
                      "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "_shape": [
                        11
                      ],
                      "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                      "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                      "low_repr": "-inf",
                      "high_repr": "inf",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "action_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True])",
                      "bounded_above": "array([ True])",
                      "_shape": [
                        1
                      ],
                      "low": "array([-1.], dtype=float32)",
                      "high": "array([1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "render_mode": "None",
                    "renderer": {
                      "no_returns_render": [
                        "human"
                      ],
                      "single_render": [
                        "single_state_pixels",
                        "single_rgb_array",
                        "single_depth_array"
                      ],
                      "mode": "None",
                      "render": {
                        "$type": "functools.partial"
                      },
                      "render_list": [],
                      "$type": "gym.utils.renderer.Renderer"
                    },
                    "_ezpickle_args": [],
                    "_ezpickle_kwargs": {},
                    "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "checked_reset": false,
                  "checked_step": false,
                  "checked_render": false,
                  "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": true,
              "_has_reset": false,
              "_disable_render_order_enforcing": false,
              "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": false,
            "_max_episode_steps": 1000,
            "_elapsed_steps": "None",
            "$type": "gym.wrappers.time_limit.TimeLimit"
          },
          "_max_episode_length": 1000,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array",
            "single_rgb_array",
            "single_depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        {
          "_env": {
            "env": {
              "env": {
                "env": {
                  "env": {
                    "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                    "model": "<mujoco._structs.MjModel object at 0x7f904d6f6cb0>",
                    "data": "<mujoco._structs.MjData object at 0x7f904d6f6cf0>",
                    "init_qpos": "array([0., 0., 0.])",
                    "init_qvel": "array([0., 0., 0.])",
                    "_viewers": {},
                    "frame_skip": 5,
                    "viewer": "None",
                    "observation_space": {
                      "dtype": "dtype('float64')",
                      "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "_shape": [
                        11
                      ],
                      "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                      "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                      "low_repr": "-inf",
                      "high_repr": "inf",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "action_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True])",
                      "bounded_above": "array([ True])",
                      "_shape": [
                        1
                      ],
                      "low": "array([-1.], dtype=float32)",
                      "high": "array([1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "render_mode": "None",
                    "renderer": {
                      "no_returns_render": [
                        "human"
                      ],
                      "single_render": [
                        "single_state_pixels",
                        "single_rgb_array",
                        "single_depth_array"
                      ],
                      "mode": "None",
                      "render": {
                        "$type": "functools.partial"
                      },
                      "render_list": [],
                      "$type": "gym.utils.renderer.Renderer"
                    },
                    "_ezpickle_args": [],
                    "_ezpickle_kwargs": {},
                    "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "checked_reset": false,
                  "checked_step": false,
                  "checked_render": false,
                  "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": true,
              "_has_reset": false,
              "_disable_render_order_enforcing": false,
              "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": false,
            "_max_episode_steps": 1000,
            "_elapsed_steps": "None",
            "$type": "gym.wrappers.time_limit.TimeLimit"
          },
          "_max_episode_length": 1000,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array",
            "single_rgb_array",
            "single_depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        {
          "_env": {
            "env": {
              "env": {
                "env": {
                  "env": {
                    "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                    "model": "<mujoco._structs.MjModel object at 0x7f904d6077b0>",
                    "data": "<mujoco._structs.MjData object at 0x7f904d6077f0>",
                    "init_qpos": "array([0., 0., 0.])",
                    "init_qvel": "array([0., 0., 0.])",
                    "_viewers": {},
                    "frame_skip": 5,
                    "viewer": "None",
                    "observation_space": {
                      "dtype": "dtype('float64')",
                      "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "_shape": [
                        11
                      ],
                      "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                      "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                      "low_repr": "-inf",
                      "high_repr": "inf",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "action_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True])",
                      "bounded_above": "array([ True])",
                      "_shape": [
                        1
                      ],
                      "low": "array([-1.], dtype=float32)",
                      "high": "array([1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "render_mode": "None",
                    "renderer": {
                      "no_returns_render": [
                        "human"
                      ],
                      "single_render": [
                        "single_state_pixels",
                        "single_rgb_array",
                        "single_depth_array"
                      ],
                      "mode": "None",
                      "render": {
                        "$type": "functools.partial"
                      },
                      "render_list": [],
                      "$type": "gym.utils.renderer.Renderer"
                    },
                    "_ezpickle_args": [],
                    "_ezpickle_kwargs": {},
                    "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "checked_reset": false,
                  "checked_step": false,
                  "checked_render": false,
                  "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": true,
              "_has_reset": false,
              "_disable_render_order_enforcing": false,
              "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": false,
            "_max_episode_steps": 1000,
            "_elapsed_steps": "None",
            "$type": "gym.wrappers.time_limit.TimeLimit"
          },
          "_max_episode_length": 1000,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array",
            "single_rgb_array",
            "single_depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        {
          "_env": {
            "env": {
              "env": {
                "env": {
                  "env": {
                    "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                    "model": "<mujoco._structs.MjModel object at 0x7f904d5d32b0>",
                    "data": "<mujoco._structs.MjData object at 0x7f904d5d32f0>",
                    "init_qpos": "array([0., 0., 0.])",
                    "init_qvel": "array([0., 0., 0.])",
                    "_viewers": {},
                    "frame_skip": 5,
                    "viewer": "None",
                    "observation_space": {
                      "dtype": "dtype('float64')",
                      "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "_shape": [
                        11
                      ],
                      "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                      "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                      "low_repr": "-inf",
                      "high_repr": "inf",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "action_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True])",
                      "bounded_above": "array([ True])",
                      "_shape": [
                        1
                      ],
                      "low": "array([-1.], dtype=float32)",
                      "high": "array([1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "render_mode": "None",
                    "renderer": {
                      "no_returns_render": [
                        "human"
                      ],
                      "single_render": [
                        "single_state_pixels",
                        "single_rgb_array",
                        "single_depth_array"
                      ],
                      "mode": "None",
                      "render": {
                        "$type": "functools.partial"
                      },
                      "render_list": [],
                      "$type": "gym.utils.renderer.Renderer"
                    },
                    "_ezpickle_args": [],
                    "_ezpickle_kwargs": {},
                    "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "checked_reset": false,
                  "checked_step": false,
                  "checked_render": false,
                  "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": true,
              "_has_reset": false,
              "_disable_render_order_enforcing": false,
              "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": false,
            "_max_episode_steps": 1000,
            "_elapsed_steps": "None",
            "$type": "gym.wrappers.time_limit.TimeLimit"
          },
          "_max_episode_length": 1000,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array",
            "single_rgb_array",
            "single_depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        {
          "_env": {
            "env": {
              "env": {
                "env": {
                  "env": {
                    "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                    "model": "<mujoco._structs.MjModel object at 0x7f904d5d3d70>",
                    "data": "<mujoco._structs.MjData object at 0x7f904d5d3db0>",
                    "init_qpos": "array([0., 0., 0.])",
                    "init_qvel": "array([0., 0., 0.])",
                    "_viewers": {},
                    "frame_skip": 5,
                    "viewer": "None",
                    "observation_space": {
                      "dtype": "dtype('float64')",
                      "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "_shape": [
                        11
                      ],
                      "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                      "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                      "low_repr": "-inf",
                      "high_repr": "inf",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "action_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True])",
                      "bounded_above": "array([ True])",
                      "_shape": [
                        1
                      ],
                      "low": "array([-1.], dtype=float32)",
                      "high": "array([1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "render_mode": "None",
                    "renderer": {
                      "no_returns_render": [
                        "human"
                      ],
                      "single_render": [
                        "single_state_pixels",
                        "single_rgb_array",
                        "single_depth_array"
                      ],
                      "mode": "None",
                      "render": {
                        "$type": "functools.partial"
                      },
                      "render_list": [],
                      "$type": "gym.utils.renderer.Renderer"
                    },
                    "_ezpickle_args": [],
                    "_ezpickle_kwargs": {},
                    "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "checked_reset": false,
                  "checked_step": false,
                  "checked_render": false,
                  "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": true,
              "_has_reset": false,
              "_disable_render_order_enforcing": false,
              "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": false,
            "_max_episode_steps": 1000,
            "_elapsed_steps": "None",
            "$type": "gym.wrappers.time_limit.TimeLimit"
          },
          "_max_episode_length": 1000,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array",
            "single_rgb_array",
            "single_depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        {
          "_env": {
            "env": {
              "env": {
                "env": {
                  "env": {
                    "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                    "model": "<mujoco._structs.MjModel object at 0x7f904d5a1870>",
                    "data": "<mujoco._structs.MjData object at 0x7f904d5a18b0>",
                    "init_qpos": "array([0., 0., 0.])",
                    "init_qvel": "array([0., 0., 0.])",
                    "_viewers": {},
                    "frame_skip": 5,
                    "viewer": "None",
                    "observation_space": {
                      "dtype": "dtype('float64')",
                      "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "_shape": [
                        11
                      ],
                      "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                      "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                      "low_repr": "-inf",
                      "high_repr": "inf",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "action_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True])",
                      "bounded_above": "array([ True])",
                      "_shape": [
                        1
                      ],
                      "low": "array([-1.], dtype=float32)",
                      "high": "array([1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "render_mode": "None",
                    "renderer": {
                      "no_returns_render": [
                        "human"
                      ],
                      "single_render": [
                        "single_state_pixels",
                        "single_rgb_array",
                        "single_depth_array"
                      ],
                      "mode": "None",
                      "render": {
                        "$type": "functools.partial"
                      },
                      "render_list": [],
                      "$type": "gym.utils.renderer.Renderer"
                    },
                    "_ezpickle_args": [],
                    "_ezpickle_kwargs": {},
                    "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "checked_reset": false,
                  "checked_step": false,
                  "checked_render": false,
                  "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": true,
              "_has_reset": false,
              "_disable_render_order_enforcing": false,
              "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": false,
            "_max_episode_steps": 1000,
            "_elapsed_steps": "None",
            "$type": "gym.wrappers.time_limit.TimeLimit"
          },
          "_max_episode_length": 1000,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array",
            "single_rgb_array",
            "single_depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        {
          "_env": {
            "env": {
              "env": {
                "env": {
                  "env": {
                    "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                    "model": "<mujoco._structs.MjModel object at 0x7f904d557370>",
                    "data": "<mujoco._structs.MjData object at 0x7f904d5573b0>",
                    "init_qpos": "array([0., 0., 0.])",
                    "init_qvel": "array([0., 0., 0.])",
                    "_viewers": {},
                    "frame_skip": 5,
                    "viewer": "None",
                    "observation_space": {
                      "dtype": "dtype('float64')",
                      "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "_shape": [
                        11
                      ],
                      "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                      "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                      "low_repr": "-inf",
                      "high_repr": "inf",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "action_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True])",
                      "bounded_above": "array([ True])",
                      "_shape": [
                        1
                      ],
                      "low": "array([-1.], dtype=float32)",
                      "high": "array([1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "render_mode": "None",
                    "renderer": {
                      "no_returns_render": [
                        "human"
                      ],
                      "single_render": [
                        "single_state_pixels",
                        "single_rgb_array",
                        "single_depth_array"
                      ],
                      "mode": "None",
                      "render": {
                        "$type": "functools.partial"
                      },
                      "render_list": [],
                      "$type": "gym.utils.renderer.Renderer"
                    },
                    "_ezpickle_args": [],
                    "_ezpickle_kwargs": {},
                    "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "checked_reset": false,
                  "checked_step": false,
                  "checked_render": false,
                  "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": true,
              "_has_reset": false,
              "_disable_render_order_enforcing": false,
              "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": false,
            "_max_episode_steps": 1000,
            "_elapsed_steps": "None",
            "$type": "gym.wrappers.time_limit.TimeLimit"
          },
          "_max_episode_length": 1000,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array",
            "single_rgb_array",
            "single_depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        {
          "_env": {
            "env": {
              "env": {
                "env": {
                  "env": {
                    "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                    "model": "<mujoco._structs.MjModel object at 0x7f904d5a1b30>",
                    "data": "<mujoco._structs.MjData object at 0x7f904d5a1eb0>",
                    "init_qpos": "array([0., 0., 0.])",
                    "init_qvel": "array([0., 0., 0.])",
                    "_viewers": {},
                    "frame_skip": 5,
                    "viewer": "None",
                    "observation_space": {
                      "dtype": "dtype('float64')",
                      "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "_shape": [
                        11
                      ],
                      "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                      "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                      "low_repr": "-inf",
                      "high_repr": "inf",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "action_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True])",
                      "bounded_above": "array([ True])",
                      "_shape": [
                        1
                      ],
                      "low": "array([-1.], dtype=float32)",
                      "high": "array([1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "render_mode": "None",
                    "renderer": {
                      "no_returns_render": [
                        "human"
                      ],
                      "single_render": [
                        "single_state_pixels",
                        "single_rgb_array",
                        "single_depth_array"
                      ],
                      "mode": "None",
                      "render": {
                        "$type": "functools.partial"
                      },
                      "render_list": [],
                      "$type": "gym.utils.renderer.Renderer"
                    },
                    "_ezpickle_args": [],
                    "_ezpickle_kwargs": {},
                    "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "checked_reset": false,
                  "checked_step": false,
                  "checked_render": false,
                  "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": true,
              "_has_reset": false,
              "_disable_render_order_enforcing": false,
              "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": false,
            "_max_episode_steps": 1000,
            "_elapsed_steps": "None",
            "$type": "gym.wrappers.time_limit.TimeLimit"
          },
          "_max_episode_length": 1000,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array",
            "single_rgb_array",
            "single_depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        {
          "_env": {
            "env": {
              "env": {
                "env": {
                  "env": {
                    "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                    "model": "<mujoco._structs.MjModel object at 0x7f904d607330>",
                    "data": "<mujoco._structs.MjData object at 0x7f904d6074f0>",
                    "init_qpos": "array([0., 0., 0.])",
                    "init_qvel": "array([0., 0., 0.])",
                    "_viewers": {},
                    "frame_skip": 5,
                    "viewer": "None",
                    "observation_space": {
                      "dtype": "dtype('float64')",
                      "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "_shape": [
                        11
                      ],
                      "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                      "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                      "low_repr": "-inf",
                      "high_repr": "inf",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "action_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True])",
                      "bounded_above": "array([ True])",
                      "_shape": [
                        1
                      ],
                      "low": "array([-1.], dtype=float32)",
                      "high": "array([1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "render_mode": "None",
                    "renderer": {
                      "no_returns_render": [
                        "human"
                      ],
                      "single_render": [
                        "single_state_pixels",
                        "single_rgb_array",
                        "single_depth_array"
                      ],
                      "mode": "None",
                      "render": {
                        "$type": "functools.partial"
                      },
                      "render_list": [],
                      "$type": "gym.utils.renderer.Renderer"
                    },
                    "_ezpickle_args": [],
                    "_ezpickle_kwargs": {},
                    "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "checked_reset": false,
                  "checked_step": false,
                  "checked_render": false,
                  "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": true,
              "_has_reset": false,
              "_disable_render_order_enforcing": false,
              "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": false,
            "_max_episode_steps": 1000,
            "_elapsed_steps": "None",
            "$type": "gym.wrappers.time_limit.TimeLimit"
          },
          "_max_episode_length": 1000,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array",
            "single_rgb_array",
            "single_depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        {
          "_env": {
            "env": {
              "env": {
                "env": {
                  "env": {
                    "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                    "model": "<mujoco._structs.MjModel object at 0x7f904d64e4b0>",
                    "data": "<mujoco._structs.MjData object at 0x7f904d64e470>",
                    "init_qpos": "array([0., 0., 0.])",
                    "init_qvel": "array([0., 0., 0.])",
                    "_viewers": {},
                    "frame_skip": 5,
                    "viewer": "None",
                    "observation_space": {
                      "dtype": "dtype('float64')",
                      "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "_shape": [
                        11
                      ],
                      "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                      "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                      "low_repr": "-inf",
                      "high_repr": "inf",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "action_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True])",
                      "bounded_above": "array([ True])",
                      "_shape": [
                        1
                      ],
                      "low": "array([-1.], dtype=float32)",
                      "high": "array([1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "render_mode": "None",
                    "renderer": {
                      "no_returns_render": [
                        "human"
                      ],
                      "single_render": [
                        "single_state_pixels",
                        "single_rgb_array",
                        "single_depth_array"
                      ],
                      "mode": "None",
                      "render": {
                        "$type": "functools.partial"
                      },
                      "render_list": [],
                      "$type": "gym.utils.renderer.Renderer"
                    },
                    "_ezpickle_args": [],
                    "_ezpickle_kwargs": {},
                    "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "checked_reset": false,
                  "checked_step": false,
                  "checked_render": false,
                  "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": true,
              "_has_reset": false,
              "_disable_render_order_enforcing": false,
              "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": false,
            "_max_episode_steps": 1000,
            "_elapsed_steps": "None",
            "$type": "gym.wrappers.time_limit.TimeLimit"
          },
          "_max_episode_length": 1000,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array",
            "single_rgb_array",
            "single_depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        {
          "_env": {
            "env": {
              "env": {
                "env": {
                  "env": {
                    "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                    "model": "<mujoco._structs.MjModel object at 0x7f904d557ab0>",
                    "data": "<mujoco._structs.MjData object at 0x7f904d557c70>",
                    "init_qpos": "array([0., 0., 0.])",
                    "init_qvel": "array([0., 0., 0.])",
                    "_viewers": {},
                    "frame_skip": 5,
                    "viewer": "None",
                    "observation_space": {
                      "dtype": "dtype('float64')",
                      "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "_shape": [
                        11
                      ],
                      "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                      "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                      "low_repr": "-inf",
                      "high_repr": "inf",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "action_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True])",
                      "bounded_above": "array([ True])",
                      "_shape": [
                        1
                      ],
                      "low": "array([-1.], dtype=float32)",
                      "high": "array([1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "render_mode": "None",
                    "renderer": {
                      "no_returns_render": [
                        "human"
                      ],
                      "single_render": [
                        "single_state_pixels",
                        "single_rgb_array",
                        "single_depth_array"
                      ],
                      "mode": "None",
                      "render": {
                        "$type": "functools.partial"
                      },
                      "render_list": [],
                      "$type": "gym.utils.renderer.Renderer"
                    },
                    "_ezpickle_args": [],
                    "_ezpickle_kwargs": {},
                    "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "checked_reset": false,
                  "checked_step": false,
                  "checked_render": false,
                  "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": true,
              "_has_reset": false,
              "_disable_render_order_enforcing": false,
              "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": false,
            "_max_episode_steps": 1000,
            "_elapsed_steps": "None",
            "$type": "gym.wrappers.time_limit.TimeLimit"
          },
          "_max_episode_length": 1000,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array",
            "single_rgb_array",
            "single_depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        {
          "_env": {
            "env": {
              "env": {
                "env": {
                  "env": {
                    "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                    "model": "<mujoco._structs.MjModel object at 0x7f904d6183b0>",
                    "data": "<mujoco._structs.MjData object at 0x7f904d6183f0>",
                    "init_qpos": "array([0., 0., 0.])",
                    "init_qvel": "array([0., 0., 0.])",
                    "_viewers": {},
                    "frame_skip": 5,
                    "viewer": "None",
                    "observation_space": {
                      "dtype": "dtype('float64')",
                      "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "_shape": [
                        11
                      ],
                      "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                      "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                      "low_repr": "-inf",
                      "high_repr": "inf",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "action_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True])",
                      "bounded_above": "array([ True])",
                      "_shape": [
                        1
                      ],
                      "low": "array([-1.], dtype=float32)",
                      "high": "array([1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "render_mode": "None",
                    "renderer": {
                      "no_returns_render": [
                        "human"
                      ],
                      "single_render": [
                        "single_state_pixels",
                        "single_rgb_array",
                        "single_depth_array"
                      ],
                      "mode": "None",
                      "render": {
                        "$type": "functools.partial"
                      },
                      "render_list": [],
                      "$type": "gym.utils.renderer.Renderer"
                    },
                    "_ezpickle_args": [],
                    "_ezpickle_kwargs": {},
                    "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "checked_reset": false,
                  "checked_step": false,
                  "checked_render": false,
                  "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": true,
              "_has_reset": false,
              "_disable_render_order_enforcing": false,
              "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": false,
            "_max_episode_steps": 1000,
            "_elapsed_steps": "None",
            "$type": "gym.wrappers.time_limit.TimeLimit"
          },
          "_max_episode_length": 1000,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array",
            "single_rgb_array",
            "single_depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        }
      ],
      "_workers": [
        {
          "_seed": "None",
          "_max_episode_length": 200,
          "_worker_number": 0,
          "agent": {
            "_obs_dim": 11.0,
            "_action_dim": 1.0,
            "training": true,
            "_parameters": {
              "_init_std": {
                "$type": "torch.nn.parameter.Parameter"
              }
            },
            "_buffers": {
              "min_std_param": {
                "$type": "torch.Tensor"
              }
            },
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_mean_module": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 11.0,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      },
                      "1": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  },
                  "_output_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 1.0,
                            "$type": "torch.nn.modules.linear.Linear"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  }
                },
                "_output_dim": 1.0,
                "$type": "garage.torch.modules.mlp_module.MLPModule"
              }
            },
            "_input_dim": 11.0,
            "_hidden_sizes": [
              32,
              32
            ],
            "_learn_std": true,
            "_std_hidden_sizes": [
              32,
              32
            ],
            "_min_std": 1e-06,
            "_max_std": "None",
            "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
            "_std_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_std_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_std_output_nonlinearity": "None",
            "_std_output_w_init": {
              "$type": "builtins.function"
            },
            "_std_parameterization": "exp",
            "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
            "_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_output_nonlinearity": "None",
            "_output_w_init": {
              "$type": "builtins.function"
            },
            "_output_b_init": {
              "$type": "builtins.function"
            },
            "_layer_normalization": false,
            "_norm_dist_class": {
              "$typename": "torch.distributions.normal.Normal"
            },
            "_min_std_param": {
              "$type": "torch.Tensor"
            },
            "_max_std_param": "None",
            "_env_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_name": "GaussianMLPPolicy",
            "$type": "Policy.GaussianMLPPolicy.GaussianMLPPolicy"
          },
          "env": {
            "_env": {
              "env": {
                "env": {
                  "env": {
                    "env": {
                      "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                      "model": "<mujoco._structs.MjModel object at 0x7f904e734470>",
                      "data": "<mujoco._structs.MjData object at 0x7f904e148670>",
                      "init_qpos": "array([0., 0., 0.])",
                      "init_qvel": "array([0., 0., 0.])",
                      "_viewers": {},
                      "frame_skip": 5,
                      "viewer": "None",
                      "observation_space": {
                        "dtype": "dtype('float64')",
                        "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "_shape": [
                          11
                        ],
                        "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                        "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                        "low_repr": "-inf",
                        "high_repr": "inf",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "action_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True])",
                        "bounded_above": "array([ True])",
                        "_shape": [
                          1
                        ],
                        "low": "array([-1.], dtype=float32)",
                        "high": "array([1.], dtype=float32)",
                        "low_repr": "-1.0",
                        "high_repr": "1.0",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "render_mode": "None",
                      "renderer": {
                        "no_returns_render": [
                          "human"
                        ],
                        "single_render": [
                          "single_state_pixels",
                          "single_rgb_array",
                          "single_depth_array"
                        ],
                        "mode": "None",
                        "render": {
                          "$type": "functools.partial"
                        },
                        "render_list": [],
                        "$type": "gym.utils.renderer.Renderer"
                      },
                      "_ezpickle_args": [],
                      "_ezpickle_kwargs": {},
                      "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                    },
                    "_action_space": "None",
                    "_observation_space": "None",
                    "_reward_range": "None",
                    "_metadata": "None",
                    "new_step_api": true,
                    "checked_reset": false,
                    "checked_step": false,
                    "checked_render": false,
                    "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": false,
                  "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "_has_reset": false,
                "_disable_render_order_enforcing": false,
                "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "_max_episode_steps": 1000,
              "_elapsed_steps": "None",
              "$type": "gym.wrappers.time_limit.TimeLimit"
            },
            "_max_episode_length": 1000,
            "_render_modes": [
              "human",
              "rgb_array",
              "depth_array",
              "single_rgb_array",
              "single_depth_array"
            ],
            "_step_cnt": "None",
            "_visualize": false,
            "_action_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_env_info": "None",
            "$type": "garage.envs.gym_env.GymEnv"
          },
          "_env_steps": [],
          "_observations": [],
          "_last_observations": [],
          "_agent_infos": {},
          "_lengths": [],
          "_prev_obs": "None",
          "_eps_length": 0,
          "_episode_infos": {},
          "$type": "garage.sampler.default_worker.DefaultWorker"
        },
        {
          "_seed": "None",
          "_max_episode_length": 200,
          "_worker_number": 1,
          "agent": {
            "_obs_dim": 11.0,
            "_action_dim": 1.0,
            "training": true,
            "_parameters": {
              "_init_std": {
                "$type": "torch.nn.parameter.Parameter"
              }
            },
            "_buffers": {
              "min_std_param": {
                "$type": "torch.Tensor"
              }
            },
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_mean_module": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 11.0,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      },
                      "1": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  },
                  "_output_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 1.0,
                            "$type": "torch.nn.modules.linear.Linear"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  }
                },
                "_output_dim": 1.0,
                "$type": "garage.torch.modules.mlp_module.MLPModule"
              }
            },
            "_input_dim": 11.0,
            "_hidden_sizes": [
              32,
              32
            ],
            "_learn_std": true,
            "_std_hidden_sizes": [
              32,
              32
            ],
            "_min_std": 1e-06,
            "_max_std": "None",
            "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
            "_std_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_std_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_std_output_nonlinearity": "None",
            "_std_output_w_init": {
              "$type": "builtins.function"
            },
            "_std_parameterization": "exp",
            "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
            "_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_output_nonlinearity": "None",
            "_output_w_init": {
              "$type": "builtins.function"
            },
            "_output_b_init": {
              "$type": "builtins.function"
            },
            "_layer_normalization": false,
            "_norm_dist_class": {
              "$typename": "torch.distributions.normal.Normal"
            },
            "_min_std_param": {
              "$type": "torch.Tensor"
            },
            "_max_std_param": "None",
            "_env_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_name": "GaussianMLPPolicy",
            "$type": "Policy.GaussianMLPPolicy.GaussianMLPPolicy"
          },
          "env": {
            "_env": {
              "env": {
                "env": {
                  "env": {
                    "env": {
                      "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                      "model": "<mujoco._structs.MjModel object at 0x7f904e72eb30>",
                      "data": "<mujoco._structs.MjData object at 0x7f904e17fd70>",
                      "init_qpos": "array([0., 0., 0.])",
                      "init_qvel": "array([0., 0., 0.])",
                      "_viewers": {},
                      "frame_skip": 5,
                      "viewer": "None",
                      "observation_space": {
                        "dtype": "dtype('float64')",
                        "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "_shape": [
                          11
                        ],
                        "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                        "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                        "low_repr": "-inf",
                        "high_repr": "inf",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "action_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True])",
                        "bounded_above": "array([ True])",
                        "_shape": [
                          1
                        ],
                        "low": "array([-1.], dtype=float32)",
                        "high": "array([1.], dtype=float32)",
                        "low_repr": "-1.0",
                        "high_repr": "1.0",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "render_mode": "None",
                      "renderer": {
                        "no_returns_render": [
                          "human"
                        ],
                        "single_render": [
                          "single_state_pixels",
                          "single_rgb_array",
                          "single_depth_array"
                        ],
                        "mode": "None",
                        "render": {
                          "$type": "functools.partial"
                        },
                        "render_list": [],
                        "$type": "gym.utils.renderer.Renderer"
                      },
                      "_ezpickle_args": [],
                      "_ezpickle_kwargs": {},
                      "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                    },
                    "_action_space": "None",
                    "_observation_space": "None",
                    "_reward_range": "None",
                    "_metadata": "None",
                    "new_step_api": true,
                    "checked_reset": false,
                    "checked_step": false,
                    "checked_render": false,
                    "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": false,
                  "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "_has_reset": false,
                "_disable_render_order_enforcing": false,
                "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "_max_episode_steps": 1000,
              "_elapsed_steps": "None",
              "$type": "gym.wrappers.time_limit.TimeLimit"
            },
            "_max_episode_length": 1000,
            "_render_modes": [
              "human",
              "rgb_array",
              "depth_array",
              "single_rgb_array",
              "single_depth_array"
            ],
            "_step_cnt": "None",
            "_visualize": false,
            "_action_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_env_info": "None",
            "$type": "garage.envs.gym_env.GymEnv"
          },
          "_env_steps": [],
          "_observations": [],
          "_last_observations": [],
          "_agent_infos": {},
          "_lengths": [],
          "_prev_obs": "None",
          "_eps_length": 0,
          "_episode_infos": {},
          "$type": "garage.sampler.default_worker.DefaultWorker"
        },
        {
          "_seed": "None",
          "_max_episode_length": 200,
          "_worker_number": 2,
          "agent": {
            "_obs_dim": 11.0,
            "_action_dim": 1.0,
            "training": true,
            "_parameters": {
              "_init_std": {
                "$type": "torch.nn.parameter.Parameter"
              }
            },
            "_buffers": {
              "min_std_param": {
                "$type": "torch.Tensor"
              }
            },
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_mean_module": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 11.0,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      },
                      "1": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  },
                  "_output_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 1.0,
                            "$type": "torch.nn.modules.linear.Linear"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  }
                },
                "_output_dim": 1.0,
                "$type": "garage.torch.modules.mlp_module.MLPModule"
              }
            },
            "_input_dim": 11.0,
            "_hidden_sizes": [
              32,
              32
            ],
            "_learn_std": true,
            "_std_hidden_sizes": [
              32,
              32
            ],
            "_min_std": 1e-06,
            "_max_std": "None",
            "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
            "_std_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_std_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_std_output_nonlinearity": "None",
            "_std_output_w_init": {
              "$type": "builtins.function"
            },
            "_std_parameterization": "exp",
            "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
            "_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_output_nonlinearity": "None",
            "_output_w_init": {
              "$type": "builtins.function"
            },
            "_output_b_init": {
              "$type": "builtins.function"
            },
            "_layer_normalization": false,
            "_norm_dist_class": {
              "$typename": "torch.distributions.normal.Normal"
            },
            "_min_std_param": {
              "$type": "torch.Tensor"
            },
            "_max_std_param": "None",
            "_env_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_name": "GaussianMLPPolicy",
            "$type": "Policy.GaussianMLPPolicy.GaussianMLPPolicy"
          },
          "env": {
            "_env": {
              "env": {
                "env": {
                  "env": {
                    "env": {
                      "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                      "model": "<mujoco._structs.MjModel object at 0x7f904e730e70>",
                      "data": "<mujoco._structs.MjData object at 0x7f904e730330>",
                      "init_qpos": "array([0., 0., 0.])",
                      "init_qvel": "array([0., 0., 0.])",
                      "_viewers": {},
                      "frame_skip": 5,
                      "viewer": "None",
                      "observation_space": {
                        "dtype": "dtype('float64')",
                        "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "_shape": [
                          11
                        ],
                        "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                        "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                        "low_repr": "-inf",
                        "high_repr": "inf",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "action_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True])",
                        "bounded_above": "array([ True])",
                        "_shape": [
                          1
                        ],
                        "low": "array([-1.], dtype=float32)",
                        "high": "array([1.], dtype=float32)",
                        "low_repr": "-1.0",
                        "high_repr": "1.0",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "render_mode": "None",
                      "renderer": {
                        "no_returns_render": [
                          "human"
                        ],
                        "single_render": [
                          "single_state_pixels",
                          "single_rgb_array",
                          "single_depth_array"
                        ],
                        "mode": "None",
                        "render": {
                          "$type": "functools.partial"
                        },
                        "render_list": [],
                        "$type": "gym.utils.renderer.Renderer"
                      },
                      "_ezpickle_args": [],
                      "_ezpickle_kwargs": {},
                      "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                    },
                    "_action_space": "None",
                    "_observation_space": "None",
                    "_reward_range": "None",
                    "_metadata": "None",
                    "new_step_api": true,
                    "checked_reset": false,
                    "checked_step": false,
                    "checked_render": false,
                    "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": false,
                  "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "_has_reset": false,
                "_disable_render_order_enforcing": false,
                "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "_max_episode_steps": 1000,
              "_elapsed_steps": "None",
              "$type": "gym.wrappers.time_limit.TimeLimit"
            },
            "_max_episode_length": 1000,
            "_render_modes": [
              "human",
              "rgb_array",
              "depth_array",
              "single_rgb_array",
              "single_depth_array"
            ],
            "_step_cnt": "None",
            "_visualize": false,
            "_action_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_env_info": "None",
            "$type": "garage.envs.gym_env.GymEnv"
          },
          "_env_steps": [],
          "_observations": [],
          "_last_observations": [],
          "_agent_infos": {},
          "_lengths": [],
          "_prev_obs": "None",
          "_eps_length": 0,
          "_episode_infos": {},
          "$type": "garage.sampler.default_worker.DefaultWorker"
        },
        {
          "_seed": "None",
          "_max_episode_length": 200,
          "_worker_number": 3,
          "agent": {
            "_obs_dim": 11.0,
            "_action_dim": 1.0,
            "training": true,
            "_parameters": {
              "_init_std": {
                "$type": "torch.nn.parameter.Parameter"
              }
            },
            "_buffers": {
              "min_std_param": {
                "$type": "torch.Tensor"
              }
            },
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_mean_module": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 11.0,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      },
                      "1": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  },
                  "_output_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 1.0,
                            "$type": "torch.nn.modules.linear.Linear"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  }
                },
                "_output_dim": 1.0,
                "$type": "garage.torch.modules.mlp_module.MLPModule"
              }
            },
            "_input_dim": 11.0,
            "_hidden_sizes": [
              32,
              32
            ],
            "_learn_std": true,
            "_std_hidden_sizes": [
              32,
              32
            ],
            "_min_std": 1e-06,
            "_max_std": "None",
            "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
            "_std_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_std_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_std_output_nonlinearity": "None",
            "_std_output_w_init": {
              "$type": "builtins.function"
            },
            "_std_parameterization": "exp",
            "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
            "_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_output_nonlinearity": "None",
            "_output_w_init": {
              "$type": "builtins.function"
            },
            "_output_b_init": {
              "$type": "builtins.function"
            },
            "_layer_normalization": false,
            "_norm_dist_class": {
              "$typename": "torch.distributions.normal.Normal"
            },
            "_min_std_param": {
              "$type": "torch.Tensor"
            },
            "_max_std_param": "None",
            "_env_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_name": "GaussianMLPPolicy",
            "$type": "Policy.GaussianMLPPolicy.GaussianMLPPolicy"
          },
          "env": {
            "_env": {
              "env": {
                "env": {
                  "env": {
                    "env": {
                      "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                      "model": "<mujoco._structs.MjModel object at 0x7f904d8e9cb0>",
                      "data": "<mujoco._structs.MjData object at 0x7f904d8e9cf0>",
                      "init_qpos": "array([0., 0., 0.])",
                      "init_qvel": "array([0., 0., 0.])",
                      "_viewers": {},
                      "frame_skip": 5,
                      "viewer": "None",
                      "observation_space": {
                        "dtype": "dtype('float64')",
                        "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "_shape": [
                          11
                        ],
                        "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                        "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                        "low_repr": "-inf",
                        "high_repr": "inf",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "action_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True])",
                        "bounded_above": "array([ True])",
                        "_shape": [
                          1
                        ],
                        "low": "array([-1.], dtype=float32)",
                        "high": "array([1.], dtype=float32)",
                        "low_repr": "-1.0",
                        "high_repr": "1.0",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "render_mode": "None",
                      "renderer": {
                        "no_returns_render": [
                          "human"
                        ],
                        "single_render": [
                          "single_state_pixels",
                          "single_rgb_array",
                          "single_depth_array"
                        ],
                        "mode": "None",
                        "render": {
                          "$type": "functools.partial"
                        },
                        "render_list": [],
                        "$type": "gym.utils.renderer.Renderer"
                      },
                      "_ezpickle_args": [],
                      "_ezpickle_kwargs": {},
                      "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                    },
                    "_action_space": "None",
                    "_observation_space": "None",
                    "_reward_range": "None",
                    "_metadata": "None",
                    "new_step_api": true,
                    "checked_reset": false,
                    "checked_step": false,
                    "checked_render": false,
                    "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": false,
                  "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "_has_reset": false,
                "_disable_render_order_enforcing": false,
                "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "_max_episode_steps": 1000,
              "_elapsed_steps": "None",
              "$type": "gym.wrappers.time_limit.TimeLimit"
            },
            "_max_episode_length": 1000,
            "_render_modes": [
              "human",
              "rgb_array",
              "depth_array",
              "single_rgb_array",
              "single_depth_array"
            ],
            "_step_cnt": "None",
            "_visualize": false,
            "_action_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_env_info": "None",
            "$type": "garage.envs.gym_env.GymEnv"
          },
          "_env_steps": [],
          "_observations": [],
          "_last_observations": [],
          "_agent_infos": {},
          "_lengths": [],
          "_prev_obs": "None",
          "_eps_length": 0,
          "_episode_infos": {},
          "$type": "garage.sampler.default_worker.DefaultWorker"
        },
        {
          "_seed": "None",
          "_max_episode_length": 200,
          "_worker_number": 4,
          "agent": {
            "_obs_dim": 11.0,
            "_action_dim": 1.0,
            "training": true,
            "_parameters": {
              "_init_std": {
                "$type": "torch.nn.parameter.Parameter"
              }
            },
            "_buffers": {
              "min_std_param": {
                "$type": "torch.Tensor"
              }
            },
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_mean_module": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 11.0,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      },
                      "1": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  },
                  "_output_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 1.0,
                            "$type": "torch.nn.modules.linear.Linear"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  }
                },
                "_output_dim": 1.0,
                "$type": "garage.torch.modules.mlp_module.MLPModule"
              }
            },
            "_input_dim": 11.0,
            "_hidden_sizes": [
              32,
              32
            ],
            "_learn_std": true,
            "_std_hidden_sizes": [
              32,
              32
            ],
            "_min_std": 1e-06,
            "_max_std": "None",
            "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
            "_std_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_std_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_std_output_nonlinearity": "None",
            "_std_output_w_init": {
              "$type": "builtins.function"
            },
            "_std_parameterization": "exp",
            "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
            "_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_output_nonlinearity": "None",
            "_output_w_init": {
              "$type": "builtins.function"
            },
            "_output_b_init": {
              "$type": "builtins.function"
            },
            "_layer_normalization": false,
            "_norm_dist_class": {
              "$typename": "torch.distributions.normal.Normal"
            },
            "_min_std_param": {
              "$type": "torch.Tensor"
            },
            "_max_std_param": "None",
            "_env_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_name": "GaussianMLPPolicy",
            "$type": "Policy.GaussianMLPPolicy.GaussianMLPPolicy"
          },
          "env": {
            "_env": {
              "env": {
                "env": {
                  "env": {
                    "env": {
                      "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                      "model": "<mujoco._structs.MjModel object at 0x7f904d7cc730>",
                      "data": "<mujoco._structs.MjData object at 0x7f904d7cc770>",
                      "init_qpos": "array([0., 0., 0.])",
                      "init_qvel": "array([0., 0., 0.])",
                      "_viewers": {},
                      "frame_skip": 5,
                      "viewer": "None",
                      "observation_space": {
                        "dtype": "dtype('float64')",
                        "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "_shape": [
                          11
                        ],
                        "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                        "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                        "low_repr": "-inf",
                        "high_repr": "inf",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "action_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True])",
                        "bounded_above": "array([ True])",
                        "_shape": [
                          1
                        ],
                        "low": "array([-1.], dtype=float32)",
                        "high": "array([1.], dtype=float32)",
                        "low_repr": "-1.0",
                        "high_repr": "1.0",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "render_mode": "None",
                      "renderer": {
                        "no_returns_render": [
                          "human"
                        ],
                        "single_render": [
                          "single_state_pixels",
                          "single_rgb_array",
                          "single_depth_array"
                        ],
                        "mode": "None",
                        "render": {
                          "$type": "functools.partial"
                        },
                        "render_list": [],
                        "$type": "gym.utils.renderer.Renderer"
                      },
                      "_ezpickle_args": [],
                      "_ezpickle_kwargs": {},
                      "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                    },
                    "_action_space": "None",
                    "_observation_space": "None",
                    "_reward_range": "None",
                    "_metadata": "None",
                    "new_step_api": true,
                    "checked_reset": false,
                    "checked_step": false,
                    "checked_render": false,
                    "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": false,
                  "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "_has_reset": false,
                "_disable_render_order_enforcing": false,
                "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "_max_episode_steps": 1000,
              "_elapsed_steps": "None",
              "$type": "gym.wrappers.time_limit.TimeLimit"
            },
            "_max_episode_length": 1000,
            "_render_modes": [
              "human",
              "rgb_array",
              "depth_array",
              "single_rgb_array",
              "single_depth_array"
            ],
            "_step_cnt": "None",
            "_visualize": false,
            "_action_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_env_info": "None",
            "$type": "garage.envs.gym_env.GymEnv"
          },
          "_env_steps": [],
          "_observations": [],
          "_last_observations": [],
          "_agent_infos": {},
          "_lengths": [],
          "_prev_obs": "None",
          "_eps_length": 0,
          "_episode_infos": {},
          "$type": "garage.sampler.default_worker.DefaultWorker"
        },
        {
          "_seed": "None",
          "_max_episode_length": 200,
          "_worker_number": 5,
          "agent": {
            "_obs_dim": 11.0,
            "_action_dim": 1.0,
            "training": true,
            "_parameters": {
              "_init_std": {
                "$type": "torch.nn.parameter.Parameter"
              }
            },
            "_buffers": {
              "min_std_param": {
                "$type": "torch.Tensor"
              }
            },
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_mean_module": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 11.0,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      },
                      "1": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  },
                  "_output_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 1.0,
                            "$type": "torch.nn.modules.linear.Linear"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  }
                },
                "_output_dim": 1.0,
                "$type": "garage.torch.modules.mlp_module.MLPModule"
              }
            },
            "_input_dim": 11.0,
            "_hidden_sizes": [
              32,
              32
            ],
            "_learn_std": true,
            "_std_hidden_sizes": [
              32,
              32
            ],
            "_min_std": 1e-06,
            "_max_std": "None",
            "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
            "_std_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_std_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_std_output_nonlinearity": "None",
            "_std_output_w_init": {
              "$type": "builtins.function"
            },
            "_std_parameterization": "exp",
            "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
            "_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_output_nonlinearity": "None",
            "_output_w_init": {
              "$type": "builtins.function"
            },
            "_output_b_init": {
              "$type": "builtins.function"
            },
            "_layer_normalization": false,
            "_norm_dist_class": {
              "$typename": "torch.distributions.normal.Normal"
            },
            "_min_std_param": {
              "$type": "torch.Tensor"
            },
            "_max_std_param": "None",
            "_env_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_name": "GaussianMLPPolicy",
            "$type": "Policy.GaussianMLPPolicy.GaussianMLPPolicy"
          },
          "env": {
            "_env": {
              "env": {
                "env": {
                  "env": {
                    "env": {
                      "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                      "model": "<mujoco._structs.MjModel object at 0x7f904d7981f0>",
                      "data": "<mujoco._structs.MjData object at 0x7f904d798230>",
                      "init_qpos": "array([0., 0., 0.])",
                      "init_qvel": "array([0., 0., 0.])",
                      "_viewers": {},
                      "frame_skip": 5,
                      "viewer": "None",
                      "observation_space": {
                        "dtype": "dtype('float64')",
                        "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "_shape": [
                          11
                        ],
                        "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                        "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                        "low_repr": "-inf",
                        "high_repr": "inf",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "action_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True])",
                        "bounded_above": "array([ True])",
                        "_shape": [
                          1
                        ],
                        "low": "array([-1.], dtype=float32)",
                        "high": "array([1.], dtype=float32)",
                        "low_repr": "-1.0",
                        "high_repr": "1.0",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "render_mode": "None",
                      "renderer": {
                        "no_returns_render": [
                          "human"
                        ],
                        "single_render": [
                          "single_state_pixels",
                          "single_rgb_array",
                          "single_depth_array"
                        ],
                        "mode": "None",
                        "render": {
                          "$type": "functools.partial"
                        },
                        "render_list": [],
                        "$type": "gym.utils.renderer.Renderer"
                      },
                      "_ezpickle_args": [],
                      "_ezpickle_kwargs": {},
                      "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                    },
                    "_action_space": "None",
                    "_observation_space": "None",
                    "_reward_range": "None",
                    "_metadata": "None",
                    "new_step_api": true,
                    "checked_reset": false,
                    "checked_step": false,
                    "checked_render": false,
                    "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": false,
                  "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "_has_reset": false,
                "_disable_render_order_enforcing": false,
                "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "_max_episode_steps": 1000,
              "_elapsed_steps": "None",
              "$type": "gym.wrappers.time_limit.TimeLimit"
            },
            "_max_episode_length": 1000,
            "_render_modes": [
              "human",
              "rgb_array",
              "depth_array",
              "single_rgb_array",
              "single_depth_array"
            ],
            "_step_cnt": "None",
            "_visualize": false,
            "_action_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_env_info": "None",
            "$type": "garage.envs.gym_env.GymEnv"
          },
          "_env_steps": [],
          "_observations": [],
          "_last_observations": [],
          "_agent_infos": {},
          "_lengths": [],
          "_prev_obs": "None",
          "_eps_length": 0,
          "_episode_infos": {},
          "$type": "garage.sampler.default_worker.DefaultWorker"
        },
        {
          "_seed": "None",
          "_max_episode_length": 200,
          "_worker_number": 6,
          "agent": {
            "_obs_dim": 11.0,
            "_action_dim": 1.0,
            "training": true,
            "_parameters": {
              "_init_std": {
                "$type": "torch.nn.parameter.Parameter"
              }
            },
            "_buffers": {
              "min_std_param": {
                "$type": "torch.Tensor"
              }
            },
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_mean_module": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 11.0,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      },
                      "1": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  },
                  "_output_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 1.0,
                            "$type": "torch.nn.modules.linear.Linear"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  }
                },
                "_output_dim": 1.0,
                "$type": "garage.torch.modules.mlp_module.MLPModule"
              }
            },
            "_input_dim": 11.0,
            "_hidden_sizes": [
              32,
              32
            ],
            "_learn_std": true,
            "_std_hidden_sizes": [
              32,
              32
            ],
            "_min_std": 1e-06,
            "_max_std": "None",
            "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
            "_std_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_std_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_std_output_nonlinearity": "None",
            "_std_output_w_init": {
              "$type": "builtins.function"
            },
            "_std_parameterization": "exp",
            "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
            "_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_output_nonlinearity": "None",
            "_output_w_init": {
              "$type": "builtins.function"
            },
            "_output_b_init": {
              "$type": "builtins.function"
            },
            "_layer_normalization": false,
            "_norm_dist_class": {
              "$typename": "torch.distributions.normal.Normal"
            },
            "_min_std_param": {
              "$type": "torch.Tensor"
            },
            "_max_std_param": "None",
            "_env_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_name": "GaussianMLPPolicy",
            "$type": "Policy.GaussianMLPPolicy.GaussianMLPPolicy"
          },
          "env": {
            "_env": {
              "env": {
                "env": {
                  "env": {
                    "env": {
                      "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                      "model": "<mujoco._structs.MjModel object at 0x7f904d798c70>",
                      "data": "<mujoco._structs.MjData object at 0x7f904d798cb0>",
                      "init_qpos": "array([0., 0., 0.])",
                      "init_qvel": "array([0., 0., 0.])",
                      "_viewers": {},
                      "frame_skip": 5,
                      "viewer": "None",
                      "observation_space": {
                        "dtype": "dtype('float64')",
                        "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "_shape": [
                          11
                        ],
                        "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                        "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                        "low_repr": "-inf",
                        "high_repr": "inf",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "action_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True])",
                        "bounded_above": "array([ True])",
                        "_shape": [
                          1
                        ],
                        "low": "array([-1.], dtype=float32)",
                        "high": "array([1.], dtype=float32)",
                        "low_repr": "-1.0",
                        "high_repr": "1.0",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "render_mode": "None",
                      "renderer": {
                        "no_returns_render": [
                          "human"
                        ],
                        "single_render": [
                          "single_state_pixels",
                          "single_rgb_array",
                          "single_depth_array"
                        ],
                        "mode": "None",
                        "render": {
                          "$type": "functools.partial"
                        },
                        "render_list": [],
                        "$type": "gym.utils.renderer.Renderer"
                      },
                      "_ezpickle_args": [],
                      "_ezpickle_kwargs": {},
                      "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                    },
                    "_action_space": "None",
                    "_observation_space": "None",
                    "_reward_range": "None",
                    "_metadata": "None",
                    "new_step_api": true,
                    "checked_reset": false,
                    "checked_step": false,
                    "checked_render": false,
                    "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": false,
                  "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "_has_reset": false,
                "_disable_render_order_enforcing": false,
                "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "_max_episode_steps": 1000,
              "_elapsed_steps": "None",
              "$type": "gym.wrappers.time_limit.TimeLimit"
            },
            "_max_episode_length": 1000,
            "_render_modes": [
              "human",
              "rgb_array",
              "depth_array",
              "single_rgb_array",
              "single_depth_array"
            ],
            "_step_cnt": "None",
            "_visualize": false,
            "_action_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_env_info": "None",
            "$type": "garage.envs.gym_env.GymEnv"
          },
          "_env_steps": [],
          "_observations": [],
          "_last_observations": [],
          "_agent_infos": {},
          "_lengths": [],
          "_prev_obs": "None",
          "_eps_length": 0,
          "_episode_infos": {},
          "$type": "garage.sampler.default_worker.DefaultWorker"
        },
        {
          "_seed": "None",
          "_max_episode_length": 200,
          "_worker_number": 7,
          "agent": {
            "_obs_dim": 11.0,
            "_action_dim": 1.0,
            "training": true,
            "_parameters": {
              "_init_std": {
                "$type": "torch.nn.parameter.Parameter"
              }
            },
            "_buffers": {
              "min_std_param": {
                "$type": "torch.Tensor"
              }
            },
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_mean_module": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 11.0,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      },
                      "1": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  },
                  "_output_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 1.0,
                            "$type": "torch.nn.modules.linear.Linear"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  }
                },
                "_output_dim": 1.0,
                "$type": "garage.torch.modules.mlp_module.MLPModule"
              }
            },
            "_input_dim": 11.0,
            "_hidden_sizes": [
              32,
              32
            ],
            "_learn_std": true,
            "_std_hidden_sizes": [
              32,
              32
            ],
            "_min_std": 1e-06,
            "_max_std": "None",
            "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
            "_std_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_std_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_std_output_nonlinearity": "None",
            "_std_output_w_init": {
              "$type": "builtins.function"
            },
            "_std_parameterization": "exp",
            "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
            "_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_output_nonlinearity": "None",
            "_output_w_init": {
              "$type": "builtins.function"
            },
            "_output_b_init": {
              "$type": "builtins.function"
            },
            "_layer_normalization": false,
            "_norm_dist_class": {
              "$typename": "torch.distributions.normal.Normal"
            },
            "_min_std_param": {
              "$type": "torch.Tensor"
            },
            "_max_std_param": "None",
            "_env_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_name": "GaussianMLPPolicy",
            "$type": "Policy.GaussianMLPPolicy.GaussianMLPPolicy"
          },
          "env": {
            "_env": {
              "env": {
                "env": {
                  "env": {
                    "env": {
                      "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                      "model": "<mujoco._structs.MjModel object at 0x7f904d7676f0>",
                      "data": "<mujoco._structs.MjData object at 0x7f904d767730>",
                      "init_qpos": "array([0., 0., 0.])",
                      "init_qvel": "array([0., 0., 0.])",
                      "_viewers": {},
                      "frame_skip": 5,
                      "viewer": "None",
                      "observation_space": {
                        "dtype": "dtype('float64')",
                        "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "_shape": [
                          11
                        ],
                        "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                        "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                        "low_repr": "-inf",
                        "high_repr": "inf",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "action_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True])",
                        "bounded_above": "array([ True])",
                        "_shape": [
                          1
                        ],
                        "low": "array([-1.], dtype=float32)",
                        "high": "array([1.], dtype=float32)",
                        "low_repr": "-1.0",
                        "high_repr": "1.0",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "render_mode": "None",
                      "renderer": {
                        "no_returns_render": [
                          "human"
                        ],
                        "single_render": [
                          "single_state_pixels",
                          "single_rgb_array",
                          "single_depth_array"
                        ],
                        "mode": "None",
                        "render": {
                          "$type": "functools.partial"
                        },
                        "render_list": [],
                        "$type": "gym.utils.renderer.Renderer"
                      },
                      "_ezpickle_args": [],
                      "_ezpickle_kwargs": {},
                      "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                    },
                    "_action_space": "None",
                    "_observation_space": "None",
                    "_reward_range": "None",
                    "_metadata": "None",
                    "new_step_api": true,
                    "checked_reset": false,
                    "checked_step": false,
                    "checked_render": false,
                    "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": false,
                  "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "_has_reset": false,
                "_disable_render_order_enforcing": false,
                "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "_max_episode_steps": 1000,
              "_elapsed_steps": "None",
              "$type": "gym.wrappers.time_limit.TimeLimit"
            },
            "_max_episode_length": 1000,
            "_render_modes": [
              "human",
              "rgb_array",
              "depth_array",
              "single_rgb_array",
              "single_depth_array"
            ],
            "_step_cnt": "None",
            "_visualize": false,
            "_action_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_env_info": "None",
            "$type": "garage.envs.gym_env.GymEnv"
          },
          "_env_steps": [],
          "_observations": [],
          "_last_observations": [],
          "_agent_infos": {},
          "_lengths": [],
          "_prev_obs": "None",
          "_eps_length": 0,
          "_episode_infos": {},
          "$type": "garage.sampler.default_worker.DefaultWorker"
        },
        {
          "_seed": "None",
          "_max_episode_length": 200,
          "_worker_number": 8,
          "agent": {
            "_obs_dim": 11.0,
            "_action_dim": 1.0,
            "training": true,
            "_parameters": {
              "_init_std": {
                "$type": "torch.nn.parameter.Parameter"
              }
            },
            "_buffers": {
              "min_std_param": {
                "$type": "torch.Tensor"
              }
            },
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_mean_module": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 11.0,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      },
                      "1": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  },
                  "_output_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 1.0,
                            "$type": "torch.nn.modules.linear.Linear"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  }
                },
                "_output_dim": 1.0,
                "$type": "garage.torch.modules.mlp_module.MLPModule"
              }
            },
            "_input_dim": 11.0,
            "_hidden_sizes": [
              32,
              32
            ],
            "_learn_std": true,
            "_std_hidden_sizes": [
              32,
              32
            ],
            "_min_std": 1e-06,
            "_max_std": "None",
            "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
            "_std_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_std_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_std_output_nonlinearity": "None",
            "_std_output_w_init": {
              "$type": "builtins.function"
            },
            "_std_parameterization": "exp",
            "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
            "_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_output_nonlinearity": "None",
            "_output_w_init": {
              "$type": "builtins.function"
            },
            "_output_b_init": {
              "$type": "builtins.function"
            },
            "_layer_normalization": false,
            "_norm_dist_class": {
              "$typename": "torch.distributions.normal.Normal"
            },
            "_min_std_param": {
              "$type": "torch.Tensor"
            },
            "_max_std_param": "None",
            "_env_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_name": "GaussianMLPPolicy",
            "$type": "Policy.GaussianMLPPolicy.GaussianMLPPolicy"
          },
          "env": {
            "_env": {
              "env": {
                "env": {
                  "env": {
                    "env": {
                      "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                      "model": "<mujoco._structs.MjModel object at 0x7f904d6b41b0>",
                      "data": "<mujoco._structs.MjData object at 0x7f904d6b41f0>",
                      "init_qpos": "array([0., 0., 0.])",
                      "init_qvel": "array([0., 0., 0.])",
                      "_viewers": {},
                      "frame_skip": 5,
                      "viewer": "None",
                      "observation_space": {
                        "dtype": "dtype('float64')",
                        "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "_shape": [
                          11
                        ],
                        "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                        "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                        "low_repr": "-inf",
                        "high_repr": "inf",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "action_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True])",
                        "bounded_above": "array([ True])",
                        "_shape": [
                          1
                        ],
                        "low": "array([-1.], dtype=float32)",
                        "high": "array([1.], dtype=float32)",
                        "low_repr": "-1.0",
                        "high_repr": "1.0",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "render_mode": "None",
                      "renderer": {
                        "no_returns_render": [
                          "human"
                        ],
                        "single_render": [
                          "single_state_pixels",
                          "single_rgb_array",
                          "single_depth_array"
                        ],
                        "mode": "None",
                        "render": {
                          "$type": "functools.partial"
                        },
                        "render_list": [],
                        "$type": "gym.utils.renderer.Renderer"
                      },
                      "_ezpickle_args": [],
                      "_ezpickle_kwargs": {},
                      "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                    },
                    "_action_space": "None",
                    "_observation_space": "None",
                    "_reward_range": "None",
                    "_metadata": "None",
                    "new_step_api": true,
                    "checked_reset": false,
                    "checked_step": false,
                    "checked_render": false,
                    "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": false,
                  "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "_has_reset": false,
                "_disable_render_order_enforcing": false,
                "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "_max_episode_steps": 1000,
              "_elapsed_steps": "None",
              "$type": "gym.wrappers.time_limit.TimeLimit"
            },
            "_max_episode_length": 1000,
            "_render_modes": [
              "human",
              "rgb_array",
              "depth_array",
              "single_rgb_array",
              "single_depth_array"
            ],
            "_step_cnt": "None",
            "_visualize": false,
            "_action_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_env_info": "None",
            "$type": "garage.envs.gym_env.GymEnv"
          },
          "_env_steps": [],
          "_observations": [],
          "_last_observations": [],
          "_agent_infos": {},
          "_lengths": [],
          "_prev_obs": "None",
          "_eps_length": 0,
          "_episode_infos": {},
          "$type": "garage.sampler.default_worker.DefaultWorker"
        },
        {
          "_seed": "None",
          "_max_episode_length": 200,
          "_worker_number": 9,
          "agent": {
            "_obs_dim": 11.0,
            "_action_dim": 1.0,
            "training": true,
            "_parameters": {
              "_init_std": {
                "$type": "torch.nn.parameter.Parameter"
              }
            },
            "_buffers": {
              "min_std_param": {
                "$type": "torch.Tensor"
              }
            },
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_mean_module": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 11.0,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      },
                      "1": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  },
                  "_output_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 1.0,
                            "$type": "torch.nn.modules.linear.Linear"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  }
                },
                "_output_dim": 1.0,
                "$type": "garage.torch.modules.mlp_module.MLPModule"
              }
            },
            "_input_dim": 11.0,
            "_hidden_sizes": [
              32,
              32
            ],
            "_learn_std": true,
            "_std_hidden_sizes": [
              32,
              32
            ],
            "_min_std": 1e-06,
            "_max_std": "None",
            "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
            "_std_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_std_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_std_output_nonlinearity": "None",
            "_std_output_w_init": {
              "$type": "builtins.function"
            },
            "_std_parameterization": "exp",
            "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
            "_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_output_nonlinearity": "None",
            "_output_w_init": {
              "$type": "builtins.function"
            },
            "_output_b_init": {
              "$type": "builtins.function"
            },
            "_layer_normalization": false,
            "_norm_dist_class": {
              "$typename": "torch.distributions.normal.Normal"
            },
            "_min_std_param": {
              "$type": "torch.Tensor"
            },
            "_max_std_param": "None",
            "_env_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_name": "GaussianMLPPolicy",
            "$type": "Policy.GaussianMLPPolicy.GaussianMLPPolicy"
          },
          "env": {
            "_env": {
              "env": {
                "env": {
                  "env": {
                    "env": {
                      "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                      "model": "<mujoco._structs.MjModel object at 0x7f904d6b4c30>",
                      "data": "<mujoco._structs.MjData object at 0x7f904d6b4c70>",
                      "init_qpos": "array([0., 0., 0.])",
                      "init_qvel": "array([0., 0., 0.])",
                      "_viewers": {},
                      "frame_skip": 5,
                      "viewer": "None",
                      "observation_space": {
                        "dtype": "dtype('float64')",
                        "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "_shape": [
                          11
                        ],
                        "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                        "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                        "low_repr": "-inf",
                        "high_repr": "inf",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "action_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True])",
                        "bounded_above": "array([ True])",
                        "_shape": [
                          1
                        ],
                        "low": "array([-1.], dtype=float32)",
                        "high": "array([1.], dtype=float32)",
                        "low_repr": "-1.0",
                        "high_repr": "1.0",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "render_mode": "None",
                      "renderer": {
                        "no_returns_render": [
                          "human"
                        ],
                        "single_render": [
                          "single_state_pixels",
                          "single_rgb_array",
                          "single_depth_array"
                        ],
                        "mode": "None",
                        "render": {
                          "$type": "functools.partial"
                        },
                        "render_list": [],
                        "$type": "gym.utils.renderer.Renderer"
                      },
                      "_ezpickle_args": [],
                      "_ezpickle_kwargs": {},
                      "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                    },
                    "_action_space": "None",
                    "_observation_space": "None",
                    "_reward_range": "None",
                    "_metadata": "None",
                    "new_step_api": true,
                    "checked_reset": false,
                    "checked_step": false,
                    "checked_render": false,
                    "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": false,
                  "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "_has_reset": false,
                "_disable_render_order_enforcing": false,
                "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "_max_episode_steps": 1000,
              "_elapsed_steps": "None",
              "$type": "gym.wrappers.time_limit.TimeLimit"
            },
            "_max_episode_length": 1000,
            "_render_modes": [
              "human",
              "rgb_array",
              "depth_array",
              "single_rgb_array",
              "single_depth_array"
            ],
            "_step_cnt": "None",
            "_visualize": false,
            "_action_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_env_info": "None",
            "$type": "garage.envs.gym_env.GymEnv"
          },
          "_env_steps": [],
          "_observations": [],
          "_last_observations": [],
          "_agent_infos": {},
          "_lengths": [],
          "_prev_obs": "None",
          "_eps_length": 0,
          "_episode_infos": {},
          "$type": "garage.sampler.default_worker.DefaultWorker"
        },
        {
          "_seed": "None",
          "_max_episode_length": 200,
          "_worker_number": 10,
          "agent": {
            "_obs_dim": 11.0,
            "_action_dim": 1.0,
            "training": true,
            "_parameters": {
              "_init_std": {
                "$type": "torch.nn.parameter.Parameter"
              }
            },
            "_buffers": {
              "min_std_param": {
                "$type": "torch.Tensor"
              }
            },
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_mean_module": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 11.0,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      },
                      "1": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  },
                  "_output_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 1.0,
                            "$type": "torch.nn.modules.linear.Linear"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  }
                },
                "_output_dim": 1.0,
                "$type": "garage.torch.modules.mlp_module.MLPModule"
              }
            },
            "_input_dim": 11.0,
            "_hidden_sizes": [
              32,
              32
            ],
            "_learn_std": true,
            "_std_hidden_sizes": [
              32,
              32
            ],
            "_min_std": 1e-06,
            "_max_std": "None",
            "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
            "_std_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_std_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_std_output_nonlinearity": "None",
            "_std_output_w_init": {
              "$type": "builtins.function"
            },
            "_std_parameterization": "exp",
            "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
            "_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_output_nonlinearity": "None",
            "_output_w_init": {
              "$type": "builtins.function"
            },
            "_output_b_init": {
              "$type": "builtins.function"
            },
            "_layer_normalization": false,
            "_norm_dist_class": {
              "$typename": "torch.distributions.normal.Normal"
            },
            "_min_std_param": {
              "$type": "torch.Tensor"
            },
            "_max_std_param": "None",
            "_env_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_name": "GaussianMLPPolicy",
            "$type": "Policy.GaussianMLPPolicy.GaussianMLPPolicy"
          },
          "env": {
            "_env": {
              "env": {
                "env": {
                  "env": {
                    "env": {
                      "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                      "model": "<mujoco._structs.MjModel object at 0x7f904d682730>",
                      "data": "<mujoco._structs.MjData object at 0x7f904d682770>",
                      "init_qpos": "array([0., 0., 0.])",
                      "init_qvel": "array([0., 0., 0.])",
                      "_viewers": {},
                      "frame_skip": 5,
                      "viewer": "None",
                      "observation_space": {
                        "dtype": "dtype('float64')",
                        "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "_shape": [
                          11
                        ],
                        "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                        "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                        "low_repr": "-inf",
                        "high_repr": "inf",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "action_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True])",
                        "bounded_above": "array([ True])",
                        "_shape": [
                          1
                        ],
                        "low": "array([-1.], dtype=float32)",
                        "high": "array([1.], dtype=float32)",
                        "low_repr": "-1.0",
                        "high_repr": "1.0",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "render_mode": "None",
                      "renderer": {
                        "no_returns_render": [
                          "human"
                        ],
                        "single_render": [
                          "single_state_pixels",
                          "single_rgb_array",
                          "single_depth_array"
                        ],
                        "mode": "None",
                        "render": {
                          "$type": "functools.partial"
                        },
                        "render_list": [],
                        "$type": "gym.utils.renderer.Renderer"
                      },
                      "_ezpickle_args": [],
                      "_ezpickle_kwargs": {},
                      "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                    },
                    "_action_space": "None",
                    "_observation_space": "None",
                    "_reward_range": "None",
                    "_metadata": "None",
                    "new_step_api": true,
                    "checked_reset": false,
                    "checked_step": false,
                    "checked_render": false,
                    "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": false,
                  "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "_has_reset": false,
                "_disable_render_order_enforcing": false,
                "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "_max_episode_steps": 1000,
              "_elapsed_steps": "None",
              "$type": "gym.wrappers.time_limit.TimeLimit"
            },
            "_max_episode_length": 1000,
            "_render_modes": [
              "human",
              "rgb_array",
              "depth_array",
              "single_rgb_array",
              "single_depth_array"
            ],
            "_step_cnt": "None",
            "_visualize": false,
            "_action_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_env_info": "None",
            "$type": "garage.envs.gym_env.GymEnv"
          },
          "_env_steps": [],
          "_observations": [],
          "_last_observations": [],
          "_agent_infos": {},
          "_lengths": [],
          "_prev_obs": "None",
          "_eps_length": 0,
          "_episode_infos": {},
          "$type": "garage.sampler.default_worker.DefaultWorker"
        },
        {
          "_seed": "None",
          "_max_episode_length": 200,
          "_worker_number": 11,
          "agent": {
            "_obs_dim": 11.0,
            "_action_dim": 1.0,
            "training": true,
            "_parameters": {
              "_init_std": {
                "$type": "torch.nn.parameter.Parameter"
              }
            },
            "_buffers": {
              "min_std_param": {
                "$type": "torch.Tensor"
              }
            },
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_mean_module": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 11.0,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      },
                      "1": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  },
                  "_output_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 1.0,
                            "$type": "torch.nn.modules.linear.Linear"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  }
                },
                "_output_dim": 1.0,
                "$type": "garage.torch.modules.mlp_module.MLPModule"
              }
            },
            "_input_dim": 11.0,
            "_hidden_sizes": [
              32,
              32
            ],
            "_learn_std": true,
            "_std_hidden_sizes": [
              32,
              32
            ],
            "_min_std": 1e-06,
            "_max_std": "None",
            "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
            "_std_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_std_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_std_output_nonlinearity": "None",
            "_std_output_w_init": {
              "$type": "builtins.function"
            },
            "_std_parameterization": "exp",
            "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
            "_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_output_nonlinearity": "None",
            "_output_w_init": {
              "$type": "builtins.function"
            },
            "_output_b_init": {
              "$type": "builtins.function"
            },
            "_layer_normalization": false,
            "_norm_dist_class": {
              "$typename": "torch.distributions.normal.Normal"
            },
            "_min_std_param": {
              "$type": "torch.Tensor"
            },
            "_max_std_param": "None",
            "_env_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_name": "GaussianMLPPolicy",
            "$type": "Policy.GaussianMLPPolicy.GaussianMLPPolicy"
          },
          "env": {
            "_env": {
              "env": {
                "env": {
                  "env": {
                    "env": {
                      "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                      "model": "<mujoco._structs.MjModel object at 0x7f904d6824f0>",
                      "data": "<mujoco._structs.MjData object at 0x7f904d6822b0>",
                      "init_qpos": "array([0., 0., 0.])",
                      "init_qvel": "array([0., 0., 0.])",
                      "_viewers": {},
                      "frame_skip": 5,
                      "viewer": "None",
                      "observation_space": {
                        "dtype": "dtype('float64')",
                        "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "_shape": [
                          11
                        ],
                        "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                        "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                        "low_repr": "-inf",
                        "high_repr": "inf",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "action_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True])",
                        "bounded_above": "array([ True])",
                        "_shape": [
                          1
                        ],
                        "low": "array([-1.], dtype=float32)",
                        "high": "array([1.], dtype=float32)",
                        "low_repr": "-1.0",
                        "high_repr": "1.0",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "render_mode": "None",
                      "renderer": {
                        "no_returns_render": [
                          "human"
                        ],
                        "single_render": [
                          "single_state_pixels",
                          "single_rgb_array",
                          "single_depth_array"
                        ],
                        "mode": "None",
                        "render": {
                          "$type": "functools.partial"
                        },
                        "render_list": [],
                        "$type": "gym.utils.renderer.Renderer"
                      },
                      "_ezpickle_args": [],
                      "_ezpickle_kwargs": {},
                      "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                    },
                    "_action_space": "None",
                    "_observation_space": "None",
                    "_reward_range": "None",
                    "_metadata": "None",
                    "new_step_api": true,
                    "checked_reset": false,
                    "checked_step": false,
                    "checked_render": false,
                    "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": false,
                  "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "_has_reset": false,
                "_disable_render_order_enforcing": false,
                "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "_max_episode_steps": 1000,
              "_elapsed_steps": "None",
              "$type": "gym.wrappers.time_limit.TimeLimit"
            },
            "_max_episode_length": 1000,
            "_render_modes": [
              "human",
              "rgb_array",
              "depth_array",
              "single_rgb_array",
              "single_depth_array"
            ],
            "_step_cnt": "None",
            "_visualize": false,
            "_action_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_env_info": "None",
            "$type": "garage.envs.gym_env.GymEnv"
          },
          "_env_steps": [],
          "_observations": [],
          "_last_observations": [],
          "_agent_infos": {},
          "_lengths": [],
          "_prev_obs": "None",
          "_eps_length": 0,
          "_episode_infos": {},
          "$type": "garage.sampler.default_worker.DefaultWorker"
        },
        {
          "_seed": "None",
          "_max_episode_length": 200,
          "_worker_number": 12,
          "agent": {
            "_obs_dim": 11.0,
            "_action_dim": 1.0,
            "training": true,
            "_parameters": {
              "_init_std": {
                "$type": "torch.nn.parameter.Parameter"
              }
            },
            "_buffers": {
              "min_std_param": {
                "$type": "torch.Tensor"
              }
            },
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_mean_module": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 11.0,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      },
                      "1": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  },
                  "_output_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 1.0,
                            "$type": "torch.nn.modules.linear.Linear"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  }
                },
                "_output_dim": 1.0,
                "$type": "garage.torch.modules.mlp_module.MLPModule"
              }
            },
            "_input_dim": 11.0,
            "_hidden_sizes": [
              32,
              32
            ],
            "_learn_std": true,
            "_std_hidden_sizes": [
              32,
              32
            ],
            "_min_std": 1e-06,
            "_max_std": "None",
            "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
            "_std_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_std_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_std_output_nonlinearity": "None",
            "_std_output_w_init": {
              "$type": "builtins.function"
            },
            "_std_parameterization": "exp",
            "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
            "_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_output_nonlinearity": "None",
            "_output_w_init": {
              "$type": "builtins.function"
            },
            "_output_b_init": {
              "$type": "builtins.function"
            },
            "_layer_normalization": false,
            "_norm_dist_class": {
              "$typename": "torch.distributions.normal.Normal"
            },
            "_min_std_param": {
              "$type": "torch.Tensor"
            },
            "_max_std_param": "None",
            "_env_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_name": "GaussianMLPPolicy",
            "$type": "Policy.GaussianMLPPolicy.GaussianMLPPolicy"
          },
          "env": {
            "_env": {
              "env": {
                "env": {
                  "env": {
                    "env": {
                      "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                      "model": "<mujoco._structs.MjModel object at 0x7f904d798ef0>",
                      "data": "<mujoco._structs.MjData object at 0x7f904d798a70>",
                      "init_qpos": "array([0., 0., 0.])",
                      "init_qvel": "array([0., 0., 0.])",
                      "_viewers": {},
                      "frame_skip": 5,
                      "viewer": "None",
                      "observation_space": {
                        "dtype": "dtype('float64')",
                        "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "_shape": [
                          11
                        ],
                        "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                        "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                        "low_repr": "-inf",
                        "high_repr": "inf",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "action_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True])",
                        "bounded_above": "array([ True])",
                        "_shape": [
                          1
                        ],
                        "low": "array([-1.], dtype=float32)",
                        "high": "array([1.], dtype=float32)",
                        "low_repr": "-1.0",
                        "high_repr": "1.0",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "render_mode": "None",
                      "renderer": {
                        "no_returns_render": [
                          "human"
                        ],
                        "single_render": [
                          "single_state_pixels",
                          "single_rgb_array",
                          "single_depth_array"
                        ],
                        "mode": "None",
                        "render": {
                          "$type": "functools.partial"
                        },
                        "render_list": [],
                        "$type": "gym.utils.renderer.Renderer"
                      },
                      "_ezpickle_args": [],
                      "_ezpickle_kwargs": {},
                      "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                    },
                    "_action_space": "None",
                    "_observation_space": "None",
                    "_reward_range": "None",
                    "_metadata": "None",
                    "new_step_api": true,
                    "checked_reset": false,
                    "checked_step": false,
                    "checked_render": false,
                    "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": false,
                  "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "_has_reset": false,
                "_disable_render_order_enforcing": false,
                "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "_max_episode_steps": 1000,
              "_elapsed_steps": "None",
              "$type": "gym.wrappers.time_limit.TimeLimit"
            },
            "_max_episode_length": 1000,
            "_render_modes": [
              "human",
              "rgb_array",
              "depth_array",
              "single_rgb_array",
              "single_depth_array"
            ],
            "_step_cnt": "None",
            "_visualize": false,
            "_action_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_env_info": "None",
            "$type": "garage.envs.gym_env.GymEnv"
          },
          "_env_steps": [],
          "_observations": [],
          "_last_observations": [],
          "_agent_infos": {},
          "_lengths": [],
          "_prev_obs": "None",
          "_eps_length": 0,
          "_episode_infos": {},
          "$type": "garage.sampler.default_worker.DefaultWorker"
        },
        {
          "_seed": "None",
          "_max_episode_length": 200,
          "_worker_number": 13,
          "agent": {
            "_obs_dim": 11.0,
            "_action_dim": 1.0,
            "training": true,
            "_parameters": {
              "_init_std": {
                "$type": "torch.nn.parameter.Parameter"
              }
            },
            "_buffers": {
              "min_std_param": {
                "$type": "torch.Tensor"
              }
            },
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_mean_module": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 11.0,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      },
                      "1": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  },
                  "_output_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 1.0,
                            "$type": "torch.nn.modules.linear.Linear"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  }
                },
                "_output_dim": 1.0,
                "$type": "garage.torch.modules.mlp_module.MLPModule"
              }
            },
            "_input_dim": 11.0,
            "_hidden_sizes": [
              32,
              32
            ],
            "_learn_std": true,
            "_std_hidden_sizes": [
              32,
              32
            ],
            "_min_std": 1e-06,
            "_max_std": "None",
            "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
            "_std_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_std_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_std_output_nonlinearity": "None",
            "_std_output_w_init": {
              "$type": "builtins.function"
            },
            "_std_parameterization": "exp",
            "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
            "_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_output_nonlinearity": "None",
            "_output_w_init": {
              "$type": "builtins.function"
            },
            "_output_b_init": {
              "$type": "builtins.function"
            },
            "_layer_normalization": false,
            "_norm_dist_class": {
              "$typename": "torch.distributions.normal.Normal"
            },
            "_min_std_param": {
              "$type": "torch.Tensor"
            },
            "_max_std_param": "None",
            "_env_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_name": "GaussianMLPPolicy",
            "$type": "Policy.GaussianMLPPolicy.GaussianMLPPolicy"
          },
          "env": {
            "_env": {
              "env": {
                "env": {
                  "env": {
                    "env": {
                      "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                      "model": "<mujoco._structs.MjModel object at 0x7f904d8e9ab0>",
                      "data": "<mujoco._structs.MjData object at 0x7f904d8e9a70>",
                      "init_qpos": "array([0., 0., 0.])",
                      "init_qvel": "array([0., 0., 0.])",
                      "_viewers": {},
                      "frame_skip": 5,
                      "viewer": "None",
                      "observation_space": {
                        "dtype": "dtype('float64')",
                        "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "_shape": [
                          11
                        ],
                        "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                        "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                        "low_repr": "-inf",
                        "high_repr": "inf",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "action_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True])",
                        "bounded_above": "array([ True])",
                        "_shape": [
                          1
                        ],
                        "low": "array([-1.], dtype=float32)",
                        "high": "array([1.], dtype=float32)",
                        "low_repr": "-1.0",
                        "high_repr": "1.0",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "render_mode": "None",
                      "renderer": {
                        "no_returns_render": [
                          "human"
                        ],
                        "single_render": [
                          "single_state_pixels",
                          "single_rgb_array",
                          "single_depth_array"
                        ],
                        "mode": "None",
                        "render": {
                          "$type": "functools.partial"
                        },
                        "render_list": [],
                        "$type": "gym.utils.renderer.Renderer"
                      },
                      "_ezpickle_args": [],
                      "_ezpickle_kwargs": {},
                      "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                    },
                    "_action_space": "None",
                    "_observation_space": "None",
                    "_reward_range": "None",
                    "_metadata": "None",
                    "new_step_api": true,
                    "checked_reset": false,
                    "checked_step": false,
                    "checked_render": false,
                    "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": false,
                  "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "_has_reset": false,
                "_disable_render_order_enforcing": false,
                "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "_max_episode_steps": 1000,
              "_elapsed_steps": "None",
              "$type": "gym.wrappers.time_limit.TimeLimit"
            },
            "_max_episode_length": 1000,
            "_render_modes": [
              "human",
              "rgb_array",
              "depth_array",
              "single_rgb_array",
              "single_depth_array"
            ],
            "_step_cnt": "None",
            "_visualize": false,
            "_action_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_env_info": "None",
            "$type": "garage.envs.gym_env.GymEnv"
          },
          "_env_steps": [],
          "_observations": [],
          "_last_observations": [],
          "_agent_infos": {},
          "_lengths": [],
          "_prev_obs": "None",
          "_eps_length": 0,
          "_episode_infos": {},
          "$type": "garage.sampler.default_worker.DefaultWorker"
        },
        {
          "_seed": "None",
          "_max_episode_length": 200,
          "_worker_number": 14,
          "agent": {
            "_obs_dim": 11.0,
            "_action_dim": 1.0,
            "training": true,
            "_parameters": {
              "_init_std": {
                "$type": "torch.nn.parameter.Parameter"
              }
            },
            "_buffers": {
              "min_std_param": {
                "$type": "torch.Tensor"
              }
            },
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_mean_module": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 11.0,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      },
                      "1": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  },
                  "_output_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 1.0,
                            "$type": "torch.nn.modules.linear.Linear"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  }
                },
                "_output_dim": 1.0,
                "$type": "garage.torch.modules.mlp_module.MLPModule"
              }
            },
            "_input_dim": 11.0,
            "_hidden_sizes": [
              32,
              32
            ],
            "_learn_std": true,
            "_std_hidden_sizes": [
              32,
              32
            ],
            "_min_std": 1e-06,
            "_max_std": "None",
            "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
            "_std_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_std_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_std_output_nonlinearity": "None",
            "_std_output_w_init": {
              "$type": "builtins.function"
            },
            "_std_parameterization": "exp",
            "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
            "_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_output_nonlinearity": "None",
            "_output_w_init": {
              "$type": "builtins.function"
            },
            "_output_b_init": {
              "$type": "builtins.function"
            },
            "_layer_normalization": false,
            "_norm_dist_class": {
              "$typename": "torch.distributions.normal.Normal"
            },
            "_min_std_param": {
              "$type": "torch.Tensor"
            },
            "_max_std_param": "None",
            "_env_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_name": "GaussianMLPPolicy",
            "$type": "Policy.GaussianMLPPolicy.GaussianMLPPolicy"
          },
          "env": {
            "_env": {
              "env": {
                "env": {
                  "env": {
                    "env": {
                      "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                      "model": "<mujoco._structs.MjModel object at 0x7f904e73a7b0>",
                      "data": "<mujoco._structs.MjData object at 0x7f904e19f370>",
                      "init_qpos": "array([0., 0., 0.])",
                      "init_qvel": "array([0., 0., 0.])",
                      "_viewers": {},
                      "frame_skip": 5,
                      "viewer": "None",
                      "observation_space": {
                        "dtype": "dtype('float64')",
                        "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "_shape": [
                          11
                        ],
                        "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                        "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                        "low_repr": "-inf",
                        "high_repr": "inf",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "action_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True])",
                        "bounded_above": "array([ True])",
                        "_shape": [
                          1
                        ],
                        "low": "array([-1.], dtype=float32)",
                        "high": "array([1.], dtype=float32)",
                        "low_repr": "-1.0",
                        "high_repr": "1.0",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "render_mode": "None",
                      "renderer": {
                        "no_returns_render": [
                          "human"
                        ],
                        "single_render": [
                          "single_state_pixels",
                          "single_rgb_array",
                          "single_depth_array"
                        ],
                        "mode": "None",
                        "render": {
                          "$type": "functools.partial"
                        },
                        "render_list": [],
                        "$type": "gym.utils.renderer.Renderer"
                      },
                      "_ezpickle_args": [],
                      "_ezpickle_kwargs": {},
                      "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                    },
                    "_action_space": "None",
                    "_observation_space": "None",
                    "_reward_range": "None",
                    "_metadata": "None",
                    "new_step_api": true,
                    "checked_reset": false,
                    "checked_step": false,
                    "checked_render": false,
                    "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": false,
                  "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "_has_reset": false,
                "_disable_render_order_enforcing": false,
                "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "_max_episode_steps": 1000,
              "_elapsed_steps": "None",
              "$type": "gym.wrappers.time_limit.TimeLimit"
            },
            "_max_episode_length": 1000,
            "_render_modes": [
              "human",
              "rgb_array",
              "depth_array",
              "single_rgb_array",
              "single_depth_array"
            ],
            "_step_cnt": "None",
            "_visualize": false,
            "_action_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_env_info": "None",
            "$type": "garage.envs.gym_env.GymEnv"
          },
          "_env_steps": [],
          "_observations": [],
          "_last_observations": [],
          "_agent_infos": {},
          "_lengths": [],
          "_prev_obs": "None",
          "_eps_length": 0,
          "_episode_infos": {},
          "$type": "garage.sampler.default_worker.DefaultWorker"
        },
        {
          "_seed": "None",
          "_max_episode_length": 200,
          "_worker_number": 15,
          "agent": {
            "_obs_dim": 11.0,
            "_action_dim": 1.0,
            "training": true,
            "_parameters": {
              "_init_std": {
                "$type": "torch.nn.parameter.Parameter"
              }
            },
            "_buffers": {
              "min_std_param": {
                "$type": "torch.Tensor"
              }
            },
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_mean_module": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 11.0,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      },
                      "1": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  },
                  "_output_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 1.0,
                            "$type": "torch.nn.modules.linear.Linear"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  }
                },
                "_output_dim": 1.0,
                "$type": "garage.torch.modules.mlp_module.MLPModule"
              }
            },
            "_input_dim": 11.0,
            "_hidden_sizes": [
              32,
              32
            ],
            "_learn_std": true,
            "_std_hidden_sizes": [
              32,
              32
            ],
            "_min_std": 1e-06,
            "_max_std": "None",
            "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
            "_std_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_std_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_std_output_nonlinearity": "None",
            "_std_output_w_init": {
              "$type": "builtins.function"
            },
            "_std_parameterization": "exp",
            "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
            "_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_output_nonlinearity": "None",
            "_output_w_init": {
              "$type": "builtins.function"
            },
            "_output_b_init": {
              "$type": "builtins.function"
            },
            "_layer_normalization": false,
            "_norm_dist_class": {
              "$typename": "torch.distributions.normal.Normal"
            },
            "_min_std_param": {
              "$type": "torch.Tensor"
            },
            "_max_std_param": "None",
            "_env_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_name": "GaussianMLPPolicy",
            "$type": "Policy.GaussianMLPPolicy.GaussianMLPPolicy"
          },
          "env": {
            "_env": {
              "env": {
                "env": {
                  "env": {
                    "env": {
                      "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                      "model": "<mujoco._structs.MjModel object at 0x7f904d64e7b0>",
                      "data": "<mujoco._structs.MjData object at 0x7f904d64e7f0>",
                      "init_qpos": "array([0., 0., 0.])",
                      "init_qvel": "array([0., 0., 0.])",
                      "_viewers": {},
                      "frame_skip": 5,
                      "viewer": "None",
                      "observation_space": {
                        "dtype": "dtype('float64')",
                        "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "_shape": [
                          11
                        ],
                        "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                        "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                        "low_repr": "-inf",
                        "high_repr": "inf",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "action_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True])",
                        "bounded_above": "array([ True])",
                        "_shape": [
                          1
                        ],
                        "low": "array([-1.], dtype=float32)",
                        "high": "array([1.], dtype=float32)",
                        "low_repr": "-1.0",
                        "high_repr": "1.0",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "render_mode": "None",
                      "renderer": {
                        "no_returns_render": [
                          "human"
                        ],
                        "single_render": [
                          "single_state_pixels",
                          "single_rgb_array",
                          "single_depth_array"
                        ],
                        "mode": "None",
                        "render": {
                          "$type": "functools.partial"
                        },
                        "render_list": [],
                        "$type": "gym.utils.renderer.Renderer"
                      },
                      "_ezpickle_args": [],
                      "_ezpickle_kwargs": {},
                      "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                    },
                    "_action_space": "None",
                    "_observation_space": "None",
                    "_reward_range": "None",
                    "_metadata": "None",
                    "new_step_api": true,
                    "checked_reset": false,
                    "checked_step": false,
                    "checked_render": false,
                    "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": false,
                  "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "_has_reset": false,
                "_disable_render_order_enforcing": false,
                "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "_max_episode_steps": 1000,
              "_elapsed_steps": "None",
              "$type": "gym.wrappers.time_limit.TimeLimit"
            },
            "_max_episode_length": 1000,
            "_render_modes": [
              "human",
              "rgb_array",
              "depth_array",
              "single_rgb_array",
              "single_depth_array"
            ],
            "_step_cnt": "None",
            "_visualize": false,
            "_action_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_env_info": "None",
            "$type": "garage.envs.gym_env.GymEnv"
          },
          "_env_steps": [],
          "_observations": [],
          "_last_observations": [],
          "_agent_infos": {},
          "_lengths": [],
          "_prev_obs": "None",
          "_eps_length": 0,
          "_episode_infos": {},
          "$type": "garage.sampler.default_worker.DefaultWorker"
        },
        {
          "_seed": "None",
          "_max_episode_length": 200,
          "_worker_number": 16,
          "agent": {
            "_obs_dim": 11.0,
            "_action_dim": 1.0,
            "training": true,
            "_parameters": {
              "_init_std": {
                "$type": "torch.nn.parameter.Parameter"
              }
            },
            "_buffers": {
              "min_std_param": {
                "$type": "torch.Tensor"
              }
            },
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_mean_module": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 11.0,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      },
                      "1": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  },
                  "_output_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 1.0,
                            "$type": "torch.nn.modules.linear.Linear"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  }
                },
                "_output_dim": 1.0,
                "$type": "garage.torch.modules.mlp_module.MLPModule"
              }
            },
            "_input_dim": 11.0,
            "_hidden_sizes": [
              32,
              32
            ],
            "_learn_std": true,
            "_std_hidden_sizes": [
              32,
              32
            ],
            "_min_std": 1e-06,
            "_max_std": "None",
            "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
            "_std_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_std_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_std_output_nonlinearity": "None",
            "_std_output_w_init": {
              "$type": "builtins.function"
            },
            "_std_parameterization": "exp",
            "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
            "_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_output_nonlinearity": "None",
            "_output_w_init": {
              "$type": "builtins.function"
            },
            "_output_b_init": {
              "$type": "builtins.function"
            },
            "_layer_normalization": false,
            "_norm_dist_class": {
              "$typename": "torch.distributions.normal.Normal"
            },
            "_min_std_param": {
              "$type": "torch.Tensor"
            },
            "_max_std_param": "None",
            "_env_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_name": "GaussianMLPPolicy",
            "$type": "Policy.GaussianMLPPolicy.GaussianMLPPolicy"
          },
          "env": {
            "_env": {
              "env": {
                "env": {
                  "env": {
                    "env": {
                      "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                      "model": "<mujoco._structs.MjModel object at 0x7f904d6f6230>",
                      "data": "<mujoco._structs.MjData object at 0x7f904d6f6270>",
                      "init_qpos": "array([0., 0., 0.])",
                      "init_qvel": "array([0., 0., 0.])",
                      "_viewers": {},
                      "frame_skip": 5,
                      "viewer": "None",
                      "observation_space": {
                        "dtype": "dtype('float64')",
                        "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "_shape": [
                          11
                        ],
                        "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                        "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                        "low_repr": "-inf",
                        "high_repr": "inf",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "action_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True])",
                        "bounded_above": "array([ True])",
                        "_shape": [
                          1
                        ],
                        "low": "array([-1.], dtype=float32)",
                        "high": "array([1.], dtype=float32)",
                        "low_repr": "-1.0",
                        "high_repr": "1.0",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "render_mode": "None",
                      "renderer": {
                        "no_returns_render": [
                          "human"
                        ],
                        "single_render": [
                          "single_state_pixels",
                          "single_rgb_array",
                          "single_depth_array"
                        ],
                        "mode": "None",
                        "render": {
                          "$type": "functools.partial"
                        },
                        "render_list": [],
                        "$type": "gym.utils.renderer.Renderer"
                      },
                      "_ezpickle_args": [],
                      "_ezpickle_kwargs": {},
                      "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                    },
                    "_action_space": "None",
                    "_observation_space": "None",
                    "_reward_range": "None",
                    "_metadata": "None",
                    "new_step_api": true,
                    "checked_reset": false,
                    "checked_step": false,
                    "checked_render": false,
                    "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": false,
                  "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "_has_reset": false,
                "_disable_render_order_enforcing": false,
                "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "_max_episode_steps": 1000,
              "_elapsed_steps": "None",
              "$type": "gym.wrappers.time_limit.TimeLimit"
            },
            "_max_episode_length": 1000,
            "_render_modes": [
              "human",
              "rgb_array",
              "depth_array",
              "single_rgb_array",
              "single_depth_array"
            ],
            "_step_cnt": "None",
            "_visualize": false,
            "_action_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_env_info": "None",
            "$type": "garage.envs.gym_env.GymEnv"
          },
          "_env_steps": [],
          "_observations": [],
          "_last_observations": [],
          "_agent_infos": {},
          "_lengths": [],
          "_prev_obs": "None",
          "_eps_length": 0,
          "_episode_infos": {},
          "$type": "garage.sampler.default_worker.DefaultWorker"
        },
        {
          "_seed": "None",
          "_max_episode_length": 200,
          "_worker_number": 17,
          "agent": {
            "_obs_dim": 11.0,
            "_action_dim": 1.0,
            "training": true,
            "_parameters": {
              "_init_std": {
                "$type": "torch.nn.parameter.Parameter"
              }
            },
            "_buffers": {
              "min_std_param": {
                "$type": "torch.Tensor"
              }
            },
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_mean_module": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 11.0,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      },
                      "1": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  },
                  "_output_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 1.0,
                            "$type": "torch.nn.modules.linear.Linear"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  }
                },
                "_output_dim": 1.0,
                "$type": "garage.torch.modules.mlp_module.MLPModule"
              }
            },
            "_input_dim": 11.0,
            "_hidden_sizes": [
              32,
              32
            ],
            "_learn_std": true,
            "_std_hidden_sizes": [
              32,
              32
            ],
            "_min_std": 1e-06,
            "_max_std": "None",
            "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
            "_std_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_std_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_std_output_nonlinearity": "None",
            "_std_output_w_init": {
              "$type": "builtins.function"
            },
            "_std_parameterization": "exp",
            "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
            "_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_output_nonlinearity": "None",
            "_output_w_init": {
              "$type": "builtins.function"
            },
            "_output_b_init": {
              "$type": "builtins.function"
            },
            "_layer_normalization": false,
            "_norm_dist_class": {
              "$typename": "torch.distributions.normal.Normal"
            },
            "_min_std_param": {
              "$type": "torch.Tensor"
            },
            "_max_std_param": "None",
            "_env_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_name": "GaussianMLPPolicy",
            "$type": "Policy.GaussianMLPPolicy.GaussianMLPPolicy"
          },
          "env": {
            "_env": {
              "env": {
                "env": {
                  "env": {
                    "env": {
                      "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                      "model": "<mujoco._structs.MjModel object at 0x7f904d6f6cb0>",
                      "data": "<mujoco._structs.MjData object at 0x7f904d6f6cf0>",
                      "init_qpos": "array([0., 0., 0.])",
                      "init_qvel": "array([0., 0., 0.])",
                      "_viewers": {},
                      "frame_skip": 5,
                      "viewer": "None",
                      "observation_space": {
                        "dtype": "dtype('float64')",
                        "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "_shape": [
                          11
                        ],
                        "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                        "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                        "low_repr": "-inf",
                        "high_repr": "inf",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "action_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True])",
                        "bounded_above": "array([ True])",
                        "_shape": [
                          1
                        ],
                        "low": "array([-1.], dtype=float32)",
                        "high": "array([1.], dtype=float32)",
                        "low_repr": "-1.0",
                        "high_repr": "1.0",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "render_mode": "None",
                      "renderer": {
                        "no_returns_render": [
                          "human"
                        ],
                        "single_render": [
                          "single_state_pixels",
                          "single_rgb_array",
                          "single_depth_array"
                        ],
                        "mode": "None",
                        "render": {
                          "$type": "functools.partial"
                        },
                        "render_list": [],
                        "$type": "gym.utils.renderer.Renderer"
                      },
                      "_ezpickle_args": [],
                      "_ezpickle_kwargs": {},
                      "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                    },
                    "_action_space": "None",
                    "_observation_space": "None",
                    "_reward_range": "None",
                    "_metadata": "None",
                    "new_step_api": true,
                    "checked_reset": false,
                    "checked_step": false,
                    "checked_render": false,
                    "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": false,
                  "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "_has_reset": false,
                "_disable_render_order_enforcing": false,
                "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "_max_episode_steps": 1000,
              "_elapsed_steps": "None",
              "$type": "gym.wrappers.time_limit.TimeLimit"
            },
            "_max_episode_length": 1000,
            "_render_modes": [
              "human",
              "rgb_array",
              "depth_array",
              "single_rgb_array",
              "single_depth_array"
            ],
            "_step_cnt": "None",
            "_visualize": false,
            "_action_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_env_info": "None",
            "$type": "garage.envs.gym_env.GymEnv"
          },
          "_env_steps": [],
          "_observations": [],
          "_last_observations": [],
          "_agent_infos": {},
          "_lengths": [],
          "_prev_obs": "None",
          "_eps_length": 0,
          "_episode_infos": {},
          "$type": "garage.sampler.default_worker.DefaultWorker"
        },
        {
          "_seed": "None",
          "_max_episode_length": 200,
          "_worker_number": 18,
          "agent": {
            "_obs_dim": 11.0,
            "_action_dim": 1.0,
            "training": true,
            "_parameters": {
              "_init_std": {
                "$type": "torch.nn.parameter.Parameter"
              }
            },
            "_buffers": {
              "min_std_param": {
                "$type": "torch.Tensor"
              }
            },
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_mean_module": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 11.0,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      },
                      "1": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  },
                  "_output_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 1.0,
                            "$type": "torch.nn.modules.linear.Linear"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  }
                },
                "_output_dim": 1.0,
                "$type": "garage.torch.modules.mlp_module.MLPModule"
              }
            },
            "_input_dim": 11.0,
            "_hidden_sizes": [
              32,
              32
            ],
            "_learn_std": true,
            "_std_hidden_sizes": [
              32,
              32
            ],
            "_min_std": 1e-06,
            "_max_std": "None",
            "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
            "_std_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_std_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_std_output_nonlinearity": "None",
            "_std_output_w_init": {
              "$type": "builtins.function"
            },
            "_std_parameterization": "exp",
            "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
            "_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_output_nonlinearity": "None",
            "_output_w_init": {
              "$type": "builtins.function"
            },
            "_output_b_init": {
              "$type": "builtins.function"
            },
            "_layer_normalization": false,
            "_norm_dist_class": {
              "$typename": "torch.distributions.normal.Normal"
            },
            "_min_std_param": {
              "$type": "torch.Tensor"
            },
            "_max_std_param": "None",
            "_env_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_name": "GaussianMLPPolicy",
            "$type": "Policy.GaussianMLPPolicy.GaussianMLPPolicy"
          },
          "env": {
            "_env": {
              "env": {
                "env": {
                  "env": {
                    "env": {
                      "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                      "model": "<mujoco._structs.MjModel object at 0x7f904d6077b0>",
                      "data": "<mujoco._structs.MjData object at 0x7f904d6077f0>",
                      "init_qpos": "array([0., 0., 0.])",
                      "init_qvel": "array([0., 0., 0.])",
                      "_viewers": {},
                      "frame_skip": 5,
                      "viewer": "None",
                      "observation_space": {
                        "dtype": "dtype('float64')",
                        "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "_shape": [
                          11
                        ],
                        "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                        "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                        "low_repr": "-inf",
                        "high_repr": "inf",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "action_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True])",
                        "bounded_above": "array([ True])",
                        "_shape": [
                          1
                        ],
                        "low": "array([-1.], dtype=float32)",
                        "high": "array([1.], dtype=float32)",
                        "low_repr": "-1.0",
                        "high_repr": "1.0",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "render_mode": "None",
                      "renderer": {
                        "no_returns_render": [
                          "human"
                        ],
                        "single_render": [
                          "single_state_pixels",
                          "single_rgb_array",
                          "single_depth_array"
                        ],
                        "mode": "None",
                        "render": {
                          "$type": "functools.partial"
                        },
                        "render_list": [],
                        "$type": "gym.utils.renderer.Renderer"
                      },
                      "_ezpickle_args": [],
                      "_ezpickle_kwargs": {},
                      "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                    },
                    "_action_space": "None",
                    "_observation_space": "None",
                    "_reward_range": "None",
                    "_metadata": "None",
                    "new_step_api": true,
                    "checked_reset": false,
                    "checked_step": false,
                    "checked_render": false,
                    "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": false,
                  "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "_has_reset": false,
                "_disable_render_order_enforcing": false,
                "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "_max_episode_steps": 1000,
              "_elapsed_steps": "None",
              "$type": "gym.wrappers.time_limit.TimeLimit"
            },
            "_max_episode_length": 1000,
            "_render_modes": [
              "human",
              "rgb_array",
              "depth_array",
              "single_rgb_array",
              "single_depth_array"
            ],
            "_step_cnt": "None",
            "_visualize": false,
            "_action_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_env_info": "None",
            "$type": "garage.envs.gym_env.GymEnv"
          },
          "_env_steps": [],
          "_observations": [],
          "_last_observations": [],
          "_agent_infos": {},
          "_lengths": [],
          "_prev_obs": "None",
          "_eps_length": 0,
          "_episode_infos": {},
          "$type": "garage.sampler.default_worker.DefaultWorker"
        },
        {
          "_seed": "None",
          "_max_episode_length": 200,
          "_worker_number": 19,
          "agent": {
            "_obs_dim": 11.0,
            "_action_dim": 1.0,
            "training": true,
            "_parameters": {
              "_init_std": {
                "$type": "torch.nn.parameter.Parameter"
              }
            },
            "_buffers": {
              "min_std_param": {
                "$type": "torch.Tensor"
              }
            },
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_mean_module": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 11.0,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      },
                      "1": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  },
                  "_output_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 1.0,
                            "$type": "torch.nn.modules.linear.Linear"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  }
                },
                "_output_dim": 1.0,
                "$type": "garage.torch.modules.mlp_module.MLPModule"
              }
            },
            "_input_dim": 11.0,
            "_hidden_sizes": [
              32,
              32
            ],
            "_learn_std": true,
            "_std_hidden_sizes": [
              32,
              32
            ],
            "_min_std": 1e-06,
            "_max_std": "None",
            "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
            "_std_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_std_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_std_output_nonlinearity": "None",
            "_std_output_w_init": {
              "$type": "builtins.function"
            },
            "_std_parameterization": "exp",
            "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
            "_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_output_nonlinearity": "None",
            "_output_w_init": {
              "$type": "builtins.function"
            },
            "_output_b_init": {
              "$type": "builtins.function"
            },
            "_layer_normalization": false,
            "_norm_dist_class": {
              "$typename": "torch.distributions.normal.Normal"
            },
            "_min_std_param": {
              "$type": "torch.Tensor"
            },
            "_max_std_param": "None",
            "_env_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_name": "GaussianMLPPolicy",
            "$type": "Policy.GaussianMLPPolicy.GaussianMLPPolicy"
          },
          "env": {
            "_env": {
              "env": {
                "env": {
                  "env": {
                    "env": {
                      "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                      "model": "<mujoco._structs.MjModel object at 0x7f904d5d32b0>",
                      "data": "<mujoco._structs.MjData object at 0x7f904d5d32f0>",
                      "init_qpos": "array([0., 0., 0.])",
                      "init_qvel": "array([0., 0., 0.])",
                      "_viewers": {},
                      "frame_skip": 5,
                      "viewer": "None",
                      "observation_space": {
                        "dtype": "dtype('float64')",
                        "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "_shape": [
                          11
                        ],
                        "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                        "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                        "low_repr": "-inf",
                        "high_repr": "inf",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "action_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True])",
                        "bounded_above": "array([ True])",
                        "_shape": [
                          1
                        ],
                        "low": "array([-1.], dtype=float32)",
                        "high": "array([1.], dtype=float32)",
                        "low_repr": "-1.0",
                        "high_repr": "1.0",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "render_mode": "None",
                      "renderer": {
                        "no_returns_render": [
                          "human"
                        ],
                        "single_render": [
                          "single_state_pixels",
                          "single_rgb_array",
                          "single_depth_array"
                        ],
                        "mode": "None",
                        "render": {
                          "$type": "functools.partial"
                        },
                        "render_list": [],
                        "$type": "gym.utils.renderer.Renderer"
                      },
                      "_ezpickle_args": [],
                      "_ezpickle_kwargs": {},
                      "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                    },
                    "_action_space": "None",
                    "_observation_space": "None",
                    "_reward_range": "None",
                    "_metadata": "None",
                    "new_step_api": true,
                    "checked_reset": false,
                    "checked_step": false,
                    "checked_render": false,
                    "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": false,
                  "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "_has_reset": false,
                "_disable_render_order_enforcing": false,
                "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "_max_episode_steps": 1000,
              "_elapsed_steps": "None",
              "$type": "gym.wrappers.time_limit.TimeLimit"
            },
            "_max_episode_length": 1000,
            "_render_modes": [
              "human",
              "rgb_array",
              "depth_array",
              "single_rgb_array",
              "single_depth_array"
            ],
            "_step_cnt": "None",
            "_visualize": false,
            "_action_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_env_info": "None",
            "$type": "garage.envs.gym_env.GymEnv"
          },
          "_env_steps": [],
          "_observations": [],
          "_last_observations": [],
          "_agent_infos": {},
          "_lengths": [],
          "_prev_obs": "None",
          "_eps_length": 0,
          "_episode_infos": {},
          "$type": "garage.sampler.default_worker.DefaultWorker"
        },
        {
          "_seed": "None",
          "_max_episode_length": 200,
          "_worker_number": 20,
          "agent": {
            "_obs_dim": 11.0,
            "_action_dim": 1.0,
            "training": true,
            "_parameters": {
              "_init_std": {
                "$type": "torch.nn.parameter.Parameter"
              }
            },
            "_buffers": {
              "min_std_param": {
                "$type": "torch.Tensor"
              }
            },
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_mean_module": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 11.0,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      },
                      "1": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  },
                  "_output_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 1.0,
                            "$type": "torch.nn.modules.linear.Linear"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  }
                },
                "_output_dim": 1.0,
                "$type": "garage.torch.modules.mlp_module.MLPModule"
              }
            },
            "_input_dim": 11.0,
            "_hidden_sizes": [
              32,
              32
            ],
            "_learn_std": true,
            "_std_hidden_sizes": [
              32,
              32
            ],
            "_min_std": 1e-06,
            "_max_std": "None",
            "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
            "_std_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_std_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_std_output_nonlinearity": "None",
            "_std_output_w_init": {
              "$type": "builtins.function"
            },
            "_std_parameterization": "exp",
            "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
            "_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_output_nonlinearity": "None",
            "_output_w_init": {
              "$type": "builtins.function"
            },
            "_output_b_init": {
              "$type": "builtins.function"
            },
            "_layer_normalization": false,
            "_norm_dist_class": {
              "$typename": "torch.distributions.normal.Normal"
            },
            "_min_std_param": {
              "$type": "torch.Tensor"
            },
            "_max_std_param": "None",
            "_env_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_name": "GaussianMLPPolicy",
            "$type": "Policy.GaussianMLPPolicy.GaussianMLPPolicy"
          },
          "env": {
            "_env": {
              "env": {
                "env": {
                  "env": {
                    "env": {
                      "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                      "model": "<mujoco._structs.MjModel object at 0x7f904d5d3d70>",
                      "data": "<mujoco._structs.MjData object at 0x7f904d5d3db0>",
                      "init_qpos": "array([0., 0., 0.])",
                      "init_qvel": "array([0., 0., 0.])",
                      "_viewers": {},
                      "frame_skip": 5,
                      "viewer": "None",
                      "observation_space": {
                        "dtype": "dtype('float64')",
                        "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "_shape": [
                          11
                        ],
                        "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                        "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                        "low_repr": "-inf",
                        "high_repr": "inf",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "action_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True])",
                        "bounded_above": "array([ True])",
                        "_shape": [
                          1
                        ],
                        "low": "array([-1.], dtype=float32)",
                        "high": "array([1.], dtype=float32)",
                        "low_repr": "-1.0",
                        "high_repr": "1.0",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "render_mode": "None",
                      "renderer": {
                        "no_returns_render": [
                          "human"
                        ],
                        "single_render": [
                          "single_state_pixels",
                          "single_rgb_array",
                          "single_depth_array"
                        ],
                        "mode": "None",
                        "render": {
                          "$type": "functools.partial"
                        },
                        "render_list": [],
                        "$type": "gym.utils.renderer.Renderer"
                      },
                      "_ezpickle_args": [],
                      "_ezpickle_kwargs": {},
                      "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                    },
                    "_action_space": "None",
                    "_observation_space": "None",
                    "_reward_range": "None",
                    "_metadata": "None",
                    "new_step_api": true,
                    "checked_reset": false,
                    "checked_step": false,
                    "checked_render": false,
                    "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": false,
                  "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "_has_reset": false,
                "_disable_render_order_enforcing": false,
                "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "_max_episode_steps": 1000,
              "_elapsed_steps": "None",
              "$type": "gym.wrappers.time_limit.TimeLimit"
            },
            "_max_episode_length": 1000,
            "_render_modes": [
              "human",
              "rgb_array",
              "depth_array",
              "single_rgb_array",
              "single_depth_array"
            ],
            "_step_cnt": "None",
            "_visualize": false,
            "_action_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_env_info": "None",
            "$type": "garage.envs.gym_env.GymEnv"
          },
          "_env_steps": [],
          "_observations": [],
          "_last_observations": [],
          "_agent_infos": {},
          "_lengths": [],
          "_prev_obs": "None",
          "_eps_length": 0,
          "_episode_infos": {},
          "$type": "garage.sampler.default_worker.DefaultWorker"
        },
        {
          "_seed": "None",
          "_max_episode_length": 200,
          "_worker_number": 21,
          "agent": {
            "_obs_dim": 11.0,
            "_action_dim": 1.0,
            "training": true,
            "_parameters": {
              "_init_std": {
                "$type": "torch.nn.parameter.Parameter"
              }
            },
            "_buffers": {
              "min_std_param": {
                "$type": "torch.Tensor"
              }
            },
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_mean_module": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 11.0,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      },
                      "1": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  },
                  "_output_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 1.0,
                            "$type": "torch.nn.modules.linear.Linear"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  }
                },
                "_output_dim": 1.0,
                "$type": "garage.torch.modules.mlp_module.MLPModule"
              }
            },
            "_input_dim": 11.0,
            "_hidden_sizes": [
              32,
              32
            ],
            "_learn_std": true,
            "_std_hidden_sizes": [
              32,
              32
            ],
            "_min_std": 1e-06,
            "_max_std": "None",
            "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
            "_std_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_std_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_std_output_nonlinearity": "None",
            "_std_output_w_init": {
              "$type": "builtins.function"
            },
            "_std_parameterization": "exp",
            "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
            "_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_output_nonlinearity": "None",
            "_output_w_init": {
              "$type": "builtins.function"
            },
            "_output_b_init": {
              "$type": "builtins.function"
            },
            "_layer_normalization": false,
            "_norm_dist_class": {
              "$typename": "torch.distributions.normal.Normal"
            },
            "_min_std_param": {
              "$type": "torch.Tensor"
            },
            "_max_std_param": "None",
            "_env_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_name": "GaussianMLPPolicy",
            "$type": "Policy.GaussianMLPPolicy.GaussianMLPPolicy"
          },
          "env": {
            "_env": {
              "env": {
                "env": {
                  "env": {
                    "env": {
                      "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                      "model": "<mujoco._structs.MjModel object at 0x7f904d5a1870>",
                      "data": "<mujoco._structs.MjData object at 0x7f904d5a18b0>",
                      "init_qpos": "array([0., 0., 0.])",
                      "init_qvel": "array([0., 0., 0.])",
                      "_viewers": {},
                      "frame_skip": 5,
                      "viewer": "None",
                      "observation_space": {
                        "dtype": "dtype('float64')",
                        "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "_shape": [
                          11
                        ],
                        "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                        "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                        "low_repr": "-inf",
                        "high_repr": "inf",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "action_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True])",
                        "bounded_above": "array([ True])",
                        "_shape": [
                          1
                        ],
                        "low": "array([-1.], dtype=float32)",
                        "high": "array([1.], dtype=float32)",
                        "low_repr": "-1.0",
                        "high_repr": "1.0",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "render_mode": "None",
                      "renderer": {
                        "no_returns_render": [
                          "human"
                        ],
                        "single_render": [
                          "single_state_pixels",
                          "single_rgb_array",
                          "single_depth_array"
                        ],
                        "mode": "None",
                        "render": {
                          "$type": "functools.partial"
                        },
                        "render_list": [],
                        "$type": "gym.utils.renderer.Renderer"
                      },
                      "_ezpickle_args": [],
                      "_ezpickle_kwargs": {},
                      "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                    },
                    "_action_space": "None",
                    "_observation_space": "None",
                    "_reward_range": "None",
                    "_metadata": "None",
                    "new_step_api": true,
                    "checked_reset": false,
                    "checked_step": false,
                    "checked_render": false,
                    "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": false,
                  "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "_has_reset": false,
                "_disable_render_order_enforcing": false,
                "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "_max_episode_steps": 1000,
              "_elapsed_steps": "None",
              "$type": "gym.wrappers.time_limit.TimeLimit"
            },
            "_max_episode_length": 1000,
            "_render_modes": [
              "human",
              "rgb_array",
              "depth_array",
              "single_rgb_array",
              "single_depth_array"
            ],
            "_step_cnt": "None",
            "_visualize": false,
            "_action_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_env_info": "None",
            "$type": "garage.envs.gym_env.GymEnv"
          },
          "_env_steps": [],
          "_observations": [],
          "_last_observations": [],
          "_agent_infos": {},
          "_lengths": [],
          "_prev_obs": "None",
          "_eps_length": 0,
          "_episode_infos": {},
          "$type": "garage.sampler.default_worker.DefaultWorker"
        },
        {
          "_seed": "None",
          "_max_episode_length": 200,
          "_worker_number": 22,
          "agent": {
            "_obs_dim": 11.0,
            "_action_dim": 1.0,
            "training": true,
            "_parameters": {
              "_init_std": {
                "$type": "torch.nn.parameter.Parameter"
              }
            },
            "_buffers": {
              "min_std_param": {
                "$type": "torch.Tensor"
              }
            },
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_mean_module": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 11.0,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      },
                      "1": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  },
                  "_output_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 1.0,
                            "$type": "torch.nn.modules.linear.Linear"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  }
                },
                "_output_dim": 1.0,
                "$type": "garage.torch.modules.mlp_module.MLPModule"
              }
            },
            "_input_dim": 11.0,
            "_hidden_sizes": [
              32,
              32
            ],
            "_learn_std": true,
            "_std_hidden_sizes": [
              32,
              32
            ],
            "_min_std": 1e-06,
            "_max_std": "None",
            "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
            "_std_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_std_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_std_output_nonlinearity": "None",
            "_std_output_w_init": {
              "$type": "builtins.function"
            },
            "_std_parameterization": "exp",
            "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
            "_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_output_nonlinearity": "None",
            "_output_w_init": {
              "$type": "builtins.function"
            },
            "_output_b_init": {
              "$type": "builtins.function"
            },
            "_layer_normalization": false,
            "_norm_dist_class": {
              "$typename": "torch.distributions.normal.Normal"
            },
            "_min_std_param": {
              "$type": "torch.Tensor"
            },
            "_max_std_param": "None",
            "_env_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_name": "GaussianMLPPolicy",
            "$type": "Policy.GaussianMLPPolicy.GaussianMLPPolicy"
          },
          "env": {
            "_env": {
              "env": {
                "env": {
                  "env": {
                    "env": {
                      "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                      "model": "<mujoco._structs.MjModel object at 0x7f904d557370>",
                      "data": "<mujoco._structs.MjData object at 0x7f904d5573b0>",
                      "init_qpos": "array([0., 0., 0.])",
                      "init_qvel": "array([0., 0., 0.])",
                      "_viewers": {},
                      "frame_skip": 5,
                      "viewer": "None",
                      "observation_space": {
                        "dtype": "dtype('float64')",
                        "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "_shape": [
                          11
                        ],
                        "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                        "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                        "low_repr": "-inf",
                        "high_repr": "inf",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "action_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True])",
                        "bounded_above": "array([ True])",
                        "_shape": [
                          1
                        ],
                        "low": "array([-1.], dtype=float32)",
                        "high": "array([1.], dtype=float32)",
                        "low_repr": "-1.0",
                        "high_repr": "1.0",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "render_mode": "None",
                      "renderer": {
                        "no_returns_render": [
                          "human"
                        ],
                        "single_render": [
                          "single_state_pixels",
                          "single_rgb_array",
                          "single_depth_array"
                        ],
                        "mode": "None",
                        "render": {
                          "$type": "functools.partial"
                        },
                        "render_list": [],
                        "$type": "gym.utils.renderer.Renderer"
                      },
                      "_ezpickle_args": [],
                      "_ezpickle_kwargs": {},
                      "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                    },
                    "_action_space": "None",
                    "_observation_space": "None",
                    "_reward_range": "None",
                    "_metadata": "None",
                    "new_step_api": true,
                    "checked_reset": false,
                    "checked_step": false,
                    "checked_render": false,
                    "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": false,
                  "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "_has_reset": false,
                "_disable_render_order_enforcing": false,
                "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "_max_episode_steps": 1000,
              "_elapsed_steps": "None",
              "$type": "gym.wrappers.time_limit.TimeLimit"
            },
            "_max_episode_length": 1000,
            "_render_modes": [
              "human",
              "rgb_array",
              "depth_array",
              "single_rgb_array",
              "single_depth_array"
            ],
            "_step_cnt": "None",
            "_visualize": false,
            "_action_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_env_info": "None",
            "$type": "garage.envs.gym_env.GymEnv"
          },
          "_env_steps": [],
          "_observations": [],
          "_last_observations": [],
          "_agent_infos": {},
          "_lengths": [],
          "_prev_obs": "None",
          "_eps_length": 0,
          "_episode_infos": {},
          "$type": "garage.sampler.default_worker.DefaultWorker"
        },
        {
          "_seed": "None",
          "_max_episode_length": 200,
          "_worker_number": 23,
          "agent": {
            "_obs_dim": 11.0,
            "_action_dim": 1.0,
            "training": true,
            "_parameters": {
              "_init_std": {
                "$type": "torch.nn.parameter.Parameter"
              }
            },
            "_buffers": {
              "min_std_param": {
                "$type": "torch.Tensor"
              }
            },
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_mean_module": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 11.0,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      },
                      "1": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  },
                  "_output_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 1.0,
                            "$type": "torch.nn.modules.linear.Linear"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  }
                },
                "_output_dim": 1.0,
                "$type": "garage.torch.modules.mlp_module.MLPModule"
              }
            },
            "_input_dim": 11.0,
            "_hidden_sizes": [
              32,
              32
            ],
            "_learn_std": true,
            "_std_hidden_sizes": [
              32,
              32
            ],
            "_min_std": 1e-06,
            "_max_std": "None",
            "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
            "_std_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_std_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_std_output_nonlinearity": "None",
            "_std_output_w_init": {
              "$type": "builtins.function"
            },
            "_std_parameterization": "exp",
            "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
            "_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_output_nonlinearity": "None",
            "_output_w_init": {
              "$type": "builtins.function"
            },
            "_output_b_init": {
              "$type": "builtins.function"
            },
            "_layer_normalization": false,
            "_norm_dist_class": {
              "$typename": "torch.distributions.normal.Normal"
            },
            "_min_std_param": {
              "$type": "torch.Tensor"
            },
            "_max_std_param": "None",
            "_env_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_name": "GaussianMLPPolicy",
            "$type": "Policy.GaussianMLPPolicy.GaussianMLPPolicy"
          },
          "env": {
            "_env": {
              "env": {
                "env": {
                  "env": {
                    "env": {
                      "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                      "model": "<mujoco._structs.MjModel object at 0x7f904d5a1b30>",
                      "data": "<mujoco._structs.MjData object at 0x7f904d5a1eb0>",
                      "init_qpos": "array([0., 0., 0.])",
                      "init_qvel": "array([0., 0., 0.])",
                      "_viewers": {},
                      "frame_skip": 5,
                      "viewer": "None",
                      "observation_space": {
                        "dtype": "dtype('float64')",
                        "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "_shape": [
                          11
                        ],
                        "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                        "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                        "low_repr": "-inf",
                        "high_repr": "inf",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "action_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True])",
                        "bounded_above": "array([ True])",
                        "_shape": [
                          1
                        ],
                        "low": "array([-1.], dtype=float32)",
                        "high": "array([1.], dtype=float32)",
                        "low_repr": "-1.0",
                        "high_repr": "1.0",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "render_mode": "None",
                      "renderer": {
                        "no_returns_render": [
                          "human"
                        ],
                        "single_render": [
                          "single_state_pixels",
                          "single_rgb_array",
                          "single_depth_array"
                        ],
                        "mode": "None",
                        "render": {
                          "$type": "functools.partial"
                        },
                        "render_list": [],
                        "$type": "gym.utils.renderer.Renderer"
                      },
                      "_ezpickle_args": [],
                      "_ezpickle_kwargs": {},
                      "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                    },
                    "_action_space": "None",
                    "_observation_space": "None",
                    "_reward_range": "None",
                    "_metadata": "None",
                    "new_step_api": true,
                    "checked_reset": false,
                    "checked_step": false,
                    "checked_render": false,
                    "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": false,
                  "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "_has_reset": false,
                "_disable_render_order_enforcing": false,
                "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "_max_episode_steps": 1000,
              "_elapsed_steps": "None",
              "$type": "gym.wrappers.time_limit.TimeLimit"
            },
            "_max_episode_length": 1000,
            "_render_modes": [
              "human",
              "rgb_array",
              "depth_array",
              "single_rgb_array",
              "single_depth_array"
            ],
            "_step_cnt": "None",
            "_visualize": false,
            "_action_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_env_info": "None",
            "$type": "garage.envs.gym_env.GymEnv"
          },
          "_env_steps": [],
          "_observations": [],
          "_last_observations": [],
          "_agent_infos": {},
          "_lengths": [],
          "_prev_obs": "None",
          "_eps_length": 0,
          "_episode_infos": {},
          "$type": "garage.sampler.default_worker.DefaultWorker"
        },
        {
          "_seed": "None",
          "_max_episode_length": 200,
          "_worker_number": 24,
          "agent": {
            "_obs_dim": 11.0,
            "_action_dim": 1.0,
            "training": true,
            "_parameters": {
              "_init_std": {
                "$type": "torch.nn.parameter.Parameter"
              }
            },
            "_buffers": {
              "min_std_param": {
                "$type": "torch.Tensor"
              }
            },
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_mean_module": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 11.0,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      },
                      "1": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  },
                  "_output_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 1.0,
                            "$type": "torch.nn.modules.linear.Linear"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  }
                },
                "_output_dim": 1.0,
                "$type": "garage.torch.modules.mlp_module.MLPModule"
              }
            },
            "_input_dim": 11.0,
            "_hidden_sizes": [
              32,
              32
            ],
            "_learn_std": true,
            "_std_hidden_sizes": [
              32,
              32
            ],
            "_min_std": 1e-06,
            "_max_std": "None",
            "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
            "_std_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_std_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_std_output_nonlinearity": "None",
            "_std_output_w_init": {
              "$type": "builtins.function"
            },
            "_std_parameterization": "exp",
            "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
            "_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_output_nonlinearity": "None",
            "_output_w_init": {
              "$type": "builtins.function"
            },
            "_output_b_init": {
              "$type": "builtins.function"
            },
            "_layer_normalization": false,
            "_norm_dist_class": {
              "$typename": "torch.distributions.normal.Normal"
            },
            "_min_std_param": {
              "$type": "torch.Tensor"
            },
            "_max_std_param": "None",
            "_env_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_name": "GaussianMLPPolicy",
            "$type": "Policy.GaussianMLPPolicy.GaussianMLPPolicy"
          },
          "env": {
            "_env": {
              "env": {
                "env": {
                  "env": {
                    "env": {
                      "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                      "model": "<mujoco._structs.MjModel object at 0x7f904d607330>",
                      "data": "<mujoco._structs.MjData object at 0x7f904d6074f0>",
                      "init_qpos": "array([0., 0., 0.])",
                      "init_qvel": "array([0., 0., 0.])",
                      "_viewers": {},
                      "frame_skip": 5,
                      "viewer": "None",
                      "observation_space": {
                        "dtype": "dtype('float64')",
                        "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "_shape": [
                          11
                        ],
                        "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                        "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                        "low_repr": "-inf",
                        "high_repr": "inf",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "action_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True])",
                        "bounded_above": "array([ True])",
                        "_shape": [
                          1
                        ],
                        "low": "array([-1.], dtype=float32)",
                        "high": "array([1.], dtype=float32)",
                        "low_repr": "-1.0",
                        "high_repr": "1.0",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "render_mode": "None",
                      "renderer": {
                        "no_returns_render": [
                          "human"
                        ],
                        "single_render": [
                          "single_state_pixels",
                          "single_rgb_array",
                          "single_depth_array"
                        ],
                        "mode": "None",
                        "render": {
                          "$type": "functools.partial"
                        },
                        "render_list": [],
                        "$type": "gym.utils.renderer.Renderer"
                      },
                      "_ezpickle_args": [],
                      "_ezpickle_kwargs": {},
                      "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                    },
                    "_action_space": "None",
                    "_observation_space": "None",
                    "_reward_range": "None",
                    "_metadata": "None",
                    "new_step_api": true,
                    "checked_reset": false,
                    "checked_step": false,
                    "checked_render": false,
                    "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": false,
                  "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "_has_reset": false,
                "_disable_render_order_enforcing": false,
                "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "_max_episode_steps": 1000,
              "_elapsed_steps": "None",
              "$type": "gym.wrappers.time_limit.TimeLimit"
            },
            "_max_episode_length": 1000,
            "_render_modes": [
              "human",
              "rgb_array",
              "depth_array",
              "single_rgb_array",
              "single_depth_array"
            ],
            "_step_cnt": "None",
            "_visualize": false,
            "_action_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_env_info": "None",
            "$type": "garage.envs.gym_env.GymEnv"
          },
          "_env_steps": [],
          "_observations": [],
          "_last_observations": [],
          "_agent_infos": {},
          "_lengths": [],
          "_prev_obs": "None",
          "_eps_length": 0,
          "_episode_infos": {},
          "$type": "garage.sampler.default_worker.DefaultWorker"
        },
        {
          "_seed": "None",
          "_max_episode_length": 200,
          "_worker_number": 25,
          "agent": {
            "_obs_dim": 11.0,
            "_action_dim": 1.0,
            "training": true,
            "_parameters": {
              "_init_std": {
                "$type": "torch.nn.parameter.Parameter"
              }
            },
            "_buffers": {
              "min_std_param": {
                "$type": "torch.Tensor"
              }
            },
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_mean_module": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 11.0,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      },
                      "1": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  },
                  "_output_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 1.0,
                            "$type": "torch.nn.modules.linear.Linear"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  }
                },
                "_output_dim": 1.0,
                "$type": "garage.torch.modules.mlp_module.MLPModule"
              }
            },
            "_input_dim": 11.0,
            "_hidden_sizes": [
              32,
              32
            ],
            "_learn_std": true,
            "_std_hidden_sizes": [
              32,
              32
            ],
            "_min_std": 1e-06,
            "_max_std": "None",
            "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
            "_std_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_std_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_std_output_nonlinearity": "None",
            "_std_output_w_init": {
              "$type": "builtins.function"
            },
            "_std_parameterization": "exp",
            "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
            "_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_output_nonlinearity": "None",
            "_output_w_init": {
              "$type": "builtins.function"
            },
            "_output_b_init": {
              "$type": "builtins.function"
            },
            "_layer_normalization": false,
            "_norm_dist_class": {
              "$typename": "torch.distributions.normal.Normal"
            },
            "_min_std_param": {
              "$type": "torch.Tensor"
            },
            "_max_std_param": "None",
            "_env_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_name": "GaussianMLPPolicy",
            "$type": "Policy.GaussianMLPPolicy.GaussianMLPPolicy"
          },
          "env": {
            "_env": {
              "env": {
                "env": {
                  "env": {
                    "env": {
                      "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                      "model": "<mujoco._structs.MjModel object at 0x7f904d64e4b0>",
                      "data": "<mujoco._structs.MjData object at 0x7f904d64e470>",
                      "init_qpos": "array([0., 0., 0.])",
                      "init_qvel": "array([0., 0., 0.])",
                      "_viewers": {},
                      "frame_skip": 5,
                      "viewer": "None",
                      "observation_space": {
                        "dtype": "dtype('float64')",
                        "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "_shape": [
                          11
                        ],
                        "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                        "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                        "low_repr": "-inf",
                        "high_repr": "inf",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "action_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True])",
                        "bounded_above": "array([ True])",
                        "_shape": [
                          1
                        ],
                        "low": "array([-1.], dtype=float32)",
                        "high": "array([1.], dtype=float32)",
                        "low_repr": "-1.0",
                        "high_repr": "1.0",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "render_mode": "None",
                      "renderer": {
                        "no_returns_render": [
                          "human"
                        ],
                        "single_render": [
                          "single_state_pixels",
                          "single_rgb_array",
                          "single_depth_array"
                        ],
                        "mode": "None",
                        "render": {
                          "$type": "functools.partial"
                        },
                        "render_list": [],
                        "$type": "gym.utils.renderer.Renderer"
                      },
                      "_ezpickle_args": [],
                      "_ezpickle_kwargs": {},
                      "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                    },
                    "_action_space": "None",
                    "_observation_space": "None",
                    "_reward_range": "None",
                    "_metadata": "None",
                    "new_step_api": true,
                    "checked_reset": false,
                    "checked_step": false,
                    "checked_render": false,
                    "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": false,
                  "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "_has_reset": false,
                "_disable_render_order_enforcing": false,
                "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "_max_episode_steps": 1000,
              "_elapsed_steps": "None",
              "$type": "gym.wrappers.time_limit.TimeLimit"
            },
            "_max_episode_length": 1000,
            "_render_modes": [
              "human",
              "rgb_array",
              "depth_array",
              "single_rgb_array",
              "single_depth_array"
            ],
            "_step_cnt": "None",
            "_visualize": false,
            "_action_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_env_info": "None",
            "$type": "garage.envs.gym_env.GymEnv"
          },
          "_env_steps": [],
          "_observations": [],
          "_last_observations": [],
          "_agent_infos": {},
          "_lengths": [],
          "_prev_obs": "None",
          "_eps_length": 0,
          "_episode_infos": {},
          "$type": "garage.sampler.default_worker.DefaultWorker"
        },
        {
          "_seed": "None",
          "_max_episode_length": 200,
          "_worker_number": 26,
          "agent": {
            "_obs_dim": 11.0,
            "_action_dim": 1.0,
            "training": true,
            "_parameters": {
              "_init_std": {
                "$type": "torch.nn.parameter.Parameter"
              }
            },
            "_buffers": {
              "min_std_param": {
                "$type": "torch.Tensor"
              }
            },
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_mean_module": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 11.0,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      },
                      "1": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  },
                  "_output_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 1.0,
                            "$type": "torch.nn.modules.linear.Linear"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  }
                },
                "_output_dim": 1.0,
                "$type": "garage.torch.modules.mlp_module.MLPModule"
              }
            },
            "_input_dim": 11.0,
            "_hidden_sizes": [
              32,
              32
            ],
            "_learn_std": true,
            "_std_hidden_sizes": [
              32,
              32
            ],
            "_min_std": 1e-06,
            "_max_std": "None",
            "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
            "_std_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_std_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_std_output_nonlinearity": "None",
            "_std_output_w_init": {
              "$type": "builtins.function"
            },
            "_std_parameterization": "exp",
            "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
            "_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_output_nonlinearity": "None",
            "_output_w_init": {
              "$type": "builtins.function"
            },
            "_output_b_init": {
              "$type": "builtins.function"
            },
            "_layer_normalization": false,
            "_norm_dist_class": {
              "$typename": "torch.distributions.normal.Normal"
            },
            "_min_std_param": {
              "$type": "torch.Tensor"
            },
            "_max_std_param": "None",
            "_env_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_name": "GaussianMLPPolicy",
            "$type": "Policy.GaussianMLPPolicy.GaussianMLPPolicy"
          },
          "env": {
            "_env": {
              "env": {
                "env": {
                  "env": {
                    "env": {
                      "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                      "model": "<mujoco._structs.MjModel object at 0x7f904d557ab0>",
                      "data": "<mujoco._structs.MjData object at 0x7f904d557c70>",
                      "init_qpos": "array([0., 0., 0.])",
                      "init_qvel": "array([0., 0., 0.])",
                      "_viewers": {},
                      "frame_skip": 5,
                      "viewer": "None",
                      "observation_space": {
                        "dtype": "dtype('float64')",
                        "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "_shape": [
                          11
                        ],
                        "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                        "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                        "low_repr": "-inf",
                        "high_repr": "inf",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "action_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True])",
                        "bounded_above": "array([ True])",
                        "_shape": [
                          1
                        ],
                        "low": "array([-1.], dtype=float32)",
                        "high": "array([1.], dtype=float32)",
                        "low_repr": "-1.0",
                        "high_repr": "1.0",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "render_mode": "None",
                      "renderer": {
                        "no_returns_render": [
                          "human"
                        ],
                        "single_render": [
                          "single_state_pixels",
                          "single_rgb_array",
                          "single_depth_array"
                        ],
                        "mode": "None",
                        "render": {
                          "$type": "functools.partial"
                        },
                        "render_list": [],
                        "$type": "gym.utils.renderer.Renderer"
                      },
                      "_ezpickle_args": [],
                      "_ezpickle_kwargs": {},
                      "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                    },
                    "_action_space": "None",
                    "_observation_space": "None",
                    "_reward_range": "None",
                    "_metadata": "None",
                    "new_step_api": true,
                    "checked_reset": false,
                    "checked_step": false,
                    "checked_render": false,
                    "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": false,
                  "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "_has_reset": false,
                "_disable_render_order_enforcing": false,
                "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "_max_episode_steps": 1000,
              "_elapsed_steps": "None",
              "$type": "gym.wrappers.time_limit.TimeLimit"
            },
            "_max_episode_length": 1000,
            "_render_modes": [
              "human",
              "rgb_array",
              "depth_array",
              "single_rgb_array",
              "single_depth_array"
            ],
            "_step_cnt": "None",
            "_visualize": false,
            "_action_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_env_info": "None",
            "$type": "garage.envs.gym_env.GymEnv"
          },
          "_env_steps": [],
          "_observations": [],
          "_last_observations": [],
          "_agent_infos": {},
          "_lengths": [],
          "_prev_obs": "None",
          "_eps_length": 0,
          "_episode_infos": {},
          "$type": "garage.sampler.default_worker.DefaultWorker"
        },
        {
          "_seed": "None",
          "_max_episode_length": 200,
          "_worker_number": 27,
          "agent": {
            "_obs_dim": 11.0,
            "_action_dim": 1.0,
            "training": true,
            "_parameters": {
              "_init_std": {
                "$type": "torch.nn.parameter.Parameter"
              }
            },
            "_buffers": {
              "min_std_param": {
                "$type": "torch.Tensor"
              }
            },
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_mean_module": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 11.0,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      },
                      "1": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  },
                  "_output_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 1.0,
                            "$type": "torch.nn.modules.linear.Linear"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  }
                },
                "_output_dim": 1.0,
                "$type": "garage.torch.modules.mlp_module.MLPModule"
              }
            },
            "_input_dim": 11.0,
            "_hidden_sizes": [
              32,
              32
            ],
            "_learn_std": true,
            "_std_hidden_sizes": [
              32,
              32
            ],
            "_min_std": 1e-06,
            "_max_std": "None",
            "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
            "_std_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_std_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_std_output_nonlinearity": "None",
            "_std_output_w_init": {
              "$type": "builtins.function"
            },
            "_std_parameterization": "exp",
            "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
            "_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_output_nonlinearity": "None",
            "_output_w_init": {
              "$type": "builtins.function"
            },
            "_output_b_init": {
              "$type": "builtins.function"
            },
            "_layer_normalization": false,
            "_norm_dist_class": {
              "$typename": "torch.distributions.normal.Normal"
            },
            "_min_std_param": {
              "$type": "torch.Tensor"
            },
            "_max_std_param": "None",
            "_env_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_name": "GaussianMLPPolicy",
            "$type": "Policy.GaussianMLPPolicy.GaussianMLPPolicy"
          },
          "env": {
            "_env": {
              "env": {
                "env": {
                  "env": {
                    "env": {
                      "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                      "model": "<mujoco._structs.MjModel object at 0x7f904d6183b0>",
                      "data": "<mujoco._structs.MjData object at 0x7f904d6183f0>",
                      "init_qpos": "array([0., 0., 0.])",
                      "init_qvel": "array([0., 0., 0.])",
                      "_viewers": {},
                      "frame_skip": 5,
                      "viewer": "None",
                      "observation_space": {
                        "dtype": "dtype('float64')",
                        "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                        "_shape": [
                          11
                        ],
                        "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                        "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                        "low_repr": "-inf",
                        "high_repr": "inf",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "action_space": {
                        "dtype": "dtype('float32')",
                        "bounded_below": "array([ True])",
                        "bounded_above": "array([ True])",
                        "_shape": [
                          1
                        ],
                        "low": "array([-1.], dtype=float32)",
                        "high": "array([1.], dtype=float32)",
                        "low_repr": "-1.0",
                        "high_repr": "1.0",
                        "_np_random": "None",
                        "$type": "gym.spaces.box.Box"
                      },
                      "render_mode": "None",
                      "renderer": {
                        "no_returns_render": [
                          "human"
                        ],
                        "single_render": [
                          "single_state_pixels",
                          "single_rgb_array",
                          "single_depth_array"
                        ],
                        "mode": "None",
                        "render": {
                          "$type": "functools.partial"
                        },
                        "render_list": [],
                        "$type": "gym.utils.renderer.Renderer"
                      },
                      "_ezpickle_args": [],
                      "_ezpickle_kwargs": {},
                      "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                    },
                    "_action_space": "None",
                    "_observation_space": "None",
                    "_reward_range": "None",
                    "_metadata": "None",
                    "new_step_api": true,
                    "checked_reset": false,
                    "checked_step": false,
                    "checked_render": false,
                    "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": false,
                  "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "_has_reset": false,
                "_disable_render_order_enforcing": false,
                "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "_max_episode_steps": 1000,
              "_elapsed_steps": "None",
              "$type": "gym.wrappers.time_limit.TimeLimit"
            },
            "_max_episode_length": 1000,
            "_render_modes": [
              "human",
              "rgb_array",
              "depth_array",
              "single_rgb_array",
              "single_depth_array"
            ],
            "_step_cnt": "None",
            "_visualize": false,
            "_action_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 1000,
              "input_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_env_info": "None",
            "$type": "garage.envs.gym_env.GymEnv"
          },
          "_env_steps": [],
          "_observations": [],
          "_last_observations": [],
          "_agent_infos": {},
          "_lengths": [],
          "_prev_obs": "None",
          "_eps_length": 0,
          "_episode_infos": {},
          "$type": "garage.sampler.default_worker.DefaultWorker"
        }
      ],
      "total_env_steps": 0,
      "$type": "garage.sampler.local_sampler.LocalSampler"
    },
    "_env_spec": {
      "max_episode_length": 1000,
      "input_space": {
        "dtype": "dtype('float32')",
        "bounded_below": "array([ True])",
        "bounded_above": "array([ True])",
        "_shape": [
          1
        ],
        "low": "array([-1.], dtype=float32)",
        "high": "array([1.], dtype=float32)",
        "low_repr": "-1.0",
        "high_repr": "1.0",
        "_np_random": "None",
        "$type": "akro.box.Box"
      },
      "output_space": {
        "dtype": "dtype('float32')",
        "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
        "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
        "_shape": [
          11
        ],
        "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
        "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
        "low_repr": "-inf",
        "high_repr": "inf",
        "_np_random": "None",
        "$type": "akro.box.Box"
      },
      "$type": "garage._environment.EnvSpec"
    },
    "env": {
      "_env": {
        "env": {
          "env": {
            "env": {
              "env": {
                "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                "model": "<mujoco._structs.MjModel object at 0x7f904e72c630>",
                "data": "<mujoco._structs.MjData object at 0x7f904e1727f0>",
                "init_qpos": "array([0., 0., 0.])",
                "init_qvel": "array([0., 0., 0.])",
                "_viewers": {},
                "frame_skip": 5,
                "viewer": "None",
                "observation_space": {
                  "dtype": "dtype('float64')",
                  "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                  "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                  "_shape": [
                    11
                  ],
                  "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                  "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                  "low_repr": "-inf",
                  "high_repr": "inf",
                  "_np_random": "None",
                  "$type": "gym.spaces.box.Box"
                },
                "action_space": {
                  "dtype": "dtype('float32')",
                  "bounded_below": "array([ True])",
                  "bounded_above": "array([ True])",
                  "_shape": [
                    1
                  ],
                  "low": "array([-1.], dtype=float32)",
                  "high": "array([1.], dtype=float32)",
                  "low_repr": "-1.0",
                  "high_repr": "1.0",
                  "_np_random": "None",
                  "$type": "gym.spaces.box.Box"
                },
                "render_mode": "None",
                "renderer": {
                  "no_returns_render": [
                    "human"
                  ],
                  "single_render": [
                    "single_state_pixels",
                    "single_rgb_array",
                    "single_depth_array"
                  ],
                  "mode": "None",
                  "render": {
                    "$type": "functools.partial"
                  },
                  "render_list": [],
                  "$type": "gym.utils.renderer.Renderer"
                },
                "_ezpickle_args": [],
                "_ezpickle_kwargs": {},
                "spec": {
                  "id": "InvertedDoublePendulum-v4",
                  "entry_point": "gym.envs.mujoco.inverted_double_pendulum_v4:InvertedDoublePendulumEnv",
                  "reward_threshold": 9100.0,
                  "nondeterministic": false,
                  "max_episode_steps": 1000,
                  "order_enforce": true,
                  "autoreset": false,
                  "disable_env_checker": false,
                  "new_step_api": false,
                  "kwargs": {},
                  "namespace": "None",
                  "name": "InvertedDoublePendulum",
                  "version": 4,
                  "$type": "gym.envs.registration.EnvSpec"
                },
                "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": true,
              "checked_reset": false,
              "checked_step": false,
              "checked_render": false,
              "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": false,
            "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
          },
          "_action_space": "None",
          "_observation_space": "None",
          "_reward_range": "None",
          "_metadata": "None",
          "new_step_api": true,
          "_has_reset": false,
          "_disable_render_order_enforcing": false,
          "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
        },
        "_action_space": "None",
        "_observation_space": "None",
        "_reward_range": "None",
        "_metadata": "None",
        "new_step_api": false,
        "_max_episode_steps": 1000,
        "_elapsed_steps": "None",
        "$type": "gym.wrappers.time_limit.TimeLimit"
      },
      "_max_episode_length": 1000,
      "_render_modes": [
        "human",
        "rgb_array",
        "depth_array",
        "single_rgb_array",
        "single_depth_array"
      ],
      "_step_cnt": "None",
      "_visualize": false,
      "_action_space": {
        "dtype": "dtype('float32')",
        "bounded_below": "array([ True])",
        "bounded_above": "array([ True])",
        "_shape": [
          1
        ],
        "low": "array([-1.], dtype=float32)",
        "high": "array([1.], dtype=float32)",
        "low_repr": "-1.0",
        "high_repr": "1.0",
        "_np_random": "None",
        "$type": "akro.box.Box"
      },
      "_observation_space": {
        "dtype": "dtype('float32')",
        "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
        "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
        "_shape": [
          11
        ],
        "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
        "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
        "low_repr": "-inf",
        "high_repr": "inf",
        "_np_random": "None",
        "$type": "akro.box.Box"
      },
      "_spec": {
        "max_episode_length": 1000,
        "input_space": {
          "dtype": "dtype('float32')",
          "bounded_below": "array([ True])",
          "bounded_above": "array([ True])",
          "_shape": [
            1
          ],
          "low": "array([-1.], dtype=float32)",
          "high": "array([1.], dtype=float32)",
          "low_repr": "-1.0",
          "high_repr": "1.0",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "output_space": {
          "dtype": "dtype('float32')",
          "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
          "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
          "_shape": [
            11
          ],
          "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
          "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
          "low_repr": "-inf",
          "high_repr": "inf",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "$type": "garage._environment.EnvSpec"
      },
      "_env_info": "None",
      "$type": "garage.envs.gym_env.GymEnv"
    },
    "_gae_lambda": 1,
    "_center_adv": true,
    "_positive_adv": false,
    "_policy_ent_coeff": 0.0,
    "_use_softplus_entropy": false,
    "_stop_entropy_gradient": false,
    "_entropy_method": "no_entropy",
    "_eps": 1e-08,
    "_maximum_entropy": false,
    "_entropy_regularzied": false,
    "_episode_reward_mean": [],
    "first_flag": true,
    "sv": false,
    "lr": 0.75,
    "batch_size": 4000,
    "n_timestep": 50000.0,
    "w": 1,
    "c": 1,
    "th": 1.2,
    "storm_dict": {},
    "grad_factor": 100,
    "policy": {
      "_obs_dim": 11.0,
      "_action_dim": 1.0,
      "training": true,
      "_parameters": {
        "_init_std": {
          "$type": "torch.nn.parameter.Parameter"
        }
      },
      "_buffers": {
        "min_std_param": {
          "$type": "torch.Tensor"
        }
      },
      "_non_persistent_buffers_set": [],
      "_backward_hooks": {},
      "_forward_hooks": {},
      "_forward_pre_hooks": {},
      "_state_dict_hooks": {},
      "_load_state_dict_pre_hooks": {},
      "_modules": {
        "_mean_module": {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_layers": {
              "training": true,
              "_parameters": {},
              "_buffers": {},
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "0": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "linear": {
                      "training": true,
                      "_parameters": {
                        "weight": {
                          "$type": "torch.nn.parameter.Parameter"
                        },
                        "bias": {
                          "$type": "torch.nn.parameter.Parameter"
                        }
                      },
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {},
                      "in_features": 11.0,
                      "out_features": 32,
                      "$type": "torch.nn.modules.linear.Linear"
                    },
                    "non_linearity": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {},
                      "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                      "$type": "garage.torch._functions.NonLinearity"
                    }
                  },
                  "$type": "torch.nn.modules.container.Sequential"
                },
                "1": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "linear": {
                      "training": true,
                      "_parameters": {
                        "weight": {
                          "$type": "torch.nn.parameter.Parameter"
                        },
                        "bias": {
                          "$type": "torch.nn.parameter.Parameter"
                        }
                      },
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {},
                      "in_features": 32,
                      "out_features": 32,
                      "$type": "torch.nn.modules.linear.Linear"
                    },
                    "non_linearity": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {},
                      "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                      "$type": "garage.torch._functions.NonLinearity"
                    }
                  },
                  "$type": "torch.nn.modules.container.Sequential"
                }
              },
              "$type": "torch.nn.modules.container.ModuleList"
            },
            "_output_layers": {
              "training": true,
              "_parameters": {},
              "_buffers": {},
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "0": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "linear": {
                      "training": true,
                      "_parameters": {
                        "weight": {
                          "$type": "torch.nn.parameter.Parameter"
                        },
                        "bias": {
                          "$type": "torch.nn.parameter.Parameter"
                        }
                      },
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {},
                      "in_features": 32,
                      "out_features": 1.0,
                      "$type": "torch.nn.modules.linear.Linear"
                    }
                  },
                  "$type": "torch.nn.modules.container.Sequential"
                }
              },
              "$type": "torch.nn.modules.container.ModuleList"
            }
          },
          "_output_dim": 1.0,
          "$type": "garage.torch.modules.mlp_module.MLPModule"
        }
      },
      "_input_dim": 11.0,
      "_hidden_sizes": [
        32,
        32
      ],
      "_learn_std": true,
      "_std_hidden_sizes": [
        32,
        32
      ],
      "_min_std": 1e-06,
      "_max_std": "None",
      "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
      "_std_hidden_w_init": {
        "$type": "builtins.function"
      },
      "_std_hidden_b_init": {
        "$type": "builtins.function"
      },
      "_std_output_nonlinearity": "None",
      "_std_output_w_init": {
        "$type": "builtins.function"
      },
      "_std_parameterization": "exp",
      "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
      "_hidden_w_init": {
        "$type": "builtins.function"
      },
      "_hidden_b_init": {
        "$type": "builtins.function"
      },
      "_output_nonlinearity": "None",
      "_output_w_init": {
        "$type": "builtins.function"
      },
      "_output_b_init": {
        "$type": "builtins.function"
      },
      "_layer_normalization": false,
      "_norm_dist_class": {
        "$typename": "torch.distributions.normal.Normal"
      },
      "_min_std_param": {
        "$type": "torch.Tensor"
      },
      "_max_std_param": "None",
      "_env_spec": {
        "max_episode_length": 1000,
        "input_space": {
          "dtype": "dtype('float32')",
          "bounded_below": "array([ True])",
          "bounded_above": "array([ True])",
          "_shape": [
            1
          ],
          "low": "array([-1.], dtype=float32)",
          "high": "array([1.], dtype=float32)",
          "low_repr": "-1.0",
          "high_repr": "1.0",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "output_space": {
          "dtype": "dtype('float32')",
          "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
          "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
          "_shape": [
            11
          ],
          "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
          "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
          "low_repr": "-inf",
          "high_repr": "inf",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "$type": "garage._environment.EnvSpec"
      },
      "_name": "GaussianMLPPolicy",
      "$type": "Policy.GaussianMLPPolicy.GaussianMLPPolicy"
    },
    "baseline": {
      "_coeffs": "None",
      "_reg_coeff": 1e-05,
      "name": "LinearFeatureBaseline",
      "lower_bound": -10,
      "upper_bound": 10,
      "$type": "garage.np.baselines.linear_feature_baseline.LinearFeatureBaseline"
    },
    "discount": 0.995,
    "max_path_ength": 100,
    "n_samples": 1,
    "max_path_length": 100,
    "_policy": {
      "_obs_dim": 11.0,
      "_action_dim": 1.0,
      "training": true,
      "_parameters": {
        "_init_std": {
          "$type": "torch.nn.parameter.Parameter"
        }
      },
      "_buffers": {
        "min_std_param": {
          "$type": "torch.Tensor"
        }
      },
      "_non_persistent_buffers_set": [],
      "_backward_hooks": {},
      "_forward_hooks": {},
      "_forward_pre_hooks": {},
      "_state_dict_hooks": {},
      "_load_state_dict_pre_hooks": {},
      "_modules": {
        "_mean_module": {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_layers": {
              "training": true,
              "_parameters": {},
              "_buffers": {},
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "0": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "linear": {
                      "training": true,
                      "_parameters": {
                        "weight": {
                          "$type": "torch.nn.parameter.Parameter"
                        },
                        "bias": {
                          "$type": "torch.nn.parameter.Parameter"
                        }
                      },
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {},
                      "in_features": 11.0,
                      "out_features": 32,
                      "$type": "torch.nn.modules.linear.Linear"
                    },
                    "non_linearity": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {},
                      "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                      "$type": "garage.torch._functions.NonLinearity"
                    }
                  },
                  "$type": "torch.nn.modules.container.Sequential"
                },
                "1": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "linear": {
                      "training": true,
                      "_parameters": {
                        "weight": {
                          "$type": "torch.nn.parameter.Parameter"
                        },
                        "bias": {
                          "$type": "torch.nn.parameter.Parameter"
                        }
                      },
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {},
                      "in_features": 32,
                      "out_features": 32,
                      "$type": "torch.nn.modules.linear.Linear"
                    },
                    "non_linearity": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {},
                      "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                      "$type": "garage.torch._functions.NonLinearity"
                    }
                  },
                  "$type": "torch.nn.modules.container.Sequential"
                }
              },
              "$type": "torch.nn.modules.container.ModuleList"
            },
            "_output_layers": {
              "training": true,
              "_parameters": {},
              "_buffers": {},
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "0": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "linear": {
                      "training": true,
                      "_parameters": {
                        "weight": {
                          "$type": "torch.nn.parameter.Parameter"
                        },
                        "bias": {
                          "$type": "torch.nn.parameter.Parameter"
                        }
                      },
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {},
                      "in_features": 32,
                      "out_features": 1.0,
                      "$type": "torch.nn.modules.linear.Linear"
                    }
                  },
                  "$type": "torch.nn.modules.container.Sequential"
                }
              },
              "$type": "torch.nn.modules.container.ModuleList"
            }
          },
          "_output_dim": 1.0,
          "$type": "garage.torch.modules.mlp_module.MLPModule"
        }
      },
      "_input_dim": 11.0,
      "_hidden_sizes": [
        32,
        32
      ],
      "_learn_std": true,
      "_std_hidden_sizes": [
        32,
        32
      ],
      "_min_std": 1e-06,
      "_max_std": "None",
      "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
      "_std_hidden_w_init": {
        "$type": "builtins.function"
      },
      "_std_hidden_b_init": {
        "$type": "builtins.function"
      },
      "_std_output_nonlinearity": "None",
      "_std_output_w_init": {
        "$type": "builtins.function"
      },
      "_std_parameterization": "exp",
      "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
      "_hidden_w_init": {
        "$type": "builtins.function"
      },
      "_hidden_b_init": {
        "$type": "builtins.function"
      },
      "_output_nonlinearity": "None",
      "_output_w_init": {
        "$type": "builtins.function"
      },
      "_output_b_init": {
        "$type": "builtins.function"
      },
      "_layer_normalization": false,
      "_norm_dist_class": {
        "$typename": "torch.distributions.normal.Normal"
      },
      "_min_std_param": {
        "$type": "torch.Tensor"
      },
      "_max_std_param": "None",
      "_env_spec": {
        "max_episode_length": 1000,
        "input_space": {
          "dtype": "dtype('float32')",
          "bounded_below": "array([ True])",
          "bounded_above": "array([ True])",
          "_shape": [
            1
          ],
          "low": "array([-1.], dtype=float32)",
          "high": "array([1.], dtype=float32)",
          "low_repr": "-1.0",
          "high_repr": "1.0",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "output_space": {
          "dtype": "dtype('float32')",
          "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
          "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
          "_shape": [
            11
          ],
          "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
          "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
          "low_repr": "-inf",
          "high_repr": "inf",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "$type": "garage._environment.EnvSpec"
      },
      "_name": "GaussianMLPPolicy",
      "$type": "Policy.GaussianMLPPolicy.GaussianMLPPolicy"
    },
    "_old_policy": {
      "_obs_dim": 11.0,
      "_action_dim": 1.0,
      "training": true,
      "_parameters": {
        "_init_std": {
          "$type": "torch.nn.parameter.Parameter"
        }
      },
      "_buffers": {
        "min_std_param": {
          "$type": "torch.Tensor"
        }
      },
      "_non_persistent_buffers_set": [],
      "_backward_hooks": {},
      "_forward_hooks": {},
      "_forward_pre_hooks": {},
      "_state_dict_hooks": {},
      "_load_state_dict_pre_hooks": {},
      "_modules": {
        "_mean_module": {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_layers": {
              "training": true,
              "_parameters": {},
              "_buffers": {},
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "0": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "linear": {
                      "training": true,
                      "_parameters": {
                        "weight": {
                          "$type": "torch.nn.parameter.Parameter"
                        },
                        "bias": {
                          "$type": "torch.nn.parameter.Parameter"
                        }
                      },
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {},
                      "in_features": 11.0,
                      "out_features": 32,
                      "$type": "torch.nn.modules.linear.Linear"
                    },
                    "non_linearity": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {},
                      "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                      "$type": "garage.torch._functions.NonLinearity"
                    }
                  },
                  "$type": "torch.nn.modules.container.Sequential"
                },
                "1": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "linear": {
                      "training": true,
                      "_parameters": {
                        "weight": {
                          "$type": "torch.nn.parameter.Parameter"
                        },
                        "bias": {
                          "$type": "torch.nn.parameter.Parameter"
                        }
                      },
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {},
                      "in_features": 32,
                      "out_features": 32,
                      "$type": "torch.nn.modules.linear.Linear"
                    },
                    "non_linearity": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {},
                      "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                      "$type": "garage.torch._functions.NonLinearity"
                    }
                  },
                  "$type": "torch.nn.modules.container.Sequential"
                }
              },
              "$type": "torch.nn.modules.container.ModuleList"
            },
            "_output_layers": {
              "training": true,
              "_parameters": {},
              "_buffers": {},
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "0": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "linear": {
                      "training": true,
                      "_parameters": {
                        "weight": {
                          "$type": "torch.nn.parameter.Parameter"
                        },
                        "bias": {
                          "$type": "torch.nn.parameter.Parameter"
                        }
                      },
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {},
                      "in_features": 32,
                      "out_features": 1.0,
                      "$type": "torch.nn.modules.linear.Linear"
                    }
                  },
                  "$type": "torch.nn.modules.container.Sequential"
                }
              },
              "$type": "torch.nn.modules.container.ModuleList"
            }
          },
          "_output_dim": 1.0,
          "$type": "garage.torch.modules.mlp_module.MLPModule"
        }
      },
      "_input_dim": 11.0,
      "_hidden_sizes": [
        32,
        32
      ],
      "_learn_std": true,
      "_std_hidden_sizes": [
        32,
        32
      ],
      "_min_std": 1e-06,
      "_max_std": "None",
      "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
      "_std_hidden_w_init": {
        "$type": "builtins.function"
      },
      "_std_hidden_b_init": {
        "$type": "builtins.function"
      },
      "_std_output_nonlinearity": "None",
      "_std_output_w_init": {
        "$type": "builtins.function"
      },
      "_std_parameterization": "exp",
      "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
      "_hidden_w_init": {
        "$type": "builtins.function"
      },
      "_hidden_b_init": {
        "$type": "builtins.function"
      },
      "_output_nonlinearity": "None",
      "_output_w_init": {
        "$type": "builtins.function"
      },
      "_output_b_init": {
        "$type": "builtins.function"
      },
      "_layer_normalization": false,
      "_norm_dist_class": {
        "$typename": "torch.distributions.normal.Normal"
      },
      "_min_std_param": {
        "$type": "torch.Tensor"
      },
      "_max_std_param": "None",
      "_env_spec": {
        "max_episode_length": 1000,
        "input_space": {
          "dtype": "dtype('float32')",
          "bounded_below": "array([ True])",
          "bounded_above": "array([ True])",
          "_shape": [
            1
          ],
          "low": "array([-1.], dtype=float32)",
          "high": "array([1.], dtype=float32)",
          "low_repr": "-1.0",
          "high_repr": "1.0",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "output_space": {
          "dtype": "dtype('float32')",
          "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
          "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
          "_shape": [
            11
          ],
          "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
          "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
          "low_repr": "-inf",
          "high_repr": "inf",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "$type": "garage._environment.EnvSpec"
      },
      "_name": "GaussianMLPPolicy",
      "$type": "Policy.GaussianMLPPolicy.GaussianMLPPolicy"
    },
    "g_max": 0.05,
    "a": {
      "$type": "torch.Tensor"
    },
    "decay_learning_rate": true,
    "log_dir": "./log/MBPG_IM_0_InvertedDoublePendulum_bs_4000_lr_0.750000",
    "eta_t": 0.75,
    "$type": "Algorithms.MBPG.MBPG_IM"
  },
  "_env": {
    "_env": {
      "env": {
        "env": {
          "env": {
            "env": {
              "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
              "model": "<mujoco._structs.MjModel object at 0x7f904e72c630>",
              "data": "<mujoco._structs.MjData object at 0x7f904e1727f0>",
              "init_qpos": "array([0., 0., 0.])",
              "init_qvel": "array([0., 0., 0.])",
              "_viewers": {},
              "frame_skip": 5,
              "viewer": "None",
              "observation_space": {
                "dtype": "dtype('float64')",
                "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                "_shape": [
                  11
                ],
                "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                "low_repr": "-inf",
                "high_repr": "inf",
                "_np_random": "None",
                "$type": "gym.spaces.box.Box"
              },
              "action_space": {
                "dtype": "dtype('float32')",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "_shape": [
                  1
                ],
                "low": "array([-1.], dtype=float32)",
                "high": "array([1.], dtype=float32)",
                "low_repr": "-1.0",
                "high_repr": "1.0",
                "_np_random": "None",
                "$type": "gym.spaces.box.Box"
              },
              "render_mode": "None",
              "renderer": {
                "no_returns_render": [
                  "human"
                ],
                "single_render": [
                  "single_state_pixels",
                  "single_rgb_array",
                  "single_depth_array"
                ],
                "mode": "None",
                "render": {
                  "$type": "functools.partial"
                },
                "render_list": [],
                "$type": "gym.utils.renderer.Renderer"
              },
              "_ezpickle_args": [],
              "_ezpickle_kwargs": {},
              "spec": {
                "id": "InvertedDoublePendulum-v4",
                "entry_point": "gym.envs.mujoco.inverted_double_pendulum_v4:InvertedDoublePendulumEnv",
                "reward_threshold": 9100.0,
                "nondeterministic": false,
                "max_episode_steps": 1000,
                "order_enforce": true,
                "autoreset": false,
                "disable_env_checker": false,
                "new_step_api": false,
                "kwargs": {},
                "namespace": "None",
                "name": "InvertedDoublePendulum",
                "version": 4,
                "$type": "gym.envs.registration.EnvSpec"
              },
              "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": true,
            "checked_reset": false,
            "checked_step": false,
            "checked_render": false,
            "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
          },
          "_action_space": "None",
          "_observation_space": "None",
          "_reward_range": "None",
          "_metadata": "None",
          "new_step_api": false,
          "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
        },
        "_action_space": "None",
        "_observation_space": "None",
        "_reward_range": "None",
        "_metadata": "None",
        "new_step_api": true,
        "_has_reset": false,
        "_disable_render_order_enforcing": false,
        "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
      },
      "_action_space": "None",
      "_observation_space": "None",
      "_reward_range": "None",
      "_metadata": "None",
      "new_step_api": false,
      "_max_episode_steps": 1000,
      "_elapsed_steps": "None",
      "$type": "gym.wrappers.time_limit.TimeLimit"
    },
    "_max_episode_length": 1000,
    "_render_modes": [
      "human",
      "rgb_array",
      "depth_array",
      "single_rgb_array",
      "single_depth_array"
    ],
    "_step_cnt": "None",
    "_visualize": false,
    "_action_space": {
      "dtype": "dtype('float32')",
      "bounded_below": "array([ True])",
      "bounded_above": "array([ True])",
      "_shape": [
        1
      ],
      "low": "array([-1.], dtype=float32)",
      "high": "array([1.], dtype=float32)",
      "low_repr": "-1.0",
      "high_repr": "1.0",
      "_np_random": "None",
      "$type": "akro.box.Box"
    },
    "_observation_space": {
      "dtype": "dtype('float32')",
      "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
      "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
      "_shape": [
        11
      ],
      "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
      "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
      "low_repr": "-inf",
      "high_repr": "inf",
      "_np_random": "None",
      "$type": "akro.box.Box"
    },
    "_spec": {
      "max_episode_length": 1000,
      "input_space": {
        "dtype": "dtype('float32')",
        "bounded_below": "array([ True])",
        "bounded_above": "array([ True])",
        "_shape": [
          1
        ],
        "low": "array([-1.], dtype=float32)",
        "high": "array([1.], dtype=float32)",
        "low_repr": "-1.0",
        "high_repr": "1.0",
        "_np_random": "None",
        "$type": "akro.box.Box"
      },
      "output_space": {
        "dtype": "dtype('float32')",
        "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
        "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
        "_shape": [
          11
        ],
        "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
        "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
        "low_repr": "-inf",
        "high_repr": "inf",
        "_np_random": "None",
        "$type": "akro.box.Box"
      },
      "$type": "garage._environment.EnvSpec"
    },
    "_env_info": "None",
    "$type": "garage.envs.gym_env.GymEnv"
  },
  "_sampler": {
    "_factory": {
      "n_workers": 28,
      "_seed": "None",
      "_max_episode_length": 200,
      "_worker_class": {
        "$typename": "garage.sampler.default_worker.DefaultWorker"
      },
      "_worker_args": {},
      "$type": "garage.sampler.worker_factory.WorkerFactory"
    },
    "_agents": [
      {
        "_obs_dim": 11.0,
        "_action_dim": 1.0,
        "training": true,
        "_parameters": {
          "_init_std": {
            "$type": "torch.nn.parameter.Parameter"
          }
        },
        "_buffers": {
          "min_std_param": {
            "$type": "torch.Tensor"
          }
        },
        "_non_persistent_buffers_set": [],
        "_backward_hooks": {},
        "_forward_hooks": {},
        "_forward_pre_hooks": {},
        "_state_dict_hooks": {},
        "_load_state_dict_pre_hooks": {},
        "_modules": {
          "_mean_module": {
            "training": true,
            "_parameters": {},
            "_buffers": {},
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_layers": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "0": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "linear": {
                        "training": true,
                        "_parameters": {
                          "weight": {
                            "$type": "torch.nn.parameter.Parameter"
                          },
                          "bias": {
                            "$type": "torch.nn.parameter.Parameter"
                          }
                        },
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {},
                        "in_features": 11.0,
                        "out_features": 32,
                        "$type": "torch.nn.modules.linear.Linear"
                      },
                      "non_linearity": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {},
                        "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                        "$type": "garage.torch._functions.NonLinearity"
                      }
                    },
                    "$type": "torch.nn.modules.container.Sequential"
                  },
                  "1": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "linear": {
                        "training": true,
                        "_parameters": {
                          "weight": {
                            "$type": "torch.nn.parameter.Parameter"
                          },
                          "bias": {
                            "$type": "torch.nn.parameter.Parameter"
                          }
                        },
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {},
                        "in_features": 32,
                        "out_features": 32,
                        "$type": "torch.nn.modules.linear.Linear"
                      },
                      "non_linearity": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {},
                        "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                        "$type": "garage.torch._functions.NonLinearity"
                      }
                    },
                    "$type": "torch.nn.modules.container.Sequential"
                  }
                },
                "$type": "torch.nn.modules.container.ModuleList"
              },
              "_output_layers": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "0": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "linear": {
                        "training": true,
                        "_parameters": {
                          "weight": {
                            "$type": "torch.nn.parameter.Parameter"
                          },
                          "bias": {
                            "$type": "torch.nn.parameter.Parameter"
                          }
                        },
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {},
                        "in_features": 32,
                        "out_features": 1.0,
                        "$type": "torch.nn.modules.linear.Linear"
                      }
                    },
                    "$type": "torch.nn.modules.container.Sequential"
                  }
                },
                "$type": "torch.nn.modules.container.ModuleList"
              }
            },
            "_output_dim": 1.0,
            "$type": "garage.torch.modules.mlp_module.MLPModule"
          }
        },
        "_input_dim": 11.0,
        "_hidden_sizes": [
          32,
          32
        ],
        "_learn_std": true,
        "_std_hidden_sizes": [
          32,
          32
        ],
        "_min_std": 1e-06,
        "_max_std": "None",
        "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
        "_std_hidden_w_init": {
          "$type": "builtins.function"
        },
        "_std_hidden_b_init": {
          "$type": "builtins.function"
        },
        "_std_output_nonlinearity": "None",
        "_std_output_w_init": {
          "$type": "builtins.function"
        },
        "_std_parameterization": "exp",
        "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
        "_hidden_w_init": {
          "$type": "builtins.function"
        },
        "_hidden_b_init": {
          "$type": "builtins.function"
        },
        "_output_nonlinearity": "None",
        "_output_w_init": {
          "$type": "builtins.function"
        },
        "_output_b_init": {
          "$type": "builtins.function"
        },
        "_layer_normalization": false,
        "_norm_dist_class": {
          "$typename": "torch.distributions.normal.Normal"
        },
        "_min_std_param": {
          "$type": "torch.Tensor"
        },
        "_max_std_param": "None",
        "_env_spec": {
          "max_episode_length": 1000,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_name": "GaussianMLPPolicy",
        "$type": "Policy.GaussianMLPPolicy.GaussianMLPPolicy"
      },
      {
        "_obs_dim": 11.0,
        "_action_dim": 1.0,
        "training": true,
        "_parameters": {
          "_init_std": {
            "$type": "torch.nn.parameter.Parameter"
          }
        },
        "_buffers": {
          "min_std_param": {
            "$type": "torch.Tensor"
          }
        },
        "_non_persistent_buffers_set": [],
        "_backward_hooks": {},
        "_forward_hooks": {},
        "_forward_pre_hooks": {},
        "_state_dict_hooks": {},
        "_load_state_dict_pre_hooks": {},
        "_modules": {
          "_mean_module": {
            "training": true,
            "_parameters": {},
            "_buffers": {},
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_layers": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "0": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "linear": {
                        "training": true,
                        "_parameters": {
                          "weight": {
                            "$type": "torch.nn.parameter.Parameter"
                          },
                          "bias": {
                            "$type": "torch.nn.parameter.Parameter"
                          }
                        },
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {},
                        "in_features": 11.0,
                        "out_features": 32,
                        "$type": "torch.nn.modules.linear.Linear"
                      },
                      "non_linearity": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {},
                        "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                        "$type": "garage.torch._functions.NonLinearity"
                      }
                    },
                    "$type": "torch.nn.modules.container.Sequential"
                  },
                  "1": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "linear": {
                        "training": true,
                        "_parameters": {
                          "weight": {
                            "$type": "torch.nn.parameter.Parameter"
                          },
                          "bias": {
                            "$type": "torch.nn.parameter.Parameter"
                          }
                        },
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {},
                        "in_features": 32,
                        "out_features": 32,
                        "$type": "torch.nn.modules.linear.Linear"
                      },
                      "non_linearity": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {},
                        "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                        "$type": "garage.torch._functions.NonLinearity"
                      }
                    },
                    "$type": "torch.nn.modules.container.Sequential"
                  }
                },
                "$type": "torch.nn.modules.container.ModuleList"
              },
              "_output_layers": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "0": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "linear": {
                        "training": true,
                        "_parameters": {
                          "weight": {
                            "$type": "torch.nn.parameter.Parameter"
                          },
                          "bias": {
                            "$type": "torch.nn.parameter.Parameter"
                          }
                        },
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {},
                        "in_features": 32,
                        "out_features": 1.0,
                        "$type": "torch.nn.modules.linear.Linear"
                      }
                    },
                    "$type": "torch.nn.modules.container.Sequential"
                  }
                },
                "$type": "torch.nn.modules.container.ModuleList"
              }
            },
            "_output_dim": 1.0,
            "$type": "garage.torch.modules.mlp_module.MLPModule"
          }
        },
        "_input_dim": 11.0,
        "_hidden_sizes": [
          32,
          32
        ],
        "_learn_std": true,
        "_std_hidden_sizes": [
          32,
          32
        ],
        "_min_std": 1e-06,
        "_max_std": "None",
        "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
        "_std_hidden_w_init": {
          "$type": "builtins.function"
        },
        "_std_hidden_b_init": {
          "$type": "builtins.function"
        },
        "_std_output_nonlinearity": "None",
        "_std_output_w_init": {
          "$type": "builtins.function"
        },
        "_std_parameterization": "exp",
        "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
        "_hidden_w_init": {
          "$type": "builtins.function"
        },
        "_hidden_b_init": {
          "$type": "builtins.function"
        },
        "_output_nonlinearity": "None",
        "_output_w_init": {
          "$type": "builtins.function"
        },
        "_output_b_init": {
          "$type": "builtins.function"
        },
        "_layer_normalization": false,
        "_norm_dist_class": {
          "$typename": "torch.distributions.normal.Normal"
        },
        "_min_std_param": {
          "$type": "torch.Tensor"
        },
        "_max_std_param": "None",
        "_env_spec": {
          "max_episode_length": 1000,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_name": "GaussianMLPPolicy",
        "$type": "Policy.GaussianMLPPolicy.GaussianMLPPolicy"
      },
      {
        "_obs_dim": 11.0,
        "_action_dim": 1.0,
        "training": true,
        "_parameters": {
          "_init_std": {
            "$type": "torch.nn.parameter.Parameter"
          }
        },
        "_buffers": {
          "min_std_param": {
            "$type": "torch.Tensor"
          }
        },
        "_non_persistent_buffers_set": [],
        "_backward_hooks": {},
        "_forward_hooks": {},
        "_forward_pre_hooks": {},
        "_state_dict_hooks": {},
        "_load_state_dict_pre_hooks": {},
        "_modules": {
          "_mean_module": {
            "training": true,
            "_parameters": {},
            "_buffers": {},
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_layers": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "0": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "linear": {
                        "training": true,
                        "_parameters": {
                          "weight": {
                            "$type": "torch.nn.parameter.Parameter"
                          },
                          "bias": {
                            "$type": "torch.nn.parameter.Parameter"
                          }
                        },
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {},
                        "in_features": 11.0,
                        "out_features": 32,
                        "$type": "torch.nn.modules.linear.Linear"
                      },
                      "non_linearity": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {},
                        "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                        "$type": "garage.torch._functions.NonLinearity"
                      }
                    },
                    "$type": "torch.nn.modules.container.Sequential"
                  },
                  "1": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "linear": {
                        "training": true,
                        "_parameters": {
                          "weight": {
                            "$type": "torch.nn.parameter.Parameter"
                          },
                          "bias": {
                            "$type": "torch.nn.parameter.Parameter"
                          }
                        },
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {},
                        "in_features": 32,
                        "out_features": 32,
                        "$type": "torch.nn.modules.linear.Linear"
                      },
                      "non_linearity": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {},
                        "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                        "$type": "garage.torch._functions.NonLinearity"
                      }
                    },
                    "$type": "torch.nn.modules.container.Sequential"
                  }
                },
                "$type": "torch.nn.modules.container.ModuleList"
              },
              "_output_layers": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "0": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "linear": {
                        "training": true,
                        "_parameters": {
                          "weight": {
                            "$type": "torch.nn.parameter.Parameter"
                          },
                          "bias": {
                            "$type": "torch.nn.parameter.Parameter"
                          }
                        },
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {},
                        "in_features": 32,
                        "out_features": 1.0,
                        "$type": "torch.nn.modules.linear.Linear"
                      }
                    },
                    "$type": "torch.nn.modules.container.Sequential"
                  }
                },
                "$type": "torch.nn.modules.container.ModuleList"
              }
            },
            "_output_dim": 1.0,
            "$type": "garage.torch.modules.mlp_module.MLPModule"
          }
        },
        "_input_dim": 11.0,
        "_hidden_sizes": [
          32,
          32
        ],
        "_learn_std": true,
        "_std_hidden_sizes": [
          32,
          32
        ],
        "_min_std": 1e-06,
        "_max_std": "None",
        "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
        "_std_hidden_w_init": {
          "$type": "builtins.function"
        },
        "_std_hidden_b_init": {
          "$type": "builtins.function"
        },
        "_std_output_nonlinearity": "None",
        "_std_output_w_init": {
          "$type": "builtins.function"
        },
        "_std_parameterization": "exp",
        "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
        "_hidden_w_init": {
          "$type": "builtins.function"
        },
        "_hidden_b_init": {
          "$type": "builtins.function"
        },
        "_output_nonlinearity": "None",
        "_output_w_init": {
          "$type": "builtins.function"
        },
        "_output_b_init": {
          "$type": "builtins.function"
        },
        "_layer_normalization": false,
        "_norm_dist_class": {
          "$typename": "torch.distributions.normal.Normal"
        },
        "_min_std_param": {
          "$type": "torch.Tensor"
        },
        "_max_std_param": "None",
        "_env_spec": {
          "max_episode_length": 1000,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_name": "GaussianMLPPolicy",
        "$type": "Policy.GaussianMLPPolicy.GaussianMLPPolicy"
      },
      {
        "_obs_dim": 11.0,
        "_action_dim": 1.0,
        "training": true,
        "_parameters": {
          "_init_std": {
            "$type": "torch.nn.parameter.Parameter"
          }
        },
        "_buffers": {
          "min_std_param": {
            "$type": "torch.Tensor"
          }
        },
        "_non_persistent_buffers_set": [],
        "_backward_hooks": {},
        "_forward_hooks": {},
        "_forward_pre_hooks": {},
        "_state_dict_hooks": {},
        "_load_state_dict_pre_hooks": {},
        "_modules": {
          "_mean_module": {
            "training": true,
            "_parameters": {},
            "_buffers": {},
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_layers": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "0": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "linear": {
                        "training": true,
                        "_parameters": {
                          "weight": {
                            "$type": "torch.nn.parameter.Parameter"
                          },
                          "bias": {
                            "$type": "torch.nn.parameter.Parameter"
                          }
                        },
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {},
                        "in_features": 11.0,
                        "out_features": 32,
                        "$type": "torch.nn.modules.linear.Linear"
                      },
                      "non_linearity": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {},
                        "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                        "$type": "garage.torch._functions.NonLinearity"
                      }
                    },
                    "$type": "torch.nn.modules.container.Sequential"
                  },
                  "1": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "linear": {
                        "training": true,
                        "_parameters": {
                          "weight": {
                            "$type": "torch.nn.parameter.Parameter"
                          },
                          "bias": {
                            "$type": "torch.nn.parameter.Parameter"
                          }
                        },
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {},
                        "in_features": 32,
                        "out_features": 32,
                        "$type": "torch.nn.modules.linear.Linear"
                      },
                      "non_linearity": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {},
                        "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                        "$type": "garage.torch._functions.NonLinearity"
                      }
                    },
                    "$type": "torch.nn.modules.container.Sequential"
                  }
                },
                "$type": "torch.nn.modules.container.ModuleList"
              },
              "_output_layers": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "0": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "linear": {
                        "training": true,
                        "_parameters": {
                          "weight": {
                            "$type": "torch.nn.parameter.Parameter"
                          },
                          "bias": {
                            "$type": "torch.nn.parameter.Parameter"
                          }
                        },
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {},
                        "in_features": 32,
                        "out_features": 1.0,
                        "$type": "torch.nn.modules.linear.Linear"
                      }
                    },
                    "$type": "torch.nn.modules.container.Sequential"
                  }
                },
                "$type": "torch.nn.modules.container.ModuleList"
              }
            },
            "_output_dim": 1.0,
            "$type": "garage.torch.modules.mlp_module.MLPModule"
          }
        },
        "_input_dim": 11.0,
        "_hidden_sizes": [
          32,
          32
        ],
        "_learn_std": true,
        "_std_hidden_sizes": [
          32,
          32
        ],
        "_min_std": 1e-06,
        "_max_std": "None",
        "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
        "_std_hidden_w_init": {
          "$type": "builtins.function"
        },
        "_std_hidden_b_init": {
          "$type": "builtins.function"
        },
        "_std_output_nonlinearity": "None",
        "_std_output_w_init": {
          "$type": "builtins.function"
        },
        "_std_parameterization": "exp",
        "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
        "_hidden_w_init": {
          "$type": "builtins.function"
        },
        "_hidden_b_init": {
          "$type": "builtins.function"
        },
        "_output_nonlinearity": "None",
        "_output_w_init": {
          "$type": "builtins.function"
        },
        "_output_b_init": {
          "$type": "builtins.function"
        },
        "_layer_normalization": false,
        "_norm_dist_class": {
          "$typename": "torch.distributions.normal.Normal"
        },
        "_min_std_param": {
          "$type": "torch.Tensor"
        },
        "_max_std_param": "None",
        "_env_spec": {
          "max_episode_length": 1000,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_name": "GaussianMLPPolicy",
        "$type": "Policy.GaussianMLPPolicy.GaussianMLPPolicy"
      },
      {
        "_obs_dim": 11.0,
        "_action_dim": 1.0,
        "training": true,
        "_parameters": {
          "_init_std": {
            "$type": "torch.nn.parameter.Parameter"
          }
        },
        "_buffers": {
          "min_std_param": {
            "$type": "torch.Tensor"
          }
        },
        "_non_persistent_buffers_set": [],
        "_backward_hooks": {},
        "_forward_hooks": {},
        "_forward_pre_hooks": {},
        "_state_dict_hooks": {},
        "_load_state_dict_pre_hooks": {},
        "_modules": {
          "_mean_module": {
            "training": true,
            "_parameters": {},
            "_buffers": {},
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_layers": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "0": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "linear": {
                        "training": true,
                        "_parameters": {
                          "weight": {
                            "$type": "torch.nn.parameter.Parameter"
                          },
                          "bias": {
                            "$type": "torch.nn.parameter.Parameter"
                          }
                        },
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {},
                        "in_features": 11.0,
                        "out_features": 32,
                        "$type": "torch.nn.modules.linear.Linear"
                      },
                      "non_linearity": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {},
                        "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                        "$type": "garage.torch._functions.NonLinearity"
                      }
                    },
                    "$type": "torch.nn.modules.container.Sequential"
                  },
                  "1": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "linear": {
                        "training": true,
                        "_parameters": {
                          "weight": {
                            "$type": "torch.nn.parameter.Parameter"
                          },
                          "bias": {
                            "$type": "torch.nn.parameter.Parameter"
                          }
                        },
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {},
                        "in_features": 32,
                        "out_features": 32,
                        "$type": "torch.nn.modules.linear.Linear"
                      },
                      "non_linearity": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {},
                        "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                        "$type": "garage.torch._functions.NonLinearity"
                      }
                    },
                    "$type": "torch.nn.modules.container.Sequential"
                  }
                },
                "$type": "torch.nn.modules.container.ModuleList"
              },
              "_output_layers": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "0": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "linear": {
                        "training": true,
                        "_parameters": {
                          "weight": {
                            "$type": "torch.nn.parameter.Parameter"
                          },
                          "bias": {
                            "$type": "torch.nn.parameter.Parameter"
                          }
                        },
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {},
                        "in_features": 32,
                        "out_features": 1.0,
                        "$type": "torch.nn.modules.linear.Linear"
                      }
                    },
                    "$type": "torch.nn.modules.container.Sequential"
                  }
                },
                "$type": "torch.nn.modules.container.ModuleList"
              }
            },
            "_output_dim": 1.0,
            "$type": "garage.torch.modules.mlp_module.MLPModule"
          }
        },
        "_input_dim": 11.0,
        "_hidden_sizes": [
          32,
          32
        ],
        "_learn_std": true,
        "_std_hidden_sizes": [
          32,
          32
        ],
        "_min_std": 1e-06,
        "_max_std": "None",
        "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
        "_std_hidden_w_init": {
          "$type": "builtins.function"
        },
        "_std_hidden_b_init": {
          "$type": "builtins.function"
        },
        "_std_output_nonlinearity": "None",
        "_std_output_w_init": {
          "$type": "builtins.function"
        },
        "_std_parameterization": "exp",
        "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
        "_hidden_w_init": {
          "$type": "builtins.function"
        },
        "_hidden_b_init": {
          "$type": "builtins.function"
        },
        "_output_nonlinearity": "None",
        "_output_w_init": {
          "$type": "builtins.function"
        },
        "_output_b_init": {
          "$type": "builtins.function"
        },
        "_layer_normalization": false,
        "_norm_dist_class": {
          "$typename": "torch.distributions.normal.Normal"
        },
        "_min_std_param": {
          "$type": "torch.Tensor"
        },
        "_max_std_param": "None",
        "_env_spec": {
          "max_episode_length": 1000,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_name": "GaussianMLPPolicy",
        "$type": "Policy.GaussianMLPPolicy.GaussianMLPPolicy"
      },
      {
        "_obs_dim": 11.0,
        "_action_dim": 1.0,
        "training": true,
        "_parameters": {
          "_init_std": {
            "$type": "torch.nn.parameter.Parameter"
          }
        },
        "_buffers": {
          "min_std_param": {
            "$type": "torch.Tensor"
          }
        },
        "_non_persistent_buffers_set": [],
        "_backward_hooks": {},
        "_forward_hooks": {},
        "_forward_pre_hooks": {},
        "_state_dict_hooks": {},
        "_load_state_dict_pre_hooks": {},
        "_modules": {
          "_mean_module": {
            "training": true,
            "_parameters": {},
            "_buffers": {},
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_layers": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "0": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "linear": {
                        "training": true,
                        "_parameters": {
                          "weight": {
                            "$type": "torch.nn.parameter.Parameter"
                          },
                          "bias": {
                            "$type": "torch.nn.parameter.Parameter"
                          }
                        },
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {},
                        "in_features": 11.0,
                        "out_features": 32,
                        "$type": "torch.nn.modules.linear.Linear"
                      },
                      "non_linearity": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {},
                        "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                        "$type": "garage.torch._functions.NonLinearity"
                      }
                    },
                    "$type": "torch.nn.modules.container.Sequential"
                  },
                  "1": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "linear": {
                        "training": true,
                        "_parameters": {
                          "weight": {
                            "$type": "torch.nn.parameter.Parameter"
                          },
                          "bias": {
                            "$type": "torch.nn.parameter.Parameter"
                          }
                        },
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {},
                        "in_features": 32,
                        "out_features": 32,
                        "$type": "torch.nn.modules.linear.Linear"
                      },
                      "non_linearity": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {},
                        "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                        "$type": "garage.torch._functions.NonLinearity"
                      }
                    },
                    "$type": "torch.nn.modules.container.Sequential"
                  }
                },
                "$type": "torch.nn.modules.container.ModuleList"
              },
              "_output_layers": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "0": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "linear": {
                        "training": true,
                        "_parameters": {
                          "weight": {
                            "$type": "torch.nn.parameter.Parameter"
                          },
                          "bias": {
                            "$type": "torch.nn.parameter.Parameter"
                          }
                        },
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {},
                        "in_features": 32,
                        "out_features": 1.0,
                        "$type": "torch.nn.modules.linear.Linear"
                      }
                    },
                    "$type": "torch.nn.modules.container.Sequential"
                  }
                },
                "$type": "torch.nn.modules.container.ModuleList"
              }
            },
            "_output_dim": 1.0,
            "$type": "garage.torch.modules.mlp_module.MLPModule"
          }
        },
        "_input_dim": 11.0,
        "_hidden_sizes": [
          32,
          32
        ],
        "_learn_std": true,
        "_std_hidden_sizes": [
          32,
          32
        ],
        "_min_std": 1e-06,
        "_max_std": "None",
        "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
        "_std_hidden_w_init": {
          "$type": "builtins.function"
        },
        "_std_hidden_b_init": {
          "$type": "builtins.function"
        },
        "_std_output_nonlinearity": "None",
        "_std_output_w_init": {
          "$type": "builtins.function"
        },
        "_std_parameterization": "exp",
        "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
        "_hidden_w_init": {
          "$type": "builtins.function"
        },
        "_hidden_b_init": {
          "$type": "builtins.function"
        },
        "_output_nonlinearity": "None",
        "_output_w_init": {
          "$type": "builtins.function"
        },
        "_output_b_init": {
          "$type": "builtins.function"
        },
        "_layer_normalization": false,
        "_norm_dist_class": {
          "$typename": "torch.distributions.normal.Normal"
        },
        "_min_std_param": {
          "$type": "torch.Tensor"
        },
        "_max_std_param": "None",
        "_env_spec": {
          "max_episode_length": 1000,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_name": "GaussianMLPPolicy",
        "$type": "Policy.GaussianMLPPolicy.GaussianMLPPolicy"
      },
      {
        "_obs_dim": 11.0,
        "_action_dim": 1.0,
        "training": true,
        "_parameters": {
          "_init_std": {
            "$type": "torch.nn.parameter.Parameter"
          }
        },
        "_buffers": {
          "min_std_param": {
            "$type": "torch.Tensor"
          }
        },
        "_non_persistent_buffers_set": [],
        "_backward_hooks": {},
        "_forward_hooks": {},
        "_forward_pre_hooks": {},
        "_state_dict_hooks": {},
        "_load_state_dict_pre_hooks": {},
        "_modules": {
          "_mean_module": {
            "training": true,
            "_parameters": {},
            "_buffers": {},
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_layers": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "0": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "linear": {
                        "training": true,
                        "_parameters": {
                          "weight": {
                            "$type": "torch.nn.parameter.Parameter"
                          },
                          "bias": {
                            "$type": "torch.nn.parameter.Parameter"
                          }
                        },
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {},
                        "in_features": 11.0,
                        "out_features": 32,
                        "$type": "torch.nn.modules.linear.Linear"
                      },
                      "non_linearity": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {},
                        "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                        "$type": "garage.torch._functions.NonLinearity"
                      }
                    },
                    "$type": "torch.nn.modules.container.Sequential"
                  },
                  "1": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "linear": {
                        "training": true,
                        "_parameters": {
                          "weight": {
                            "$type": "torch.nn.parameter.Parameter"
                          },
                          "bias": {
                            "$type": "torch.nn.parameter.Parameter"
                          }
                        },
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {},
                        "in_features": 32,
                        "out_features": 32,
                        "$type": "torch.nn.modules.linear.Linear"
                      },
                      "non_linearity": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {},
                        "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                        "$type": "garage.torch._functions.NonLinearity"
                      }
                    },
                    "$type": "torch.nn.modules.container.Sequential"
                  }
                },
                "$type": "torch.nn.modules.container.ModuleList"
              },
              "_output_layers": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "0": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "linear": {
                        "training": true,
                        "_parameters": {
                          "weight": {
                            "$type": "torch.nn.parameter.Parameter"
                          },
                          "bias": {
                            "$type": "torch.nn.parameter.Parameter"
                          }
                        },
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {},
                        "in_features": 32,
                        "out_features": 1.0,
                        "$type": "torch.nn.modules.linear.Linear"
                      }
                    },
                    "$type": "torch.nn.modules.container.Sequential"
                  }
                },
                "$type": "torch.nn.modules.container.ModuleList"
              }
            },
            "_output_dim": 1.0,
            "$type": "garage.torch.modules.mlp_module.MLPModule"
          }
        },
        "_input_dim": 11.0,
        "_hidden_sizes": [
          32,
          32
        ],
        "_learn_std": true,
        "_std_hidden_sizes": [
          32,
          32
        ],
        "_min_std": 1e-06,
        "_max_std": "None",
        "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
        "_std_hidden_w_init": {
          "$type": "builtins.function"
        },
        "_std_hidden_b_init": {
          "$type": "builtins.function"
        },
        "_std_output_nonlinearity": "None",
        "_std_output_w_init": {
          "$type": "builtins.function"
        },
        "_std_parameterization": "exp",
        "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
        "_hidden_w_init": {
          "$type": "builtins.function"
        },
        "_hidden_b_init": {
          "$type": "builtins.function"
        },
        "_output_nonlinearity": "None",
        "_output_w_init": {
          "$type": "builtins.function"
        },
        "_output_b_init": {
          "$type": "builtins.function"
        },
        "_layer_normalization": false,
        "_norm_dist_class": {
          "$typename": "torch.distributions.normal.Normal"
        },
        "_min_std_param": {
          "$type": "torch.Tensor"
        },
        "_max_std_param": "None",
        "_env_spec": {
          "max_episode_length": 1000,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_name": "GaussianMLPPolicy",
        "$type": "Policy.GaussianMLPPolicy.GaussianMLPPolicy"
      },
      {
        "_obs_dim": 11.0,
        "_action_dim": 1.0,
        "training": true,
        "_parameters": {
          "_init_std": {
            "$type": "torch.nn.parameter.Parameter"
          }
        },
        "_buffers": {
          "min_std_param": {
            "$type": "torch.Tensor"
          }
        },
        "_non_persistent_buffers_set": [],
        "_backward_hooks": {},
        "_forward_hooks": {},
        "_forward_pre_hooks": {},
        "_state_dict_hooks": {},
        "_load_state_dict_pre_hooks": {},
        "_modules": {
          "_mean_module": {
            "training": true,
            "_parameters": {},
            "_buffers": {},
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_layers": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "0": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "linear": {
                        "training": true,
                        "_parameters": {
                          "weight": {
                            "$type": "torch.nn.parameter.Parameter"
                          },
                          "bias": {
                            "$type": "torch.nn.parameter.Parameter"
                          }
                        },
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {},
                        "in_features": 11.0,
                        "out_features": 32,
                        "$type": "torch.nn.modules.linear.Linear"
                      },
                      "non_linearity": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {},
                        "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                        "$type": "garage.torch._functions.NonLinearity"
                      }
                    },
                    "$type": "torch.nn.modules.container.Sequential"
                  },
                  "1": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "linear": {
                        "training": true,
                        "_parameters": {
                          "weight": {
                            "$type": "torch.nn.parameter.Parameter"
                          },
                          "bias": {
                            "$type": "torch.nn.parameter.Parameter"
                          }
                        },
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {},
                        "in_features": 32,
                        "out_features": 32,
                        "$type": "torch.nn.modules.linear.Linear"
                      },
                      "non_linearity": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {},
                        "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                        "$type": "garage.torch._functions.NonLinearity"
                      }
                    },
                    "$type": "torch.nn.modules.container.Sequential"
                  }
                },
                "$type": "torch.nn.modules.container.ModuleList"
              },
              "_output_layers": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "0": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "linear": {
                        "training": true,
                        "_parameters": {
                          "weight": {
                            "$type": "torch.nn.parameter.Parameter"
                          },
                          "bias": {
                            "$type": "torch.nn.parameter.Parameter"
                          }
                        },
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {},
                        "in_features": 32,
                        "out_features": 1.0,
                        "$type": "torch.nn.modules.linear.Linear"
                      }
                    },
                    "$type": "torch.nn.modules.container.Sequential"
                  }
                },
                "$type": "torch.nn.modules.container.ModuleList"
              }
            },
            "_output_dim": 1.0,
            "$type": "garage.torch.modules.mlp_module.MLPModule"
          }
        },
        "_input_dim": 11.0,
        "_hidden_sizes": [
          32,
          32
        ],
        "_learn_std": true,
        "_std_hidden_sizes": [
          32,
          32
        ],
        "_min_std": 1e-06,
        "_max_std": "None",
        "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
        "_std_hidden_w_init": {
          "$type": "builtins.function"
        },
        "_std_hidden_b_init": {
          "$type": "builtins.function"
        },
        "_std_output_nonlinearity": "None",
        "_std_output_w_init": {
          "$type": "builtins.function"
        },
        "_std_parameterization": "exp",
        "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
        "_hidden_w_init": {
          "$type": "builtins.function"
        },
        "_hidden_b_init": {
          "$type": "builtins.function"
        },
        "_output_nonlinearity": "None",
        "_output_w_init": {
          "$type": "builtins.function"
        },
        "_output_b_init": {
          "$type": "builtins.function"
        },
        "_layer_normalization": false,
        "_norm_dist_class": {
          "$typename": "torch.distributions.normal.Normal"
        },
        "_min_std_param": {
          "$type": "torch.Tensor"
        },
        "_max_std_param": "None",
        "_env_spec": {
          "max_episode_length": 1000,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_name": "GaussianMLPPolicy",
        "$type": "Policy.GaussianMLPPolicy.GaussianMLPPolicy"
      },
      {
        "_obs_dim": 11.0,
        "_action_dim": 1.0,
        "training": true,
        "_parameters": {
          "_init_std": {
            "$type": "torch.nn.parameter.Parameter"
          }
        },
        "_buffers": {
          "min_std_param": {
            "$type": "torch.Tensor"
          }
        },
        "_non_persistent_buffers_set": [],
        "_backward_hooks": {},
        "_forward_hooks": {},
        "_forward_pre_hooks": {},
        "_state_dict_hooks": {},
        "_load_state_dict_pre_hooks": {},
        "_modules": {
          "_mean_module": {
            "training": true,
            "_parameters": {},
            "_buffers": {},
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_layers": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "0": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "linear": {
                        "training": true,
                        "_parameters": {
                          "weight": {
                            "$type": "torch.nn.parameter.Parameter"
                          },
                          "bias": {
                            "$type": "torch.nn.parameter.Parameter"
                          }
                        },
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {},
                        "in_features": 11.0,
                        "out_features": 32,
                        "$type": "torch.nn.modules.linear.Linear"
                      },
                      "non_linearity": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {},
                        "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                        "$type": "garage.torch._functions.NonLinearity"
                      }
                    },
                    "$type": "torch.nn.modules.container.Sequential"
                  },
                  "1": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "linear": {
                        "training": true,
                        "_parameters": {
                          "weight": {
                            "$type": "torch.nn.parameter.Parameter"
                          },
                          "bias": {
                            "$type": "torch.nn.parameter.Parameter"
                          }
                        },
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {},
                        "in_features": 32,
                        "out_features": 32,
                        "$type": "torch.nn.modules.linear.Linear"
                      },
                      "non_linearity": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {},
                        "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                        "$type": "garage.torch._functions.NonLinearity"
                      }
                    },
                    "$type": "torch.nn.modules.container.Sequential"
                  }
                },
                "$type": "torch.nn.modules.container.ModuleList"
              },
              "_output_layers": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "0": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "linear": {
                        "training": true,
                        "_parameters": {
                          "weight": {
                            "$type": "torch.nn.parameter.Parameter"
                          },
                          "bias": {
                            "$type": "torch.nn.parameter.Parameter"
                          }
                        },
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {},
                        "in_features": 32,
                        "out_features": 1.0,
                        "$type": "torch.nn.modules.linear.Linear"
                      }
                    },
                    "$type": "torch.nn.modules.container.Sequential"
                  }
                },
                "$type": "torch.nn.modules.container.ModuleList"
              }
            },
            "_output_dim": 1.0,
            "$type": "garage.torch.modules.mlp_module.MLPModule"
          }
        },
        "_input_dim": 11.0,
        "_hidden_sizes": [
          32,
          32
        ],
        "_learn_std": true,
        "_std_hidden_sizes": [
          32,
          32
        ],
        "_min_std": 1e-06,
        "_max_std": "None",
        "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
        "_std_hidden_w_init": {
          "$type": "builtins.function"
        },
        "_std_hidden_b_init": {
          "$type": "builtins.function"
        },
        "_std_output_nonlinearity": "None",
        "_std_output_w_init": {
          "$type": "builtins.function"
        },
        "_std_parameterization": "exp",
        "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
        "_hidden_w_init": {
          "$type": "builtins.function"
        },
        "_hidden_b_init": {
          "$type": "builtins.function"
        },
        "_output_nonlinearity": "None",
        "_output_w_init": {
          "$type": "builtins.function"
        },
        "_output_b_init": {
          "$type": "builtins.function"
        },
        "_layer_normalization": false,
        "_norm_dist_class": {
          "$typename": "torch.distributions.normal.Normal"
        },
        "_min_std_param": {
          "$type": "torch.Tensor"
        },
        "_max_std_param": "None",
        "_env_spec": {
          "max_episode_length": 1000,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_name": "GaussianMLPPolicy",
        "$type": "Policy.GaussianMLPPolicy.GaussianMLPPolicy"
      },
      {
        "_obs_dim": 11.0,
        "_action_dim": 1.0,
        "training": true,
        "_parameters": {
          "_init_std": {
            "$type": "torch.nn.parameter.Parameter"
          }
        },
        "_buffers": {
          "min_std_param": {
            "$type": "torch.Tensor"
          }
        },
        "_non_persistent_buffers_set": [],
        "_backward_hooks": {},
        "_forward_hooks": {},
        "_forward_pre_hooks": {},
        "_state_dict_hooks": {},
        "_load_state_dict_pre_hooks": {},
        "_modules": {
          "_mean_module": {
            "training": true,
            "_parameters": {},
            "_buffers": {},
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_layers": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "0": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "linear": {
                        "training": true,
                        "_parameters": {
                          "weight": {
                            "$type": "torch.nn.parameter.Parameter"
                          },
                          "bias": {
                            "$type": "torch.nn.parameter.Parameter"
                          }
                        },
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {},
                        "in_features": 11.0,
                        "out_features": 32,
                        "$type": "torch.nn.modules.linear.Linear"
                      },
                      "non_linearity": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {},
                        "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                        "$type": "garage.torch._functions.NonLinearity"
                      }
                    },
                    "$type": "torch.nn.modules.container.Sequential"
                  },
                  "1": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "linear": {
                        "training": true,
                        "_parameters": {
                          "weight": {
                            "$type": "torch.nn.parameter.Parameter"
                          },
                          "bias": {
                            "$type": "torch.nn.parameter.Parameter"
                          }
                        },
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {},
                        "in_features": 32,
                        "out_features": 32,
                        "$type": "torch.nn.modules.linear.Linear"
                      },
                      "non_linearity": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {},
                        "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                        "$type": "garage.torch._functions.NonLinearity"
                      }
                    },
                    "$type": "torch.nn.modules.container.Sequential"
                  }
                },
                "$type": "torch.nn.modules.container.ModuleList"
              },
              "_output_layers": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "0": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "linear": {
                        "training": true,
                        "_parameters": {
                          "weight": {
                            "$type": "torch.nn.parameter.Parameter"
                          },
                          "bias": {
                            "$type": "torch.nn.parameter.Parameter"
                          }
                        },
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {},
                        "in_features": 32,
                        "out_features": 1.0,
                        "$type": "torch.nn.modules.linear.Linear"
                      }
                    },
                    "$type": "torch.nn.modules.container.Sequential"
                  }
                },
                "$type": "torch.nn.modules.container.ModuleList"
              }
            },
            "_output_dim": 1.0,
            "$type": "garage.torch.modules.mlp_module.MLPModule"
          }
        },
        "_input_dim": 11.0,
        "_hidden_sizes": [
          32,
          32
        ],
        "_learn_std": true,
        "_std_hidden_sizes": [
          32,
          32
        ],
        "_min_std": 1e-06,
        "_max_std": "None",
        "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
        "_std_hidden_w_init": {
          "$type": "builtins.function"
        },
        "_std_hidden_b_init": {
          "$type": "builtins.function"
        },
        "_std_output_nonlinearity": "None",
        "_std_output_w_init": {
          "$type": "builtins.function"
        },
        "_std_parameterization": "exp",
        "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
        "_hidden_w_init": {
          "$type": "builtins.function"
        },
        "_hidden_b_init": {
          "$type": "builtins.function"
        },
        "_output_nonlinearity": "None",
        "_output_w_init": {
          "$type": "builtins.function"
        },
        "_output_b_init": {
          "$type": "builtins.function"
        },
        "_layer_normalization": false,
        "_norm_dist_class": {
          "$typename": "torch.distributions.normal.Normal"
        },
        "_min_std_param": {
          "$type": "torch.Tensor"
        },
        "_max_std_param": "None",
        "_env_spec": {
          "max_episode_length": 1000,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_name": "GaussianMLPPolicy",
        "$type": "Policy.GaussianMLPPolicy.GaussianMLPPolicy"
      },
      {
        "_obs_dim": 11.0,
        "_action_dim": 1.0,
        "training": true,
        "_parameters": {
          "_init_std": {
            "$type": "torch.nn.parameter.Parameter"
          }
        },
        "_buffers": {
          "min_std_param": {
            "$type": "torch.Tensor"
          }
        },
        "_non_persistent_buffers_set": [],
        "_backward_hooks": {},
        "_forward_hooks": {},
        "_forward_pre_hooks": {},
        "_state_dict_hooks": {},
        "_load_state_dict_pre_hooks": {},
        "_modules": {
          "_mean_module": {
            "training": true,
            "_parameters": {},
            "_buffers": {},
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_layers": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "0": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "linear": {
                        "training": true,
                        "_parameters": {
                          "weight": {
                            "$type": "torch.nn.parameter.Parameter"
                          },
                          "bias": {
                            "$type": "torch.nn.parameter.Parameter"
                          }
                        },
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {},
                        "in_features": 11.0,
                        "out_features": 32,
                        "$type": "torch.nn.modules.linear.Linear"
                      },
                      "non_linearity": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {},
                        "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                        "$type": "garage.torch._functions.NonLinearity"
                      }
                    },
                    "$type": "torch.nn.modules.container.Sequential"
                  },
                  "1": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "linear": {
                        "training": true,
                        "_parameters": {
                          "weight": {
                            "$type": "torch.nn.parameter.Parameter"
                          },
                          "bias": {
                            "$type": "torch.nn.parameter.Parameter"
                          }
                        },
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {},
                        "in_features": 32,
                        "out_features": 32,
                        "$type": "torch.nn.modules.linear.Linear"
                      },
                      "non_linearity": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {},
                        "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                        "$type": "garage.torch._functions.NonLinearity"
                      }
                    },
                    "$type": "torch.nn.modules.container.Sequential"
                  }
                },
                "$type": "torch.nn.modules.container.ModuleList"
              },
              "_output_layers": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "0": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "linear": {
                        "training": true,
                        "_parameters": {
                          "weight": {
                            "$type": "torch.nn.parameter.Parameter"
                          },
                          "bias": {
                            "$type": "torch.nn.parameter.Parameter"
                          }
                        },
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {},
                        "in_features": 32,
                        "out_features": 1.0,
                        "$type": "torch.nn.modules.linear.Linear"
                      }
                    },
                    "$type": "torch.nn.modules.container.Sequential"
                  }
                },
                "$type": "torch.nn.modules.container.ModuleList"
              }
            },
            "_output_dim": 1.0,
            "$type": "garage.torch.modules.mlp_module.MLPModule"
          }
        },
        "_input_dim": 11.0,
        "_hidden_sizes": [
          32,
          32
        ],
        "_learn_std": true,
        "_std_hidden_sizes": [
          32,
          32
        ],
        "_min_std": 1e-06,
        "_max_std": "None",
        "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
        "_std_hidden_w_init": {
          "$type": "builtins.function"
        },
        "_std_hidden_b_init": {
          "$type": "builtins.function"
        },
        "_std_output_nonlinearity": "None",
        "_std_output_w_init": {
          "$type": "builtins.function"
        },
        "_std_parameterization": "exp",
        "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
        "_hidden_w_init": {
          "$type": "builtins.function"
        },
        "_hidden_b_init": {
          "$type": "builtins.function"
        },
        "_output_nonlinearity": "None",
        "_output_w_init": {
          "$type": "builtins.function"
        },
        "_output_b_init": {
          "$type": "builtins.function"
        },
        "_layer_normalization": false,
        "_norm_dist_class": {
          "$typename": "torch.distributions.normal.Normal"
        },
        "_min_std_param": {
          "$type": "torch.Tensor"
        },
        "_max_std_param": "None",
        "_env_spec": {
          "max_episode_length": 1000,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_name": "GaussianMLPPolicy",
        "$type": "Policy.GaussianMLPPolicy.GaussianMLPPolicy"
      },
      {
        "_obs_dim": 11.0,
        "_action_dim": 1.0,
        "training": true,
        "_parameters": {
          "_init_std": {
            "$type": "torch.nn.parameter.Parameter"
          }
        },
        "_buffers": {
          "min_std_param": {
            "$type": "torch.Tensor"
          }
        },
        "_non_persistent_buffers_set": [],
        "_backward_hooks": {},
        "_forward_hooks": {},
        "_forward_pre_hooks": {},
        "_state_dict_hooks": {},
        "_load_state_dict_pre_hooks": {},
        "_modules": {
          "_mean_module": {
            "training": true,
            "_parameters": {},
            "_buffers": {},
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_layers": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "0": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "linear": {
                        "training": true,
                        "_parameters": {
                          "weight": {
                            "$type": "torch.nn.parameter.Parameter"
                          },
                          "bias": {
                            "$type": "torch.nn.parameter.Parameter"
                          }
                        },
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {},
                        "in_features": 11.0,
                        "out_features": 32,
                        "$type": "torch.nn.modules.linear.Linear"
                      },
                      "non_linearity": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {},
                        "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                        "$type": "garage.torch._functions.NonLinearity"
                      }
                    },
                    "$type": "torch.nn.modules.container.Sequential"
                  },
                  "1": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "linear": {
                        "training": true,
                        "_parameters": {
                          "weight": {
                            "$type": "torch.nn.parameter.Parameter"
                          },
                          "bias": {
                            "$type": "torch.nn.parameter.Parameter"
                          }
                        },
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {},
                        "in_features": 32,
                        "out_features": 32,
                        "$type": "torch.nn.modules.linear.Linear"
                      },
                      "non_linearity": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {},
                        "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                        "$type": "garage.torch._functions.NonLinearity"
                      }
                    },
                    "$type": "torch.nn.modules.container.Sequential"
                  }
                },
                "$type": "torch.nn.modules.container.ModuleList"
              },
              "_output_layers": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "0": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "linear": {
                        "training": true,
                        "_parameters": {
                          "weight": {
                            "$type": "torch.nn.parameter.Parameter"
                          },
                          "bias": {
                            "$type": "torch.nn.parameter.Parameter"
                          }
                        },
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {},
                        "in_features": 32,
                        "out_features": 1.0,
                        "$type": "torch.nn.modules.linear.Linear"
                      }
                    },
                    "$type": "torch.nn.modules.container.Sequential"
                  }
                },
                "$type": "torch.nn.modules.container.ModuleList"
              }
            },
            "_output_dim": 1.0,
            "$type": "garage.torch.modules.mlp_module.MLPModule"
          }
        },
        "_input_dim": 11.0,
        "_hidden_sizes": [
          32,
          32
        ],
        "_learn_std": true,
        "_std_hidden_sizes": [
          32,
          32
        ],
        "_min_std": 1e-06,
        "_max_std": "None",
        "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
        "_std_hidden_w_init": {
          "$type": "builtins.function"
        },
        "_std_hidden_b_init": {
          "$type": "builtins.function"
        },
        "_std_output_nonlinearity": "None",
        "_std_output_w_init": {
          "$type": "builtins.function"
        },
        "_std_parameterization": "exp",
        "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
        "_hidden_w_init": {
          "$type": "builtins.function"
        },
        "_hidden_b_init": {
          "$type": "builtins.function"
        },
        "_output_nonlinearity": "None",
        "_output_w_init": {
          "$type": "builtins.function"
        },
        "_output_b_init": {
          "$type": "builtins.function"
        },
        "_layer_normalization": false,
        "_norm_dist_class": {
          "$typename": "torch.distributions.normal.Normal"
        },
        "_min_std_param": {
          "$type": "torch.Tensor"
        },
        "_max_std_param": "None",
        "_env_spec": {
          "max_episode_length": 1000,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_name": "GaussianMLPPolicy",
        "$type": "Policy.GaussianMLPPolicy.GaussianMLPPolicy"
      },
      {
        "_obs_dim": 11.0,
        "_action_dim": 1.0,
        "training": true,
        "_parameters": {
          "_init_std": {
            "$type": "torch.nn.parameter.Parameter"
          }
        },
        "_buffers": {
          "min_std_param": {
            "$type": "torch.Tensor"
          }
        },
        "_non_persistent_buffers_set": [],
        "_backward_hooks": {},
        "_forward_hooks": {},
        "_forward_pre_hooks": {},
        "_state_dict_hooks": {},
        "_load_state_dict_pre_hooks": {},
        "_modules": {
          "_mean_module": {
            "training": true,
            "_parameters": {},
            "_buffers": {},
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_layers": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "0": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "linear": {
                        "training": true,
                        "_parameters": {
                          "weight": {
                            "$type": "torch.nn.parameter.Parameter"
                          },
                          "bias": {
                            "$type": "torch.nn.parameter.Parameter"
                          }
                        },
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {},
                        "in_features": 11.0,
                        "out_features": 32,
                        "$type": "torch.nn.modules.linear.Linear"
                      },
                      "non_linearity": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {},
                        "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                        "$type": "garage.torch._functions.NonLinearity"
                      }
                    },
                    "$type": "torch.nn.modules.container.Sequential"
                  },
                  "1": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "linear": {
                        "training": true,
                        "_parameters": {
                          "weight": {
                            "$type": "torch.nn.parameter.Parameter"
                          },
                          "bias": {
                            "$type": "torch.nn.parameter.Parameter"
                          }
                        },
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {},
                        "in_features": 32,
                        "out_features": 32,
                        "$type": "torch.nn.modules.linear.Linear"
                      },
                      "non_linearity": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {},
                        "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                        "$type": "garage.torch._functions.NonLinearity"
                      }
                    },
                    "$type": "torch.nn.modules.container.Sequential"
                  }
                },
                "$type": "torch.nn.modules.container.ModuleList"
              },
              "_output_layers": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "0": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "linear": {
                        "training": true,
                        "_parameters": {
                          "weight": {
                            "$type": "torch.nn.parameter.Parameter"
                          },
                          "bias": {
                            "$type": "torch.nn.parameter.Parameter"
                          }
                        },
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {},
                        "in_features": 32,
                        "out_features": 1.0,
                        "$type": "torch.nn.modules.linear.Linear"
                      }
                    },
                    "$type": "torch.nn.modules.container.Sequential"
                  }
                },
                "$type": "torch.nn.modules.container.ModuleList"
              }
            },
            "_output_dim": 1.0,
            "$type": "garage.torch.modules.mlp_module.MLPModule"
          }
        },
        "_input_dim": 11.0,
        "_hidden_sizes": [
          32,
          32
        ],
        "_learn_std": true,
        "_std_hidden_sizes": [
          32,
          32
        ],
        "_min_std": 1e-06,
        "_max_std": "None",
        "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
        "_std_hidden_w_init": {
          "$type": "builtins.function"
        },
        "_std_hidden_b_init": {
          "$type": "builtins.function"
        },
        "_std_output_nonlinearity": "None",
        "_std_output_w_init": {
          "$type": "builtins.function"
        },
        "_std_parameterization": "exp",
        "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
        "_hidden_w_init": {
          "$type": "builtins.function"
        },
        "_hidden_b_init": {
          "$type": "builtins.function"
        },
        "_output_nonlinearity": "None",
        "_output_w_init": {
          "$type": "builtins.function"
        },
        "_output_b_init": {
          "$type": "builtins.function"
        },
        "_layer_normalization": false,
        "_norm_dist_class": {
          "$typename": "torch.distributions.normal.Normal"
        },
        "_min_std_param": {
          "$type": "torch.Tensor"
        },
        "_max_std_param": "None",
        "_env_spec": {
          "max_episode_length": 1000,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_name": "GaussianMLPPolicy",
        "$type": "Policy.GaussianMLPPolicy.GaussianMLPPolicy"
      },
      {
        "_obs_dim": 11.0,
        "_action_dim": 1.0,
        "training": true,
        "_parameters": {
          "_init_std": {
            "$type": "torch.nn.parameter.Parameter"
          }
        },
        "_buffers": {
          "min_std_param": {
            "$type": "torch.Tensor"
          }
        },
        "_non_persistent_buffers_set": [],
        "_backward_hooks": {},
        "_forward_hooks": {},
        "_forward_pre_hooks": {},
        "_state_dict_hooks": {},
        "_load_state_dict_pre_hooks": {},
        "_modules": {
          "_mean_module": {
            "training": true,
            "_parameters": {},
            "_buffers": {},
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_layers": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "0": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "linear": {
                        "training": true,
                        "_parameters": {
                          "weight": {
                            "$type": "torch.nn.parameter.Parameter"
                          },
                          "bias": {
                            "$type": "torch.nn.parameter.Parameter"
                          }
                        },
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {},
                        "in_features": 11.0,
                        "out_features": 32,
                        "$type": "torch.nn.modules.linear.Linear"
                      },
                      "non_linearity": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {},
                        "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                        "$type": "garage.torch._functions.NonLinearity"
                      }
                    },
                    "$type": "torch.nn.modules.container.Sequential"
                  },
                  "1": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "linear": {
                        "training": true,
                        "_parameters": {
                          "weight": {
                            "$type": "torch.nn.parameter.Parameter"
                          },
                          "bias": {
                            "$type": "torch.nn.parameter.Parameter"
                          }
                        },
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {},
                        "in_features": 32,
                        "out_features": 32,
                        "$type": "torch.nn.modules.linear.Linear"
                      },
                      "non_linearity": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {},
                        "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                        "$type": "garage.torch._functions.NonLinearity"
                      }
                    },
                    "$type": "torch.nn.modules.container.Sequential"
                  }
                },
                "$type": "torch.nn.modules.container.ModuleList"
              },
              "_output_layers": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "0": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "linear": {
                        "training": true,
                        "_parameters": {
                          "weight": {
                            "$type": "torch.nn.parameter.Parameter"
                          },
                          "bias": {
                            "$type": "torch.nn.parameter.Parameter"
                          }
                        },
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {},
                        "in_features": 32,
                        "out_features": 1.0,
                        "$type": "torch.nn.modules.linear.Linear"
                      }
                    },
                    "$type": "torch.nn.modules.container.Sequential"
                  }
                },
                "$type": "torch.nn.modules.container.ModuleList"
              }
            },
            "_output_dim": 1.0,
            "$type": "garage.torch.modules.mlp_module.MLPModule"
          }
        },
        "_input_dim": 11.0,
        "_hidden_sizes": [
          32,
          32
        ],
        "_learn_std": true,
        "_std_hidden_sizes": [
          32,
          32
        ],
        "_min_std": 1e-06,
        "_max_std": "None",
        "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
        "_std_hidden_w_init": {
          "$type": "builtins.function"
        },
        "_std_hidden_b_init": {
          "$type": "builtins.function"
        },
        "_std_output_nonlinearity": "None",
        "_std_output_w_init": {
          "$type": "builtins.function"
        },
        "_std_parameterization": "exp",
        "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
        "_hidden_w_init": {
          "$type": "builtins.function"
        },
        "_hidden_b_init": {
          "$type": "builtins.function"
        },
        "_output_nonlinearity": "None",
        "_output_w_init": {
          "$type": "builtins.function"
        },
        "_output_b_init": {
          "$type": "builtins.function"
        },
        "_layer_normalization": false,
        "_norm_dist_class": {
          "$typename": "torch.distributions.normal.Normal"
        },
        "_min_std_param": {
          "$type": "torch.Tensor"
        },
        "_max_std_param": "None",
        "_env_spec": {
          "max_episode_length": 1000,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_name": "GaussianMLPPolicy",
        "$type": "Policy.GaussianMLPPolicy.GaussianMLPPolicy"
      },
      {
        "_obs_dim": 11.0,
        "_action_dim": 1.0,
        "training": true,
        "_parameters": {
          "_init_std": {
            "$type": "torch.nn.parameter.Parameter"
          }
        },
        "_buffers": {
          "min_std_param": {
            "$type": "torch.Tensor"
          }
        },
        "_non_persistent_buffers_set": [],
        "_backward_hooks": {},
        "_forward_hooks": {},
        "_forward_pre_hooks": {},
        "_state_dict_hooks": {},
        "_load_state_dict_pre_hooks": {},
        "_modules": {
          "_mean_module": {
            "training": true,
            "_parameters": {},
            "_buffers": {},
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_layers": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "0": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "linear": {
                        "training": true,
                        "_parameters": {
                          "weight": {
                            "$type": "torch.nn.parameter.Parameter"
                          },
                          "bias": {
                            "$type": "torch.nn.parameter.Parameter"
                          }
                        },
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {},
                        "in_features": 11.0,
                        "out_features": 32,
                        "$type": "torch.nn.modules.linear.Linear"
                      },
                      "non_linearity": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {},
                        "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                        "$type": "garage.torch._functions.NonLinearity"
                      }
                    },
                    "$type": "torch.nn.modules.container.Sequential"
                  },
                  "1": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "linear": {
                        "training": true,
                        "_parameters": {
                          "weight": {
                            "$type": "torch.nn.parameter.Parameter"
                          },
                          "bias": {
                            "$type": "torch.nn.parameter.Parameter"
                          }
                        },
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {},
                        "in_features": 32,
                        "out_features": 32,
                        "$type": "torch.nn.modules.linear.Linear"
                      },
                      "non_linearity": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {},
                        "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                        "$type": "garage.torch._functions.NonLinearity"
                      }
                    },
                    "$type": "torch.nn.modules.container.Sequential"
                  }
                },
                "$type": "torch.nn.modules.container.ModuleList"
              },
              "_output_layers": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "0": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "linear": {
                        "training": true,
                        "_parameters": {
                          "weight": {
                            "$type": "torch.nn.parameter.Parameter"
                          },
                          "bias": {
                            "$type": "torch.nn.parameter.Parameter"
                          }
                        },
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {},
                        "in_features": 32,
                        "out_features": 1.0,
                        "$type": "torch.nn.modules.linear.Linear"
                      }
                    },
                    "$type": "torch.nn.modules.container.Sequential"
                  }
                },
                "$type": "torch.nn.modules.container.ModuleList"
              }
            },
            "_output_dim": 1.0,
            "$type": "garage.torch.modules.mlp_module.MLPModule"
          }
        },
        "_input_dim": 11.0,
        "_hidden_sizes": [
          32,
          32
        ],
        "_learn_std": true,
        "_std_hidden_sizes": [
          32,
          32
        ],
        "_min_std": 1e-06,
        "_max_std": "None",
        "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
        "_std_hidden_w_init": {
          "$type": "builtins.function"
        },
        "_std_hidden_b_init": {
          "$type": "builtins.function"
        },
        "_std_output_nonlinearity": "None",
        "_std_output_w_init": {
          "$type": "builtins.function"
        },
        "_std_parameterization": "exp",
        "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
        "_hidden_w_init": {
          "$type": "builtins.function"
        },
        "_hidden_b_init": {
          "$type": "builtins.function"
        },
        "_output_nonlinearity": "None",
        "_output_w_init": {
          "$type": "builtins.function"
        },
        "_output_b_init": {
          "$type": "builtins.function"
        },
        "_layer_normalization": false,
        "_norm_dist_class": {
          "$typename": "torch.distributions.normal.Normal"
        },
        "_min_std_param": {
          "$type": "torch.Tensor"
        },
        "_max_std_param": "None",
        "_env_spec": {
          "max_episode_length": 1000,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_name": "GaussianMLPPolicy",
        "$type": "Policy.GaussianMLPPolicy.GaussianMLPPolicy"
      },
      {
        "_obs_dim": 11.0,
        "_action_dim": 1.0,
        "training": true,
        "_parameters": {
          "_init_std": {
            "$type": "torch.nn.parameter.Parameter"
          }
        },
        "_buffers": {
          "min_std_param": {
            "$type": "torch.Tensor"
          }
        },
        "_non_persistent_buffers_set": [],
        "_backward_hooks": {},
        "_forward_hooks": {},
        "_forward_pre_hooks": {},
        "_state_dict_hooks": {},
        "_load_state_dict_pre_hooks": {},
        "_modules": {
          "_mean_module": {
            "training": true,
            "_parameters": {},
            "_buffers": {},
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_layers": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "0": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "linear": {
                        "training": true,
                        "_parameters": {
                          "weight": {
                            "$type": "torch.nn.parameter.Parameter"
                          },
                          "bias": {
                            "$type": "torch.nn.parameter.Parameter"
                          }
                        },
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {},
                        "in_features": 11.0,
                        "out_features": 32,
                        "$type": "torch.nn.modules.linear.Linear"
                      },
                      "non_linearity": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {},
                        "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                        "$type": "garage.torch._functions.NonLinearity"
                      }
                    },
                    "$type": "torch.nn.modules.container.Sequential"
                  },
                  "1": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "linear": {
                        "training": true,
                        "_parameters": {
                          "weight": {
                            "$type": "torch.nn.parameter.Parameter"
                          },
                          "bias": {
                            "$type": "torch.nn.parameter.Parameter"
                          }
                        },
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {},
                        "in_features": 32,
                        "out_features": 32,
                        "$type": "torch.nn.modules.linear.Linear"
                      },
                      "non_linearity": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {},
                        "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                        "$type": "garage.torch._functions.NonLinearity"
                      }
                    },
                    "$type": "torch.nn.modules.container.Sequential"
                  }
                },
                "$type": "torch.nn.modules.container.ModuleList"
              },
              "_output_layers": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "0": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "linear": {
                        "training": true,
                        "_parameters": {
                          "weight": {
                            "$type": "torch.nn.parameter.Parameter"
                          },
                          "bias": {
                            "$type": "torch.nn.parameter.Parameter"
                          }
                        },
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {},
                        "in_features": 32,
                        "out_features": 1.0,
                        "$type": "torch.nn.modules.linear.Linear"
                      }
                    },
                    "$type": "torch.nn.modules.container.Sequential"
                  }
                },
                "$type": "torch.nn.modules.container.ModuleList"
              }
            },
            "_output_dim": 1.0,
            "$type": "garage.torch.modules.mlp_module.MLPModule"
          }
        },
        "_input_dim": 11.0,
        "_hidden_sizes": [
          32,
          32
        ],
        "_learn_std": true,
        "_std_hidden_sizes": [
          32,
          32
        ],
        "_min_std": 1e-06,
        "_max_std": "None",
        "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
        "_std_hidden_w_init": {
          "$type": "builtins.function"
        },
        "_std_hidden_b_init": {
          "$type": "builtins.function"
        },
        "_std_output_nonlinearity": "None",
        "_std_output_w_init": {
          "$type": "builtins.function"
        },
        "_std_parameterization": "exp",
        "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
        "_hidden_w_init": {
          "$type": "builtins.function"
        },
        "_hidden_b_init": {
          "$type": "builtins.function"
        },
        "_output_nonlinearity": "None",
        "_output_w_init": {
          "$type": "builtins.function"
        },
        "_output_b_init": {
          "$type": "builtins.function"
        },
        "_layer_normalization": false,
        "_norm_dist_class": {
          "$typename": "torch.distributions.normal.Normal"
        },
        "_min_std_param": {
          "$type": "torch.Tensor"
        },
        "_max_std_param": "None",
        "_env_spec": {
          "max_episode_length": 1000,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_name": "GaussianMLPPolicy",
        "$type": "Policy.GaussianMLPPolicy.GaussianMLPPolicy"
      },
      {
        "_obs_dim": 11.0,
        "_action_dim": 1.0,
        "training": true,
        "_parameters": {
          "_init_std": {
            "$type": "torch.nn.parameter.Parameter"
          }
        },
        "_buffers": {
          "min_std_param": {
            "$type": "torch.Tensor"
          }
        },
        "_non_persistent_buffers_set": [],
        "_backward_hooks": {},
        "_forward_hooks": {},
        "_forward_pre_hooks": {},
        "_state_dict_hooks": {},
        "_load_state_dict_pre_hooks": {},
        "_modules": {
          "_mean_module": {
            "training": true,
            "_parameters": {},
            "_buffers": {},
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_layers": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "0": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "linear": {
                        "training": true,
                        "_parameters": {
                          "weight": {
                            "$type": "torch.nn.parameter.Parameter"
                          },
                          "bias": {
                            "$type": "torch.nn.parameter.Parameter"
                          }
                        },
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {},
                        "in_features": 11.0,
                        "out_features": 32,
                        "$type": "torch.nn.modules.linear.Linear"
                      },
                      "non_linearity": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {},
                        "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                        "$type": "garage.torch._functions.NonLinearity"
                      }
                    },
                    "$type": "torch.nn.modules.container.Sequential"
                  },
                  "1": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "linear": {
                        "training": true,
                        "_parameters": {
                          "weight": {
                            "$type": "torch.nn.parameter.Parameter"
                          },
                          "bias": {
                            "$type": "torch.nn.parameter.Parameter"
                          }
                        },
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {},
                        "in_features": 32,
                        "out_features": 32,
                        "$type": "torch.nn.modules.linear.Linear"
                      },
                      "non_linearity": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {},
                        "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                        "$type": "garage.torch._functions.NonLinearity"
                      }
                    },
                    "$type": "torch.nn.modules.container.Sequential"
                  }
                },
                "$type": "torch.nn.modules.container.ModuleList"
              },
              "_output_layers": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "0": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "linear": {
                        "training": true,
                        "_parameters": {
                          "weight": {
                            "$type": "torch.nn.parameter.Parameter"
                          },
                          "bias": {
                            "$type": "torch.nn.parameter.Parameter"
                          }
                        },
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {},
                        "in_features": 32,
                        "out_features": 1.0,
                        "$type": "torch.nn.modules.linear.Linear"
                      }
                    },
                    "$type": "torch.nn.modules.container.Sequential"
                  }
                },
                "$type": "torch.nn.modules.container.ModuleList"
              }
            },
            "_output_dim": 1.0,
            "$type": "garage.torch.modules.mlp_module.MLPModule"
          }
        },
        "_input_dim": 11.0,
        "_hidden_sizes": [
          32,
          32
        ],
        "_learn_std": true,
        "_std_hidden_sizes": [
          32,
          32
        ],
        "_min_std": 1e-06,
        "_max_std": "None",
        "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
        "_std_hidden_w_init": {
          "$type": "builtins.function"
        },
        "_std_hidden_b_init": {
          "$type": "builtins.function"
        },
        "_std_output_nonlinearity": "None",
        "_std_output_w_init": {
          "$type": "builtins.function"
        },
        "_std_parameterization": "exp",
        "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
        "_hidden_w_init": {
          "$type": "builtins.function"
        },
        "_hidden_b_init": {
          "$type": "builtins.function"
        },
        "_output_nonlinearity": "None",
        "_output_w_init": {
          "$type": "builtins.function"
        },
        "_output_b_init": {
          "$type": "builtins.function"
        },
        "_layer_normalization": false,
        "_norm_dist_class": {
          "$typename": "torch.distributions.normal.Normal"
        },
        "_min_std_param": {
          "$type": "torch.Tensor"
        },
        "_max_std_param": "None",
        "_env_spec": {
          "max_episode_length": 1000,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_name": "GaussianMLPPolicy",
        "$type": "Policy.GaussianMLPPolicy.GaussianMLPPolicy"
      },
      {
        "_obs_dim": 11.0,
        "_action_dim": 1.0,
        "training": true,
        "_parameters": {
          "_init_std": {
            "$type": "torch.nn.parameter.Parameter"
          }
        },
        "_buffers": {
          "min_std_param": {
            "$type": "torch.Tensor"
          }
        },
        "_non_persistent_buffers_set": [],
        "_backward_hooks": {},
        "_forward_hooks": {},
        "_forward_pre_hooks": {},
        "_state_dict_hooks": {},
        "_load_state_dict_pre_hooks": {},
        "_modules": {
          "_mean_module": {
            "training": true,
            "_parameters": {},
            "_buffers": {},
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_layers": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "0": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "linear": {
                        "training": true,
                        "_parameters": {
                          "weight": {
                            "$type": "torch.nn.parameter.Parameter"
                          },
                          "bias": {
                            "$type": "torch.nn.parameter.Parameter"
                          }
                        },
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {},
                        "in_features": 11.0,
                        "out_features": 32,
                        "$type": "torch.nn.modules.linear.Linear"
                      },
                      "non_linearity": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {},
                        "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                        "$type": "garage.torch._functions.NonLinearity"
                      }
                    },
                    "$type": "torch.nn.modules.container.Sequential"
                  },
                  "1": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "linear": {
                        "training": true,
                        "_parameters": {
                          "weight": {
                            "$type": "torch.nn.parameter.Parameter"
                          },
                          "bias": {
                            "$type": "torch.nn.parameter.Parameter"
                          }
                        },
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {},
                        "in_features": 32,
                        "out_features": 32,
                        "$type": "torch.nn.modules.linear.Linear"
                      },
                      "non_linearity": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {},
                        "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                        "$type": "garage.torch._functions.NonLinearity"
                      }
                    },
                    "$type": "torch.nn.modules.container.Sequential"
                  }
                },
                "$type": "torch.nn.modules.container.ModuleList"
              },
              "_output_layers": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "0": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "linear": {
                        "training": true,
                        "_parameters": {
                          "weight": {
                            "$type": "torch.nn.parameter.Parameter"
                          },
                          "bias": {
                            "$type": "torch.nn.parameter.Parameter"
                          }
                        },
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {},
                        "in_features": 32,
                        "out_features": 1.0,
                        "$type": "torch.nn.modules.linear.Linear"
                      }
                    },
                    "$type": "torch.nn.modules.container.Sequential"
                  }
                },
                "$type": "torch.nn.modules.container.ModuleList"
              }
            },
            "_output_dim": 1.0,
            "$type": "garage.torch.modules.mlp_module.MLPModule"
          }
        },
        "_input_dim": 11.0,
        "_hidden_sizes": [
          32,
          32
        ],
        "_learn_std": true,
        "_std_hidden_sizes": [
          32,
          32
        ],
        "_min_std": 1e-06,
        "_max_std": "None",
        "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
        "_std_hidden_w_init": {
          "$type": "builtins.function"
        },
        "_std_hidden_b_init": {
          "$type": "builtins.function"
        },
        "_std_output_nonlinearity": "None",
        "_std_output_w_init": {
          "$type": "builtins.function"
        },
        "_std_parameterization": "exp",
        "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
        "_hidden_w_init": {
          "$type": "builtins.function"
        },
        "_hidden_b_init": {
          "$type": "builtins.function"
        },
        "_output_nonlinearity": "None",
        "_output_w_init": {
          "$type": "builtins.function"
        },
        "_output_b_init": {
          "$type": "builtins.function"
        },
        "_layer_normalization": false,
        "_norm_dist_class": {
          "$typename": "torch.distributions.normal.Normal"
        },
        "_min_std_param": {
          "$type": "torch.Tensor"
        },
        "_max_std_param": "None",
        "_env_spec": {
          "max_episode_length": 1000,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_name": "GaussianMLPPolicy",
        "$type": "Policy.GaussianMLPPolicy.GaussianMLPPolicy"
      },
      {
        "_obs_dim": 11.0,
        "_action_dim": 1.0,
        "training": true,
        "_parameters": {
          "_init_std": {
            "$type": "torch.nn.parameter.Parameter"
          }
        },
        "_buffers": {
          "min_std_param": {
            "$type": "torch.Tensor"
          }
        },
        "_non_persistent_buffers_set": [],
        "_backward_hooks": {},
        "_forward_hooks": {},
        "_forward_pre_hooks": {},
        "_state_dict_hooks": {},
        "_load_state_dict_pre_hooks": {},
        "_modules": {
          "_mean_module": {
            "training": true,
            "_parameters": {},
            "_buffers": {},
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_layers": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "0": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "linear": {
                        "training": true,
                        "_parameters": {
                          "weight": {
                            "$type": "torch.nn.parameter.Parameter"
                          },
                          "bias": {
                            "$type": "torch.nn.parameter.Parameter"
                          }
                        },
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {},
                        "in_features": 11.0,
                        "out_features": 32,
                        "$type": "torch.nn.modules.linear.Linear"
                      },
                      "non_linearity": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {},
                        "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                        "$type": "garage.torch._functions.NonLinearity"
                      }
                    },
                    "$type": "torch.nn.modules.container.Sequential"
                  },
                  "1": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "linear": {
                        "training": true,
                        "_parameters": {
                          "weight": {
                            "$type": "torch.nn.parameter.Parameter"
                          },
                          "bias": {
                            "$type": "torch.nn.parameter.Parameter"
                          }
                        },
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {},
                        "in_features": 32,
                        "out_features": 32,
                        "$type": "torch.nn.modules.linear.Linear"
                      },
                      "non_linearity": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {},
                        "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                        "$type": "garage.torch._functions.NonLinearity"
                      }
                    },
                    "$type": "torch.nn.modules.container.Sequential"
                  }
                },
                "$type": "torch.nn.modules.container.ModuleList"
              },
              "_output_layers": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "0": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "linear": {
                        "training": true,
                        "_parameters": {
                          "weight": {
                            "$type": "torch.nn.parameter.Parameter"
                          },
                          "bias": {
                            "$type": "torch.nn.parameter.Parameter"
                          }
                        },
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {},
                        "in_features": 32,
                        "out_features": 1.0,
                        "$type": "torch.nn.modules.linear.Linear"
                      }
                    },
                    "$type": "torch.nn.modules.container.Sequential"
                  }
                },
                "$type": "torch.nn.modules.container.ModuleList"
              }
            },
            "_output_dim": 1.0,
            "$type": "garage.torch.modules.mlp_module.MLPModule"
          }
        },
        "_input_dim": 11.0,
        "_hidden_sizes": [
          32,
          32
        ],
        "_learn_std": true,
        "_std_hidden_sizes": [
          32,
          32
        ],
        "_min_std": 1e-06,
        "_max_std": "None",
        "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
        "_std_hidden_w_init": {
          "$type": "builtins.function"
        },
        "_std_hidden_b_init": {
          "$type": "builtins.function"
        },
        "_std_output_nonlinearity": "None",
        "_std_output_w_init": {
          "$type": "builtins.function"
        },
        "_std_parameterization": "exp",
        "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
        "_hidden_w_init": {
          "$type": "builtins.function"
        },
        "_hidden_b_init": {
          "$type": "builtins.function"
        },
        "_output_nonlinearity": "None",
        "_output_w_init": {
          "$type": "builtins.function"
        },
        "_output_b_init": {
          "$type": "builtins.function"
        },
        "_layer_normalization": false,
        "_norm_dist_class": {
          "$typename": "torch.distributions.normal.Normal"
        },
        "_min_std_param": {
          "$type": "torch.Tensor"
        },
        "_max_std_param": "None",
        "_env_spec": {
          "max_episode_length": 1000,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_name": "GaussianMLPPolicy",
        "$type": "Policy.GaussianMLPPolicy.GaussianMLPPolicy"
      },
      {
        "_obs_dim": 11.0,
        "_action_dim": 1.0,
        "training": true,
        "_parameters": {
          "_init_std": {
            "$type": "torch.nn.parameter.Parameter"
          }
        },
        "_buffers": {
          "min_std_param": {
            "$type": "torch.Tensor"
          }
        },
        "_non_persistent_buffers_set": [],
        "_backward_hooks": {},
        "_forward_hooks": {},
        "_forward_pre_hooks": {},
        "_state_dict_hooks": {},
        "_load_state_dict_pre_hooks": {},
        "_modules": {
          "_mean_module": {
            "training": true,
            "_parameters": {},
            "_buffers": {},
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_layers": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "0": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "linear": {
                        "training": true,
                        "_parameters": {
                          "weight": {
                            "$type": "torch.nn.parameter.Parameter"
                          },
                          "bias": {
                            "$type": "torch.nn.parameter.Parameter"
                          }
                        },
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {},
                        "in_features": 11.0,
                        "out_features": 32,
                        "$type": "torch.nn.modules.linear.Linear"
                      },
                      "non_linearity": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {},
                        "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                        "$type": "garage.torch._functions.NonLinearity"
                      }
                    },
                    "$type": "torch.nn.modules.container.Sequential"
                  },
                  "1": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "linear": {
                        "training": true,
                        "_parameters": {
                          "weight": {
                            "$type": "torch.nn.parameter.Parameter"
                          },
                          "bias": {
                            "$type": "torch.nn.parameter.Parameter"
                          }
                        },
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {},
                        "in_features": 32,
                        "out_features": 32,
                        "$type": "torch.nn.modules.linear.Linear"
                      },
                      "non_linearity": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {},
                        "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                        "$type": "garage.torch._functions.NonLinearity"
                      }
                    },
                    "$type": "torch.nn.modules.container.Sequential"
                  }
                },
                "$type": "torch.nn.modules.container.ModuleList"
              },
              "_output_layers": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "0": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "linear": {
                        "training": true,
                        "_parameters": {
                          "weight": {
                            "$type": "torch.nn.parameter.Parameter"
                          },
                          "bias": {
                            "$type": "torch.nn.parameter.Parameter"
                          }
                        },
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {},
                        "in_features": 32,
                        "out_features": 1.0,
                        "$type": "torch.nn.modules.linear.Linear"
                      }
                    },
                    "$type": "torch.nn.modules.container.Sequential"
                  }
                },
                "$type": "torch.nn.modules.container.ModuleList"
              }
            },
            "_output_dim": 1.0,
            "$type": "garage.torch.modules.mlp_module.MLPModule"
          }
        },
        "_input_dim": 11.0,
        "_hidden_sizes": [
          32,
          32
        ],
        "_learn_std": true,
        "_std_hidden_sizes": [
          32,
          32
        ],
        "_min_std": 1e-06,
        "_max_std": "None",
        "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
        "_std_hidden_w_init": {
          "$type": "builtins.function"
        },
        "_std_hidden_b_init": {
          "$type": "builtins.function"
        },
        "_std_output_nonlinearity": "None",
        "_std_output_w_init": {
          "$type": "builtins.function"
        },
        "_std_parameterization": "exp",
        "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
        "_hidden_w_init": {
          "$type": "builtins.function"
        },
        "_hidden_b_init": {
          "$type": "builtins.function"
        },
        "_output_nonlinearity": "None",
        "_output_w_init": {
          "$type": "builtins.function"
        },
        "_output_b_init": {
          "$type": "builtins.function"
        },
        "_layer_normalization": false,
        "_norm_dist_class": {
          "$typename": "torch.distributions.normal.Normal"
        },
        "_min_std_param": {
          "$type": "torch.Tensor"
        },
        "_max_std_param": "None",
        "_env_spec": {
          "max_episode_length": 1000,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_name": "GaussianMLPPolicy",
        "$type": "Policy.GaussianMLPPolicy.GaussianMLPPolicy"
      },
      {
        "_obs_dim": 11.0,
        "_action_dim": 1.0,
        "training": true,
        "_parameters": {
          "_init_std": {
            "$type": "torch.nn.parameter.Parameter"
          }
        },
        "_buffers": {
          "min_std_param": {
            "$type": "torch.Tensor"
          }
        },
        "_non_persistent_buffers_set": [],
        "_backward_hooks": {},
        "_forward_hooks": {},
        "_forward_pre_hooks": {},
        "_state_dict_hooks": {},
        "_load_state_dict_pre_hooks": {},
        "_modules": {
          "_mean_module": {
            "training": true,
            "_parameters": {},
            "_buffers": {},
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_layers": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "0": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "linear": {
                        "training": true,
                        "_parameters": {
                          "weight": {
                            "$type": "torch.nn.parameter.Parameter"
                          },
                          "bias": {
                            "$type": "torch.nn.parameter.Parameter"
                          }
                        },
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {},
                        "in_features": 11.0,
                        "out_features": 32,
                        "$type": "torch.nn.modules.linear.Linear"
                      },
                      "non_linearity": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {},
                        "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                        "$type": "garage.torch._functions.NonLinearity"
                      }
                    },
                    "$type": "torch.nn.modules.container.Sequential"
                  },
                  "1": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "linear": {
                        "training": true,
                        "_parameters": {
                          "weight": {
                            "$type": "torch.nn.parameter.Parameter"
                          },
                          "bias": {
                            "$type": "torch.nn.parameter.Parameter"
                          }
                        },
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {},
                        "in_features": 32,
                        "out_features": 32,
                        "$type": "torch.nn.modules.linear.Linear"
                      },
                      "non_linearity": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {},
                        "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                        "$type": "garage.torch._functions.NonLinearity"
                      }
                    },
                    "$type": "torch.nn.modules.container.Sequential"
                  }
                },
                "$type": "torch.nn.modules.container.ModuleList"
              },
              "_output_layers": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "0": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "linear": {
                        "training": true,
                        "_parameters": {
                          "weight": {
                            "$type": "torch.nn.parameter.Parameter"
                          },
                          "bias": {
                            "$type": "torch.nn.parameter.Parameter"
                          }
                        },
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {},
                        "in_features": 32,
                        "out_features": 1.0,
                        "$type": "torch.nn.modules.linear.Linear"
                      }
                    },
                    "$type": "torch.nn.modules.container.Sequential"
                  }
                },
                "$type": "torch.nn.modules.container.ModuleList"
              }
            },
            "_output_dim": 1.0,
            "$type": "garage.torch.modules.mlp_module.MLPModule"
          }
        },
        "_input_dim": 11.0,
        "_hidden_sizes": [
          32,
          32
        ],
        "_learn_std": true,
        "_std_hidden_sizes": [
          32,
          32
        ],
        "_min_std": 1e-06,
        "_max_std": "None",
        "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
        "_std_hidden_w_init": {
          "$type": "builtins.function"
        },
        "_std_hidden_b_init": {
          "$type": "builtins.function"
        },
        "_std_output_nonlinearity": "None",
        "_std_output_w_init": {
          "$type": "builtins.function"
        },
        "_std_parameterization": "exp",
        "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
        "_hidden_w_init": {
          "$type": "builtins.function"
        },
        "_hidden_b_init": {
          "$type": "builtins.function"
        },
        "_output_nonlinearity": "None",
        "_output_w_init": {
          "$type": "builtins.function"
        },
        "_output_b_init": {
          "$type": "builtins.function"
        },
        "_layer_normalization": false,
        "_norm_dist_class": {
          "$typename": "torch.distributions.normal.Normal"
        },
        "_min_std_param": {
          "$type": "torch.Tensor"
        },
        "_max_std_param": "None",
        "_env_spec": {
          "max_episode_length": 1000,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_name": "GaussianMLPPolicy",
        "$type": "Policy.GaussianMLPPolicy.GaussianMLPPolicy"
      },
      {
        "_obs_dim": 11.0,
        "_action_dim": 1.0,
        "training": true,
        "_parameters": {
          "_init_std": {
            "$type": "torch.nn.parameter.Parameter"
          }
        },
        "_buffers": {
          "min_std_param": {
            "$type": "torch.Tensor"
          }
        },
        "_non_persistent_buffers_set": [],
        "_backward_hooks": {},
        "_forward_hooks": {},
        "_forward_pre_hooks": {},
        "_state_dict_hooks": {},
        "_load_state_dict_pre_hooks": {},
        "_modules": {
          "_mean_module": {
            "training": true,
            "_parameters": {},
            "_buffers": {},
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_layers": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "0": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "linear": {
                        "training": true,
                        "_parameters": {
                          "weight": {
                            "$type": "torch.nn.parameter.Parameter"
                          },
                          "bias": {
                            "$type": "torch.nn.parameter.Parameter"
                          }
                        },
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {},
                        "in_features": 11.0,
                        "out_features": 32,
                        "$type": "torch.nn.modules.linear.Linear"
                      },
                      "non_linearity": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {},
                        "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                        "$type": "garage.torch._functions.NonLinearity"
                      }
                    },
                    "$type": "torch.nn.modules.container.Sequential"
                  },
                  "1": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "linear": {
                        "training": true,
                        "_parameters": {
                          "weight": {
                            "$type": "torch.nn.parameter.Parameter"
                          },
                          "bias": {
                            "$type": "torch.nn.parameter.Parameter"
                          }
                        },
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {},
                        "in_features": 32,
                        "out_features": 32,
                        "$type": "torch.nn.modules.linear.Linear"
                      },
                      "non_linearity": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {},
                        "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                        "$type": "garage.torch._functions.NonLinearity"
                      }
                    },
                    "$type": "torch.nn.modules.container.Sequential"
                  }
                },
                "$type": "torch.nn.modules.container.ModuleList"
              },
              "_output_layers": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "0": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "linear": {
                        "training": true,
                        "_parameters": {
                          "weight": {
                            "$type": "torch.nn.parameter.Parameter"
                          },
                          "bias": {
                            "$type": "torch.nn.parameter.Parameter"
                          }
                        },
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {},
                        "in_features": 32,
                        "out_features": 1.0,
                        "$type": "torch.nn.modules.linear.Linear"
                      }
                    },
                    "$type": "torch.nn.modules.container.Sequential"
                  }
                },
                "$type": "torch.nn.modules.container.ModuleList"
              }
            },
            "_output_dim": 1.0,
            "$type": "garage.torch.modules.mlp_module.MLPModule"
          }
        },
        "_input_dim": 11.0,
        "_hidden_sizes": [
          32,
          32
        ],
        "_learn_std": true,
        "_std_hidden_sizes": [
          32,
          32
        ],
        "_min_std": 1e-06,
        "_max_std": "None",
        "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
        "_std_hidden_w_init": {
          "$type": "builtins.function"
        },
        "_std_hidden_b_init": {
          "$type": "builtins.function"
        },
        "_std_output_nonlinearity": "None",
        "_std_output_w_init": {
          "$type": "builtins.function"
        },
        "_std_parameterization": "exp",
        "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
        "_hidden_w_init": {
          "$type": "builtins.function"
        },
        "_hidden_b_init": {
          "$type": "builtins.function"
        },
        "_output_nonlinearity": "None",
        "_output_w_init": {
          "$type": "builtins.function"
        },
        "_output_b_init": {
          "$type": "builtins.function"
        },
        "_layer_normalization": false,
        "_norm_dist_class": {
          "$typename": "torch.distributions.normal.Normal"
        },
        "_min_std_param": {
          "$type": "torch.Tensor"
        },
        "_max_std_param": "None",
        "_env_spec": {
          "max_episode_length": 1000,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_name": "GaussianMLPPolicy",
        "$type": "Policy.GaussianMLPPolicy.GaussianMLPPolicy"
      },
      {
        "_obs_dim": 11.0,
        "_action_dim": 1.0,
        "training": true,
        "_parameters": {
          "_init_std": {
            "$type": "torch.nn.parameter.Parameter"
          }
        },
        "_buffers": {
          "min_std_param": {
            "$type": "torch.Tensor"
          }
        },
        "_non_persistent_buffers_set": [],
        "_backward_hooks": {},
        "_forward_hooks": {},
        "_forward_pre_hooks": {},
        "_state_dict_hooks": {},
        "_load_state_dict_pre_hooks": {},
        "_modules": {
          "_mean_module": {
            "training": true,
            "_parameters": {},
            "_buffers": {},
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_layers": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "0": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "linear": {
                        "training": true,
                        "_parameters": {
                          "weight": {
                            "$type": "torch.nn.parameter.Parameter"
                          },
                          "bias": {
                            "$type": "torch.nn.parameter.Parameter"
                          }
                        },
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {},
                        "in_features": 11.0,
                        "out_features": 32,
                        "$type": "torch.nn.modules.linear.Linear"
                      },
                      "non_linearity": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {},
                        "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                        "$type": "garage.torch._functions.NonLinearity"
                      }
                    },
                    "$type": "torch.nn.modules.container.Sequential"
                  },
                  "1": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "linear": {
                        "training": true,
                        "_parameters": {
                          "weight": {
                            "$type": "torch.nn.parameter.Parameter"
                          },
                          "bias": {
                            "$type": "torch.nn.parameter.Parameter"
                          }
                        },
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {},
                        "in_features": 32,
                        "out_features": 32,
                        "$type": "torch.nn.modules.linear.Linear"
                      },
                      "non_linearity": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {},
                        "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                        "$type": "garage.torch._functions.NonLinearity"
                      }
                    },
                    "$type": "torch.nn.modules.container.Sequential"
                  }
                },
                "$type": "torch.nn.modules.container.ModuleList"
              },
              "_output_layers": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "0": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "linear": {
                        "training": true,
                        "_parameters": {
                          "weight": {
                            "$type": "torch.nn.parameter.Parameter"
                          },
                          "bias": {
                            "$type": "torch.nn.parameter.Parameter"
                          }
                        },
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {},
                        "in_features": 32,
                        "out_features": 1.0,
                        "$type": "torch.nn.modules.linear.Linear"
                      }
                    },
                    "$type": "torch.nn.modules.container.Sequential"
                  }
                },
                "$type": "torch.nn.modules.container.ModuleList"
              }
            },
            "_output_dim": 1.0,
            "$type": "garage.torch.modules.mlp_module.MLPModule"
          }
        },
        "_input_dim": 11.0,
        "_hidden_sizes": [
          32,
          32
        ],
        "_learn_std": true,
        "_std_hidden_sizes": [
          32,
          32
        ],
        "_min_std": 1e-06,
        "_max_std": "None",
        "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
        "_std_hidden_w_init": {
          "$type": "builtins.function"
        },
        "_std_hidden_b_init": {
          "$type": "builtins.function"
        },
        "_std_output_nonlinearity": "None",
        "_std_output_w_init": {
          "$type": "builtins.function"
        },
        "_std_parameterization": "exp",
        "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
        "_hidden_w_init": {
          "$type": "builtins.function"
        },
        "_hidden_b_init": {
          "$type": "builtins.function"
        },
        "_output_nonlinearity": "None",
        "_output_w_init": {
          "$type": "builtins.function"
        },
        "_output_b_init": {
          "$type": "builtins.function"
        },
        "_layer_normalization": false,
        "_norm_dist_class": {
          "$typename": "torch.distributions.normal.Normal"
        },
        "_min_std_param": {
          "$type": "torch.Tensor"
        },
        "_max_std_param": "None",
        "_env_spec": {
          "max_episode_length": 1000,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_name": "GaussianMLPPolicy",
        "$type": "Policy.GaussianMLPPolicy.GaussianMLPPolicy"
      },
      {
        "_obs_dim": 11.0,
        "_action_dim": 1.0,
        "training": true,
        "_parameters": {
          "_init_std": {
            "$type": "torch.nn.parameter.Parameter"
          }
        },
        "_buffers": {
          "min_std_param": {
            "$type": "torch.Tensor"
          }
        },
        "_non_persistent_buffers_set": [],
        "_backward_hooks": {},
        "_forward_hooks": {},
        "_forward_pre_hooks": {},
        "_state_dict_hooks": {},
        "_load_state_dict_pre_hooks": {},
        "_modules": {
          "_mean_module": {
            "training": true,
            "_parameters": {},
            "_buffers": {},
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_layers": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "0": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "linear": {
                        "training": true,
                        "_parameters": {
                          "weight": {
                            "$type": "torch.nn.parameter.Parameter"
                          },
                          "bias": {
                            "$type": "torch.nn.parameter.Parameter"
                          }
                        },
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {},
                        "in_features": 11.0,
                        "out_features": 32,
                        "$type": "torch.nn.modules.linear.Linear"
                      },
                      "non_linearity": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {},
                        "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                        "$type": "garage.torch._functions.NonLinearity"
                      }
                    },
                    "$type": "torch.nn.modules.container.Sequential"
                  },
                  "1": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "linear": {
                        "training": true,
                        "_parameters": {
                          "weight": {
                            "$type": "torch.nn.parameter.Parameter"
                          },
                          "bias": {
                            "$type": "torch.nn.parameter.Parameter"
                          }
                        },
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {},
                        "in_features": 32,
                        "out_features": 32,
                        "$type": "torch.nn.modules.linear.Linear"
                      },
                      "non_linearity": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {},
                        "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                        "$type": "garage.torch._functions.NonLinearity"
                      }
                    },
                    "$type": "torch.nn.modules.container.Sequential"
                  }
                },
                "$type": "torch.nn.modules.container.ModuleList"
              },
              "_output_layers": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "0": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "linear": {
                        "training": true,
                        "_parameters": {
                          "weight": {
                            "$type": "torch.nn.parameter.Parameter"
                          },
                          "bias": {
                            "$type": "torch.nn.parameter.Parameter"
                          }
                        },
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {},
                        "in_features": 32,
                        "out_features": 1.0,
                        "$type": "torch.nn.modules.linear.Linear"
                      }
                    },
                    "$type": "torch.nn.modules.container.Sequential"
                  }
                },
                "$type": "torch.nn.modules.container.ModuleList"
              }
            },
            "_output_dim": 1.0,
            "$type": "garage.torch.modules.mlp_module.MLPModule"
          }
        },
        "_input_dim": 11.0,
        "_hidden_sizes": [
          32,
          32
        ],
        "_learn_std": true,
        "_std_hidden_sizes": [
          32,
          32
        ],
        "_min_std": 1e-06,
        "_max_std": "None",
        "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
        "_std_hidden_w_init": {
          "$type": "builtins.function"
        },
        "_std_hidden_b_init": {
          "$type": "builtins.function"
        },
        "_std_output_nonlinearity": "None",
        "_std_output_w_init": {
          "$type": "builtins.function"
        },
        "_std_parameterization": "exp",
        "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
        "_hidden_w_init": {
          "$type": "builtins.function"
        },
        "_hidden_b_init": {
          "$type": "builtins.function"
        },
        "_output_nonlinearity": "None",
        "_output_w_init": {
          "$type": "builtins.function"
        },
        "_output_b_init": {
          "$type": "builtins.function"
        },
        "_layer_normalization": false,
        "_norm_dist_class": {
          "$typename": "torch.distributions.normal.Normal"
        },
        "_min_std_param": {
          "$type": "torch.Tensor"
        },
        "_max_std_param": "None",
        "_env_spec": {
          "max_episode_length": 1000,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_name": "GaussianMLPPolicy",
        "$type": "Policy.GaussianMLPPolicy.GaussianMLPPolicy"
      },
      {
        "_obs_dim": 11.0,
        "_action_dim": 1.0,
        "training": true,
        "_parameters": {
          "_init_std": {
            "$type": "torch.nn.parameter.Parameter"
          }
        },
        "_buffers": {
          "min_std_param": {
            "$type": "torch.Tensor"
          }
        },
        "_non_persistent_buffers_set": [],
        "_backward_hooks": {},
        "_forward_hooks": {},
        "_forward_pre_hooks": {},
        "_state_dict_hooks": {},
        "_load_state_dict_pre_hooks": {},
        "_modules": {
          "_mean_module": {
            "training": true,
            "_parameters": {},
            "_buffers": {},
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_layers": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "0": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "linear": {
                        "training": true,
                        "_parameters": {
                          "weight": {
                            "$type": "torch.nn.parameter.Parameter"
                          },
                          "bias": {
                            "$type": "torch.nn.parameter.Parameter"
                          }
                        },
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {},
                        "in_features": 11.0,
                        "out_features": 32,
                        "$type": "torch.nn.modules.linear.Linear"
                      },
                      "non_linearity": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {},
                        "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                        "$type": "garage.torch._functions.NonLinearity"
                      }
                    },
                    "$type": "torch.nn.modules.container.Sequential"
                  },
                  "1": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "linear": {
                        "training": true,
                        "_parameters": {
                          "weight": {
                            "$type": "torch.nn.parameter.Parameter"
                          },
                          "bias": {
                            "$type": "torch.nn.parameter.Parameter"
                          }
                        },
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {},
                        "in_features": 32,
                        "out_features": 32,
                        "$type": "torch.nn.modules.linear.Linear"
                      },
                      "non_linearity": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {},
                        "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                        "$type": "garage.torch._functions.NonLinearity"
                      }
                    },
                    "$type": "torch.nn.modules.container.Sequential"
                  }
                },
                "$type": "torch.nn.modules.container.ModuleList"
              },
              "_output_layers": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "0": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "linear": {
                        "training": true,
                        "_parameters": {
                          "weight": {
                            "$type": "torch.nn.parameter.Parameter"
                          },
                          "bias": {
                            "$type": "torch.nn.parameter.Parameter"
                          }
                        },
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {},
                        "in_features": 32,
                        "out_features": 1.0,
                        "$type": "torch.nn.modules.linear.Linear"
                      }
                    },
                    "$type": "torch.nn.modules.container.Sequential"
                  }
                },
                "$type": "torch.nn.modules.container.ModuleList"
              }
            },
            "_output_dim": 1.0,
            "$type": "garage.torch.modules.mlp_module.MLPModule"
          }
        },
        "_input_dim": 11.0,
        "_hidden_sizes": [
          32,
          32
        ],
        "_learn_std": true,
        "_std_hidden_sizes": [
          32,
          32
        ],
        "_min_std": 1e-06,
        "_max_std": "None",
        "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
        "_std_hidden_w_init": {
          "$type": "builtins.function"
        },
        "_std_hidden_b_init": {
          "$type": "builtins.function"
        },
        "_std_output_nonlinearity": "None",
        "_std_output_w_init": {
          "$type": "builtins.function"
        },
        "_std_parameterization": "exp",
        "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
        "_hidden_w_init": {
          "$type": "builtins.function"
        },
        "_hidden_b_init": {
          "$type": "builtins.function"
        },
        "_output_nonlinearity": "None",
        "_output_w_init": {
          "$type": "builtins.function"
        },
        "_output_b_init": {
          "$type": "builtins.function"
        },
        "_layer_normalization": false,
        "_norm_dist_class": {
          "$typename": "torch.distributions.normal.Normal"
        },
        "_min_std_param": {
          "$type": "torch.Tensor"
        },
        "_max_std_param": "None",
        "_env_spec": {
          "max_episode_length": 1000,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_name": "GaussianMLPPolicy",
        "$type": "Policy.GaussianMLPPolicy.GaussianMLPPolicy"
      },
      {
        "_obs_dim": 11.0,
        "_action_dim": 1.0,
        "training": true,
        "_parameters": {
          "_init_std": {
            "$type": "torch.nn.parameter.Parameter"
          }
        },
        "_buffers": {
          "min_std_param": {
            "$type": "torch.Tensor"
          }
        },
        "_non_persistent_buffers_set": [],
        "_backward_hooks": {},
        "_forward_hooks": {},
        "_forward_pre_hooks": {},
        "_state_dict_hooks": {},
        "_load_state_dict_pre_hooks": {},
        "_modules": {
          "_mean_module": {
            "training": true,
            "_parameters": {},
            "_buffers": {},
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_layers": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "0": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "linear": {
                        "training": true,
                        "_parameters": {
                          "weight": {
                            "$type": "torch.nn.parameter.Parameter"
                          },
                          "bias": {
                            "$type": "torch.nn.parameter.Parameter"
                          }
                        },
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {},
                        "in_features": 11.0,
                        "out_features": 32,
                        "$type": "torch.nn.modules.linear.Linear"
                      },
                      "non_linearity": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {},
                        "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                        "$type": "garage.torch._functions.NonLinearity"
                      }
                    },
                    "$type": "torch.nn.modules.container.Sequential"
                  },
                  "1": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "linear": {
                        "training": true,
                        "_parameters": {
                          "weight": {
                            "$type": "torch.nn.parameter.Parameter"
                          },
                          "bias": {
                            "$type": "torch.nn.parameter.Parameter"
                          }
                        },
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {},
                        "in_features": 32,
                        "out_features": 32,
                        "$type": "torch.nn.modules.linear.Linear"
                      },
                      "non_linearity": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {},
                        "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                        "$type": "garage.torch._functions.NonLinearity"
                      }
                    },
                    "$type": "torch.nn.modules.container.Sequential"
                  }
                },
                "$type": "torch.nn.modules.container.ModuleList"
              },
              "_output_layers": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "0": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "linear": {
                        "training": true,
                        "_parameters": {
                          "weight": {
                            "$type": "torch.nn.parameter.Parameter"
                          },
                          "bias": {
                            "$type": "torch.nn.parameter.Parameter"
                          }
                        },
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {},
                        "in_features": 32,
                        "out_features": 1.0,
                        "$type": "torch.nn.modules.linear.Linear"
                      }
                    },
                    "$type": "torch.nn.modules.container.Sequential"
                  }
                },
                "$type": "torch.nn.modules.container.ModuleList"
              }
            },
            "_output_dim": 1.0,
            "$type": "garage.torch.modules.mlp_module.MLPModule"
          }
        },
        "_input_dim": 11.0,
        "_hidden_sizes": [
          32,
          32
        ],
        "_learn_std": true,
        "_std_hidden_sizes": [
          32,
          32
        ],
        "_min_std": 1e-06,
        "_max_std": "None",
        "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
        "_std_hidden_w_init": {
          "$type": "builtins.function"
        },
        "_std_hidden_b_init": {
          "$type": "builtins.function"
        },
        "_std_output_nonlinearity": "None",
        "_std_output_w_init": {
          "$type": "builtins.function"
        },
        "_std_parameterization": "exp",
        "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
        "_hidden_w_init": {
          "$type": "builtins.function"
        },
        "_hidden_b_init": {
          "$type": "builtins.function"
        },
        "_output_nonlinearity": "None",
        "_output_w_init": {
          "$type": "builtins.function"
        },
        "_output_b_init": {
          "$type": "builtins.function"
        },
        "_layer_normalization": false,
        "_norm_dist_class": {
          "$typename": "torch.distributions.normal.Normal"
        },
        "_min_std_param": {
          "$type": "torch.Tensor"
        },
        "_max_std_param": "None",
        "_env_spec": {
          "max_episode_length": 1000,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_name": "GaussianMLPPolicy",
        "$type": "Policy.GaussianMLPPolicy.GaussianMLPPolicy"
      },
      {
        "_obs_dim": 11.0,
        "_action_dim": 1.0,
        "training": true,
        "_parameters": {
          "_init_std": {
            "$type": "torch.nn.parameter.Parameter"
          }
        },
        "_buffers": {
          "min_std_param": {
            "$type": "torch.Tensor"
          }
        },
        "_non_persistent_buffers_set": [],
        "_backward_hooks": {},
        "_forward_hooks": {},
        "_forward_pre_hooks": {},
        "_state_dict_hooks": {},
        "_load_state_dict_pre_hooks": {},
        "_modules": {
          "_mean_module": {
            "training": true,
            "_parameters": {},
            "_buffers": {},
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_layers": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "0": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "linear": {
                        "training": true,
                        "_parameters": {
                          "weight": {
                            "$type": "torch.nn.parameter.Parameter"
                          },
                          "bias": {
                            "$type": "torch.nn.parameter.Parameter"
                          }
                        },
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {},
                        "in_features": 11.0,
                        "out_features": 32,
                        "$type": "torch.nn.modules.linear.Linear"
                      },
                      "non_linearity": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {},
                        "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                        "$type": "garage.torch._functions.NonLinearity"
                      }
                    },
                    "$type": "torch.nn.modules.container.Sequential"
                  },
                  "1": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "linear": {
                        "training": true,
                        "_parameters": {
                          "weight": {
                            "$type": "torch.nn.parameter.Parameter"
                          },
                          "bias": {
                            "$type": "torch.nn.parameter.Parameter"
                          }
                        },
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {},
                        "in_features": 32,
                        "out_features": 32,
                        "$type": "torch.nn.modules.linear.Linear"
                      },
                      "non_linearity": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {},
                        "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                        "$type": "garage.torch._functions.NonLinearity"
                      }
                    },
                    "$type": "torch.nn.modules.container.Sequential"
                  }
                },
                "$type": "torch.nn.modules.container.ModuleList"
              },
              "_output_layers": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "0": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "linear": {
                        "training": true,
                        "_parameters": {
                          "weight": {
                            "$type": "torch.nn.parameter.Parameter"
                          },
                          "bias": {
                            "$type": "torch.nn.parameter.Parameter"
                          }
                        },
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {},
                        "in_features": 32,
                        "out_features": 1.0,
                        "$type": "torch.nn.modules.linear.Linear"
                      }
                    },
                    "$type": "torch.nn.modules.container.Sequential"
                  }
                },
                "$type": "torch.nn.modules.container.ModuleList"
              }
            },
            "_output_dim": 1.0,
            "$type": "garage.torch.modules.mlp_module.MLPModule"
          }
        },
        "_input_dim": 11.0,
        "_hidden_sizes": [
          32,
          32
        ],
        "_learn_std": true,
        "_std_hidden_sizes": [
          32,
          32
        ],
        "_min_std": 1e-06,
        "_max_std": "None",
        "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
        "_std_hidden_w_init": {
          "$type": "builtins.function"
        },
        "_std_hidden_b_init": {
          "$type": "builtins.function"
        },
        "_std_output_nonlinearity": "None",
        "_std_output_w_init": {
          "$type": "builtins.function"
        },
        "_std_parameterization": "exp",
        "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
        "_hidden_w_init": {
          "$type": "builtins.function"
        },
        "_hidden_b_init": {
          "$type": "builtins.function"
        },
        "_output_nonlinearity": "None",
        "_output_w_init": {
          "$type": "builtins.function"
        },
        "_output_b_init": {
          "$type": "builtins.function"
        },
        "_layer_normalization": false,
        "_norm_dist_class": {
          "$typename": "torch.distributions.normal.Normal"
        },
        "_min_std_param": {
          "$type": "torch.Tensor"
        },
        "_max_std_param": "None",
        "_env_spec": {
          "max_episode_length": 1000,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_name": "GaussianMLPPolicy",
        "$type": "Policy.GaussianMLPPolicy.GaussianMLPPolicy"
      },
      {
        "_obs_dim": 11.0,
        "_action_dim": 1.0,
        "training": true,
        "_parameters": {
          "_init_std": {
            "$type": "torch.nn.parameter.Parameter"
          }
        },
        "_buffers": {
          "min_std_param": {
            "$type": "torch.Tensor"
          }
        },
        "_non_persistent_buffers_set": [],
        "_backward_hooks": {},
        "_forward_hooks": {},
        "_forward_pre_hooks": {},
        "_state_dict_hooks": {},
        "_load_state_dict_pre_hooks": {},
        "_modules": {
          "_mean_module": {
            "training": true,
            "_parameters": {},
            "_buffers": {},
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_layers": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "0": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "linear": {
                        "training": true,
                        "_parameters": {
                          "weight": {
                            "$type": "torch.nn.parameter.Parameter"
                          },
                          "bias": {
                            "$type": "torch.nn.parameter.Parameter"
                          }
                        },
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {},
                        "in_features": 11.0,
                        "out_features": 32,
                        "$type": "torch.nn.modules.linear.Linear"
                      },
                      "non_linearity": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {},
                        "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                        "$type": "garage.torch._functions.NonLinearity"
                      }
                    },
                    "$type": "torch.nn.modules.container.Sequential"
                  },
                  "1": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "linear": {
                        "training": true,
                        "_parameters": {
                          "weight": {
                            "$type": "torch.nn.parameter.Parameter"
                          },
                          "bias": {
                            "$type": "torch.nn.parameter.Parameter"
                          }
                        },
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {},
                        "in_features": 32,
                        "out_features": 32,
                        "$type": "torch.nn.modules.linear.Linear"
                      },
                      "non_linearity": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {},
                        "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                        "$type": "garage.torch._functions.NonLinearity"
                      }
                    },
                    "$type": "torch.nn.modules.container.Sequential"
                  }
                },
                "$type": "torch.nn.modules.container.ModuleList"
              },
              "_output_layers": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "0": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "linear": {
                        "training": true,
                        "_parameters": {
                          "weight": {
                            "$type": "torch.nn.parameter.Parameter"
                          },
                          "bias": {
                            "$type": "torch.nn.parameter.Parameter"
                          }
                        },
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {},
                        "in_features": 32,
                        "out_features": 1.0,
                        "$type": "torch.nn.modules.linear.Linear"
                      }
                    },
                    "$type": "torch.nn.modules.container.Sequential"
                  }
                },
                "$type": "torch.nn.modules.container.ModuleList"
              }
            },
            "_output_dim": 1.0,
            "$type": "garage.torch.modules.mlp_module.MLPModule"
          }
        },
        "_input_dim": 11.0,
        "_hidden_sizes": [
          32,
          32
        ],
        "_learn_std": true,
        "_std_hidden_sizes": [
          32,
          32
        ],
        "_min_std": 1e-06,
        "_max_std": "None",
        "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
        "_std_hidden_w_init": {
          "$type": "builtins.function"
        },
        "_std_hidden_b_init": {
          "$type": "builtins.function"
        },
        "_std_output_nonlinearity": "None",
        "_std_output_w_init": {
          "$type": "builtins.function"
        },
        "_std_parameterization": "exp",
        "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
        "_hidden_w_init": {
          "$type": "builtins.function"
        },
        "_hidden_b_init": {
          "$type": "builtins.function"
        },
        "_output_nonlinearity": "None",
        "_output_w_init": {
          "$type": "builtins.function"
        },
        "_output_b_init": {
          "$type": "builtins.function"
        },
        "_layer_normalization": false,
        "_norm_dist_class": {
          "$typename": "torch.distributions.normal.Normal"
        },
        "_min_std_param": {
          "$type": "torch.Tensor"
        },
        "_max_std_param": "None",
        "_env_spec": {
          "max_episode_length": 1000,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_name": "GaussianMLPPolicy",
        "$type": "Policy.GaussianMLPPolicy.GaussianMLPPolicy"
      }
    ],
    "_envs": [
      {
        "_env": {
          "env": {
            "env": {
              "env": {
                "env": {
                  "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                  "model": "<mujoco._structs.MjModel object at 0x7f904e734470>",
                  "data": "<mujoco._structs.MjData object at 0x7f904e148670>",
                  "init_qpos": "array([0., 0., 0.])",
                  "init_qvel": "array([0., 0., 0.])",
                  "_viewers": {},
                  "frame_skip": 5,
                  "viewer": "None",
                  "observation_space": {
                    "dtype": "dtype('float64')",
                    "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                    "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                    "_shape": [
                      11
                    ],
                    "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                    "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                    "low_repr": "-inf",
                    "high_repr": "inf",
                    "_np_random": "None",
                    "$type": "gym.spaces.box.Box"
                  },
                  "action_space": {
                    "dtype": "dtype('float32')",
                    "bounded_below": "array([ True])",
                    "bounded_above": "array([ True])",
                    "_shape": [
                      1
                    ],
                    "low": "array([-1.], dtype=float32)",
                    "high": "array([1.], dtype=float32)",
                    "low_repr": "-1.0",
                    "high_repr": "1.0",
                    "_np_random": "None",
                    "$type": "gym.spaces.box.Box"
                  },
                  "render_mode": "None",
                  "renderer": {
                    "no_returns_render": [
                      "human"
                    ],
                    "single_render": [
                      "single_state_pixels",
                      "single_rgb_array",
                      "single_depth_array"
                    ],
                    "mode": "None",
                    "render": {
                      "$type": "functools.partial"
                    },
                    "render_list": [],
                    "$type": "gym.utils.renderer.Renderer"
                  },
                  "_ezpickle_args": [],
                  "_ezpickle_kwargs": {},
                  "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "checked_reset": false,
                "checked_step": false,
                "checked_render": false,
                "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": true,
            "_has_reset": false,
            "_disable_render_order_enforcing": false,
            "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
          },
          "_action_space": "None",
          "_observation_space": "None",
          "_reward_range": "None",
          "_metadata": "None",
          "new_step_api": false,
          "_max_episode_steps": 1000,
          "_elapsed_steps": "None",
          "$type": "gym.wrappers.time_limit.TimeLimit"
        },
        "_max_episode_length": 1000,
        "_render_modes": [
          "human",
          "rgb_array",
          "depth_array",
          "single_rgb_array",
          "single_depth_array"
        ],
        "_step_cnt": "None",
        "_visualize": false,
        "_action_space": {
          "dtype": "dtype('float32')",
          "bounded_below": "array([ True])",
          "bounded_above": "array([ True])",
          "_shape": [
            1
          ],
          "low": "array([-1.], dtype=float32)",
          "high": "array([1.], dtype=float32)",
          "low_repr": "-1.0",
          "high_repr": "1.0",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "_observation_space": {
          "dtype": "dtype('float32')",
          "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
          "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
          "_shape": [
            11
          ],
          "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
          "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
          "low_repr": "-inf",
          "high_repr": "inf",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "_spec": {
          "max_episode_length": 1000,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_env_info": "None",
        "$type": "garage.envs.gym_env.GymEnv"
      },
      {
        "_env": {
          "env": {
            "env": {
              "env": {
                "env": {
                  "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                  "model": "<mujoco._structs.MjModel object at 0x7f904e72eb30>",
                  "data": "<mujoco._structs.MjData object at 0x7f904e17fd70>",
                  "init_qpos": "array([0., 0., 0.])",
                  "init_qvel": "array([0., 0., 0.])",
                  "_viewers": {},
                  "frame_skip": 5,
                  "viewer": "None",
                  "observation_space": {
                    "dtype": "dtype('float64')",
                    "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                    "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                    "_shape": [
                      11
                    ],
                    "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                    "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                    "low_repr": "-inf",
                    "high_repr": "inf",
                    "_np_random": "None",
                    "$type": "gym.spaces.box.Box"
                  },
                  "action_space": {
                    "dtype": "dtype('float32')",
                    "bounded_below": "array([ True])",
                    "bounded_above": "array([ True])",
                    "_shape": [
                      1
                    ],
                    "low": "array([-1.], dtype=float32)",
                    "high": "array([1.], dtype=float32)",
                    "low_repr": "-1.0",
                    "high_repr": "1.0",
                    "_np_random": "None",
                    "$type": "gym.spaces.box.Box"
                  },
                  "render_mode": "None",
                  "renderer": {
                    "no_returns_render": [
                      "human"
                    ],
                    "single_render": [
                      "single_state_pixels",
                      "single_rgb_array",
                      "single_depth_array"
                    ],
                    "mode": "None",
                    "render": {
                      "$type": "functools.partial"
                    },
                    "render_list": [],
                    "$type": "gym.utils.renderer.Renderer"
                  },
                  "_ezpickle_args": [],
                  "_ezpickle_kwargs": {},
                  "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "checked_reset": false,
                "checked_step": false,
                "checked_render": false,
                "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": true,
            "_has_reset": false,
            "_disable_render_order_enforcing": false,
            "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
          },
          "_action_space": "None",
          "_observation_space": "None",
          "_reward_range": "None",
          "_metadata": "None",
          "new_step_api": false,
          "_max_episode_steps": 1000,
          "_elapsed_steps": "None",
          "$type": "gym.wrappers.time_limit.TimeLimit"
        },
        "_max_episode_length": 1000,
        "_render_modes": [
          "human",
          "rgb_array",
          "depth_array",
          "single_rgb_array",
          "single_depth_array"
        ],
        "_step_cnt": "None",
        "_visualize": false,
        "_action_space": {
          "dtype": "dtype('float32')",
          "bounded_below": "array([ True])",
          "bounded_above": "array([ True])",
          "_shape": [
            1
          ],
          "low": "array([-1.], dtype=float32)",
          "high": "array([1.], dtype=float32)",
          "low_repr": "-1.0",
          "high_repr": "1.0",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "_observation_space": {
          "dtype": "dtype('float32')",
          "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
          "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
          "_shape": [
            11
          ],
          "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
          "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
          "low_repr": "-inf",
          "high_repr": "inf",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "_spec": {
          "max_episode_length": 1000,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_env_info": "None",
        "$type": "garage.envs.gym_env.GymEnv"
      },
      {
        "_env": {
          "env": {
            "env": {
              "env": {
                "env": {
                  "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                  "model": "<mujoco._structs.MjModel object at 0x7f904e730e70>",
                  "data": "<mujoco._structs.MjData object at 0x7f904e730330>",
                  "init_qpos": "array([0., 0., 0.])",
                  "init_qvel": "array([0., 0., 0.])",
                  "_viewers": {},
                  "frame_skip": 5,
                  "viewer": "None",
                  "observation_space": {
                    "dtype": "dtype('float64')",
                    "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                    "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                    "_shape": [
                      11
                    ],
                    "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                    "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                    "low_repr": "-inf",
                    "high_repr": "inf",
                    "_np_random": "None",
                    "$type": "gym.spaces.box.Box"
                  },
                  "action_space": {
                    "dtype": "dtype('float32')",
                    "bounded_below": "array([ True])",
                    "bounded_above": "array([ True])",
                    "_shape": [
                      1
                    ],
                    "low": "array([-1.], dtype=float32)",
                    "high": "array([1.], dtype=float32)",
                    "low_repr": "-1.0",
                    "high_repr": "1.0",
                    "_np_random": "None",
                    "$type": "gym.spaces.box.Box"
                  },
                  "render_mode": "None",
                  "renderer": {
                    "no_returns_render": [
                      "human"
                    ],
                    "single_render": [
                      "single_state_pixels",
                      "single_rgb_array",
                      "single_depth_array"
                    ],
                    "mode": "None",
                    "render": {
                      "$type": "functools.partial"
                    },
                    "render_list": [],
                    "$type": "gym.utils.renderer.Renderer"
                  },
                  "_ezpickle_args": [],
                  "_ezpickle_kwargs": {},
                  "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "checked_reset": false,
                "checked_step": false,
                "checked_render": false,
                "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": true,
            "_has_reset": false,
            "_disable_render_order_enforcing": false,
            "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
          },
          "_action_space": "None",
          "_observation_space": "None",
          "_reward_range": "None",
          "_metadata": "None",
          "new_step_api": false,
          "_max_episode_steps": 1000,
          "_elapsed_steps": "None",
          "$type": "gym.wrappers.time_limit.TimeLimit"
        },
        "_max_episode_length": 1000,
        "_render_modes": [
          "human",
          "rgb_array",
          "depth_array",
          "single_rgb_array",
          "single_depth_array"
        ],
        "_step_cnt": "None",
        "_visualize": false,
        "_action_space": {
          "dtype": "dtype('float32')",
          "bounded_below": "array([ True])",
          "bounded_above": "array([ True])",
          "_shape": [
            1
          ],
          "low": "array([-1.], dtype=float32)",
          "high": "array([1.], dtype=float32)",
          "low_repr": "-1.0",
          "high_repr": "1.0",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "_observation_space": {
          "dtype": "dtype('float32')",
          "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
          "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
          "_shape": [
            11
          ],
          "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
          "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
          "low_repr": "-inf",
          "high_repr": "inf",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "_spec": {
          "max_episode_length": 1000,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_env_info": "None",
        "$type": "garage.envs.gym_env.GymEnv"
      },
      {
        "_env": {
          "env": {
            "env": {
              "env": {
                "env": {
                  "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                  "model": "<mujoco._structs.MjModel object at 0x7f904d8e9cb0>",
                  "data": "<mujoco._structs.MjData object at 0x7f904d8e9cf0>",
                  "init_qpos": "array([0., 0., 0.])",
                  "init_qvel": "array([0., 0., 0.])",
                  "_viewers": {},
                  "frame_skip": 5,
                  "viewer": "None",
                  "observation_space": {
                    "dtype": "dtype('float64')",
                    "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                    "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                    "_shape": [
                      11
                    ],
                    "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                    "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                    "low_repr": "-inf",
                    "high_repr": "inf",
                    "_np_random": "None",
                    "$type": "gym.spaces.box.Box"
                  },
                  "action_space": {
                    "dtype": "dtype('float32')",
                    "bounded_below": "array([ True])",
                    "bounded_above": "array([ True])",
                    "_shape": [
                      1
                    ],
                    "low": "array([-1.], dtype=float32)",
                    "high": "array([1.], dtype=float32)",
                    "low_repr": "-1.0",
                    "high_repr": "1.0",
                    "_np_random": "None",
                    "$type": "gym.spaces.box.Box"
                  },
                  "render_mode": "None",
                  "renderer": {
                    "no_returns_render": [
                      "human"
                    ],
                    "single_render": [
                      "single_state_pixels",
                      "single_rgb_array",
                      "single_depth_array"
                    ],
                    "mode": "None",
                    "render": {
                      "$type": "functools.partial"
                    },
                    "render_list": [],
                    "$type": "gym.utils.renderer.Renderer"
                  },
                  "_ezpickle_args": [],
                  "_ezpickle_kwargs": {},
                  "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "checked_reset": false,
                "checked_step": false,
                "checked_render": false,
                "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": true,
            "_has_reset": false,
            "_disable_render_order_enforcing": false,
            "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
          },
          "_action_space": "None",
          "_observation_space": "None",
          "_reward_range": "None",
          "_metadata": "None",
          "new_step_api": false,
          "_max_episode_steps": 1000,
          "_elapsed_steps": "None",
          "$type": "gym.wrappers.time_limit.TimeLimit"
        },
        "_max_episode_length": 1000,
        "_render_modes": [
          "human",
          "rgb_array",
          "depth_array",
          "single_rgb_array",
          "single_depth_array"
        ],
        "_step_cnt": "None",
        "_visualize": false,
        "_action_space": {
          "dtype": "dtype('float32')",
          "bounded_below": "array([ True])",
          "bounded_above": "array([ True])",
          "_shape": [
            1
          ],
          "low": "array([-1.], dtype=float32)",
          "high": "array([1.], dtype=float32)",
          "low_repr": "-1.0",
          "high_repr": "1.0",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "_observation_space": {
          "dtype": "dtype('float32')",
          "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
          "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
          "_shape": [
            11
          ],
          "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
          "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
          "low_repr": "-inf",
          "high_repr": "inf",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "_spec": {
          "max_episode_length": 1000,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_env_info": "None",
        "$type": "garage.envs.gym_env.GymEnv"
      },
      {
        "_env": {
          "env": {
            "env": {
              "env": {
                "env": {
                  "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                  "model": "<mujoco._structs.MjModel object at 0x7f904d7cc730>",
                  "data": "<mujoco._structs.MjData object at 0x7f904d7cc770>",
                  "init_qpos": "array([0., 0., 0.])",
                  "init_qvel": "array([0., 0., 0.])",
                  "_viewers": {},
                  "frame_skip": 5,
                  "viewer": "None",
                  "observation_space": {
                    "dtype": "dtype('float64')",
                    "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                    "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                    "_shape": [
                      11
                    ],
                    "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                    "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                    "low_repr": "-inf",
                    "high_repr": "inf",
                    "_np_random": "None",
                    "$type": "gym.spaces.box.Box"
                  },
                  "action_space": {
                    "dtype": "dtype('float32')",
                    "bounded_below": "array([ True])",
                    "bounded_above": "array([ True])",
                    "_shape": [
                      1
                    ],
                    "low": "array([-1.], dtype=float32)",
                    "high": "array([1.], dtype=float32)",
                    "low_repr": "-1.0",
                    "high_repr": "1.0",
                    "_np_random": "None",
                    "$type": "gym.spaces.box.Box"
                  },
                  "render_mode": "None",
                  "renderer": {
                    "no_returns_render": [
                      "human"
                    ],
                    "single_render": [
                      "single_state_pixels",
                      "single_rgb_array",
                      "single_depth_array"
                    ],
                    "mode": "None",
                    "render": {
                      "$type": "functools.partial"
                    },
                    "render_list": [],
                    "$type": "gym.utils.renderer.Renderer"
                  },
                  "_ezpickle_args": [],
                  "_ezpickle_kwargs": {},
                  "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "checked_reset": false,
                "checked_step": false,
                "checked_render": false,
                "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": true,
            "_has_reset": false,
            "_disable_render_order_enforcing": false,
            "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
          },
          "_action_space": "None",
          "_observation_space": "None",
          "_reward_range": "None",
          "_metadata": "None",
          "new_step_api": false,
          "_max_episode_steps": 1000,
          "_elapsed_steps": "None",
          "$type": "gym.wrappers.time_limit.TimeLimit"
        },
        "_max_episode_length": 1000,
        "_render_modes": [
          "human",
          "rgb_array",
          "depth_array",
          "single_rgb_array",
          "single_depth_array"
        ],
        "_step_cnt": "None",
        "_visualize": false,
        "_action_space": {
          "dtype": "dtype('float32')",
          "bounded_below": "array([ True])",
          "bounded_above": "array([ True])",
          "_shape": [
            1
          ],
          "low": "array([-1.], dtype=float32)",
          "high": "array([1.], dtype=float32)",
          "low_repr": "-1.0",
          "high_repr": "1.0",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "_observation_space": {
          "dtype": "dtype('float32')",
          "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
          "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
          "_shape": [
            11
          ],
          "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
          "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
          "low_repr": "-inf",
          "high_repr": "inf",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "_spec": {
          "max_episode_length": 1000,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_env_info": "None",
        "$type": "garage.envs.gym_env.GymEnv"
      },
      {
        "_env": {
          "env": {
            "env": {
              "env": {
                "env": {
                  "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                  "model": "<mujoco._structs.MjModel object at 0x7f904d7981f0>",
                  "data": "<mujoco._structs.MjData object at 0x7f904d798230>",
                  "init_qpos": "array([0., 0., 0.])",
                  "init_qvel": "array([0., 0., 0.])",
                  "_viewers": {},
                  "frame_skip": 5,
                  "viewer": "None",
                  "observation_space": {
                    "dtype": "dtype('float64')",
                    "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                    "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                    "_shape": [
                      11
                    ],
                    "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                    "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                    "low_repr": "-inf",
                    "high_repr": "inf",
                    "_np_random": "None",
                    "$type": "gym.spaces.box.Box"
                  },
                  "action_space": {
                    "dtype": "dtype('float32')",
                    "bounded_below": "array([ True])",
                    "bounded_above": "array([ True])",
                    "_shape": [
                      1
                    ],
                    "low": "array([-1.], dtype=float32)",
                    "high": "array([1.], dtype=float32)",
                    "low_repr": "-1.0",
                    "high_repr": "1.0",
                    "_np_random": "None",
                    "$type": "gym.spaces.box.Box"
                  },
                  "render_mode": "None",
                  "renderer": {
                    "no_returns_render": [
                      "human"
                    ],
                    "single_render": [
                      "single_state_pixels",
                      "single_rgb_array",
                      "single_depth_array"
                    ],
                    "mode": "None",
                    "render": {
                      "$type": "functools.partial"
                    },
                    "render_list": [],
                    "$type": "gym.utils.renderer.Renderer"
                  },
                  "_ezpickle_args": [],
                  "_ezpickle_kwargs": {},
                  "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "checked_reset": false,
                "checked_step": false,
                "checked_render": false,
                "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": true,
            "_has_reset": false,
            "_disable_render_order_enforcing": false,
            "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
          },
          "_action_space": "None",
          "_observation_space": "None",
          "_reward_range": "None",
          "_metadata": "None",
          "new_step_api": false,
          "_max_episode_steps": 1000,
          "_elapsed_steps": "None",
          "$type": "gym.wrappers.time_limit.TimeLimit"
        },
        "_max_episode_length": 1000,
        "_render_modes": [
          "human",
          "rgb_array",
          "depth_array",
          "single_rgb_array",
          "single_depth_array"
        ],
        "_step_cnt": "None",
        "_visualize": false,
        "_action_space": {
          "dtype": "dtype('float32')",
          "bounded_below": "array([ True])",
          "bounded_above": "array([ True])",
          "_shape": [
            1
          ],
          "low": "array([-1.], dtype=float32)",
          "high": "array([1.], dtype=float32)",
          "low_repr": "-1.0",
          "high_repr": "1.0",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "_observation_space": {
          "dtype": "dtype('float32')",
          "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
          "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
          "_shape": [
            11
          ],
          "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
          "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
          "low_repr": "-inf",
          "high_repr": "inf",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "_spec": {
          "max_episode_length": 1000,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_env_info": "None",
        "$type": "garage.envs.gym_env.GymEnv"
      },
      {
        "_env": {
          "env": {
            "env": {
              "env": {
                "env": {
                  "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                  "model": "<mujoco._structs.MjModel object at 0x7f904d798c70>",
                  "data": "<mujoco._structs.MjData object at 0x7f904d798cb0>",
                  "init_qpos": "array([0., 0., 0.])",
                  "init_qvel": "array([0., 0., 0.])",
                  "_viewers": {},
                  "frame_skip": 5,
                  "viewer": "None",
                  "observation_space": {
                    "dtype": "dtype('float64')",
                    "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                    "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                    "_shape": [
                      11
                    ],
                    "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                    "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                    "low_repr": "-inf",
                    "high_repr": "inf",
                    "_np_random": "None",
                    "$type": "gym.spaces.box.Box"
                  },
                  "action_space": {
                    "dtype": "dtype('float32')",
                    "bounded_below": "array([ True])",
                    "bounded_above": "array([ True])",
                    "_shape": [
                      1
                    ],
                    "low": "array([-1.], dtype=float32)",
                    "high": "array([1.], dtype=float32)",
                    "low_repr": "-1.0",
                    "high_repr": "1.0",
                    "_np_random": "None",
                    "$type": "gym.spaces.box.Box"
                  },
                  "render_mode": "None",
                  "renderer": {
                    "no_returns_render": [
                      "human"
                    ],
                    "single_render": [
                      "single_state_pixels",
                      "single_rgb_array",
                      "single_depth_array"
                    ],
                    "mode": "None",
                    "render": {
                      "$type": "functools.partial"
                    },
                    "render_list": [],
                    "$type": "gym.utils.renderer.Renderer"
                  },
                  "_ezpickle_args": [],
                  "_ezpickle_kwargs": {},
                  "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "checked_reset": false,
                "checked_step": false,
                "checked_render": false,
                "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": true,
            "_has_reset": false,
            "_disable_render_order_enforcing": false,
            "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
          },
          "_action_space": "None",
          "_observation_space": "None",
          "_reward_range": "None",
          "_metadata": "None",
          "new_step_api": false,
          "_max_episode_steps": 1000,
          "_elapsed_steps": "None",
          "$type": "gym.wrappers.time_limit.TimeLimit"
        },
        "_max_episode_length": 1000,
        "_render_modes": [
          "human",
          "rgb_array",
          "depth_array",
          "single_rgb_array",
          "single_depth_array"
        ],
        "_step_cnt": "None",
        "_visualize": false,
        "_action_space": {
          "dtype": "dtype('float32')",
          "bounded_below": "array([ True])",
          "bounded_above": "array([ True])",
          "_shape": [
            1
          ],
          "low": "array([-1.], dtype=float32)",
          "high": "array([1.], dtype=float32)",
          "low_repr": "-1.0",
          "high_repr": "1.0",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "_observation_space": {
          "dtype": "dtype('float32')",
          "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
          "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
          "_shape": [
            11
          ],
          "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
          "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
          "low_repr": "-inf",
          "high_repr": "inf",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "_spec": {
          "max_episode_length": 1000,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_env_info": "None",
        "$type": "garage.envs.gym_env.GymEnv"
      },
      {
        "_env": {
          "env": {
            "env": {
              "env": {
                "env": {
                  "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                  "model": "<mujoco._structs.MjModel object at 0x7f904d7676f0>",
                  "data": "<mujoco._structs.MjData object at 0x7f904d767730>",
                  "init_qpos": "array([0., 0., 0.])",
                  "init_qvel": "array([0., 0., 0.])",
                  "_viewers": {},
                  "frame_skip": 5,
                  "viewer": "None",
                  "observation_space": {
                    "dtype": "dtype('float64')",
                    "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                    "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                    "_shape": [
                      11
                    ],
                    "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                    "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                    "low_repr": "-inf",
                    "high_repr": "inf",
                    "_np_random": "None",
                    "$type": "gym.spaces.box.Box"
                  },
                  "action_space": {
                    "dtype": "dtype('float32')",
                    "bounded_below": "array([ True])",
                    "bounded_above": "array([ True])",
                    "_shape": [
                      1
                    ],
                    "low": "array([-1.], dtype=float32)",
                    "high": "array([1.], dtype=float32)",
                    "low_repr": "-1.0",
                    "high_repr": "1.0",
                    "_np_random": "None",
                    "$type": "gym.spaces.box.Box"
                  },
                  "render_mode": "None",
                  "renderer": {
                    "no_returns_render": [
                      "human"
                    ],
                    "single_render": [
                      "single_state_pixels",
                      "single_rgb_array",
                      "single_depth_array"
                    ],
                    "mode": "None",
                    "render": {
                      "$type": "functools.partial"
                    },
                    "render_list": [],
                    "$type": "gym.utils.renderer.Renderer"
                  },
                  "_ezpickle_args": [],
                  "_ezpickle_kwargs": {},
                  "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "checked_reset": false,
                "checked_step": false,
                "checked_render": false,
                "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": true,
            "_has_reset": false,
            "_disable_render_order_enforcing": false,
            "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
          },
          "_action_space": "None",
          "_observation_space": "None",
          "_reward_range": "None",
          "_metadata": "None",
          "new_step_api": false,
          "_max_episode_steps": 1000,
          "_elapsed_steps": "None",
          "$type": "gym.wrappers.time_limit.TimeLimit"
        },
        "_max_episode_length": 1000,
        "_render_modes": [
          "human",
          "rgb_array",
          "depth_array",
          "single_rgb_array",
          "single_depth_array"
        ],
        "_step_cnt": "None",
        "_visualize": false,
        "_action_space": {
          "dtype": "dtype('float32')",
          "bounded_below": "array([ True])",
          "bounded_above": "array([ True])",
          "_shape": [
            1
          ],
          "low": "array([-1.], dtype=float32)",
          "high": "array([1.], dtype=float32)",
          "low_repr": "-1.0",
          "high_repr": "1.0",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "_observation_space": {
          "dtype": "dtype('float32')",
          "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
          "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
          "_shape": [
            11
          ],
          "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
          "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
          "low_repr": "-inf",
          "high_repr": "inf",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "_spec": {
          "max_episode_length": 1000,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_env_info": "None",
        "$type": "garage.envs.gym_env.GymEnv"
      },
      {
        "_env": {
          "env": {
            "env": {
              "env": {
                "env": {
                  "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                  "model": "<mujoco._structs.MjModel object at 0x7f904d6b41b0>",
                  "data": "<mujoco._structs.MjData object at 0x7f904d6b41f0>",
                  "init_qpos": "array([0., 0., 0.])",
                  "init_qvel": "array([0., 0., 0.])",
                  "_viewers": {},
                  "frame_skip": 5,
                  "viewer": "None",
                  "observation_space": {
                    "dtype": "dtype('float64')",
                    "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                    "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                    "_shape": [
                      11
                    ],
                    "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                    "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                    "low_repr": "-inf",
                    "high_repr": "inf",
                    "_np_random": "None",
                    "$type": "gym.spaces.box.Box"
                  },
                  "action_space": {
                    "dtype": "dtype('float32')",
                    "bounded_below": "array([ True])",
                    "bounded_above": "array([ True])",
                    "_shape": [
                      1
                    ],
                    "low": "array([-1.], dtype=float32)",
                    "high": "array([1.], dtype=float32)",
                    "low_repr": "-1.0",
                    "high_repr": "1.0",
                    "_np_random": "None",
                    "$type": "gym.spaces.box.Box"
                  },
                  "render_mode": "None",
                  "renderer": {
                    "no_returns_render": [
                      "human"
                    ],
                    "single_render": [
                      "single_state_pixels",
                      "single_rgb_array",
                      "single_depth_array"
                    ],
                    "mode": "None",
                    "render": {
                      "$type": "functools.partial"
                    },
                    "render_list": [],
                    "$type": "gym.utils.renderer.Renderer"
                  },
                  "_ezpickle_args": [],
                  "_ezpickle_kwargs": {},
                  "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "checked_reset": false,
                "checked_step": false,
                "checked_render": false,
                "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": true,
            "_has_reset": false,
            "_disable_render_order_enforcing": false,
            "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
          },
          "_action_space": "None",
          "_observation_space": "None",
          "_reward_range": "None",
          "_metadata": "None",
          "new_step_api": false,
          "_max_episode_steps": 1000,
          "_elapsed_steps": "None",
          "$type": "gym.wrappers.time_limit.TimeLimit"
        },
        "_max_episode_length": 1000,
        "_render_modes": [
          "human",
          "rgb_array",
          "depth_array",
          "single_rgb_array",
          "single_depth_array"
        ],
        "_step_cnt": "None",
        "_visualize": false,
        "_action_space": {
          "dtype": "dtype('float32')",
          "bounded_below": "array([ True])",
          "bounded_above": "array([ True])",
          "_shape": [
            1
          ],
          "low": "array([-1.], dtype=float32)",
          "high": "array([1.], dtype=float32)",
          "low_repr": "-1.0",
          "high_repr": "1.0",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "_observation_space": {
          "dtype": "dtype('float32')",
          "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
          "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
          "_shape": [
            11
          ],
          "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
          "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
          "low_repr": "-inf",
          "high_repr": "inf",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "_spec": {
          "max_episode_length": 1000,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_env_info": "None",
        "$type": "garage.envs.gym_env.GymEnv"
      },
      {
        "_env": {
          "env": {
            "env": {
              "env": {
                "env": {
                  "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                  "model": "<mujoco._structs.MjModel object at 0x7f904d6b4c30>",
                  "data": "<mujoco._structs.MjData object at 0x7f904d6b4c70>",
                  "init_qpos": "array([0., 0., 0.])",
                  "init_qvel": "array([0., 0., 0.])",
                  "_viewers": {},
                  "frame_skip": 5,
                  "viewer": "None",
                  "observation_space": {
                    "dtype": "dtype('float64')",
                    "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                    "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                    "_shape": [
                      11
                    ],
                    "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                    "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                    "low_repr": "-inf",
                    "high_repr": "inf",
                    "_np_random": "None",
                    "$type": "gym.spaces.box.Box"
                  },
                  "action_space": {
                    "dtype": "dtype('float32')",
                    "bounded_below": "array([ True])",
                    "bounded_above": "array([ True])",
                    "_shape": [
                      1
                    ],
                    "low": "array([-1.], dtype=float32)",
                    "high": "array([1.], dtype=float32)",
                    "low_repr": "-1.0",
                    "high_repr": "1.0",
                    "_np_random": "None",
                    "$type": "gym.spaces.box.Box"
                  },
                  "render_mode": "None",
                  "renderer": {
                    "no_returns_render": [
                      "human"
                    ],
                    "single_render": [
                      "single_state_pixels",
                      "single_rgb_array",
                      "single_depth_array"
                    ],
                    "mode": "None",
                    "render": {
                      "$type": "functools.partial"
                    },
                    "render_list": [],
                    "$type": "gym.utils.renderer.Renderer"
                  },
                  "_ezpickle_args": [],
                  "_ezpickle_kwargs": {},
                  "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "checked_reset": false,
                "checked_step": false,
                "checked_render": false,
                "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": true,
            "_has_reset": false,
            "_disable_render_order_enforcing": false,
            "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
          },
          "_action_space": "None",
          "_observation_space": "None",
          "_reward_range": "None",
          "_metadata": "None",
          "new_step_api": false,
          "_max_episode_steps": 1000,
          "_elapsed_steps": "None",
          "$type": "gym.wrappers.time_limit.TimeLimit"
        },
        "_max_episode_length": 1000,
        "_render_modes": [
          "human",
          "rgb_array",
          "depth_array",
          "single_rgb_array",
          "single_depth_array"
        ],
        "_step_cnt": "None",
        "_visualize": false,
        "_action_space": {
          "dtype": "dtype('float32')",
          "bounded_below": "array([ True])",
          "bounded_above": "array([ True])",
          "_shape": [
            1
          ],
          "low": "array([-1.], dtype=float32)",
          "high": "array([1.], dtype=float32)",
          "low_repr": "-1.0",
          "high_repr": "1.0",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "_observation_space": {
          "dtype": "dtype('float32')",
          "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
          "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
          "_shape": [
            11
          ],
          "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
          "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
          "low_repr": "-inf",
          "high_repr": "inf",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "_spec": {
          "max_episode_length": 1000,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_env_info": "None",
        "$type": "garage.envs.gym_env.GymEnv"
      },
      {
        "_env": {
          "env": {
            "env": {
              "env": {
                "env": {
                  "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                  "model": "<mujoco._structs.MjModel object at 0x7f904d682730>",
                  "data": "<mujoco._structs.MjData object at 0x7f904d682770>",
                  "init_qpos": "array([0., 0., 0.])",
                  "init_qvel": "array([0., 0., 0.])",
                  "_viewers": {},
                  "frame_skip": 5,
                  "viewer": "None",
                  "observation_space": {
                    "dtype": "dtype('float64')",
                    "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                    "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                    "_shape": [
                      11
                    ],
                    "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                    "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                    "low_repr": "-inf",
                    "high_repr": "inf",
                    "_np_random": "None",
                    "$type": "gym.spaces.box.Box"
                  },
                  "action_space": {
                    "dtype": "dtype('float32')",
                    "bounded_below": "array([ True])",
                    "bounded_above": "array([ True])",
                    "_shape": [
                      1
                    ],
                    "low": "array([-1.], dtype=float32)",
                    "high": "array([1.], dtype=float32)",
                    "low_repr": "-1.0",
                    "high_repr": "1.0",
                    "_np_random": "None",
                    "$type": "gym.spaces.box.Box"
                  },
                  "render_mode": "None",
                  "renderer": {
                    "no_returns_render": [
                      "human"
                    ],
                    "single_render": [
                      "single_state_pixels",
                      "single_rgb_array",
                      "single_depth_array"
                    ],
                    "mode": "None",
                    "render": {
                      "$type": "functools.partial"
                    },
                    "render_list": [],
                    "$type": "gym.utils.renderer.Renderer"
                  },
                  "_ezpickle_args": [],
                  "_ezpickle_kwargs": {},
                  "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "checked_reset": false,
                "checked_step": false,
                "checked_render": false,
                "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": true,
            "_has_reset": false,
            "_disable_render_order_enforcing": false,
            "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
          },
          "_action_space": "None",
          "_observation_space": "None",
          "_reward_range": "None",
          "_metadata": "None",
          "new_step_api": false,
          "_max_episode_steps": 1000,
          "_elapsed_steps": "None",
          "$type": "gym.wrappers.time_limit.TimeLimit"
        },
        "_max_episode_length": 1000,
        "_render_modes": [
          "human",
          "rgb_array",
          "depth_array",
          "single_rgb_array",
          "single_depth_array"
        ],
        "_step_cnt": "None",
        "_visualize": false,
        "_action_space": {
          "dtype": "dtype('float32')",
          "bounded_below": "array([ True])",
          "bounded_above": "array([ True])",
          "_shape": [
            1
          ],
          "low": "array([-1.], dtype=float32)",
          "high": "array([1.], dtype=float32)",
          "low_repr": "-1.0",
          "high_repr": "1.0",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "_observation_space": {
          "dtype": "dtype('float32')",
          "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
          "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
          "_shape": [
            11
          ],
          "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
          "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
          "low_repr": "-inf",
          "high_repr": "inf",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "_spec": {
          "max_episode_length": 1000,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_env_info": "None",
        "$type": "garage.envs.gym_env.GymEnv"
      },
      {
        "_env": {
          "env": {
            "env": {
              "env": {
                "env": {
                  "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                  "model": "<mujoco._structs.MjModel object at 0x7f904d6824f0>",
                  "data": "<mujoco._structs.MjData object at 0x7f904d6822b0>",
                  "init_qpos": "array([0., 0., 0.])",
                  "init_qvel": "array([0., 0., 0.])",
                  "_viewers": {},
                  "frame_skip": 5,
                  "viewer": "None",
                  "observation_space": {
                    "dtype": "dtype('float64')",
                    "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                    "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                    "_shape": [
                      11
                    ],
                    "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                    "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                    "low_repr": "-inf",
                    "high_repr": "inf",
                    "_np_random": "None",
                    "$type": "gym.spaces.box.Box"
                  },
                  "action_space": {
                    "dtype": "dtype('float32')",
                    "bounded_below": "array([ True])",
                    "bounded_above": "array([ True])",
                    "_shape": [
                      1
                    ],
                    "low": "array([-1.], dtype=float32)",
                    "high": "array([1.], dtype=float32)",
                    "low_repr": "-1.0",
                    "high_repr": "1.0",
                    "_np_random": "None",
                    "$type": "gym.spaces.box.Box"
                  },
                  "render_mode": "None",
                  "renderer": {
                    "no_returns_render": [
                      "human"
                    ],
                    "single_render": [
                      "single_state_pixels",
                      "single_rgb_array",
                      "single_depth_array"
                    ],
                    "mode": "None",
                    "render": {
                      "$type": "functools.partial"
                    },
                    "render_list": [],
                    "$type": "gym.utils.renderer.Renderer"
                  },
                  "_ezpickle_args": [],
                  "_ezpickle_kwargs": {},
                  "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "checked_reset": false,
                "checked_step": false,
                "checked_render": false,
                "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": true,
            "_has_reset": false,
            "_disable_render_order_enforcing": false,
            "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
          },
          "_action_space": "None",
          "_observation_space": "None",
          "_reward_range": "None",
          "_metadata": "None",
          "new_step_api": false,
          "_max_episode_steps": 1000,
          "_elapsed_steps": "None",
          "$type": "gym.wrappers.time_limit.TimeLimit"
        },
        "_max_episode_length": 1000,
        "_render_modes": [
          "human",
          "rgb_array",
          "depth_array",
          "single_rgb_array",
          "single_depth_array"
        ],
        "_step_cnt": "None",
        "_visualize": false,
        "_action_space": {
          "dtype": "dtype('float32')",
          "bounded_below": "array([ True])",
          "bounded_above": "array([ True])",
          "_shape": [
            1
          ],
          "low": "array([-1.], dtype=float32)",
          "high": "array([1.], dtype=float32)",
          "low_repr": "-1.0",
          "high_repr": "1.0",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "_observation_space": {
          "dtype": "dtype('float32')",
          "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
          "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
          "_shape": [
            11
          ],
          "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
          "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
          "low_repr": "-inf",
          "high_repr": "inf",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "_spec": {
          "max_episode_length": 1000,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_env_info": "None",
        "$type": "garage.envs.gym_env.GymEnv"
      },
      {
        "_env": {
          "env": {
            "env": {
              "env": {
                "env": {
                  "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                  "model": "<mujoco._structs.MjModel object at 0x7f904d798ef0>",
                  "data": "<mujoco._structs.MjData object at 0x7f904d798a70>",
                  "init_qpos": "array([0., 0., 0.])",
                  "init_qvel": "array([0., 0., 0.])",
                  "_viewers": {},
                  "frame_skip": 5,
                  "viewer": "None",
                  "observation_space": {
                    "dtype": "dtype('float64')",
                    "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                    "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                    "_shape": [
                      11
                    ],
                    "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                    "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                    "low_repr": "-inf",
                    "high_repr": "inf",
                    "_np_random": "None",
                    "$type": "gym.spaces.box.Box"
                  },
                  "action_space": {
                    "dtype": "dtype('float32')",
                    "bounded_below": "array([ True])",
                    "bounded_above": "array([ True])",
                    "_shape": [
                      1
                    ],
                    "low": "array([-1.], dtype=float32)",
                    "high": "array([1.], dtype=float32)",
                    "low_repr": "-1.0",
                    "high_repr": "1.0",
                    "_np_random": "None",
                    "$type": "gym.spaces.box.Box"
                  },
                  "render_mode": "None",
                  "renderer": {
                    "no_returns_render": [
                      "human"
                    ],
                    "single_render": [
                      "single_state_pixels",
                      "single_rgb_array",
                      "single_depth_array"
                    ],
                    "mode": "None",
                    "render": {
                      "$type": "functools.partial"
                    },
                    "render_list": [],
                    "$type": "gym.utils.renderer.Renderer"
                  },
                  "_ezpickle_args": [],
                  "_ezpickle_kwargs": {},
                  "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "checked_reset": false,
                "checked_step": false,
                "checked_render": false,
                "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": true,
            "_has_reset": false,
            "_disable_render_order_enforcing": false,
            "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
          },
          "_action_space": "None",
          "_observation_space": "None",
          "_reward_range": "None",
          "_metadata": "None",
          "new_step_api": false,
          "_max_episode_steps": 1000,
          "_elapsed_steps": "None",
          "$type": "gym.wrappers.time_limit.TimeLimit"
        },
        "_max_episode_length": 1000,
        "_render_modes": [
          "human",
          "rgb_array",
          "depth_array",
          "single_rgb_array",
          "single_depth_array"
        ],
        "_step_cnt": "None",
        "_visualize": false,
        "_action_space": {
          "dtype": "dtype('float32')",
          "bounded_below": "array([ True])",
          "bounded_above": "array([ True])",
          "_shape": [
            1
          ],
          "low": "array([-1.], dtype=float32)",
          "high": "array([1.], dtype=float32)",
          "low_repr": "-1.0",
          "high_repr": "1.0",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "_observation_space": {
          "dtype": "dtype('float32')",
          "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
          "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
          "_shape": [
            11
          ],
          "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
          "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
          "low_repr": "-inf",
          "high_repr": "inf",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "_spec": {
          "max_episode_length": 1000,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_env_info": "None",
        "$type": "garage.envs.gym_env.GymEnv"
      },
      {
        "_env": {
          "env": {
            "env": {
              "env": {
                "env": {
                  "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                  "model": "<mujoco._structs.MjModel object at 0x7f904d8e9ab0>",
                  "data": "<mujoco._structs.MjData object at 0x7f904d8e9a70>",
                  "init_qpos": "array([0., 0., 0.])",
                  "init_qvel": "array([0., 0., 0.])",
                  "_viewers": {},
                  "frame_skip": 5,
                  "viewer": "None",
                  "observation_space": {
                    "dtype": "dtype('float64')",
                    "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                    "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                    "_shape": [
                      11
                    ],
                    "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                    "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                    "low_repr": "-inf",
                    "high_repr": "inf",
                    "_np_random": "None",
                    "$type": "gym.spaces.box.Box"
                  },
                  "action_space": {
                    "dtype": "dtype('float32')",
                    "bounded_below": "array([ True])",
                    "bounded_above": "array([ True])",
                    "_shape": [
                      1
                    ],
                    "low": "array([-1.], dtype=float32)",
                    "high": "array([1.], dtype=float32)",
                    "low_repr": "-1.0",
                    "high_repr": "1.0",
                    "_np_random": "None",
                    "$type": "gym.spaces.box.Box"
                  },
                  "render_mode": "None",
                  "renderer": {
                    "no_returns_render": [
                      "human"
                    ],
                    "single_render": [
                      "single_state_pixels",
                      "single_rgb_array",
                      "single_depth_array"
                    ],
                    "mode": "None",
                    "render": {
                      "$type": "functools.partial"
                    },
                    "render_list": [],
                    "$type": "gym.utils.renderer.Renderer"
                  },
                  "_ezpickle_args": [],
                  "_ezpickle_kwargs": {},
                  "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "checked_reset": false,
                "checked_step": false,
                "checked_render": false,
                "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": true,
            "_has_reset": false,
            "_disable_render_order_enforcing": false,
            "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
          },
          "_action_space": "None",
          "_observation_space": "None",
          "_reward_range": "None",
          "_metadata": "None",
          "new_step_api": false,
          "_max_episode_steps": 1000,
          "_elapsed_steps": "None",
          "$type": "gym.wrappers.time_limit.TimeLimit"
        },
        "_max_episode_length": 1000,
        "_render_modes": [
          "human",
          "rgb_array",
          "depth_array",
          "single_rgb_array",
          "single_depth_array"
        ],
        "_step_cnt": "None",
        "_visualize": false,
        "_action_space": {
          "dtype": "dtype('float32')",
          "bounded_below": "array([ True])",
          "bounded_above": "array([ True])",
          "_shape": [
            1
          ],
          "low": "array([-1.], dtype=float32)",
          "high": "array([1.], dtype=float32)",
          "low_repr": "-1.0",
          "high_repr": "1.0",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "_observation_space": {
          "dtype": "dtype('float32')",
          "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
          "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
          "_shape": [
            11
          ],
          "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
          "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
          "low_repr": "-inf",
          "high_repr": "inf",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "_spec": {
          "max_episode_length": 1000,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_env_info": "None",
        "$type": "garage.envs.gym_env.GymEnv"
      },
      {
        "_env": {
          "env": {
            "env": {
              "env": {
                "env": {
                  "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                  "model": "<mujoco._structs.MjModel object at 0x7f904e73a7b0>",
                  "data": "<mujoco._structs.MjData object at 0x7f904e19f370>",
                  "init_qpos": "array([0., 0., 0.])",
                  "init_qvel": "array([0., 0., 0.])",
                  "_viewers": {},
                  "frame_skip": 5,
                  "viewer": "None",
                  "observation_space": {
                    "dtype": "dtype('float64')",
                    "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                    "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                    "_shape": [
                      11
                    ],
                    "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                    "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                    "low_repr": "-inf",
                    "high_repr": "inf",
                    "_np_random": "None",
                    "$type": "gym.spaces.box.Box"
                  },
                  "action_space": {
                    "dtype": "dtype('float32')",
                    "bounded_below": "array([ True])",
                    "bounded_above": "array([ True])",
                    "_shape": [
                      1
                    ],
                    "low": "array([-1.], dtype=float32)",
                    "high": "array([1.], dtype=float32)",
                    "low_repr": "-1.0",
                    "high_repr": "1.0",
                    "_np_random": "None",
                    "$type": "gym.spaces.box.Box"
                  },
                  "render_mode": "None",
                  "renderer": {
                    "no_returns_render": [
                      "human"
                    ],
                    "single_render": [
                      "single_state_pixels",
                      "single_rgb_array",
                      "single_depth_array"
                    ],
                    "mode": "None",
                    "render": {
                      "$type": "functools.partial"
                    },
                    "render_list": [],
                    "$type": "gym.utils.renderer.Renderer"
                  },
                  "_ezpickle_args": [],
                  "_ezpickle_kwargs": {},
                  "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "checked_reset": false,
                "checked_step": false,
                "checked_render": false,
                "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": true,
            "_has_reset": false,
            "_disable_render_order_enforcing": false,
            "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
          },
          "_action_space": "None",
          "_observation_space": "None",
          "_reward_range": "None",
          "_metadata": "None",
          "new_step_api": false,
          "_max_episode_steps": 1000,
          "_elapsed_steps": "None",
          "$type": "gym.wrappers.time_limit.TimeLimit"
        },
        "_max_episode_length": 1000,
        "_render_modes": [
          "human",
          "rgb_array",
          "depth_array",
          "single_rgb_array",
          "single_depth_array"
        ],
        "_step_cnt": "None",
        "_visualize": false,
        "_action_space": {
          "dtype": "dtype('float32')",
          "bounded_below": "array([ True])",
          "bounded_above": "array([ True])",
          "_shape": [
            1
          ],
          "low": "array([-1.], dtype=float32)",
          "high": "array([1.], dtype=float32)",
          "low_repr": "-1.0",
          "high_repr": "1.0",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "_observation_space": {
          "dtype": "dtype('float32')",
          "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
          "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
          "_shape": [
            11
          ],
          "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
          "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
          "low_repr": "-inf",
          "high_repr": "inf",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "_spec": {
          "max_episode_length": 1000,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_env_info": "None",
        "$type": "garage.envs.gym_env.GymEnv"
      },
      {
        "_env": {
          "env": {
            "env": {
              "env": {
                "env": {
                  "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                  "model": "<mujoco._structs.MjModel object at 0x7f904d64e7b0>",
                  "data": "<mujoco._structs.MjData object at 0x7f904d64e7f0>",
                  "init_qpos": "array([0., 0., 0.])",
                  "init_qvel": "array([0., 0., 0.])",
                  "_viewers": {},
                  "frame_skip": 5,
                  "viewer": "None",
                  "observation_space": {
                    "dtype": "dtype('float64')",
                    "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                    "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                    "_shape": [
                      11
                    ],
                    "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                    "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                    "low_repr": "-inf",
                    "high_repr": "inf",
                    "_np_random": "None",
                    "$type": "gym.spaces.box.Box"
                  },
                  "action_space": {
                    "dtype": "dtype('float32')",
                    "bounded_below": "array([ True])",
                    "bounded_above": "array([ True])",
                    "_shape": [
                      1
                    ],
                    "low": "array([-1.], dtype=float32)",
                    "high": "array([1.], dtype=float32)",
                    "low_repr": "-1.0",
                    "high_repr": "1.0",
                    "_np_random": "None",
                    "$type": "gym.spaces.box.Box"
                  },
                  "render_mode": "None",
                  "renderer": {
                    "no_returns_render": [
                      "human"
                    ],
                    "single_render": [
                      "single_state_pixels",
                      "single_rgb_array",
                      "single_depth_array"
                    ],
                    "mode": "None",
                    "render": {
                      "$type": "functools.partial"
                    },
                    "render_list": [],
                    "$type": "gym.utils.renderer.Renderer"
                  },
                  "_ezpickle_args": [],
                  "_ezpickle_kwargs": {},
                  "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "checked_reset": false,
                "checked_step": false,
                "checked_render": false,
                "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": true,
            "_has_reset": false,
            "_disable_render_order_enforcing": false,
            "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
          },
          "_action_space": "None",
          "_observation_space": "None",
          "_reward_range": "None",
          "_metadata": "None",
          "new_step_api": false,
          "_max_episode_steps": 1000,
          "_elapsed_steps": "None",
          "$type": "gym.wrappers.time_limit.TimeLimit"
        },
        "_max_episode_length": 1000,
        "_render_modes": [
          "human",
          "rgb_array",
          "depth_array",
          "single_rgb_array",
          "single_depth_array"
        ],
        "_step_cnt": "None",
        "_visualize": false,
        "_action_space": {
          "dtype": "dtype('float32')",
          "bounded_below": "array([ True])",
          "bounded_above": "array([ True])",
          "_shape": [
            1
          ],
          "low": "array([-1.], dtype=float32)",
          "high": "array([1.], dtype=float32)",
          "low_repr": "-1.0",
          "high_repr": "1.0",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "_observation_space": {
          "dtype": "dtype('float32')",
          "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
          "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
          "_shape": [
            11
          ],
          "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
          "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
          "low_repr": "-inf",
          "high_repr": "inf",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "_spec": {
          "max_episode_length": 1000,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_env_info": "None",
        "$type": "garage.envs.gym_env.GymEnv"
      },
      {
        "_env": {
          "env": {
            "env": {
              "env": {
                "env": {
                  "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                  "model": "<mujoco._structs.MjModel object at 0x7f904d6f6230>",
                  "data": "<mujoco._structs.MjData object at 0x7f904d6f6270>",
                  "init_qpos": "array([0., 0., 0.])",
                  "init_qvel": "array([0., 0., 0.])",
                  "_viewers": {},
                  "frame_skip": 5,
                  "viewer": "None",
                  "observation_space": {
                    "dtype": "dtype('float64')",
                    "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                    "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                    "_shape": [
                      11
                    ],
                    "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                    "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                    "low_repr": "-inf",
                    "high_repr": "inf",
                    "_np_random": "None",
                    "$type": "gym.spaces.box.Box"
                  },
                  "action_space": {
                    "dtype": "dtype('float32')",
                    "bounded_below": "array([ True])",
                    "bounded_above": "array([ True])",
                    "_shape": [
                      1
                    ],
                    "low": "array([-1.], dtype=float32)",
                    "high": "array([1.], dtype=float32)",
                    "low_repr": "-1.0",
                    "high_repr": "1.0",
                    "_np_random": "None",
                    "$type": "gym.spaces.box.Box"
                  },
                  "render_mode": "None",
                  "renderer": {
                    "no_returns_render": [
                      "human"
                    ],
                    "single_render": [
                      "single_state_pixels",
                      "single_rgb_array",
                      "single_depth_array"
                    ],
                    "mode": "None",
                    "render": {
                      "$type": "functools.partial"
                    },
                    "render_list": [],
                    "$type": "gym.utils.renderer.Renderer"
                  },
                  "_ezpickle_args": [],
                  "_ezpickle_kwargs": {},
                  "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "checked_reset": false,
                "checked_step": false,
                "checked_render": false,
                "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": true,
            "_has_reset": false,
            "_disable_render_order_enforcing": false,
            "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
          },
          "_action_space": "None",
          "_observation_space": "None",
          "_reward_range": "None",
          "_metadata": "None",
          "new_step_api": false,
          "_max_episode_steps": 1000,
          "_elapsed_steps": "None",
          "$type": "gym.wrappers.time_limit.TimeLimit"
        },
        "_max_episode_length": 1000,
        "_render_modes": [
          "human",
          "rgb_array",
          "depth_array",
          "single_rgb_array",
          "single_depth_array"
        ],
        "_step_cnt": "None",
        "_visualize": false,
        "_action_space": {
          "dtype": "dtype('float32')",
          "bounded_below": "array([ True])",
          "bounded_above": "array([ True])",
          "_shape": [
            1
          ],
          "low": "array([-1.], dtype=float32)",
          "high": "array([1.], dtype=float32)",
          "low_repr": "-1.0",
          "high_repr": "1.0",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "_observation_space": {
          "dtype": "dtype('float32')",
          "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
          "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
          "_shape": [
            11
          ],
          "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
          "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
          "low_repr": "-inf",
          "high_repr": "inf",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "_spec": {
          "max_episode_length": 1000,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_env_info": "None",
        "$type": "garage.envs.gym_env.GymEnv"
      },
      {
        "_env": {
          "env": {
            "env": {
              "env": {
                "env": {
                  "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                  "model": "<mujoco._structs.MjModel object at 0x7f904d6f6cb0>",
                  "data": "<mujoco._structs.MjData object at 0x7f904d6f6cf0>",
                  "init_qpos": "array([0., 0., 0.])",
                  "init_qvel": "array([0., 0., 0.])",
                  "_viewers": {},
                  "frame_skip": 5,
                  "viewer": "None",
                  "observation_space": {
                    "dtype": "dtype('float64')",
                    "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                    "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                    "_shape": [
                      11
                    ],
                    "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                    "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                    "low_repr": "-inf",
                    "high_repr": "inf",
                    "_np_random": "None",
                    "$type": "gym.spaces.box.Box"
                  },
                  "action_space": {
                    "dtype": "dtype('float32')",
                    "bounded_below": "array([ True])",
                    "bounded_above": "array([ True])",
                    "_shape": [
                      1
                    ],
                    "low": "array([-1.], dtype=float32)",
                    "high": "array([1.], dtype=float32)",
                    "low_repr": "-1.0",
                    "high_repr": "1.0",
                    "_np_random": "None",
                    "$type": "gym.spaces.box.Box"
                  },
                  "render_mode": "None",
                  "renderer": {
                    "no_returns_render": [
                      "human"
                    ],
                    "single_render": [
                      "single_state_pixels",
                      "single_rgb_array",
                      "single_depth_array"
                    ],
                    "mode": "None",
                    "render": {
                      "$type": "functools.partial"
                    },
                    "render_list": [],
                    "$type": "gym.utils.renderer.Renderer"
                  },
                  "_ezpickle_args": [],
                  "_ezpickle_kwargs": {},
                  "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "checked_reset": false,
                "checked_step": false,
                "checked_render": false,
                "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": true,
            "_has_reset": false,
            "_disable_render_order_enforcing": false,
            "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
          },
          "_action_space": "None",
          "_observation_space": "None",
          "_reward_range": "None",
          "_metadata": "None",
          "new_step_api": false,
          "_max_episode_steps": 1000,
          "_elapsed_steps": "None",
          "$type": "gym.wrappers.time_limit.TimeLimit"
        },
        "_max_episode_length": 1000,
        "_render_modes": [
          "human",
          "rgb_array",
          "depth_array",
          "single_rgb_array",
          "single_depth_array"
        ],
        "_step_cnt": "None",
        "_visualize": false,
        "_action_space": {
          "dtype": "dtype('float32')",
          "bounded_below": "array([ True])",
          "bounded_above": "array([ True])",
          "_shape": [
            1
          ],
          "low": "array([-1.], dtype=float32)",
          "high": "array([1.], dtype=float32)",
          "low_repr": "-1.0",
          "high_repr": "1.0",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "_observation_space": {
          "dtype": "dtype('float32')",
          "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
          "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
          "_shape": [
            11
          ],
          "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
          "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
          "low_repr": "-inf",
          "high_repr": "inf",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "_spec": {
          "max_episode_length": 1000,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_env_info": "None",
        "$type": "garage.envs.gym_env.GymEnv"
      },
      {
        "_env": {
          "env": {
            "env": {
              "env": {
                "env": {
                  "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                  "model": "<mujoco._structs.MjModel object at 0x7f904d6077b0>",
                  "data": "<mujoco._structs.MjData object at 0x7f904d6077f0>",
                  "init_qpos": "array([0., 0., 0.])",
                  "init_qvel": "array([0., 0., 0.])",
                  "_viewers": {},
                  "frame_skip": 5,
                  "viewer": "None",
                  "observation_space": {
                    "dtype": "dtype('float64')",
                    "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                    "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                    "_shape": [
                      11
                    ],
                    "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                    "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                    "low_repr": "-inf",
                    "high_repr": "inf",
                    "_np_random": "None",
                    "$type": "gym.spaces.box.Box"
                  },
                  "action_space": {
                    "dtype": "dtype('float32')",
                    "bounded_below": "array([ True])",
                    "bounded_above": "array([ True])",
                    "_shape": [
                      1
                    ],
                    "low": "array([-1.], dtype=float32)",
                    "high": "array([1.], dtype=float32)",
                    "low_repr": "-1.0",
                    "high_repr": "1.0",
                    "_np_random": "None",
                    "$type": "gym.spaces.box.Box"
                  },
                  "render_mode": "None",
                  "renderer": {
                    "no_returns_render": [
                      "human"
                    ],
                    "single_render": [
                      "single_state_pixels",
                      "single_rgb_array",
                      "single_depth_array"
                    ],
                    "mode": "None",
                    "render": {
                      "$type": "functools.partial"
                    },
                    "render_list": [],
                    "$type": "gym.utils.renderer.Renderer"
                  },
                  "_ezpickle_args": [],
                  "_ezpickle_kwargs": {},
                  "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "checked_reset": false,
                "checked_step": false,
                "checked_render": false,
                "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": true,
            "_has_reset": false,
            "_disable_render_order_enforcing": false,
            "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
          },
          "_action_space": "None",
          "_observation_space": "None",
          "_reward_range": "None",
          "_metadata": "None",
          "new_step_api": false,
          "_max_episode_steps": 1000,
          "_elapsed_steps": "None",
          "$type": "gym.wrappers.time_limit.TimeLimit"
        },
        "_max_episode_length": 1000,
        "_render_modes": [
          "human",
          "rgb_array",
          "depth_array",
          "single_rgb_array",
          "single_depth_array"
        ],
        "_step_cnt": "None",
        "_visualize": false,
        "_action_space": {
          "dtype": "dtype('float32')",
          "bounded_below": "array([ True])",
          "bounded_above": "array([ True])",
          "_shape": [
            1
          ],
          "low": "array([-1.], dtype=float32)",
          "high": "array([1.], dtype=float32)",
          "low_repr": "-1.0",
          "high_repr": "1.0",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "_observation_space": {
          "dtype": "dtype('float32')",
          "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
          "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
          "_shape": [
            11
          ],
          "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
          "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
          "low_repr": "-inf",
          "high_repr": "inf",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "_spec": {
          "max_episode_length": 1000,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_env_info": "None",
        "$type": "garage.envs.gym_env.GymEnv"
      },
      {
        "_env": {
          "env": {
            "env": {
              "env": {
                "env": {
                  "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                  "model": "<mujoco._structs.MjModel object at 0x7f904d5d32b0>",
                  "data": "<mujoco._structs.MjData object at 0x7f904d5d32f0>",
                  "init_qpos": "array([0., 0., 0.])",
                  "init_qvel": "array([0., 0., 0.])",
                  "_viewers": {},
                  "frame_skip": 5,
                  "viewer": "None",
                  "observation_space": {
                    "dtype": "dtype('float64')",
                    "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                    "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                    "_shape": [
                      11
                    ],
                    "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                    "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                    "low_repr": "-inf",
                    "high_repr": "inf",
                    "_np_random": "None",
                    "$type": "gym.spaces.box.Box"
                  },
                  "action_space": {
                    "dtype": "dtype('float32')",
                    "bounded_below": "array([ True])",
                    "bounded_above": "array([ True])",
                    "_shape": [
                      1
                    ],
                    "low": "array([-1.], dtype=float32)",
                    "high": "array([1.], dtype=float32)",
                    "low_repr": "-1.0",
                    "high_repr": "1.0",
                    "_np_random": "None",
                    "$type": "gym.spaces.box.Box"
                  },
                  "render_mode": "None",
                  "renderer": {
                    "no_returns_render": [
                      "human"
                    ],
                    "single_render": [
                      "single_state_pixels",
                      "single_rgb_array",
                      "single_depth_array"
                    ],
                    "mode": "None",
                    "render": {
                      "$type": "functools.partial"
                    },
                    "render_list": [],
                    "$type": "gym.utils.renderer.Renderer"
                  },
                  "_ezpickle_args": [],
                  "_ezpickle_kwargs": {},
                  "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "checked_reset": false,
                "checked_step": false,
                "checked_render": false,
                "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": true,
            "_has_reset": false,
            "_disable_render_order_enforcing": false,
            "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
          },
          "_action_space": "None",
          "_observation_space": "None",
          "_reward_range": "None",
          "_metadata": "None",
          "new_step_api": false,
          "_max_episode_steps": 1000,
          "_elapsed_steps": "None",
          "$type": "gym.wrappers.time_limit.TimeLimit"
        },
        "_max_episode_length": 1000,
        "_render_modes": [
          "human",
          "rgb_array",
          "depth_array",
          "single_rgb_array",
          "single_depth_array"
        ],
        "_step_cnt": "None",
        "_visualize": false,
        "_action_space": {
          "dtype": "dtype('float32')",
          "bounded_below": "array([ True])",
          "bounded_above": "array([ True])",
          "_shape": [
            1
          ],
          "low": "array([-1.], dtype=float32)",
          "high": "array([1.], dtype=float32)",
          "low_repr": "-1.0",
          "high_repr": "1.0",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "_observation_space": {
          "dtype": "dtype('float32')",
          "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
          "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
          "_shape": [
            11
          ],
          "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
          "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
          "low_repr": "-inf",
          "high_repr": "inf",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "_spec": {
          "max_episode_length": 1000,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_env_info": "None",
        "$type": "garage.envs.gym_env.GymEnv"
      },
      {
        "_env": {
          "env": {
            "env": {
              "env": {
                "env": {
                  "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                  "model": "<mujoco._structs.MjModel object at 0x7f904d5d3d70>",
                  "data": "<mujoco._structs.MjData object at 0x7f904d5d3db0>",
                  "init_qpos": "array([0., 0., 0.])",
                  "init_qvel": "array([0., 0., 0.])",
                  "_viewers": {},
                  "frame_skip": 5,
                  "viewer": "None",
                  "observation_space": {
                    "dtype": "dtype('float64')",
                    "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                    "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                    "_shape": [
                      11
                    ],
                    "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                    "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                    "low_repr": "-inf",
                    "high_repr": "inf",
                    "_np_random": "None",
                    "$type": "gym.spaces.box.Box"
                  },
                  "action_space": {
                    "dtype": "dtype('float32')",
                    "bounded_below": "array([ True])",
                    "bounded_above": "array([ True])",
                    "_shape": [
                      1
                    ],
                    "low": "array([-1.], dtype=float32)",
                    "high": "array([1.], dtype=float32)",
                    "low_repr": "-1.0",
                    "high_repr": "1.0",
                    "_np_random": "None",
                    "$type": "gym.spaces.box.Box"
                  },
                  "render_mode": "None",
                  "renderer": {
                    "no_returns_render": [
                      "human"
                    ],
                    "single_render": [
                      "single_state_pixels",
                      "single_rgb_array",
                      "single_depth_array"
                    ],
                    "mode": "None",
                    "render": {
                      "$type": "functools.partial"
                    },
                    "render_list": [],
                    "$type": "gym.utils.renderer.Renderer"
                  },
                  "_ezpickle_args": [],
                  "_ezpickle_kwargs": {},
                  "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "checked_reset": false,
                "checked_step": false,
                "checked_render": false,
                "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": true,
            "_has_reset": false,
            "_disable_render_order_enforcing": false,
            "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
          },
          "_action_space": "None",
          "_observation_space": "None",
          "_reward_range": "None",
          "_metadata": "None",
          "new_step_api": false,
          "_max_episode_steps": 1000,
          "_elapsed_steps": "None",
          "$type": "gym.wrappers.time_limit.TimeLimit"
        },
        "_max_episode_length": 1000,
        "_render_modes": [
          "human",
          "rgb_array",
          "depth_array",
          "single_rgb_array",
          "single_depth_array"
        ],
        "_step_cnt": "None",
        "_visualize": false,
        "_action_space": {
          "dtype": "dtype('float32')",
          "bounded_below": "array([ True])",
          "bounded_above": "array([ True])",
          "_shape": [
            1
          ],
          "low": "array([-1.], dtype=float32)",
          "high": "array([1.], dtype=float32)",
          "low_repr": "-1.0",
          "high_repr": "1.0",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "_observation_space": {
          "dtype": "dtype('float32')",
          "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
          "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
          "_shape": [
            11
          ],
          "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
          "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
          "low_repr": "-inf",
          "high_repr": "inf",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "_spec": {
          "max_episode_length": 1000,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_env_info": "None",
        "$type": "garage.envs.gym_env.GymEnv"
      },
      {
        "_env": {
          "env": {
            "env": {
              "env": {
                "env": {
                  "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                  "model": "<mujoco._structs.MjModel object at 0x7f904d5a1870>",
                  "data": "<mujoco._structs.MjData object at 0x7f904d5a18b0>",
                  "init_qpos": "array([0., 0., 0.])",
                  "init_qvel": "array([0., 0., 0.])",
                  "_viewers": {},
                  "frame_skip": 5,
                  "viewer": "None",
                  "observation_space": {
                    "dtype": "dtype('float64')",
                    "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                    "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                    "_shape": [
                      11
                    ],
                    "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                    "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                    "low_repr": "-inf",
                    "high_repr": "inf",
                    "_np_random": "None",
                    "$type": "gym.spaces.box.Box"
                  },
                  "action_space": {
                    "dtype": "dtype('float32')",
                    "bounded_below": "array([ True])",
                    "bounded_above": "array([ True])",
                    "_shape": [
                      1
                    ],
                    "low": "array([-1.], dtype=float32)",
                    "high": "array([1.], dtype=float32)",
                    "low_repr": "-1.0",
                    "high_repr": "1.0",
                    "_np_random": "None",
                    "$type": "gym.spaces.box.Box"
                  },
                  "render_mode": "None",
                  "renderer": {
                    "no_returns_render": [
                      "human"
                    ],
                    "single_render": [
                      "single_state_pixels",
                      "single_rgb_array",
                      "single_depth_array"
                    ],
                    "mode": "None",
                    "render": {
                      "$type": "functools.partial"
                    },
                    "render_list": [],
                    "$type": "gym.utils.renderer.Renderer"
                  },
                  "_ezpickle_args": [],
                  "_ezpickle_kwargs": {},
                  "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "checked_reset": false,
                "checked_step": false,
                "checked_render": false,
                "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": true,
            "_has_reset": false,
            "_disable_render_order_enforcing": false,
            "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
          },
          "_action_space": "None",
          "_observation_space": "None",
          "_reward_range": "None",
          "_metadata": "None",
          "new_step_api": false,
          "_max_episode_steps": 1000,
          "_elapsed_steps": "None",
          "$type": "gym.wrappers.time_limit.TimeLimit"
        },
        "_max_episode_length": 1000,
        "_render_modes": [
          "human",
          "rgb_array",
          "depth_array",
          "single_rgb_array",
          "single_depth_array"
        ],
        "_step_cnt": "None",
        "_visualize": false,
        "_action_space": {
          "dtype": "dtype('float32')",
          "bounded_below": "array([ True])",
          "bounded_above": "array([ True])",
          "_shape": [
            1
          ],
          "low": "array([-1.], dtype=float32)",
          "high": "array([1.], dtype=float32)",
          "low_repr": "-1.0",
          "high_repr": "1.0",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "_observation_space": {
          "dtype": "dtype('float32')",
          "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
          "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
          "_shape": [
            11
          ],
          "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
          "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
          "low_repr": "-inf",
          "high_repr": "inf",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "_spec": {
          "max_episode_length": 1000,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_env_info": "None",
        "$type": "garage.envs.gym_env.GymEnv"
      },
      {
        "_env": {
          "env": {
            "env": {
              "env": {
                "env": {
                  "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                  "model": "<mujoco._structs.MjModel object at 0x7f904d557370>",
                  "data": "<mujoco._structs.MjData object at 0x7f904d5573b0>",
                  "init_qpos": "array([0., 0., 0.])",
                  "init_qvel": "array([0., 0., 0.])",
                  "_viewers": {},
                  "frame_skip": 5,
                  "viewer": "None",
                  "observation_space": {
                    "dtype": "dtype('float64')",
                    "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                    "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                    "_shape": [
                      11
                    ],
                    "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                    "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                    "low_repr": "-inf",
                    "high_repr": "inf",
                    "_np_random": "None",
                    "$type": "gym.spaces.box.Box"
                  },
                  "action_space": {
                    "dtype": "dtype('float32')",
                    "bounded_below": "array([ True])",
                    "bounded_above": "array([ True])",
                    "_shape": [
                      1
                    ],
                    "low": "array([-1.], dtype=float32)",
                    "high": "array([1.], dtype=float32)",
                    "low_repr": "-1.0",
                    "high_repr": "1.0",
                    "_np_random": "None",
                    "$type": "gym.spaces.box.Box"
                  },
                  "render_mode": "None",
                  "renderer": {
                    "no_returns_render": [
                      "human"
                    ],
                    "single_render": [
                      "single_state_pixels",
                      "single_rgb_array",
                      "single_depth_array"
                    ],
                    "mode": "None",
                    "render": {
                      "$type": "functools.partial"
                    },
                    "render_list": [],
                    "$type": "gym.utils.renderer.Renderer"
                  },
                  "_ezpickle_args": [],
                  "_ezpickle_kwargs": {},
                  "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "checked_reset": false,
                "checked_step": false,
                "checked_render": false,
                "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": true,
            "_has_reset": false,
            "_disable_render_order_enforcing": false,
            "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
          },
          "_action_space": "None",
          "_observation_space": "None",
          "_reward_range": "None",
          "_metadata": "None",
          "new_step_api": false,
          "_max_episode_steps": 1000,
          "_elapsed_steps": "None",
          "$type": "gym.wrappers.time_limit.TimeLimit"
        },
        "_max_episode_length": 1000,
        "_render_modes": [
          "human",
          "rgb_array",
          "depth_array",
          "single_rgb_array",
          "single_depth_array"
        ],
        "_step_cnt": "None",
        "_visualize": false,
        "_action_space": {
          "dtype": "dtype('float32')",
          "bounded_below": "array([ True])",
          "bounded_above": "array([ True])",
          "_shape": [
            1
          ],
          "low": "array([-1.], dtype=float32)",
          "high": "array([1.], dtype=float32)",
          "low_repr": "-1.0",
          "high_repr": "1.0",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "_observation_space": {
          "dtype": "dtype('float32')",
          "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
          "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
          "_shape": [
            11
          ],
          "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
          "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
          "low_repr": "-inf",
          "high_repr": "inf",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "_spec": {
          "max_episode_length": 1000,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_env_info": "None",
        "$type": "garage.envs.gym_env.GymEnv"
      },
      {
        "_env": {
          "env": {
            "env": {
              "env": {
                "env": {
                  "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                  "model": "<mujoco._structs.MjModel object at 0x7f904d5a1b30>",
                  "data": "<mujoco._structs.MjData object at 0x7f904d5a1eb0>",
                  "init_qpos": "array([0., 0., 0.])",
                  "init_qvel": "array([0., 0., 0.])",
                  "_viewers": {},
                  "frame_skip": 5,
                  "viewer": "None",
                  "observation_space": {
                    "dtype": "dtype('float64')",
                    "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                    "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                    "_shape": [
                      11
                    ],
                    "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                    "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                    "low_repr": "-inf",
                    "high_repr": "inf",
                    "_np_random": "None",
                    "$type": "gym.spaces.box.Box"
                  },
                  "action_space": {
                    "dtype": "dtype('float32')",
                    "bounded_below": "array([ True])",
                    "bounded_above": "array([ True])",
                    "_shape": [
                      1
                    ],
                    "low": "array([-1.], dtype=float32)",
                    "high": "array([1.], dtype=float32)",
                    "low_repr": "-1.0",
                    "high_repr": "1.0",
                    "_np_random": "None",
                    "$type": "gym.spaces.box.Box"
                  },
                  "render_mode": "None",
                  "renderer": {
                    "no_returns_render": [
                      "human"
                    ],
                    "single_render": [
                      "single_state_pixels",
                      "single_rgb_array",
                      "single_depth_array"
                    ],
                    "mode": "None",
                    "render": {
                      "$type": "functools.partial"
                    },
                    "render_list": [],
                    "$type": "gym.utils.renderer.Renderer"
                  },
                  "_ezpickle_args": [],
                  "_ezpickle_kwargs": {},
                  "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "checked_reset": false,
                "checked_step": false,
                "checked_render": false,
                "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": true,
            "_has_reset": false,
            "_disable_render_order_enforcing": false,
            "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
          },
          "_action_space": "None",
          "_observation_space": "None",
          "_reward_range": "None",
          "_metadata": "None",
          "new_step_api": false,
          "_max_episode_steps": 1000,
          "_elapsed_steps": "None",
          "$type": "gym.wrappers.time_limit.TimeLimit"
        },
        "_max_episode_length": 1000,
        "_render_modes": [
          "human",
          "rgb_array",
          "depth_array",
          "single_rgb_array",
          "single_depth_array"
        ],
        "_step_cnt": "None",
        "_visualize": false,
        "_action_space": {
          "dtype": "dtype('float32')",
          "bounded_below": "array([ True])",
          "bounded_above": "array([ True])",
          "_shape": [
            1
          ],
          "low": "array([-1.], dtype=float32)",
          "high": "array([1.], dtype=float32)",
          "low_repr": "-1.0",
          "high_repr": "1.0",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "_observation_space": {
          "dtype": "dtype('float32')",
          "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
          "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
          "_shape": [
            11
          ],
          "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
          "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
          "low_repr": "-inf",
          "high_repr": "inf",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "_spec": {
          "max_episode_length": 1000,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_env_info": "None",
        "$type": "garage.envs.gym_env.GymEnv"
      },
      {
        "_env": {
          "env": {
            "env": {
              "env": {
                "env": {
                  "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                  "model": "<mujoco._structs.MjModel object at 0x7f904d607330>",
                  "data": "<mujoco._structs.MjData object at 0x7f904d6074f0>",
                  "init_qpos": "array([0., 0., 0.])",
                  "init_qvel": "array([0., 0., 0.])",
                  "_viewers": {},
                  "frame_skip": 5,
                  "viewer": "None",
                  "observation_space": {
                    "dtype": "dtype('float64')",
                    "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                    "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                    "_shape": [
                      11
                    ],
                    "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                    "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                    "low_repr": "-inf",
                    "high_repr": "inf",
                    "_np_random": "None",
                    "$type": "gym.spaces.box.Box"
                  },
                  "action_space": {
                    "dtype": "dtype('float32')",
                    "bounded_below": "array([ True])",
                    "bounded_above": "array([ True])",
                    "_shape": [
                      1
                    ],
                    "low": "array([-1.], dtype=float32)",
                    "high": "array([1.], dtype=float32)",
                    "low_repr": "-1.0",
                    "high_repr": "1.0",
                    "_np_random": "None",
                    "$type": "gym.spaces.box.Box"
                  },
                  "render_mode": "None",
                  "renderer": {
                    "no_returns_render": [
                      "human"
                    ],
                    "single_render": [
                      "single_state_pixels",
                      "single_rgb_array",
                      "single_depth_array"
                    ],
                    "mode": "None",
                    "render": {
                      "$type": "functools.partial"
                    },
                    "render_list": [],
                    "$type": "gym.utils.renderer.Renderer"
                  },
                  "_ezpickle_args": [],
                  "_ezpickle_kwargs": {},
                  "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "checked_reset": false,
                "checked_step": false,
                "checked_render": false,
                "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": true,
            "_has_reset": false,
            "_disable_render_order_enforcing": false,
            "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
          },
          "_action_space": "None",
          "_observation_space": "None",
          "_reward_range": "None",
          "_metadata": "None",
          "new_step_api": false,
          "_max_episode_steps": 1000,
          "_elapsed_steps": "None",
          "$type": "gym.wrappers.time_limit.TimeLimit"
        },
        "_max_episode_length": 1000,
        "_render_modes": [
          "human",
          "rgb_array",
          "depth_array",
          "single_rgb_array",
          "single_depth_array"
        ],
        "_step_cnt": "None",
        "_visualize": false,
        "_action_space": {
          "dtype": "dtype('float32')",
          "bounded_below": "array([ True])",
          "bounded_above": "array([ True])",
          "_shape": [
            1
          ],
          "low": "array([-1.], dtype=float32)",
          "high": "array([1.], dtype=float32)",
          "low_repr": "-1.0",
          "high_repr": "1.0",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "_observation_space": {
          "dtype": "dtype('float32')",
          "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
          "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
          "_shape": [
            11
          ],
          "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
          "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
          "low_repr": "-inf",
          "high_repr": "inf",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "_spec": {
          "max_episode_length": 1000,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_env_info": "None",
        "$type": "garage.envs.gym_env.GymEnv"
      },
      {
        "_env": {
          "env": {
            "env": {
              "env": {
                "env": {
                  "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                  "model": "<mujoco._structs.MjModel object at 0x7f904d64e4b0>",
                  "data": "<mujoco._structs.MjData object at 0x7f904d64e470>",
                  "init_qpos": "array([0., 0., 0.])",
                  "init_qvel": "array([0., 0., 0.])",
                  "_viewers": {},
                  "frame_skip": 5,
                  "viewer": "None",
                  "observation_space": {
                    "dtype": "dtype('float64')",
                    "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                    "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                    "_shape": [
                      11
                    ],
                    "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                    "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                    "low_repr": "-inf",
                    "high_repr": "inf",
                    "_np_random": "None",
                    "$type": "gym.spaces.box.Box"
                  },
                  "action_space": {
                    "dtype": "dtype('float32')",
                    "bounded_below": "array([ True])",
                    "bounded_above": "array([ True])",
                    "_shape": [
                      1
                    ],
                    "low": "array([-1.], dtype=float32)",
                    "high": "array([1.], dtype=float32)",
                    "low_repr": "-1.0",
                    "high_repr": "1.0",
                    "_np_random": "None",
                    "$type": "gym.spaces.box.Box"
                  },
                  "render_mode": "None",
                  "renderer": {
                    "no_returns_render": [
                      "human"
                    ],
                    "single_render": [
                      "single_state_pixels",
                      "single_rgb_array",
                      "single_depth_array"
                    ],
                    "mode": "None",
                    "render": {
                      "$type": "functools.partial"
                    },
                    "render_list": [],
                    "$type": "gym.utils.renderer.Renderer"
                  },
                  "_ezpickle_args": [],
                  "_ezpickle_kwargs": {},
                  "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "checked_reset": false,
                "checked_step": false,
                "checked_render": false,
                "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": true,
            "_has_reset": false,
            "_disable_render_order_enforcing": false,
            "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
          },
          "_action_space": "None",
          "_observation_space": "None",
          "_reward_range": "None",
          "_metadata": "None",
          "new_step_api": false,
          "_max_episode_steps": 1000,
          "_elapsed_steps": "None",
          "$type": "gym.wrappers.time_limit.TimeLimit"
        },
        "_max_episode_length": 1000,
        "_render_modes": [
          "human",
          "rgb_array",
          "depth_array",
          "single_rgb_array",
          "single_depth_array"
        ],
        "_step_cnt": "None",
        "_visualize": false,
        "_action_space": {
          "dtype": "dtype('float32')",
          "bounded_below": "array([ True])",
          "bounded_above": "array([ True])",
          "_shape": [
            1
          ],
          "low": "array([-1.], dtype=float32)",
          "high": "array([1.], dtype=float32)",
          "low_repr": "-1.0",
          "high_repr": "1.0",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "_observation_space": {
          "dtype": "dtype('float32')",
          "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
          "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
          "_shape": [
            11
          ],
          "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
          "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
          "low_repr": "-inf",
          "high_repr": "inf",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "_spec": {
          "max_episode_length": 1000,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_env_info": "None",
        "$type": "garage.envs.gym_env.GymEnv"
      },
      {
        "_env": {
          "env": {
            "env": {
              "env": {
                "env": {
                  "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                  "model": "<mujoco._structs.MjModel object at 0x7f904d557ab0>",
                  "data": "<mujoco._structs.MjData object at 0x7f904d557c70>",
                  "init_qpos": "array([0., 0., 0.])",
                  "init_qvel": "array([0., 0., 0.])",
                  "_viewers": {},
                  "frame_skip": 5,
                  "viewer": "None",
                  "observation_space": {
                    "dtype": "dtype('float64')",
                    "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                    "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                    "_shape": [
                      11
                    ],
                    "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                    "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                    "low_repr": "-inf",
                    "high_repr": "inf",
                    "_np_random": "None",
                    "$type": "gym.spaces.box.Box"
                  },
                  "action_space": {
                    "dtype": "dtype('float32')",
                    "bounded_below": "array([ True])",
                    "bounded_above": "array([ True])",
                    "_shape": [
                      1
                    ],
                    "low": "array([-1.], dtype=float32)",
                    "high": "array([1.], dtype=float32)",
                    "low_repr": "-1.0",
                    "high_repr": "1.0",
                    "_np_random": "None",
                    "$type": "gym.spaces.box.Box"
                  },
                  "render_mode": "None",
                  "renderer": {
                    "no_returns_render": [
                      "human"
                    ],
                    "single_render": [
                      "single_state_pixels",
                      "single_rgb_array",
                      "single_depth_array"
                    ],
                    "mode": "None",
                    "render": {
                      "$type": "functools.partial"
                    },
                    "render_list": [],
                    "$type": "gym.utils.renderer.Renderer"
                  },
                  "_ezpickle_args": [],
                  "_ezpickle_kwargs": {},
                  "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "checked_reset": false,
                "checked_step": false,
                "checked_render": false,
                "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": true,
            "_has_reset": false,
            "_disable_render_order_enforcing": false,
            "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
          },
          "_action_space": "None",
          "_observation_space": "None",
          "_reward_range": "None",
          "_metadata": "None",
          "new_step_api": false,
          "_max_episode_steps": 1000,
          "_elapsed_steps": "None",
          "$type": "gym.wrappers.time_limit.TimeLimit"
        },
        "_max_episode_length": 1000,
        "_render_modes": [
          "human",
          "rgb_array",
          "depth_array",
          "single_rgb_array",
          "single_depth_array"
        ],
        "_step_cnt": "None",
        "_visualize": false,
        "_action_space": {
          "dtype": "dtype('float32')",
          "bounded_below": "array([ True])",
          "bounded_above": "array([ True])",
          "_shape": [
            1
          ],
          "low": "array([-1.], dtype=float32)",
          "high": "array([1.], dtype=float32)",
          "low_repr": "-1.0",
          "high_repr": "1.0",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "_observation_space": {
          "dtype": "dtype('float32')",
          "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
          "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
          "_shape": [
            11
          ],
          "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
          "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
          "low_repr": "-inf",
          "high_repr": "inf",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "_spec": {
          "max_episode_length": 1000,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_env_info": "None",
        "$type": "garage.envs.gym_env.GymEnv"
      },
      {
        "_env": {
          "env": {
            "env": {
              "env": {
                "env": {
                  "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                  "model": "<mujoco._structs.MjModel object at 0x7f904d6183b0>",
                  "data": "<mujoco._structs.MjData object at 0x7f904d6183f0>",
                  "init_qpos": "array([0., 0., 0.])",
                  "init_qvel": "array([0., 0., 0.])",
                  "_viewers": {},
                  "frame_skip": 5,
                  "viewer": "None",
                  "observation_space": {
                    "dtype": "dtype('float64')",
                    "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                    "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                    "_shape": [
                      11
                    ],
                    "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                    "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                    "low_repr": "-inf",
                    "high_repr": "inf",
                    "_np_random": "None",
                    "$type": "gym.spaces.box.Box"
                  },
                  "action_space": {
                    "dtype": "dtype('float32')",
                    "bounded_below": "array([ True])",
                    "bounded_above": "array([ True])",
                    "_shape": [
                      1
                    ],
                    "low": "array([-1.], dtype=float32)",
                    "high": "array([1.], dtype=float32)",
                    "low_repr": "-1.0",
                    "high_repr": "1.0",
                    "_np_random": "None",
                    "$type": "gym.spaces.box.Box"
                  },
                  "render_mode": "None",
                  "renderer": {
                    "no_returns_render": [
                      "human"
                    ],
                    "single_render": [
                      "single_state_pixels",
                      "single_rgb_array",
                      "single_depth_array"
                    ],
                    "mode": "None",
                    "render": {
                      "$type": "functools.partial"
                    },
                    "render_list": [],
                    "$type": "gym.utils.renderer.Renderer"
                  },
                  "_ezpickle_args": [],
                  "_ezpickle_kwargs": {},
                  "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": true,
                "checked_reset": false,
                "checked_step": false,
                "checked_render": false,
                "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": false,
              "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": true,
            "_has_reset": false,
            "_disable_render_order_enforcing": false,
            "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
          },
          "_action_space": "None",
          "_observation_space": "None",
          "_reward_range": "None",
          "_metadata": "None",
          "new_step_api": false,
          "_max_episode_steps": 1000,
          "_elapsed_steps": "None",
          "$type": "gym.wrappers.time_limit.TimeLimit"
        },
        "_max_episode_length": 1000,
        "_render_modes": [
          "human",
          "rgb_array",
          "depth_array",
          "single_rgb_array",
          "single_depth_array"
        ],
        "_step_cnt": "None",
        "_visualize": false,
        "_action_space": {
          "dtype": "dtype('float32')",
          "bounded_below": "array([ True])",
          "bounded_above": "array([ True])",
          "_shape": [
            1
          ],
          "low": "array([-1.], dtype=float32)",
          "high": "array([1.], dtype=float32)",
          "low_repr": "-1.0",
          "high_repr": "1.0",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "_observation_space": {
          "dtype": "dtype('float32')",
          "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
          "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
          "_shape": [
            11
          ],
          "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
          "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
          "low_repr": "-inf",
          "high_repr": "inf",
          "_np_random": "None",
          "$type": "akro.box.Box"
        },
        "_spec": {
          "max_episode_length": 1000,
          "input_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_env_info": "None",
        "$type": "garage.envs.gym_env.GymEnv"
      }
    ],
    "_workers": [
      {
        "_seed": "None",
        "_max_episode_length": 200,
        "_worker_number": 0,
        "agent": {
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "training": true,
          "_parameters": {
            "_init_std": {
              "$type": "torch.nn.parameter.Parameter"
            }
          },
          "_buffers": {
            "min_std_param": {
              "$type": "torch.Tensor"
            }
          },
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_mean_module": {
              "training": true,
              "_parameters": {},
              "_buffers": {},
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_layers": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "0": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 11.0,
                          "out_features": 32,
                          "$type": "torch.nn.modules.linear.Linear"
                        },
                        "non_linearity": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                          "$type": "garage.torch._functions.NonLinearity"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    },
                    "1": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 32,
                          "out_features": 32,
                          "$type": "torch.nn.modules.linear.Linear"
                        },
                        "non_linearity": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                          "$type": "garage.torch._functions.NonLinearity"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    }
                  },
                  "$type": "torch.nn.modules.container.ModuleList"
                },
                "_output_layers": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "0": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 32,
                          "out_features": 1.0,
                          "$type": "torch.nn.modules.linear.Linear"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    }
                  },
                  "$type": "torch.nn.modules.container.ModuleList"
                }
              },
              "_output_dim": 1.0,
              "$type": "garage.torch.modules.mlp_module.MLPModule"
            }
          },
          "_input_dim": 11.0,
          "_hidden_sizes": [
            32,
            32
          ],
          "_learn_std": true,
          "_std_hidden_sizes": [
            32,
            32
          ],
          "_min_std": 1e-06,
          "_max_std": "None",
          "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
          "_std_hidden_w_init": {
            "$type": "builtins.function"
          },
          "_std_hidden_b_init": {
            "$type": "builtins.function"
          },
          "_std_output_nonlinearity": "None",
          "_std_output_w_init": {
            "$type": "builtins.function"
          },
          "_std_parameterization": "exp",
          "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
          "_hidden_w_init": {
            "$type": "builtins.function"
          },
          "_hidden_b_init": {
            "$type": "builtins.function"
          },
          "_output_nonlinearity": "None",
          "_output_w_init": {
            "$type": "builtins.function"
          },
          "_output_b_init": {
            "$type": "builtins.function"
          },
          "_layer_normalization": false,
          "_norm_dist_class": {
            "$typename": "torch.distributions.normal.Normal"
          },
          "_min_std_param": {
            "$type": "torch.Tensor"
          },
          "_max_std_param": "None",
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "$type": "Policy.GaussianMLPPolicy.GaussianMLPPolicy"
        },
        "env": {
          "_env": {
            "env": {
              "env": {
                "env": {
                  "env": {
                    "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                    "model": "<mujoco._structs.MjModel object at 0x7f904e734470>",
                    "data": "<mujoco._structs.MjData object at 0x7f904e148670>",
                    "init_qpos": "array([0., 0., 0.])",
                    "init_qvel": "array([0., 0., 0.])",
                    "_viewers": {},
                    "frame_skip": 5,
                    "viewer": "None",
                    "observation_space": {
                      "dtype": "dtype('float64')",
                      "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "_shape": [
                        11
                      ],
                      "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                      "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                      "low_repr": "-inf",
                      "high_repr": "inf",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "action_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True])",
                      "bounded_above": "array([ True])",
                      "_shape": [
                        1
                      ],
                      "low": "array([-1.], dtype=float32)",
                      "high": "array([1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "render_mode": "None",
                    "renderer": {
                      "no_returns_render": [
                        "human"
                      ],
                      "single_render": [
                        "single_state_pixels",
                        "single_rgb_array",
                        "single_depth_array"
                      ],
                      "mode": "None",
                      "render": {
                        "$type": "functools.partial"
                      },
                      "render_list": [],
                      "$type": "gym.utils.renderer.Renderer"
                    },
                    "_ezpickle_args": [],
                    "_ezpickle_kwargs": {},
                    "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "checked_reset": false,
                  "checked_step": false,
                  "checked_render": false,
                  "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": true,
              "_has_reset": false,
              "_disable_render_order_enforcing": false,
              "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": false,
            "_max_episode_steps": 1000,
            "_elapsed_steps": "None",
            "$type": "gym.wrappers.time_limit.TimeLimit"
          },
          "_max_episode_length": 1000,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array",
            "single_rgb_array",
            "single_depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        "_env_steps": [],
        "_observations": [],
        "_last_observations": [],
        "_agent_infos": {},
        "_lengths": [],
        "_prev_obs": "None",
        "_eps_length": 0,
        "_episode_infos": {},
        "$type": "garage.sampler.default_worker.DefaultWorker"
      },
      {
        "_seed": "None",
        "_max_episode_length": 200,
        "_worker_number": 1,
        "agent": {
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "training": true,
          "_parameters": {
            "_init_std": {
              "$type": "torch.nn.parameter.Parameter"
            }
          },
          "_buffers": {
            "min_std_param": {
              "$type": "torch.Tensor"
            }
          },
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_mean_module": {
              "training": true,
              "_parameters": {},
              "_buffers": {},
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_layers": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "0": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 11.0,
                          "out_features": 32,
                          "$type": "torch.nn.modules.linear.Linear"
                        },
                        "non_linearity": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                          "$type": "garage.torch._functions.NonLinearity"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    },
                    "1": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 32,
                          "out_features": 32,
                          "$type": "torch.nn.modules.linear.Linear"
                        },
                        "non_linearity": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                          "$type": "garage.torch._functions.NonLinearity"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    }
                  },
                  "$type": "torch.nn.modules.container.ModuleList"
                },
                "_output_layers": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "0": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 32,
                          "out_features": 1.0,
                          "$type": "torch.nn.modules.linear.Linear"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    }
                  },
                  "$type": "torch.nn.modules.container.ModuleList"
                }
              },
              "_output_dim": 1.0,
              "$type": "garage.torch.modules.mlp_module.MLPModule"
            }
          },
          "_input_dim": 11.0,
          "_hidden_sizes": [
            32,
            32
          ],
          "_learn_std": true,
          "_std_hidden_sizes": [
            32,
            32
          ],
          "_min_std": 1e-06,
          "_max_std": "None",
          "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
          "_std_hidden_w_init": {
            "$type": "builtins.function"
          },
          "_std_hidden_b_init": {
            "$type": "builtins.function"
          },
          "_std_output_nonlinearity": "None",
          "_std_output_w_init": {
            "$type": "builtins.function"
          },
          "_std_parameterization": "exp",
          "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
          "_hidden_w_init": {
            "$type": "builtins.function"
          },
          "_hidden_b_init": {
            "$type": "builtins.function"
          },
          "_output_nonlinearity": "None",
          "_output_w_init": {
            "$type": "builtins.function"
          },
          "_output_b_init": {
            "$type": "builtins.function"
          },
          "_layer_normalization": false,
          "_norm_dist_class": {
            "$typename": "torch.distributions.normal.Normal"
          },
          "_min_std_param": {
            "$type": "torch.Tensor"
          },
          "_max_std_param": "None",
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "$type": "Policy.GaussianMLPPolicy.GaussianMLPPolicy"
        },
        "env": {
          "_env": {
            "env": {
              "env": {
                "env": {
                  "env": {
                    "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                    "model": "<mujoco._structs.MjModel object at 0x7f904e72eb30>",
                    "data": "<mujoco._structs.MjData object at 0x7f904e17fd70>",
                    "init_qpos": "array([0., 0., 0.])",
                    "init_qvel": "array([0., 0., 0.])",
                    "_viewers": {},
                    "frame_skip": 5,
                    "viewer": "None",
                    "observation_space": {
                      "dtype": "dtype('float64')",
                      "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "_shape": [
                        11
                      ],
                      "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                      "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                      "low_repr": "-inf",
                      "high_repr": "inf",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "action_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True])",
                      "bounded_above": "array([ True])",
                      "_shape": [
                        1
                      ],
                      "low": "array([-1.], dtype=float32)",
                      "high": "array([1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "render_mode": "None",
                    "renderer": {
                      "no_returns_render": [
                        "human"
                      ],
                      "single_render": [
                        "single_state_pixels",
                        "single_rgb_array",
                        "single_depth_array"
                      ],
                      "mode": "None",
                      "render": {
                        "$type": "functools.partial"
                      },
                      "render_list": [],
                      "$type": "gym.utils.renderer.Renderer"
                    },
                    "_ezpickle_args": [],
                    "_ezpickle_kwargs": {},
                    "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "checked_reset": false,
                  "checked_step": false,
                  "checked_render": false,
                  "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": true,
              "_has_reset": false,
              "_disable_render_order_enforcing": false,
              "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": false,
            "_max_episode_steps": 1000,
            "_elapsed_steps": "None",
            "$type": "gym.wrappers.time_limit.TimeLimit"
          },
          "_max_episode_length": 1000,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array",
            "single_rgb_array",
            "single_depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        "_env_steps": [],
        "_observations": [],
        "_last_observations": [],
        "_agent_infos": {},
        "_lengths": [],
        "_prev_obs": "None",
        "_eps_length": 0,
        "_episode_infos": {},
        "$type": "garage.sampler.default_worker.DefaultWorker"
      },
      {
        "_seed": "None",
        "_max_episode_length": 200,
        "_worker_number": 2,
        "agent": {
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "training": true,
          "_parameters": {
            "_init_std": {
              "$type": "torch.nn.parameter.Parameter"
            }
          },
          "_buffers": {
            "min_std_param": {
              "$type": "torch.Tensor"
            }
          },
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_mean_module": {
              "training": true,
              "_parameters": {},
              "_buffers": {},
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_layers": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "0": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 11.0,
                          "out_features": 32,
                          "$type": "torch.nn.modules.linear.Linear"
                        },
                        "non_linearity": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                          "$type": "garage.torch._functions.NonLinearity"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    },
                    "1": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 32,
                          "out_features": 32,
                          "$type": "torch.nn.modules.linear.Linear"
                        },
                        "non_linearity": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                          "$type": "garage.torch._functions.NonLinearity"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    }
                  },
                  "$type": "torch.nn.modules.container.ModuleList"
                },
                "_output_layers": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "0": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 32,
                          "out_features": 1.0,
                          "$type": "torch.nn.modules.linear.Linear"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    }
                  },
                  "$type": "torch.nn.modules.container.ModuleList"
                }
              },
              "_output_dim": 1.0,
              "$type": "garage.torch.modules.mlp_module.MLPModule"
            }
          },
          "_input_dim": 11.0,
          "_hidden_sizes": [
            32,
            32
          ],
          "_learn_std": true,
          "_std_hidden_sizes": [
            32,
            32
          ],
          "_min_std": 1e-06,
          "_max_std": "None",
          "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
          "_std_hidden_w_init": {
            "$type": "builtins.function"
          },
          "_std_hidden_b_init": {
            "$type": "builtins.function"
          },
          "_std_output_nonlinearity": "None",
          "_std_output_w_init": {
            "$type": "builtins.function"
          },
          "_std_parameterization": "exp",
          "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
          "_hidden_w_init": {
            "$type": "builtins.function"
          },
          "_hidden_b_init": {
            "$type": "builtins.function"
          },
          "_output_nonlinearity": "None",
          "_output_w_init": {
            "$type": "builtins.function"
          },
          "_output_b_init": {
            "$type": "builtins.function"
          },
          "_layer_normalization": false,
          "_norm_dist_class": {
            "$typename": "torch.distributions.normal.Normal"
          },
          "_min_std_param": {
            "$type": "torch.Tensor"
          },
          "_max_std_param": "None",
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "$type": "Policy.GaussianMLPPolicy.GaussianMLPPolicy"
        },
        "env": {
          "_env": {
            "env": {
              "env": {
                "env": {
                  "env": {
                    "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                    "model": "<mujoco._structs.MjModel object at 0x7f904e730e70>",
                    "data": "<mujoco._structs.MjData object at 0x7f904e730330>",
                    "init_qpos": "array([0., 0., 0.])",
                    "init_qvel": "array([0., 0., 0.])",
                    "_viewers": {},
                    "frame_skip": 5,
                    "viewer": "None",
                    "observation_space": {
                      "dtype": "dtype('float64')",
                      "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "_shape": [
                        11
                      ],
                      "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                      "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                      "low_repr": "-inf",
                      "high_repr": "inf",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "action_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True])",
                      "bounded_above": "array([ True])",
                      "_shape": [
                        1
                      ],
                      "low": "array([-1.], dtype=float32)",
                      "high": "array([1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "render_mode": "None",
                    "renderer": {
                      "no_returns_render": [
                        "human"
                      ],
                      "single_render": [
                        "single_state_pixels",
                        "single_rgb_array",
                        "single_depth_array"
                      ],
                      "mode": "None",
                      "render": {
                        "$type": "functools.partial"
                      },
                      "render_list": [],
                      "$type": "gym.utils.renderer.Renderer"
                    },
                    "_ezpickle_args": [],
                    "_ezpickle_kwargs": {},
                    "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "checked_reset": false,
                  "checked_step": false,
                  "checked_render": false,
                  "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": true,
              "_has_reset": false,
              "_disable_render_order_enforcing": false,
              "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": false,
            "_max_episode_steps": 1000,
            "_elapsed_steps": "None",
            "$type": "gym.wrappers.time_limit.TimeLimit"
          },
          "_max_episode_length": 1000,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array",
            "single_rgb_array",
            "single_depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        "_env_steps": [],
        "_observations": [],
        "_last_observations": [],
        "_agent_infos": {},
        "_lengths": [],
        "_prev_obs": "None",
        "_eps_length": 0,
        "_episode_infos": {},
        "$type": "garage.sampler.default_worker.DefaultWorker"
      },
      {
        "_seed": "None",
        "_max_episode_length": 200,
        "_worker_number": 3,
        "agent": {
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "training": true,
          "_parameters": {
            "_init_std": {
              "$type": "torch.nn.parameter.Parameter"
            }
          },
          "_buffers": {
            "min_std_param": {
              "$type": "torch.Tensor"
            }
          },
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_mean_module": {
              "training": true,
              "_parameters": {},
              "_buffers": {},
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_layers": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "0": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 11.0,
                          "out_features": 32,
                          "$type": "torch.nn.modules.linear.Linear"
                        },
                        "non_linearity": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                          "$type": "garage.torch._functions.NonLinearity"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    },
                    "1": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 32,
                          "out_features": 32,
                          "$type": "torch.nn.modules.linear.Linear"
                        },
                        "non_linearity": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                          "$type": "garage.torch._functions.NonLinearity"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    }
                  },
                  "$type": "torch.nn.modules.container.ModuleList"
                },
                "_output_layers": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "0": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 32,
                          "out_features": 1.0,
                          "$type": "torch.nn.modules.linear.Linear"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    }
                  },
                  "$type": "torch.nn.modules.container.ModuleList"
                }
              },
              "_output_dim": 1.0,
              "$type": "garage.torch.modules.mlp_module.MLPModule"
            }
          },
          "_input_dim": 11.0,
          "_hidden_sizes": [
            32,
            32
          ],
          "_learn_std": true,
          "_std_hidden_sizes": [
            32,
            32
          ],
          "_min_std": 1e-06,
          "_max_std": "None",
          "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
          "_std_hidden_w_init": {
            "$type": "builtins.function"
          },
          "_std_hidden_b_init": {
            "$type": "builtins.function"
          },
          "_std_output_nonlinearity": "None",
          "_std_output_w_init": {
            "$type": "builtins.function"
          },
          "_std_parameterization": "exp",
          "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
          "_hidden_w_init": {
            "$type": "builtins.function"
          },
          "_hidden_b_init": {
            "$type": "builtins.function"
          },
          "_output_nonlinearity": "None",
          "_output_w_init": {
            "$type": "builtins.function"
          },
          "_output_b_init": {
            "$type": "builtins.function"
          },
          "_layer_normalization": false,
          "_norm_dist_class": {
            "$typename": "torch.distributions.normal.Normal"
          },
          "_min_std_param": {
            "$type": "torch.Tensor"
          },
          "_max_std_param": "None",
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "$type": "Policy.GaussianMLPPolicy.GaussianMLPPolicy"
        },
        "env": {
          "_env": {
            "env": {
              "env": {
                "env": {
                  "env": {
                    "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                    "model": "<mujoco._structs.MjModel object at 0x7f904d8e9cb0>",
                    "data": "<mujoco._structs.MjData object at 0x7f904d8e9cf0>",
                    "init_qpos": "array([0., 0., 0.])",
                    "init_qvel": "array([0., 0., 0.])",
                    "_viewers": {},
                    "frame_skip": 5,
                    "viewer": "None",
                    "observation_space": {
                      "dtype": "dtype('float64')",
                      "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "_shape": [
                        11
                      ],
                      "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                      "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                      "low_repr": "-inf",
                      "high_repr": "inf",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "action_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True])",
                      "bounded_above": "array([ True])",
                      "_shape": [
                        1
                      ],
                      "low": "array([-1.], dtype=float32)",
                      "high": "array([1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "render_mode": "None",
                    "renderer": {
                      "no_returns_render": [
                        "human"
                      ],
                      "single_render": [
                        "single_state_pixels",
                        "single_rgb_array",
                        "single_depth_array"
                      ],
                      "mode": "None",
                      "render": {
                        "$type": "functools.partial"
                      },
                      "render_list": [],
                      "$type": "gym.utils.renderer.Renderer"
                    },
                    "_ezpickle_args": [],
                    "_ezpickle_kwargs": {},
                    "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "checked_reset": false,
                  "checked_step": false,
                  "checked_render": false,
                  "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": true,
              "_has_reset": false,
              "_disable_render_order_enforcing": false,
              "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": false,
            "_max_episode_steps": 1000,
            "_elapsed_steps": "None",
            "$type": "gym.wrappers.time_limit.TimeLimit"
          },
          "_max_episode_length": 1000,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array",
            "single_rgb_array",
            "single_depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        "_env_steps": [],
        "_observations": [],
        "_last_observations": [],
        "_agent_infos": {},
        "_lengths": [],
        "_prev_obs": "None",
        "_eps_length": 0,
        "_episode_infos": {},
        "$type": "garage.sampler.default_worker.DefaultWorker"
      },
      {
        "_seed": "None",
        "_max_episode_length": 200,
        "_worker_number": 4,
        "agent": {
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "training": true,
          "_parameters": {
            "_init_std": {
              "$type": "torch.nn.parameter.Parameter"
            }
          },
          "_buffers": {
            "min_std_param": {
              "$type": "torch.Tensor"
            }
          },
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_mean_module": {
              "training": true,
              "_parameters": {},
              "_buffers": {},
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_layers": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "0": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 11.0,
                          "out_features": 32,
                          "$type": "torch.nn.modules.linear.Linear"
                        },
                        "non_linearity": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                          "$type": "garage.torch._functions.NonLinearity"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    },
                    "1": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 32,
                          "out_features": 32,
                          "$type": "torch.nn.modules.linear.Linear"
                        },
                        "non_linearity": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                          "$type": "garage.torch._functions.NonLinearity"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    }
                  },
                  "$type": "torch.nn.modules.container.ModuleList"
                },
                "_output_layers": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "0": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 32,
                          "out_features": 1.0,
                          "$type": "torch.nn.modules.linear.Linear"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    }
                  },
                  "$type": "torch.nn.modules.container.ModuleList"
                }
              },
              "_output_dim": 1.0,
              "$type": "garage.torch.modules.mlp_module.MLPModule"
            }
          },
          "_input_dim": 11.0,
          "_hidden_sizes": [
            32,
            32
          ],
          "_learn_std": true,
          "_std_hidden_sizes": [
            32,
            32
          ],
          "_min_std": 1e-06,
          "_max_std": "None",
          "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
          "_std_hidden_w_init": {
            "$type": "builtins.function"
          },
          "_std_hidden_b_init": {
            "$type": "builtins.function"
          },
          "_std_output_nonlinearity": "None",
          "_std_output_w_init": {
            "$type": "builtins.function"
          },
          "_std_parameterization": "exp",
          "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
          "_hidden_w_init": {
            "$type": "builtins.function"
          },
          "_hidden_b_init": {
            "$type": "builtins.function"
          },
          "_output_nonlinearity": "None",
          "_output_w_init": {
            "$type": "builtins.function"
          },
          "_output_b_init": {
            "$type": "builtins.function"
          },
          "_layer_normalization": false,
          "_norm_dist_class": {
            "$typename": "torch.distributions.normal.Normal"
          },
          "_min_std_param": {
            "$type": "torch.Tensor"
          },
          "_max_std_param": "None",
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "$type": "Policy.GaussianMLPPolicy.GaussianMLPPolicy"
        },
        "env": {
          "_env": {
            "env": {
              "env": {
                "env": {
                  "env": {
                    "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                    "model": "<mujoco._structs.MjModel object at 0x7f904d7cc730>",
                    "data": "<mujoco._structs.MjData object at 0x7f904d7cc770>",
                    "init_qpos": "array([0., 0., 0.])",
                    "init_qvel": "array([0., 0., 0.])",
                    "_viewers": {},
                    "frame_skip": 5,
                    "viewer": "None",
                    "observation_space": {
                      "dtype": "dtype('float64')",
                      "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "_shape": [
                        11
                      ],
                      "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                      "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                      "low_repr": "-inf",
                      "high_repr": "inf",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "action_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True])",
                      "bounded_above": "array([ True])",
                      "_shape": [
                        1
                      ],
                      "low": "array([-1.], dtype=float32)",
                      "high": "array([1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "render_mode": "None",
                    "renderer": {
                      "no_returns_render": [
                        "human"
                      ],
                      "single_render": [
                        "single_state_pixels",
                        "single_rgb_array",
                        "single_depth_array"
                      ],
                      "mode": "None",
                      "render": {
                        "$type": "functools.partial"
                      },
                      "render_list": [],
                      "$type": "gym.utils.renderer.Renderer"
                    },
                    "_ezpickle_args": [],
                    "_ezpickle_kwargs": {},
                    "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "checked_reset": false,
                  "checked_step": false,
                  "checked_render": false,
                  "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": true,
              "_has_reset": false,
              "_disable_render_order_enforcing": false,
              "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": false,
            "_max_episode_steps": 1000,
            "_elapsed_steps": "None",
            "$type": "gym.wrappers.time_limit.TimeLimit"
          },
          "_max_episode_length": 1000,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array",
            "single_rgb_array",
            "single_depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        "_env_steps": [],
        "_observations": [],
        "_last_observations": [],
        "_agent_infos": {},
        "_lengths": [],
        "_prev_obs": "None",
        "_eps_length": 0,
        "_episode_infos": {},
        "$type": "garage.sampler.default_worker.DefaultWorker"
      },
      {
        "_seed": "None",
        "_max_episode_length": 200,
        "_worker_number": 5,
        "agent": {
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "training": true,
          "_parameters": {
            "_init_std": {
              "$type": "torch.nn.parameter.Parameter"
            }
          },
          "_buffers": {
            "min_std_param": {
              "$type": "torch.Tensor"
            }
          },
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_mean_module": {
              "training": true,
              "_parameters": {},
              "_buffers": {},
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_layers": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "0": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 11.0,
                          "out_features": 32,
                          "$type": "torch.nn.modules.linear.Linear"
                        },
                        "non_linearity": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                          "$type": "garage.torch._functions.NonLinearity"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    },
                    "1": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 32,
                          "out_features": 32,
                          "$type": "torch.nn.modules.linear.Linear"
                        },
                        "non_linearity": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                          "$type": "garage.torch._functions.NonLinearity"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    }
                  },
                  "$type": "torch.nn.modules.container.ModuleList"
                },
                "_output_layers": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "0": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 32,
                          "out_features": 1.0,
                          "$type": "torch.nn.modules.linear.Linear"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    }
                  },
                  "$type": "torch.nn.modules.container.ModuleList"
                }
              },
              "_output_dim": 1.0,
              "$type": "garage.torch.modules.mlp_module.MLPModule"
            }
          },
          "_input_dim": 11.0,
          "_hidden_sizes": [
            32,
            32
          ],
          "_learn_std": true,
          "_std_hidden_sizes": [
            32,
            32
          ],
          "_min_std": 1e-06,
          "_max_std": "None",
          "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
          "_std_hidden_w_init": {
            "$type": "builtins.function"
          },
          "_std_hidden_b_init": {
            "$type": "builtins.function"
          },
          "_std_output_nonlinearity": "None",
          "_std_output_w_init": {
            "$type": "builtins.function"
          },
          "_std_parameterization": "exp",
          "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
          "_hidden_w_init": {
            "$type": "builtins.function"
          },
          "_hidden_b_init": {
            "$type": "builtins.function"
          },
          "_output_nonlinearity": "None",
          "_output_w_init": {
            "$type": "builtins.function"
          },
          "_output_b_init": {
            "$type": "builtins.function"
          },
          "_layer_normalization": false,
          "_norm_dist_class": {
            "$typename": "torch.distributions.normal.Normal"
          },
          "_min_std_param": {
            "$type": "torch.Tensor"
          },
          "_max_std_param": "None",
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "$type": "Policy.GaussianMLPPolicy.GaussianMLPPolicy"
        },
        "env": {
          "_env": {
            "env": {
              "env": {
                "env": {
                  "env": {
                    "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                    "model": "<mujoco._structs.MjModel object at 0x7f904d7981f0>",
                    "data": "<mujoco._structs.MjData object at 0x7f904d798230>",
                    "init_qpos": "array([0., 0., 0.])",
                    "init_qvel": "array([0., 0., 0.])",
                    "_viewers": {},
                    "frame_skip": 5,
                    "viewer": "None",
                    "observation_space": {
                      "dtype": "dtype('float64')",
                      "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "_shape": [
                        11
                      ],
                      "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                      "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                      "low_repr": "-inf",
                      "high_repr": "inf",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "action_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True])",
                      "bounded_above": "array([ True])",
                      "_shape": [
                        1
                      ],
                      "low": "array([-1.], dtype=float32)",
                      "high": "array([1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "render_mode": "None",
                    "renderer": {
                      "no_returns_render": [
                        "human"
                      ],
                      "single_render": [
                        "single_state_pixels",
                        "single_rgb_array",
                        "single_depth_array"
                      ],
                      "mode": "None",
                      "render": {
                        "$type": "functools.partial"
                      },
                      "render_list": [],
                      "$type": "gym.utils.renderer.Renderer"
                    },
                    "_ezpickle_args": [],
                    "_ezpickle_kwargs": {},
                    "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "checked_reset": false,
                  "checked_step": false,
                  "checked_render": false,
                  "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": true,
              "_has_reset": false,
              "_disable_render_order_enforcing": false,
              "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": false,
            "_max_episode_steps": 1000,
            "_elapsed_steps": "None",
            "$type": "gym.wrappers.time_limit.TimeLimit"
          },
          "_max_episode_length": 1000,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array",
            "single_rgb_array",
            "single_depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        "_env_steps": [],
        "_observations": [],
        "_last_observations": [],
        "_agent_infos": {},
        "_lengths": [],
        "_prev_obs": "None",
        "_eps_length": 0,
        "_episode_infos": {},
        "$type": "garage.sampler.default_worker.DefaultWorker"
      },
      {
        "_seed": "None",
        "_max_episode_length": 200,
        "_worker_number": 6,
        "agent": {
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "training": true,
          "_parameters": {
            "_init_std": {
              "$type": "torch.nn.parameter.Parameter"
            }
          },
          "_buffers": {
            "min_std_param": {
              "$type": "torch.Tensor"
            }
          },
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_mean_module": {
              "training": true,
              "_parameters": {},
              "_buffers": {},
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_layers": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "0": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 11.0,
                          "out_features": 32,
                          "$type": "torch.nn.modules.linear.Linear"
                        },
                        "non_linearity": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                          "$type": "garage.torch._functions.NonLinearity"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    },
                    "1": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 32,
                          "out_features": 32,
                          "$type": "torch.nn.modules.linear.Linear"
                        },
                        "non_linearity": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                          "$type": "garage.torch._functions.NonLinearity"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    }
                  },
                  "$type": "torch.nn.modules.container.ModuleList"
                },
                "_output_layers": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "0": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 32,
                          "out_features": 1.0,
                          "$type": "torch.nn.modules.linear.Linear"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    }
                  },
                  "$type": "torch.nn.modules.container.ModuleList"
                }
              },
              "_output_dim": 1.0,
              "$type": "garage.torch.modules.mlp_module.MLPModule"
            }
          },
          "_input_dim": 11.0,
          "_hidden_sizes": [
            32,
            32
          ],
          "_learn_std": true,
          "_std_hidden_sizes": [
            32,
            32
          ],
          "_min_std": 1e-06,
          "_max_std": "None",
          "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
          "_std_hidden_w_init": {
            "$type": "builtins.function"
          },
          "_std_hidden_b_init": {
            "$type": "builtins.function"
          },
          "_std_output_nonlinearity": "None",
          "_std_output_w_init": {
            "$type": "builtins.function"
          },
          "_std_parameterization": "exp",
          "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
          "_hidden_w_init": {
            "$type": "builtins.function"
          },
          "_hidden_b_init": {
            "$type": "builtins.function"
          },
          "_output_nonlinearity": "None",
          "_output_w_init": {
            "$type": "builtins.function"
          },
          "_output_b_init": {
            "$type": "builtins.function"
          },
          "_layer_normalization": false,
          "_norm_dist_class": {
            "$typename": "torch.distributions.normal.Normal"
          },
          "_min_std_param": {
            "$type": "torch.Tensor"
          },
          "_max_std_param": "None",
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "$type": "Policy.GaussianMLPPolicy.GaussianMLPPolicy"
        },
        "env": {
          "_env": {
            "env": {
              "env": {
                "env": {
                  "env": {
                    "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                    "model": "<mujoco._structs.MjModel object at 0x7f904d798c70>",
                    "data": "<mujoco._structs.MjData object at 0x7f904d798cb0>",
                    "init_qpos": "array([0., 0., 0.])",
                    "init_qvel": "array([0., 0., 0.])",
                    "_viewers": {},
                    "frame_skip": 5,
                    "viewer": "None",
                    "observation_space": {
                      "dtype": "dtype('float64')",
                      "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "_shape": [
                        11
                      ],
                      "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                      "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                      "low_repr": "-inf",
                      "high_repr": "inf",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "action_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True])",
                      "bounded_above": "array([ True])",
                      "_shape": [
                        1
                      ],
                      "low": "array([-1.], dtype=float32)",
                      "high": "array([1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "render_mode": "None",
                    "renderer": {
                      "no_returns_render": [
                        "human"
                      ],
                      "single_render": [
                        "single_state_pixels",
                        "single_rgb_array",
                        "single_depth_array"
                      ],
                      "mode": "None",
                      "render": {
                        "$type": "functools.partial"
                      },
                      "render_list": [],
                      "$type": "gym.utils.renderer.Renderer"
                    },
                    "_ezpickle_args": [],
                    "_ezpickle_kwargs": {},
                    "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "checked_reset": false,
                  "checked_step": false,
                  "checked_render": false,
                  "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": true,
              "_has_reset": false,
              "_disable_render_order_enforcing": false,
              "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": false,
            "_max_episode_steps": 1000,
            "_elapsed_steps": "None",
            "$type": "gym.wrappers.time_limit.TimeLimit"
          },
          "_max_episode_length": 1000,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array",
            "single_rgb_array",
            "single_depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        "_env_steps": [],
        "_observations": [],
        "_last_observations": [],
        "_agent_infos": {},
        "_lengths": [],
        "_prev_obs": "None",
        "_eps_length": 0,
        "_episode_infos": {},
        "$type": "garage.sampler.default_worker.DefaultWorker"
      },
      {
        "_seed": "None",
        "_max_episode_length": 200,
        "_worker_number": 7,
        "agent": {
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "training": true,
          "_parameters": {
            "_init_std": {
              "$type": "torch.nn.parameter.Parameter"
            }
          },
          "_buffers": {
            "min_std_param": {
              "$type": "torch.Tensor"
            }
          },
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_mean_module": {
              "training": true,
              "_parameters": {},
              "_buffers": {},
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_layers": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "0": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 11.0,
                          "out_features": 32,
                          "$type": "torch.nn.modules.linear.Linear"
                        },
                        "non_linearity": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                          "$type": "garage.torch._functions.NonLinearity"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    },
                    "1": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 32,
                          "out_features": 32,
                          "$type": "torch.nn.modules.linear.Linear"
                        },
                        "non_linearity": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                          "$type": "garage.torch._functions.NonLinearity"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    }
                  },
                  "$type": "torch.nn.modules.container.ModuleList"
                },
                "_output_layers": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "0": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 32,
                          "out_features": 1.0,
                          "$type": "torch.nn.modules.linear.Linear"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    }
                  },
                  "$type": "torch.nn.modules.container.ModuleList"
                }
              },
              "_output_dim": 1.0,
              "$type": "garage.torch.modules.mlp_module.MLPModule"
            }
          },
          "_input_dim": 11.0,
          "_hidden_sizes": [
            32,
            32
          ],
          "_learn_std": true,
          "_std_hidden_sizes": [
            32,
            32
          ],
          "_min_std": 1e-06,
          "_max_std": "None",
          "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
          "_std_hidden_w_init": {
            "$type": "builtins.function"
          },
          "_std_hidden_b_init": {
            "$type": "builtins.function"
          },
          "_std_output_nonlinearity": "None",
          "_std_output_w_init": {
            "$type": "builtins.function"
          },
          "_std_parameterization": "exp",
          "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
          "_hidden_w_init": {
            "$type": "builtins.function"
          },
          "_hidden_b_init": {
            "$type": "builtins.function"
          },
          "_output_nonlinearity": "None",
          "_output_w_init": {
            "$type": "builtins.function"
          },
          "_output_b_init": {
            "$type": "builtins.function"
          },
          "_layer_normalization": false,
          "_norm_dist_class": {
            "$typename": "torch.distributions.normal.Normal"
          },
          "_min_std_param": {
            "$type": "torch.Tensor"
          },
          "_max_std_param": "None",
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "$type": "Policy.GaussianMLPPolicy.GaussianMLPPolicy"
        },
        "env": {
          "_env": {
            "env": {
              "env": {
                "env": {
                  "env": {
                    "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                    "model": "<mujoco._structs.MjModel object at 0x7f904d7676f0>",
                    "data": "<mujoco._structs.MjData object at 0x7f904d767730>",
                    "init_qpos": "array([0., 0., 0.])",
                    "init_qvel": "array([0., 0., 0.])",
                    "_viewers": {},
                    "frame_skip": 5,
                    "viewer": "None",
                    "observation_space": {
                      "dtype": "dtype('float64')",
                      "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "_shape": [
                        11
                      ],
                      "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                      "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                      "low_repr": "-inf",
                      "high_repr": "inf",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "action_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True])",
                      "bounded_above": "array([ True])",
                      "_shape": [
                        1
                      ],
                      "low": "array([-1.], dtype=float32)",
                      "high": "array([1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "render_mode": "None",
                    "renderer": {
                      "no_returns_render": [
                        "human"
                      ],
                      "single_render": [
                        "single_state_pixels",
                        "single_rgb_array",
                        "single_depth_array"
                      ],
                      "mode": "None",
                      "render": {
                        "$type": "functools.partial"
                      },
                      "render_list": [],
                      "$type": "gym.utils.renderer.Renderer"
                    },
                    "_ezpickle_args": [],
                    "_ezpickle_kwargs": {},
                    "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "checked_reset": false,
                  "checked_step": false,
                  "checked_render": false,
                  "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": true,
              "_has_reset": false,
              "_disable_render_order_enforcing": false,
              "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": false,
            "_max_episode_steps": 1000,
            "_elapsed_steps": "None",
            "$type": "gym.wrappers.time_limit.TimeLimit"
          },
          "_max_episode_length": 1000,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array",
            "single_rgb_array",
            "single_depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        "_env_steps": [],
        "_observations": [],
        "_last_observations": [],
        "_agent_infos": {},
        "_lengths": [],
        "_prev_obs": "None",
        "_eps_length": 0,
        "_episode_infos": {},
        "$type": "garage.sampler.default_worker.DefaultWorker"
      },
      {
        "_seed": "None",
        "_max_episode_length": 200,
        "_worker_number": 8,
        "agent": {
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "training": true,
          "_parameters": {
            "_init_std": {
              "$type": "torch.nn.parameter.Parameter"
            }
          },
          "_buffers": {
            "min_std_param": {
              "$type": "torch.Tensor"
            }
          },
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_mean_module": {
              "training": true,
              "_parameters": {},
              "_buffers": {},
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_layers": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "0": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 11.0,
                          "out_features": 32,
                          "$type": "torch.nn.modules.linear.Linear"
                        },
                        "non_linearity": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                          "$type": "garage.torch._functions.NonLinearity"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    },
                    "1": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 32,
                          "out_features": 32,
                          "$type": "torch.nn.modules.linear.Linear"
                        },
                        "non_linearity": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                          "$type": "garage.torch._functions.NonLinearity"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    }
                  },
                  "$type": "torch.nn.modules.container.ModuleList"
                },
                "_output_layers": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "0": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 32,
                          "out_features": 1.0,
                          "$type": "torch.nn.modules.linear.Linear"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    }
                  },
                  "$type": "torch.nn.modules.container.ModuleList"
                }
              },
              "_output_dim": 1.0,
              "$type": "garage.torch.modules.mlp_module.MLPModule"
            }
          },
          "_input_dim": 11.0,
          "_hidden_sizes": [
            32,
            32
          ],
          "_learn_std": true,
          "_std_hidden_sizes": [
            32,
            32
          ],
          "_min_std": 1e-06,
          "_max_std": "None",
          "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
          "_std_hidden_w_init": {
            "$type": "builtins.function"
          },
          "_std_hidden_b_init": {
            "$type": "builtins.function"
          },
          "_std_output_nonlinearity": "None",
          "_std_output_w_init": {
            "$type": "builtins.function"
          },
          "_std_parameterization": "exp",
          "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
          "_hidden_w_init": {
            "$type": "builtins.function"
          },
          "_hidden_b_init": {
            "$type": "builtins.function"
          },
          "_output_nonlinearity": "None",
          "_output_w_init": {
            "$type": "builtins.function"
          },
          "_output_b_init": {
            "$type": "builtins.function"
          },
          "_layer_normalization": false,
          "_norm_dist_class": {
            "$typename": "torch.distributions.normal.Normal"
          },
          "_min_std_param": {
            "$type": "torch.Tensor"
          },
          "_max_std_param": "None",
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "$type": "Policy.GaussianMLPPolicy.GaussianMLPPolicy"
        },
        "env": {
          "_env": {
            "env": {
              "env": {
                "env": {
                  "env": {
                    "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                    "model": "<mujoco._structs.MjModel object at 0x7f904d6b41b0>",
                    "data": "<mujoco._structs.MjData object at 0x7f904d6b41f0>",
                    "init_qpos": "array([0., 0., 0.])",
                    "init_qvel": "array([0., 0., 0.])",
                    "_viewers": {},
                    "frame_skip": 5,
                    "viewer": "None",
                    "observation_space": {
                      "dtype": "dtype('float64')",
                      "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "_shape": [
                        11
                      ],
                      "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                      "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                      "low_repr": "-inf",
                      "high_repr": "inf",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "action_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True])",
                      "bounded_above": "array([ True])",
                      "_shape": [
                        1
                      ],
                      "low": "array([-1.], dtype=float32)",
                      "high": "array([1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "render_mode": "None",
                    "renderer": {
                      "no_returns_render": [
                        "human"
                      ],
                      "single_render": [
                        "single_state_pixels",
                        "single_rgb_array",
                        "single_depth_array"
                      ],
                      "mode": "None",
                      "render": {
                        "$type": "functools.partial"
                      },
                      "render_list": [],
                      "$type": "gym.utils.renderer.Renderer"
                    },
                    "_ezpickle_args": [],
                    "_ezpickle_kwargs": {},
                    "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "checked_reset": false,
                  "checked_step": false,
                  "checked_render": false,
                  "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": true,
              "_has_reset": false,
              "_disable_render_order_enforcing": false,
              "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": false,
            "_max_episode_steps": 1000,
            "_elapsed_steps": "None",
            "$type": "gym.wrappers.time_limit.TimeLimit"
          },
          "_max_episode_length": 1000,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array",
            "single_rgb_array",
            "single_depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        "_env_steps": [],
        "_observations": [],
        "_last_observations": [],
        "_agent_infos": {},
        "_lengths": [],
        "_prev_obs": "None",
        "_eps_length": 0,
        "_episode_infos": {},
        "$type": "garage.sampler.default_worker.DefaultWorker"
      },
      {
        "_seed": "None",
        "_max_episode_length": 200,
        "_worker_number": 9,
        "agent": {
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "training": true,
          "_parameters": {
            "_init_std": {
              "$type": "torch.nn.parameter.Parameter"
            }
          },
          "_buffers": {
            "min_std_param": {
              "$type": "torch.Tensor"
            }
          },
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_mean_module": {
              "training": true,
              "_parameters": {},
              "_buffers": {},
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_layers": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "0": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 11.0,
                          "out_features": 32,
                          "$type": "torch.nn.modules.linear.Linear"
                        },
                        "non_linearity": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                          "$type": "garage.torch._functions.NonLinearity"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    },
                    "1": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 32,
                          "out_features": 32,
                          "$type": "torch.nn.modules.linear.Linear"
                        },
                        "non_linearity": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                          "$type": "garage.torch._functions.NonLinearity"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    }
                  },
                  "$type": "torch.nn.modules.container.ModuleList"
                },
                "_output_layers": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "0": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 32,
                          "out_features": 1.0,
                          "$type": "torch.nn.modules.linear.Linear"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    }
                  },
                  "$type": "torch.nn.modules.container.ModuleList"
                }
              },
              "_output_dim": 1.0,
              "$type": "garage.torch.modules.mlp_module.MLPModule"
            }
          },
          "_input_dim": 11.0,
          "_hidden_sizes": [
            32,
            32
          ],
          "_learn_std": true,
          "_std_hidden_sizes": [
            32,
            32
          ],
          "_min_std": 1e-06,
          "_max_std": "None",
          "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
          "_std_hidden_w_init": {
            "$type": "builtins.function"
          },
          "_std_hidden_b_init": {
            "$type": "builtins.function"
          },
          "_std_output_nonlinearity": "None",
          "_std_output_w_init": {
            "$type": "builtins.function"
          },
          "_std_parameterization": "exp",
          "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
          "_hidden_w_init": {
            "$type": "builtins.function"
          },
          "_hidden_b_init": {
            "$type": "builtins.function"
          },
          "_output_nonlinearity": "None",
          "_output_w_init": {
            "$type": "builtins.function"
          },
          "_output_b_init": {
            "$type": "builtins.function"
          },
          "_layer_normalization": false,
          "_norm_dist_class": {
            "$typename": "torch.distributions.normal.Normal"
          },
          "_min_std_param": {
            "$type": "torch.Tensor"
          },
          "_max_std_param": "None",
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "$type": "Policy.GaussianMLPPolicy.GaussianMLPPolicy"
        },
        "env": {
          "_env": {
            "env": {
              "env": {
                "env": {
                  "env": {
                    "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                    "model": "<mujoco._structs.MjModel object at 0x7f904d6b4c30>",
                    "data": "<mujoco._structs.MjData object at 0x7f904d6b4c70>",
                    "init_qpos": "array([0., 0., 0.])",
                    "init_qvel": "array([0., 0., 0.])",
                    "_viewers": {},
                    "frame_skip": 5,
                    "viewer": "None",
                    "observation_space": {
                      "dtype": "dtype('float64')",
                      "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "_shape": [
                        11
                      ],
                      "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                      "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                      "low_repr": "-inf",
                      "high_repr": "inf",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "action_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True])",
                      "bounded_above": "array([ True])",
                      "_shape": [
                        1
                      ],
                      "low": "array([-1.], dtype=float32)",
                      "high": "array([1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "render_mode": "None",
                    "renderer": {
                      "no_returns_render": [
                        "human"
                      ],
                      "single_render": [
                        "single_state_pixels",
                        "single_rgb_array",
                        "single_depth_array"
                      ],
                      "mode": "None",
                      "render": {
                        "$type": "functools.partial"
                      },
                      "render_list": [],
                      "$type": "gym.utils.renderer.Renderer"
                    },
                    "_ezpickle_args": [],
                    "_ezpickle_kwargs": {},
                    "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "checked_reset": false,
                  "checked_step": false,
                  "checked_render": false,
                  "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": true,
              "_has_reset": false,
              "_disable_render_order_enforcing": false,
              "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": false,
            "_max_episode_steps": 1000,
            "_elapsed_steps": "None",
            "$type": "gym.wrappers.time_limit.TimeLimit"
          },
          "_max_episode_length": 1000,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array",
            "single_rgb_array",
            "single_depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        "_env_steps": [],
        "_observations": [],
        "_last_observations": [],
        "_agent_infos": {},
        "_lengths": [],
        "_prev_obs": "None",
        "_eps_length": 0,
        "_episode_infos": {},
        "$type": "garage.sampler.default_worker.DefaultWorker"
      },
      {
        "_seed": "None",
        "_max_episode_length": 200,
        "_worker_number": 10,
        "agent": {
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "training": true,
          "_parameters": {
            "_init_std": {
              "$type": "torch.nn.parameter.Parameter"
            }
          },
          "_buffers": {
            "min_std_param": {
              "$type": "torch.Tensor"
            }
          },
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_mean_module": {
              "training": true,
              "_parameters": {},
              "_buffers": {},
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_layers": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "0": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 11.0,
                          "out_features": 32,
                          "$type": "torch.nn.modules.linear.Linear"
                        },
                        "non_linearity": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                          "$type": "garage.torch._functions.NonLinearity"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    },
                    "1": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 32,
                          "out_features": 32,
                          "$type": "torch.nn.modules.linear.Linear"
                        },
                        "non_linearity": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                          "$type": "garage.torch._functions.NonLinearity"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    }
                  },
                  "$type": "torch.nn.modules.container.ModuleList"
                },
                "_output_layers": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "0": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 32,
                          "out_features": 1.0,
                          "$type": "torch.nn.modules.linear.Linear"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    }
                  },
                  "$type": "torch.nn.modules.container.ModuleList"
                }
              },
              "_output_dim": 1.0,
              "$type": "garage.torch.modules.mlp_module.MLPModule"
            }
          },
          "_input_dim": 11.0,
          "_hidden_sizes": [
            32,
            32
          ],
          "_learn_std": true,
          "_std_hidden_sizes": [
            32,
            32
          ],
          "_min_std": 1e-06,
          "_max_std": "None",
          "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
          "_std_hidden_w_init": {
            "$type": "builtins.function"
          },
          "_std_hidden_b_init": {
            "$type": "builtins.function"
          },
          "_std_output_nonlinearity": "None",
          "_std_output_w_init": {
            "$type": "builtins.function"
          },
          "_std_parameterization": "exp",
          "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
          "_hidden_w_init": {
            "$type": "builtins.function"
          },
          "_hidden_b_init": {
            "$type": "builtins.function"
          },
          "_output_nonlinearity": "None",
          "_output_w_init": {
            "$type": "builtins.function"
          },
          "_output_b_init": {
            "$type": "builtins.function"
          },
          "_layer_normalization": false,
          "_norm_dist_class": {
            "$typename": "torch.distributions.normal.Normal"
          },
          "_min_std_param": {
            "$type": "torch.Tensor"
          },
          "_max_std_param": "None",
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "$type": "Policy.GaussianMLPPolicy.GaussianMLPPolicy"
        },
        "env": {
          "_env": {
            "env": {
              "env": {
                "env": {
                  "env": {
                    "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                    "model": "<mujoco._structs.MjModel object at 0x7f904d682730>",
                    "data": "<mujoco._structs.MjData object at 0x7f904d682770>",
                    "init_qpos": "array([0., 0., 0.])",
                    "init_qvel": "array([0., 0., 0.])",
                    "_viewers": {},
                    "frame_skip": 5,
                    "viewer": "None",
                    "observation_space": {
                      "dtype": "dtype('float64')",
                      "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "_shape": [
                        11
                      ],
                      "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                      "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                      "low_repr": "-inf",
                      "high_repr": "inf",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "action_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True])",
                      "bounded_above": "array([ True])",
                      "_shape": [
                        1
                      ],
                      "low": "array([-1.], dtype=float32)",
                      "high": "array([1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "render_mode": "None",
                    "renderer": {
                      "no_returns_render": [
                        "human"
                      ],
                      "single_render": [
                        "single_state_pixels",
                        "single_rgb_array",
                        "single_depth_array"
                      ],
                      "mode": "None",
                      "render": {
                        "$type": "functools.partial"
                      },
                      "render_list": [],
                      "$type": "gym.utils.renderer.Renderer"
                    },
                    "_ezpickle_args": [],
                    "_ezpickle_kwargs": {},
                    "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "checked_reset": false,
                  "checked_step": false,
                  "checked_render": false,
                  "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": true,
              "_has_reset": false,
              "_disable_render_order_enforcing": false,
              "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": false,
            "_max_episode_steps": 1000,
            "_elapsed_steps": "None",
            "$type": "gym.wrappers.time_limit.TimeLimit"
          },
          "_max_episode_length": 1000,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array",
            "single_rgb_array",
            "single_depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        "_env_steps": [],
        "_observations": [],
        "_last_observations": [],
        "_agent_infos": {},
        "_lengths": [],
        "_prev_obs": "None",
        "_eps_length": 0,
        "_episode_infos": {},
        "$type": "garage.sampler.default_worker.DefaultWorker"
      },
      {
        "_seed": "None",
        "_max_episode_length": 200,
        "_worker_number": 11,
        "agent": {
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "training": true,
          "_parameters": {
            "_init_std": {
              "$type": "torch.nn.parameter.Parameter"
            }
          },
          "_buffers": {
            "min_std_param": {
              "$type": "torch.Tensor"
            }
          },
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_mean_module": {
              "training": true,
              "_parameters": {},
              "_buffers": {},
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_layers": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "0": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 11.0,
                          "out_features": 32,
                          "$type": "torch.nn.modules.linear.Linear"
                        },
                        "non_linearity": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                          "$type": "garage.torch._functions.NonLinearity"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    },
                    "1": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 32,
                          "out_features": 32,
                          "$type": "torch.nn.modules.linear.Linear"
                        },
                        "non_linearity": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                          "$type": "garage.torch._functions.NonLinearity"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    }
                  },
                  "$type": "torch.nn.modules.container.ModuleList"
                },
                "_output_layers": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "0": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 32,
                          "out_features": 1.0,
                          "$type": "torch.nn.modules.linear.Linear"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    }
                  },
                  "$type": "torch.nn.modules.container.ModuleList"
                }
              },
              "_output_dim": 1.0,
              "$type": "garage.torch.modules.mlp_module.MLPModule"
            }
          },
          "_input_dim": 11.0,
          "_hidden_sizes": [
            32,
            32
          ],
          "_learn_std": true,
          "_std_hidden_sizes": [
            32,
            32
          ],
          "_min_std": 1e-06,
          "_max_std": "None",
          "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
          "_std_hidden_w_init": {
            "$type": "builtins.function"
          },
          "_std_hidden_b_init": {
            "$type": "builtins.function"
          },
          "_std_output_nonlinearity": "None",
          "_std_output_w_init": {
            "$type": "builtins.function"
          },
          "_std_parameterization": "exp",
          "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
          "_hidden_w_init": {
            "$type": "builtins.function"
          },
          "_hidden_b_init": {
            "$type": "builtins.function"
          },
          "_output_nonlinearity": "None",
          "_output_w_init": {
            "$type": "builtins.function"
          },
          "_output_b_init": {
            "$type": "builtins.function"
          },
          "_layer_normalization": false,
          "_norm_dist_class": {
            "$typename": "torch.distributions.normal.Normal"
          },
          "_min_std_param": {
            "$type": "torch.Tensor"
          },
          "_max_std_param": "None",
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "$type": "Policy.GaussianMLPPolicy.GaussianMLPPolicy"
        },
        "env": {
          "_env": {
            "env": {
              "env": {
                "env": {
                  "env": {
                    "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                    "model": "<mujoco._structs.MjModel object at 0x7f904d6824f0>",
                    "data": "<mujoco._structs.MjData object at 0x7f904d6822b0>",
                    "init_qpos": "array([0., 0., 0.])",
                    "init_qvel": "array([0., 0., 0.])",
                    "_viewers": {},
                    "frame_skip": 5,
                    "viewer": "None",
                    "observation_space": {
                      "dtype": "dtype('float64')",
                      "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "_shape": [
                        11
                      ],
                      "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                      "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                      "low_repr": "-inf",
                      "high_repr": "inf",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "action_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True])",
                      "bounded_above": "array([ True])",
                      "_shape": [
                        1
                      ],
                      "low": "array([-1.], dtype=float32)",
                      "high": "array([1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "render_mode": "None",
                    "renderer": {
                      "no_returns_render": [
                        "human"
                      ],
                      "single_render": [
                        "single_state_pixels",
                        "single_rgb_array",
                        "single_depth_array"
                      ],
                      "mode": "None",
                      "render": {
                        "$type": "functools.partial"
                      },
                      "render_list": [],
                      "$type": "gym.utils.renderer.Renderer"
                    },
                    "_ezpickle_args": [],
                    "_ezpickle_kwargs": {},
                    "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "checked_reset": false,
                  "checked_step": false,
                  "checked_render": false,
                  "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": true,
              "_has_reset": false,
              "_disable_render_order_enforcing": false,
              "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": false,
            "_max_episode_steps": 1000,
            "_elapsed_steps": "None",
            "$type": "gym.wrappers.time_limit.TimeLimit"
          },
          "_max_episode_length": 1000,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array",
            "single_rgb_array",
            "single_depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        "_env_steps": [],
        "_observations": [],
        "_last_observations": [],
        "_agent_infos": {},
        "_lengths": [],
        "_prev_obs": "None",
        "_eps_length": 0,
        "_episode_infos": {},
        "$type": "garage.sampler.default_worker.DefaultWorker"
      },
      {
        "_seed": "None",
        "_max_episode_length": 200,
        "_worker_number": 12,
        "agent": {
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "training": true,
          "_parameters": {
            "_init_std": {
              "$type": "torch.nn.parameter.Parameter"
            }
          },
          "_buffers": {
            "min_std_param": {
              "$type": "torch.Tensor"
            }
          },
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_mean_module": {
              "training": true,
              "_parameters": {},
              "_buffers": {},
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_layers": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "0": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 11.0,
                          "out_features": 32,
                          "$type": "torch.nn.modules.linear.Linear"
                        },
                        "non_linearity": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                          "$type": "garage.torch._functions.NonLinearity"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    },
                    "1": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 32,
                          "out_features": 32,
                          "$type": "torch.nn.modules.linear.Linear"
                        },
                        "non_linearity": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                          "$type": "garage.torch._functions.NonLinearity"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    }
                  },
                  "$type": "torch.nn.modules.container.ModuleList"
                },
                "_output_layers": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "0": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 32,
                          "out_features": 1.0,
                          "$type": "torch.nn.modules.linear.Linear"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    }
                  },
                  "$type": "torch.nn.modules.container.ModuleList"
                }
              },
              "_output_dim": 1.0,
              "$type": "garage.torch.modules.mlp_module.MLPModule"
            }
          },
          "_input_dim": 11.0,
          "_hidden_sizes": [
            32,
            32
          ],
          "_learn_std": true,
          "_std_hidden_sizes": [
            32,
            32
          ],
          "_min_std": 1e-06,
          "_max_std": "None",
          "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
          "_std_hidden_w_init": {
            "$type": "builtins.function"
          },
          "_std_hidden_b_init": {
            "$type": "builtins.function"
          },
          "_std_output_nonlinearity": "None",
          "_std_output_w_init": {
            "$type": "builtins.function"
          },
          "_std_parameterization": "exp",
          "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
          "_hidden_w_init": {
            "$type": "builtins.function"
          },
          "_hidden_b_init": {
            "$type": "builtins.function"
          },
          "_output_nonlinearity": "None",
          "_output_w_init": {
            "$type": "builtins.function"
          },
          "_output_b_init": {
            "$type": "builtins.function"
          },
          "_layer_normalization": false,
          "_norm_dist_class": {
            "$typename": "torch.distributions.normal.Normal"
          },
          "_min_std_param": {
            "$type": "torch.Tensor"
          },
          "_max_std_param": "None",
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "$type": "Policy.GaussianMLPPolicy.GaussianMLPPolicy"
        },
        "env": {
          "_env": {
            "env": {
              "env": {
                "env": {
                  "env": {
                    "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                    "model": "<mujoco._structs.MjModel object at 0x7f904d798ef0>",
                    "data": "<mujoco._structs.MjData object at 0x7f904d798a70>",
                    "init_qpos": "array([0., 0., 0.])",
                    "init_qvel": "array([0., 0., 0.])",
                    "_viewers": {},
                    "frame_skip": 5,
                    "viewer": "None",
                    "observation_space": {
                      "dtype": "dtype('float64')",
                      "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "_shape": [
                        11
                      ],
                      "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                      "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                      "low_repr": "-inf",
                      "high_repr": "inf",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "action_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True])",
                      "bounded_above": "array([ True])",
                      "_shape": [
                        1
                      ],
                      "low": "array([-1.], dtype=float32)",
                      "high": "array([1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "render_mode": "None",
                    "renderer": {
                      "no_returns_render": [
                        "human"
                      ],
                      "single_render": [
                        "single_state_pixels",
                        "single_rgb_array",
                        "single_depth_array"
                      ],
                      "mode": "None",
                      "render": {
                        "$type": "functools.partial"
                      },
                      "render_list": [],
                      "$type": "gym.utils.renderer.Renderer"
                    },
                    "_ezpickle_args": [],
                    "_ezpickle_kwargs": {},
                    "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "checked_reset": false,
                  "checked_step": false,
                  "checked_render": false,
                  "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": true,
              "_has_reset": false,
              "_disable_render_order_enforcing": false,
              "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": false,
            "_max_episode_steps": 1000,
            "_elapsed_steps": "None",
            "$type": "gym.wrappers.time_limit.TimeLimit"
          },
          "_max_episode_length": 1000,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array",
            "single_rgb_array",
            "single_depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        "_env_steps": [],
        "_observations": [],
        "_last_observations": [],
        "_agent_infos": {},
        "_lengths": [],
        "_prev_obs": "None",
        "_eps_length": 0,
        "_episode_infos": {},
        "$type": "garage.sampler.default_worker.DefaultWorker"
      },
      {
        "_seed": "None",
        "_max_episode_length": 200,
        "_worker_number": 13,
        "agent": {
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "training": true,
          "_parameters": {
            "_init_std": {
              "$type": "torch.nn.parameter.Parameter"
            }
          },
          "_buffers": {
            "min_std_param": {
              "$type": "torch.Tensor"
            }
          },
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_mean_module": {
              "training": true,
              "_parameters": {},
              "_buffers": {},
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_layers": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "0": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 11.0,
                          "out_features": 32,
                          "$type": "torch.nn.modules.linear.Linear"
                        },
                        "non_linearity": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                          "$type": "garage.torch._functions.NonLinearity"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    },
                    "1": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 32,
                          "out_features": 32,
                          "$type": "torch.nn.modules.linear.Linear"
                        },
                        "non_linearity": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                          "$type": "garage.torch._functions.NonLinearity"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    }
                  },
                  "$type": "torch.nn.modules.container.ModuleList"
                },
                "_output_layers": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "0": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 32,
                          "out_features": 1.0,
                          "$type": "torch.nn.modules.linear.Linear"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    }
                  },
                  "$type": "torch.nn.modules.container.ModuleList"
                }
              },
              "_output_dim": 1.0,
              "$type": "garage.torch.modules.mlp_module.MLPModule"
            }
          },
          "_input_dim": 11.0,
          "_hidden_sizes": [
            32,
            32
          ],
          "_learn_std": true,
          "_std_hidden_sizes": [
            32,
            32
          ],
          "_min_std": 1e-06,
          "_max_std": "None",
          "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
          "_std_hidden_w_init": {
            "$type": "builtins.function"
          },
          "_std_hidden_b_init": {
            "$type": "builtins.function"
          },
          "_std_output_nonlinearity": "None",
          "_std_output_w_init": {
            "$type": "builtins.function"
          },
          "_std_parameterization": "exp",
          "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
          "_hidden_w_init": {
            "$type": "builtins.function"
          },
          "_hidden_b_init": {
            "$type": "builtins.function"
          },
          "_output_nonlinearity": "None",
          "_output_w_init": {
            "$type": "builtins.function"
          },
          "_output_b_init": {
            "$type": "builtins.function"
          },
          "_layer_normalization": false,
          "_norm_dist_class": {
            "$typename": "torch.distributions.normal.Normal"
          },
          "_min_std_param": {
            "$type": "torch.Tensor"
          },
          "_max_std_param": "None",
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "$type": "Policy.GaussianMLPPolicy.GaussianMLPPolicy"
        },
        "env": {
          "_env": {
            "env": {
              "env": {
                "env": {
                  "env": {
                    "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                    "model": "<mujoco._structs.MjModel object at 0x7f904d8e9ab0>",
                    "data": "<mujoco._structs.MjData object at 0x7f904d8e9a70>",
                    "init_qpos": "array([0., 0., 0.])",
                    "init_qvel": "array([0., 0., 0.])",
                    "_viewers": {},
                    "frame_skip": 5,
                    "viewer": "None",
                    "observation_space": {
                      "dtype": "dtype('float64')",
                      "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "_shape": [
                        11
                      ],
                      "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                      "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                      "low_repr": "-inf",
                      "high_repr": "inf",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "action_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True])",
                      "bounded_above": "array([ True])",
                      "_shape": [
                        1
                      ],
                      "low": "array([-1.], dtype=float32)",
                      "high": "array([1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "render_mode": "None",
                    "renderer": {
                      "no_returns_render": [
                        "human"
                      ],
                      "single_render": [
                        "single_state_pixels",
                        "single_rgb_array",
                        "single_depth_array"
                      ],
                      "mode": "None",
                      "render": {
                        "$type": "functools.partial"
                      },
                      "render_list": [],
                      "$type": "gym.utils.renderer.Renderer"
                    },
                    "_ezpickle_args": [],
                    "_ezpickle_kwargs": {},
                    "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "checked_reset": false,
                  "checked_step": false,
                  "checked_render": false,
                  "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": true,
              "_has_reset": false,
              "_disable_render_order_enforcing": false,
              "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": false,
            "_max_episode_steps": 1000,
            "_elapsed_steps": "None",
            "$type": "gym.wrappers.time_limit.TimeLimit"
          },
          "_max_episode_length": 1000,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array",
            "single_rgb_array",
            "single_depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        "_env_steps": [],
        "_observations": [],
        "_last_observations": [],
        "_agent_infos": {},
        "_lengths": [],
        "_prev_obs": "None",
        "_eps_length": 0,
        "_episode_infos": {},
        "$type": "garage.sampler.default_worker.DefaultWorker"
      },
      {
        "_seed": "None",
        "_max_episode_length": 200,
        "_worker_number": 14,
        "agent": {
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "training": true,
          "_parameters": {
            "_init_std": {
              "$type": "torch.nn.parameter.Parameter"
            }
          },
          "_buffers": {
            "min_std_param": {
              "$type": "torch.Tensor"
            }
          },
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_mean_module": {
              "training": true,
              "_parameters": {},
              "_buffers": {},
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_layers": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "0": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 11.0,
                          "out_features": 32,
                          "$type": "torch.nn.modules.linear.Linear"
                        },
                        "non_linearity": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                          "$type": "garage.torch._functions.NonLinearity"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    },
                    "1": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 32,
                          "out_features": 32,
                          "$type": "torch.nn.modules.linear.Linear"
                        },
                        "non_linearity": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                          "$type": "garage.torch._functions.NonLinearity"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    }
                  },
                  "$type": "torch.nn.modules.container.ModuleList"
                },
                "_output_layers": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "0": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 32,
                          "out_features": 1.0,
                          "$type": "torch.nn.modules.linear.Linear"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    }
                  },
                  "$type": "torch.nn.modules.container.ModuleList"
                }
              },
              "_output_dim": 1.0,
              "$type": "garage.torch.modules.mlp_module.MLPModule"
            }
          },
          "_input_dim": 11.0,
          "_hidden_sizes": [
            32,
            32
          ],
          "_learn_std": true,
          "_std_hidden_sizes": [
            32,
            32
          ],
          "_min_std": 1e-06,
          "_max_std": "None",
          "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
          "_std_hidden_w_init": {
            "$type": "builtins.function"
          },
          "_std_hidden_b_init": {
            "$type": "builtins.function"
          },
          "_std_output_nonlinearity": "None",
          "_std_output_w_init": {
            "$type": "builtins.function"
          },
          "_std_parameterization": "exp",
          "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
          "_hidden_w_init": {
            "$type": "builtins.function"
          },
          "_hidden_b_init": {
            "$type": "builtins.function"
          },
          "_output_nonlinearity": "None",
          "_output_w_init": {
            "$type": "builtins.function"
          },
          "_output_b_init": {
            "$type": "builtins.function"
          },
          "_layer_normalization": false,
          "_norm_dist_class": {
            "$typename": "torch.distributions.normal.Normal"
          },
          "_min_std_param": {
            "$type": "torch.Tensor"
          },
          "_max_std_param": "None",
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "$type": "Policy.GaussianMLPPolicy.GaussianMLPPolicy"
        },
        "env": {
          "_env": {
            "env": {
              "env": {
                "env": {
                  "env": {
                    "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                    "model": "<mujoco._structs.MjModel object at 0x7f904e73a7b0>",
                    "data": "<mujoco._structs.MjData object at 0x7f904e19f370>",
                    "init_qpos": "array([0., 0., 0.])",
                    "init_qvel": "array([0., 0., 0.])",
                    "_viewers": {},
                    "frame_skip": 5,
                    "viewer": "None",
                    "observation_space": {
                      "dtype": "dtype('float64')",
                      "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "_shape": [
                        11
                      ],
                      "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                      "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                      "low_repr": "-inf",
                      "high_repr": "inf",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "action_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True])",
                      "bounded_above": "array([ True])",
                      "_shape": [
                        1
                      ],
                      "low": "array([-1.], dtype=float32)",
                      "high": "array([1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "render_mode": "None",
                    "renderer": {
                      "no_returns_render": [
                        "human"
                      ],
                      "single_render": [
                        "single_state_pixels",
                        "single_rgb_array",
                        "single_depth_array"
                      ],
                      "mode": "None",
                      "render": {
                        "$type": "functools.partial"
                      },
                      "render_list": [],
                      "$type": "gym.utils.renderer.Renderer"
                    },
                    "_ezpickle_args": [],
                    "_ezpickle_kwargs": {},
                    "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "checked_reset": false,
                  "checked_step": false,
                  "checked_render": false,
                  "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": true,
              "_has_reset": false,
              "_disable_render_order_enforcing": false,
              "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": false,
            "_max_episode_steps": 1000,
            "_elapsed_steps": "None",
            "$type": "gym.wrappers.time_limit.TimeLimit"
          },
          "_max_episode_length": 1000,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array",
            "single_rgb_array",
            "single_depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        "_env_steps": [],
        "_observations": [],
        "_last_observations": [],
        "_agent_infos": {},
        "_lengths": [],
        "_prev_obs": "None",
        "_eps_length": 0,
        "_episode_infos": {},
        "$type": "garage.sampler.default_worker.DefaultWorker"
      },
      {
        "_seed": "None",
        "_max_episode_length": 200,
        "_worker_number": 15,
        "agent": {
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "training": true,
          "_parameters": {
            "_init_std": {
              "$type": "torch.nn.parameter.Parameter"
            }
          },
          "_buffers": {
            "min_std_param": {
              "$type": "torch.Tensor"
            }
          },
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_mean_module": {
              "training": true,
              "_parameters": {},
              "_buffers": {},
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_layers": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "0": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 11.0,
                          "out_features": 32,
                          "$type": "torch.nn.modules.linear.Linear"
                        },
                        "non_linearity": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                          "$type": "garage.torch._functions.NonLinearity"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    },
                    "1": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 32,
                          "out_features": 32,
                          "$type": "torch.nn.modules.linear.Linear"
                        },
                        "non_linearity": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                          "$type": "garage.torch._functions.NonLinearity"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    }
                  },
                  "$type": "torch.nn.modules.container.ModuleList"
                },
                "_output_layers": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "0": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 32,
                          "out_features": 1.0,
                          "$type": "torch.nn.modules.linear.Linear"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    }
                  },
                  "$type": "torch.nn.modules.container.ModuleList"
                }
              },
              "_output_dim": 1.0,
              "$type": "garage.torch.modules.mlp_module.MLPModule"
            }
          },
          "_input_dim": 11.0,
          "_hidden_sizes": [
            32,
            32
          ],
          "_learn_std": true,
          "_std_hidden_sizes": [
            32,
            32
          ],
          "_min_std": 1e-06,
          "_max_std": "None",
          "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
          "_std_hidden_w_init": {
            "$type": "builtins.function"
          },
          "_std_hidden_b_init": {
            "$type": "builtins.function"
          },
          "_std_output_nonlinearity": "None",
          "_std_output_w_init": {
            "$type": "builtins.function"
          },
          "_std_parameterization": "exp",
          "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
          "_hidden_w_init": {
            "$type": "builtins.function"
          },
          "_hidden_b_init": {
            "$type": "builtins.function"
          },
          "_output_nonlinearity": "None",
          "_output_w_init": {
            "$type": "builtins.function"
          },
          "_output_b_init": {
            "$type": "builtins.function"
          },
          "_layer_normalization": false,
          "_norm_dist_class": {
            "$typename": "torch.distributions.normal.Normal"
          },
          "_min_std_param": {
            "$type": "torch.Tensor"
          },
          "_max_std_param": "None",
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "$type": "Policy.GaussianMLPPolicy.GaussianMLPPolicy"
        },
        "env": {
          "_env": {
            "env": {
              "env": {
                "env": {
                  "env": {
                    "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                    "model": "<mujoco._structs.MjModel object at 0x7f904d64e7b0>",
                    "data": "<mujoco._structs.MjData object at 0x7f904d64e7f0>",
                    "init_qpos": "array([0., 0., 0.])",
                    "init_qvel": "array([0., 0., 0.])",
                    "_viewers": {},
                    "frame_skip": 5,
                    "viewer": "None",
                    "observation_space": {
                      "dtype": "dtype('float64')",
                      "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "_shape": [
                        11
                      ],
                      "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                      "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                      "low_repr": "-inf",
                      "high_repr": "inf",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "action_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True])",
                      "bounded_above": "array([ True])",
                      "_shape": [
                        1
                      ],
                      "low": "array([-1.], dtype=float32)",
                      "high": "array([1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "render_mode": "None",
                    "renderer": {
                      "no_returns_render": [
                        "human"
                      ],
                      "single_render": [
                        "single_state_pixels",
                        "single_rgb_array",
                        "single_depth_array"
                      ],
                      "mode": "None",
                      "render": {
                        "$type": "functools.partial"
                      },
                      "render_list": [],
                      "$type": "gym.utils.renderer.Renderer"
                    },
                    "_ezpickle_args": [],
                    "_ezpickle_kwargs": {},
                    "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "checked_reset": false,
                  "checked_step": false,
                  "checked_render": false,
                  "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": true,
              "_has_reset": false,
              "_disable_render_order_enforcing": false,
              "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": false,
            "_max_episode_steps": 1000,
            "_elapsed_steps": "None",
            "$type": "gym.wrappers.time_limit.TimeLimit"
          },
          "_max_episode_length": 1000,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array",
            "single_rgb_array",
            "single_depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        "_env_steps": [],
        "_observations": [],
        "_last_observations": [],
        "_agent_infos": {},
        "_lengths": [],
        "_prev_obs": "None",
        "_eps_length": 0,
        "_episode_infos": {},
        "$type": "garage.sampler.default_worker.DefaultWorker"
      },
      {
        "_seed": "None",
        "_max_episode_length": 200,
        "_worker_number": 16,
        "agent": {
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "training": true,
          "_parameters": {
            "_init_std": {
              "$type": "torch.nn.parameter.Parameter"
            }
          },
          "_buffers": {
            "min_std_param": {
              "$type": "torch.Tensor"
            }
          },
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_mean_module": {
              "training": true,
              "_parameters": {},
              "_buffers": {},
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_layers": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "0": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 11.0,
                          "out_features": 32,
                          "$type": "torch.nn.modules.linear.Linear"
                        },
                        "non_linearity": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                          "$type": "garage.torch._functions.NonLinearity"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    },
                    "1": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 32,
                          "out_features": 32,
                          "$type": "torch.nn.modules.linear.Linear"
                        },
                        "non_linearity": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                          "$type": "garage.torch._functions.NonLinearity"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    }
                  },
                  "$type": "torch.nn.modules.container.ModuleList"
                },
                "_output_layers": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "0": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 32,
                          "out_features": 1.0,
                          "$type": "torch.nn.modules.linear.Linear"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    }
                  },
                  "$type": "torch.nn.modules.container.ModuleList"
                }
              },
              "_output_dim": 1.0,
              "$type": "garage.torch.modules.mlp_module.MLPModule"
            }
          },
          "_input_dim": 11.0,
          "_hidden_sizes": [
            32,
            32
          ],
          "_learn_std": true,
          "_std_hidden_sizes": [
            32,
            32
          ],
          "_min_std": 1e-06,
          "_max_std": "None",
          "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
          "_std_hidden_w_init": {
            "$type": "builtins.function"
          },
          "_std_hidden_b_init": {
            "$type": "builtins.function"
          },
          "_std_output_nonlinearity": "None",
          "_std_output_w_init": {
            "$type": "builtins.function"
          },
          "_std_parameterization": "exp",
          "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
          "_hidden_w_init": {
            "$type": "builtins.function"
          },
          "_hidden_b_init": {
            "$type": "builtins.function"
          },
          "_output_nonlinearity": "None",
          "_output_w_init": {
            "$type": "builtins.function"
          },
          "_output_b_init": {
            "$type": "builtins.function"
          },
          "_layer_normalization": false,
          "_norm_dist_class": {
            "$typename": "torch.distributions.normal.Normal"
          },
          "_min_std_param": {
            "$type": "torch.Tensor"
          },
          "_max_std_param": "None",
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "$type": "Policy.GaussianMLPPolicy.GaussianMLPPolicy"
        },
        "env": {
          "_env": {
            "env": {
              "env": {
                "env": {
                  "env": {
                    "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                    "model": "<mujoco._structs.MjModel object at 0x7f904d6f6230>",
                    "data": "<mujoco._structs.MjData object at 0x7f904d6f6270>",
                    "init_qpos": "array([0., 0., 0.])",
                    "init_qvel": "array([0., 0., 0.])",
                    "_viewers": {},
                    "frame_skip": 5,
                    "viewer": "None",
                    "observation_space": {
                      "dtype": "dtype('float64')",
                      "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "_shape": [
                        11
                      ],
                      "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                      "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                      "low_repr": "-inf",
                      "high_repr": "inf",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "action_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True])",
                      "bounded_above": "array([ True])",
                      "_shape": [
                        1
                      ],
                      "low": "array([-1.], dtype=float32)",
                      "high": "array([1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "render_mode": "None",
                    "renderer": {
                      "no_returns_render": [
                        "human"
                      ],
                      "single_render": [
                        "single_state_pixels",
                        "single_rgb_array",
                        "single_depth_array"
                      ],
                      "mode": "None",
                      "render": {
                        "$type": "functools.partial"
                      },
                      "render_list": [],
                      "$type": "gym.utils.renderer.Renderer"
                    },
                    "_ezpickle_args": [],
                    "_ezpickle_kwargs": {},
                    "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "checked_reset": false,
                  "checked_step": false,
                  "checked_render": false,
                  "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": true,
              "_has_reset": false,
              "_disable_render_order_enforcing": false,
              "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": false,
            "_max_episode_steps": 1000,
            "_elapsed_steps": "None",
            "$type": "gym.wrappers.time_limit.TimeLimit"
          },
          "_max_episode_length": 1000,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array",
            "single_rgb_array",
            "single_depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        "_env_steps": [],
        "_observations": [],
        "_last_observations": [],
        "_agent_infos": {},
        "_lengths": [],
        "_prev_obs": "None",
        "_eps_length": 0,
        "_episode_infos": {},
        "$type": "garage.sampler.default_worker.DefaultWorker"
      },
      {
        "_seed": "None",
        "_max_episode_length": 200,
        "_worker_number": 17,
        "agent": {
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "training": true,
          "_parameters": {
            "_init_std": {
              "$type": "torch.nn.parameter.Parameter"
            }
          },
          "_buffers": {
            "min_std_param": {
              "$type": "torch.Tensor"
            }
          },
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_mean_module": {
              "training": true,
              "_parameters": {},
              "_buffers": {},
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_layers": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "0": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 11.0,
                          "out_features": 32,
                          "$type": "torch.nn.modules.linear.Linear"
                        },
                        "non_linearity": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                          "$type": "garage.torch._functions.NonLinearity"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    },
                    "1": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 32,
                          "out_features": 32,
                          "$type": "torch.nn.modules.linear.Linear"
                        },
                        "non_linearity": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                          "$type": "garage.torch._functions.NonLinearity"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    }
                  },
                  "$type": "torch.nn.modules.container.ModuleList"
                },
                "_output_layers": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "0": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 32,
                          "out_features": 1.0,
                          "$type": "torch.nn.modules.linear.Linear"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    }
                  },
                  "$type": "torch.nn.modules.container.ModuleList"
                }
              },
              "_output_dim": 1.0,
              "$type": "garage.torch.modules.mlp_module.MLPModule"
            }
          },
          "_input_dim": 11.0,
          "_hidden_sizes": [
            32,
            32
          ],
          "_learn_std": true,
          "_std_hidden_sizes": [
            32,
            32
          ],
          "_min_std": 1e-06,
          "_max_std": "None",
          "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
          "_std_hidden_w_init": {
            "$type": "builtins.function"
          },
          "_std_hidden_b_init": {
            "$type": "builtins.function"
          },
          "_std_output_nonlinearity": "None",
          "_std_output_w_init": {
            "$type": "builtins.function"
          },
          "_std_parameterization": "exp",
          "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
          "_hidden_w_init": {
            "$type": "builtins.function"
          },
          "_hidden_b_init": {
            "$type": "builtins.function"
          },
          "_output_nonlinearity": "None",
          "_output_w_init": {
            "$type": "builtins.function"
          },
          "_output_b_init": {
            "$type": "builtins.function"
          },
          "_layer_normalization": false,
          "_norm_dist_class": {
            "$typename": "torch.distributions.normal.Normal"
          },
          "_min_std_param": {
            "$type": "torch.Tensor"
          },
          "_max_std_param": "None",
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "$type": "Policy.GaussianMLPPolicy.GaussianMLPPolicy"
        },
        "env": {
          "_env": {
            "env": {
              "env": {
                "env": {
                  "env": {
                    "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                    "model": "<mujoco._structs.MjModel object at 0x7f904d6f6cb0>",
                    "data": "<mujoco._structs.MjData object at 0x7f904d6f6cf0>",
                    "init_qpos": "array([0., 0., 0.])",
                    "init_qvel": "array([0., 0., 0.])",
                    "_viewers": {},
                    "frame_skip": 5,
                    "viewer": "None",
                    "observation_space": {
                      "dtype": "dtype('float64')",
                      "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "_shape": [
                        11
                      ],
                      "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                      "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                      "low_repr": "-inf",
                      "high_repr": "inf",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "action_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True])",
                      "bounded_above": "array([ True])",
                      "_shape": [
                        1
                      ],
                      "low": "array([-1.], dtype=float32)",
                      "high": "array([1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "render_mode": "None",
                    "renderer": {
                      "no_returns_render": [
                        "human"
                      ],
                      "single_render": [
                        "single_state_pixels",
                        "single_rgb_array",
                        "single_depth_array"
                      ],
                      "mode": "None",
                      "render": {
                        "$type": "functools.partial"
                      },
                      "render_list": [],
                      "$type": "gym.utils.renderer.Renderer"
                    },
                    "_ezpickle_args": [],
                    "_ezpickle_kwargs": {},
                    "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "checked_reset": false,
                  "checked_step": false,
                  "checked_render": false,
                  "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": true,
              "_has_reset": false,
              "_disable_render_order_enforcing": false,
              "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": false,
            "_max_episode_steps": 1000,
            "_elapsed_steps": "None",
            "$type": "gym.wrappers.time_limit.TimeLimit"
          },
          "_max_episode_length": 1000,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array",
            "single_rgb_array",
            "single_depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        "_env_steps": [],
        "_observations": [],
        "_last_observations": [],
        "_agent_infos": {},
        "_lengths": [],
        "_prev_obs": "None",
        "_eps_length": 0,
        "_episode_infos": {},
        "$type": "garage.sampler.default_worker.DefaultWorker"
      },
      {
        "_seed": "None",
        "_max_episode_length": 200,
        "_worker_number": 18,
        "agent": {
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "training": true,
          "_parameters": {
            "_init_std": {
              "$type": "torch.nn.parameter.Parameter"
            }
          },
          "_buffers": {
            "min_std_param": {
              "$type": "torch.Tensor"
            }
          },
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_mean_module": {
              "training": true,
              "_parameters": {},
              "_buffers": {},
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_layers": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "0": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 11.0,
                          "out_features": 32,
                          "$type": "torch.nn.modules.linear.Linear"
                        },
                        "non_linearity": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                          "$type": "garage.torch._functions.NonLinearity"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    },
                    "1": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 32,
                          "out_features": 32,
                          "$type": "torch.nn.modules.linear.Linear"
                        },
                        "non_linearity": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                          "$type": "garage.torch._functions.NonLinearity"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    }
                  },
                  "$type": "torch.nn.modules.container.ModuleList"
                },
                "_output_layers": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "0": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 32,
                          "out_features": 1.0,
                          "$type": "torch.nn.modules.linear.Linear"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    }
                  },
                  "$type": "torch.nn.modules.container.ModuleList"
                }
              },
              "_output_dim": 1.0,
              "$type": "garage.torch.modules.mlp_module.MLPModule"
            }
          },
          "_input_dim": 11.0,
          "_hidden_sizes": [
            32,
            32
          ],
          "_learn_std": true,
          "_std_hidden_sizes": [
            32,
            32
          ],
          "_min_std": 1e-06,
          "_max_std": "None",
          "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
          "_std_hidden_w_init": {
            "$type": "builtins.function"
          },
          "_std_hidden_b_init": {
            "$type": "builtins.function"
          },
          "_std_output_nonlinearity": "None",
          "_std_output_w_init": {
            "$type": "builtins.function"
          },
          "_std_parameterization": "exp",
          "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
          "_hidden_w_init": {
            "$type": "builtins.function"
          },
          "_hidden_b_init": {
            "$type": "builtins.function"
          },
          "_output_nonlinearity": "None",
          "_output_w_init": {
            "$type": "builtins.function"
          },
          "_output_b_init": {
            "$type": "builtins.function"
          },
          "_layer_normalization": false,
          "_norm_dist_class": {
            "$typename": "torch.distributions.normal.Normal"
          },
          "_min_std_param": {
            "$type": "torch.Tensor"
          },
          "_max_std_param": "None",
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "$type": "Policy.GaussianMLPPolicy.GaussianMLPPolicy"
        },
        "env": {
          "_env": {
            "env": {
              "env": {
                "env": {
                  "env": {
                    "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                    "model": "<mujoco._structs.MjModel object at 0x7f904d6077b0>",
                    "data": "<mujoco._structs.MjData object at 0x7f904d6077f0>",
                    "init_qpos": "array([0., 0., 0.])",
                    "init_qvel": "array([0., 0., 0.])",
                    "_viewers": {},
                    "frame_skip": 5,
                    "viewer": "None",
                    "observation_space": {
                      "dtype": "dtype('float64')",
                      "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "_shape": [
                        11
                      ],
                      "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                      "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                      "low_repr": "-inf",
                      "high_repr": "inf",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "action_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True])",
                      "bounded_above": "array([ True])",
                      "_shape": [
                        1
                      ],
                      "low": "array([-1.], dtype=float32)",
                      "high": "array([1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "render_mode": "None",
                    "renderer": {
                      "no_returns_render": [
                        "human"
                      ],
                      "single_render": [
                        "single_state_pixels",
                        "single_rgb_array",
                        "single_depth_array"
                      ],
                      "mode": "None",
                      "render": {
                        "$type": "functools.partial"
                      },
                      "render_list": [],
                      "$type": "gym.utils.renderer.Renderer"
                    },
                    "_ezpickle_args": [],
                    "_ezpickle_kwargs": {},
                    "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "checked_reset": false,
                  "checked_step": false,
                  "checked_render": false,
                  "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": true,
              "_has_reset": false,
              "_disable_render_order_enforcing": false,
              "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": false,
            "_max_episode_steps": 1000,
            "_elapsed_steps": "None",
            "$type": "gym.wrappers.time_limit.TimeLimit"
          },
          "_max_episode_length": 1000,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array",
            "single_rgb_array",
            "single_depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        "_env_steps": [],
        "_observations": [],
        "_last_observations": [],
        "_agent_infos": {},
        "_lengths": [],
        "_prev_obs": "None",
        "_eps_length": 0,
        "_episode_infos": {},
        "$type": "garage.sampler.default_worker.DefaultWorker"
      },
      {
        "_seed": "None",
        "_max_episode_length": 200,
        "_worker_number": 19,
        "agent": {
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "training": true,
          "_parameters": {
            "_init_std": {
              "$type": "torch.nn.parameter.Parameter"
            }
          },
          "_buffers": {
            "min_std_param": {
              "$type": "torch.Tensor"
            }
          },
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_mean_module": {
              "training": true,
              "_parameters": {},
              "_buffers": {},
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_layers": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "0": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 11.0,
                          "out_features": 32,
                          "$type": "torch.nn.modules.linear.Linear"
                        },
                        "non_linearity": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                          "$type": "garage.torch._functions.NonLinearity"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    },
                    "1": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 32,
                          "out_features": 32,
                          "$type": "torch.nn.modules.linear.Linear"
                        },
                        "non_linearity": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                          "$type": "garage.torch._functions.NonLinearity"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    }
                  },
                  "$type": "torch.nn.modules.container.ModuleList"
                },
                "_output_layers": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "0": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 32,
                          "out_features": 1.0,
                          "$type": "torch.nn.modules.linear.Linear"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    }
                  },
                  "$type": "torch.nn.modules.container.ModuleList"
                }
              },
              "_output_dim": 1.0,
              "$type": "garage.torch.modules.mlp_module.MLPModule"
            }
          },
          "_input_dim": 11.0,
          "_hidden_sizes": [
            32,
            32
          ],
          "_learn_std": true,
          "_std_hidden_sizes": [
            32,
            32
          ],
          "_min_std": 1e-06,
          "_max_std": "None",
          "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
          "_std_hidden_w_init": {
            "$type": "builtins.function"
          },
          "_std_hidden_b_init": {
            "$type": "builtins.function"
          },
          "_std_output_nonlinearity": "None",
          "_std_output_w_init": {
            "$type": "builtins.function"
          },
          "_std_parameterization": "exp",
          "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
          "_hidden_w_init": {
            "$type": "builtins.function"
          },
          "_hidden_b_init": {
            "$type": "builtins.function"
          },
          "_output_nonlinearity": "None",
          "_output_w_init": {
            "$type": "builtins.function"
          },
          "_output_b_init": {
            "$type": "builtins.function"
          },
          "_layer_normalization": false,
          "_norm_dist_class": {
            "$typename": "torch.distributions.normal.Normal"
          },
          "_min_std_param": {
            "$type": "torch.Tensor"
          },
          "_max_std_param": "None",
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "$type": "Policy.GaussianMLPPolicy.GaussianMLPPolicy"
        },
        "env": {
          "_env": {
            "env": {
              "env": {
                "env": {
                  "env": {
                    "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                    "model": "<mujoco._structs.MjModel object at 0x7f904d5d32b0>",
                    "data": "<mujoco._structs.MjData object at 0x7f904d5d32f0>",
                    "init_qpos": "array([0., 0., 0.])",
                    "init_qvel": "array([0., 0., 0.])",
                    "_viewers": {},
                    "frame_skip": 5,
                    "viewer": "None",
                    "observation_space": {
                      "dtype": "dtype('float64')",
                      "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "_shape": [
                        11
                      ],
                      "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                      "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                      "low_repr": "-inf",
                      "high_repr": "inf",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "action_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True])",
                      "bounded_above": "array([ True])",
                      "_shape": [
                        1
                      ],
                      "low": "array([-1.], dtype=float32)",
                      "high": "array([1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "render_mode": "None",
                    "renderer": {
                      "no_returns_render": [
                        "human"
                      ],
                      "single_render": [
                        "single_state_pixels",
                        "single_rgb_array",
                        "single_depth_array"
                      ],
                      "mode": "None",
                      "render": {
                        "$type": "functools.partial"
                      },
                      "render_list": [],
                      "$type": "gym.utils.renderer.Renderer"
                    },
                    "_ezpickle_args": [],
                    "_ezpickle_kwargs": {},
                    "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "checked_reset": false,
                  "checked_step": false,
                  "checked_render": false,
                  "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": true,
              "_has_reset": false,
              "_disable_render_order_enforcing": false,
              "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": false,
            "_max_episode_steps": 1000,
            "_elapsed_steps": "None",
            "$type": "gym.wrappers.time_limit.TimeLimit"
          },
          "_max_episode_length": 1000,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array",
            "single_rgb_array",
            "single_depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        "_env_steps": [],
        "_observations": [],
        "_last_observations": [],
        "_agent_infos": {},
        "_lengths": [],
        "_prev_obs": "None",
        "_eps_length": 0,
        "_episode_infos": {},
        "$type": "garage.sampler.default_worker.DefaultWorker"
      },
      {
        "_seed": "None",
        "_max_episode_length": 200,
        "_worker_number": 20,
        "agent": {
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "training": true,
          "_parameters": {
            "_init_std": {
              "$type": "torch.nn.parameter.Parameter"
            }
          },
          "_buffers": {
            "min_std_param": {
              "$type": "torch.Tensor"
            }
          },
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_mean_module": {
              "training": true,
              "_parameters": {},
              "_buffers": {},
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_layers": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "0": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 11.0,
                          "out_features": 32,
                          "$type": "torch.nn.modules.linear.Linear"
                        },
                        "non_linearity": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                          "$type": "garage.torch._functions.NonLinearity"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    },
                    "1": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 32,
                          "out_features": 32,
                          "$type": "torch.nn.modules.linear.Linear"
                        },
                        "non_linearity": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                          "$type": "garage.torch._functions.NonLinearity"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    }
                  },
                  "$type": "torch.nn.modules.container.ModuleList"
                },
                "_output_layers": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "0": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 32,
                          "out_features": 1.0,
                          "$type": "torch.nn.modules.linear.Linear"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    }
                  },
                  "$type": "torch.nn.modules.container.ModuleList"
                }
              },
              "_output_dim": 1.0,
              "$type": "garage.torch.modules.mlp_module.MLPModule"
            }
          },
          "_input_dim": 11.0,
          "_hidden_sizes": [
            32,
            32
          ],
          "_learn_std": true,
          "_std_hidden_sizes": [
            32,
            32
          ],
          "_min_std": 1e-06,
          "_max_std": "None",
          "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
          "_std_hidden_w_init": {
            "$type": "builtins.function"
          },
          "_std_hidden_b_init": {
            "$type": "builtins.function"
          },
          "_std_output_nonlinearity": "None",
          "_std_output_w_init": {
            "$type": "builtins.function"
          },
          "_std_parameterization": "exp",
          "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
          "_hidden_w_init": {
            "$type": "builtins.function"
          },
          "_hidden_b_init": {
            "$type": "builtins.function"
          },
          "_output_nonlinearity": "None",
          "_output_w_init": {
            "$type": "builtins.function"
          },
          "_output_b_init": {
            "$type": "builtins.function"
          },
          "_layer_normalization": false,
          "_norm_dist_class": {
            "$typename": "torch.distributions.normal.Normal"
          },
          "_min_std_param": {
            "$type": "torch.Tensor"
          },
          "_max_std_param": "None",
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "$type": "Policy.GaussianMLPPolicy.GaussianMLPPolicy"
        },
        "env": {
          "_env": {
            "env": {
              "env": {
                "env": {
                  "env": {
                    "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                    "model": "<mujoco._structs.MjModel object at 0x7f904d5d3d70>",
                    "data": "<mujoco._structs.MjData object at 0x7f904d5d3db0>",
                    "init_qpos": "array([0., 0., 0.])",
                    "init_qvel": "array([0., 0., 0.])",
                    "_viewers": {},
                    "frame_skip": 5,
                    "viewer": "None",
                    "observation_space": {
                      "dtype": "dtype('float64')",
                      "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "_shape": [
                        11
                      ],
                      "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                      "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                      "low_repr": "-inf",
                      "high_repr": "inf",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "action_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True])",
                      "bounded_above": "array([ True])",
                      "_shape": [
                        1
                      ],
                      "low": "array([-1.], dtype=float32)",
                      "high": "array([1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "render_mode": "None",
                    "renderer": {
                      "no_returns_render": [
                        "human"
                      ],
                      "single_render": [
                        "single_state_pixels",
                        "single_rgb_array",
                        "single_depth_array"
                      ],
                      "mode": "None",
                      "render": {
                        "$type": "functools.partial"
                      },
                      "render_list": [],
                      "$type": "gym.utils.renderer.Renderer"
                    },
                    "_ezpickle_args": [],
                    "_ezpickle_kwargs": {},
                    "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "checked_reset": false,
                  "checked_step": false,
                  "checked_render": false,
                  "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": true,
              "_has_reset": false,
              "_disable_render_order_enforcing": false,
              "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": false,
            "_max_episode_steps": 1000,
            "_elapsed_steps": "None",
            "$type": "gym.wrappers.time_limit.TimeLimit"
          },
          "_max_episode_length": 1000,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array",
            "single_rgb_array",
            "single_depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        "_env_steps": [],
        "_observations": [],
        "_last_observations": [],
        "_agent_infos": {},
        "_lengths": [],
        "_prev_obs": "None",
        "_eps_length": 0,
        "_episode_infos": {},
        "$type": "garage.sampler.default_worker.DefaultWorker"
      },
      {
        "_seed": "None",
        "_max_episode_length": 200,
        "_worker_number": 21,
        "agent": {
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "training": true,
          "_parameters": {
            "_init_std": {
              "$type": "torch.nn.parameter.Parameter"
            }
          },
          "_buffers": {
            "min_std_param": {
              "$type": "torch.Tensor"
            }
          },
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_mean_module": {
              "training": true,
              "_parameters": {},
              "_buffers": {},
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_layers": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "0": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 11.0,
                          "out_features": 32,
                          "$type": "torch.nn.modules.linear.Linear"
                        },
                        "non_linearity": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                          "$type": "garage.torch._functions.NonLinearity"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    },
                    "1": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 32,
                          "out_features": 32,
                          "$type": "torch.nn.modules.linear.Linear"
                        },
                        "non_linearity": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                          "$type": "garage.torch._functions.NonLinearity"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    }
                  },
                  "$type": "torch.nn.modules.container.ModuleList"
                },
                "_output_layers": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "0": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 32,
                          "out_features": 1.0,
                          "$type": "torch.nn.modules.linear.Linear"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    }
                  },
                  "$type": "torch.nn.modules.container.ModuleList"
                }
              },
              "_output_dim": 1.0,
              "$type": "garage.torch.modules.mlp_module.MLPModule"
            }
          },
          "_input_dim": 11.0,
          "_hidden_sizes": [
            32,
            32
          ],
          "_learn_std": true,
          "_std_hidden_sizes": [
            32,
            32
          ],
          "_min_std": 1e-06,
          "_max_std": "None",
          "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
          "_std_hidden_w_init": {
            "$type": "builtins.function"
          },
          "_std_hidden_b_init": {
            "$type": "builtins.function"
          },
          "_std_output_nonlinearity": "None",
          "_std_output_w_init": {
            "$type": "builtins.function"
          },
          "_std_parameterization": "exp",
          "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
          "_hidden_w_init": {
            "$type": "builtins.function"
          },
          "_hidden_b_init": {
            "$type": "builtins.function"
          },
          "_output_nonlinearity": "None",
          "_output_w_init": {
            "$type": "builtins.function"
          },
          "_output_b_init": {
            "$type": "builtins.function"
          },
          "_layer_normalization": false,
          "_norm_dist_class": {
            "$typename": "torch.distributions.normal.Normal"
          },
          "_min_std_param": {
            "$type": "torch.Tensor"
          },
          "_max_std_param": "None",
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "$type": "Policy.GaussianMLPPolicy.GaussianMLPPolicy"
        },
        "env": {
          "_env": {
            "env": {
              "env": {
                "env": {
                  "env": {
                    "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                    "model": "<mujoco._structs.MjModel object at 0x7f904d5a1870>",
                    "data": "<mujoco._structs.MjData object at 0x7f904d5a18b0>",
                    "init_qpos": "array([0., 0., 0.])",
                    "init_qvel": "array([0., 0., 0.])",
                    "_viewers": {},
                    "frame_skip": 5,
                    "viewer": "None",
                    "observation_space": {
                      "dtype": "dtype('float64')",
                      "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "_shape": [
                        11
                      ],
                      "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                      "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                      "low_repr": "-inf",
                      "high_repr": "inf",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "action_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True])",
                      "bounded_above": "array([ True])",
                      "_shape": [
                        1
                      ],
                      "low": "array([-1.], dtype=float32)",
                      "high": "array([1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "render_mode": "None",
                    "renderer": {
                      "no_returns_render": [
                        "human"
                      ],
                      "single_render": [
                        "single_state_pixels",
                        "single_rgb_array",
                        "single_depth_array"
                      ],
                      "mode": "None",
                      "render": {
                        "$type": "functools.partial"
                      },
                      "render_list": [],
                      "$type": "gym.utils.renderer.Renderer"
                    },
                    "_ezpickle_args": [],
                    "_ezpickle_kwargs": {},
                    "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "checked_reset": false,
                  "checked_step": false,
                  "checked_render": false,
                  "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": true,
              "_has_reset": false,
              "_disable_render_order_enforcing": false,
              "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": false,
            "_max_episode_steps": 1000,
            "_elapsed_steps": "None",
            "$type": "gym.wrappers.time_limit.TimeLimit"
          },
          "_max_episode_length": 1000,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array",
            "single_rgb_array",
            "single_depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        "_env_steps": [],
        "_observations": [],
        "_last_observations": [],
        "_agent_infos": {},
        "_lengths": [],
        "_prev_obs": "None",
        "_eps_length": 0,
        "_episode_infos": {},
        "$type": "garage.sampler.default_worker.DefaultWorker"
      },
      {
        "_seed": "None",
        "_max_episode_length": 200,
        "_worker_number": 22,
        "agent": {
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "training": true,
          "_parameters": {
            "_init_std": {
              "$type": "torch.nn.parameter.Parameter"
            }
          },
          "_buffers": {
            "min_std_param": {
              "$type": "torch.Tensor"
            }
          },
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_mean_module": {
              "training": true,
              "_parameters": {},
              "_buffers": {},
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_layers": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "0": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 11.0,
                          "out_features": 32,
                          "$type": "torch.nn.modules.linear.Linear"
                        },
                        "non_linearity": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                          "$type": "garage.torch._functions.NonLinearity"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    },
                    "1": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 32,
                          "out_features": 32,
                          "$type": "torch.nn.modules.linear.Linear"
                        },
                        "non_linearity": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                          "$type": "garage.torch._functions.NonLinearity"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    }
                  },
                  "$type": "torch.nn.modules.container.ModuleList"
                },
                "_output_layers": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "0": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 32,
                          "out_features": 1.0,
                          "$type": "torch.nn.modules.linear.Linear"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    }
                  },
                  "$type": "torch.nn.modules.container.ModuleList"
                }
              },
              "_output_dim": 1.0,
              "$type": "garage.torch.modules.mlp_module.MLPModule"
            }
          },
          "_input_dim": 11.0,
          "_hidden_sizes": [
            32,
            32
          ],
          "_learn_std": true,
          "_std_hidden_sizes": [
            32,
            32
          ],
          "_min_std": 1e-06,
          "_max_std": "None",
          "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
          "_std_hidden_w_init": {
            "$type": "builtins.function"
          },
          "_std_hidden_b_init": {
            "$type": "builtins.function"
          },
          "_std_output_nonlinearity": "None",
          "_std_output_w_init": {
            "$type": "builtins.function"
          },
          "_std_parameterization": "exp",
          "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
          "_hidden_w_init": {
            "$type": "builtins.function"
          },
          "_hidden_b_init": {
            "$type": "builtins.function"
          },
          "_output_nonlinearity": "None",
          "_output_w_init": {
            "$type": "builtins.function"
          },
          "_output_b_init": {
            "$type": "builtins.function"
          },
          "_layer_normalization": false,
          "_norm_dist_class": {
            "$typename": "torch.distributions.normal.Normal"
          },
          "_min_std_param": {
            "$type": "torch.Tensor"
          },
          "_max_std_param": "None",
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "$type": "Policy.GaussianMLPPolicy.GaussianMLPPolicy"
        },
        "env": {
          "_env": {
            "env": {
              "env": {
                "env": {
                  "env": {
                    "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                    "model": "<mujoco._structs.MjModel object at 0x7f904d557370>",
                    "data": "<mujoco._structs.MjData object at 0x7f904d5573b0>",
                    "init_qpos": "array([0., 0., 0.])",
                    "init_qvel": "array([0., 0., 0.])",
                    "_viewers": {},
                    "frame_skip": 5,
                    "viewer": "None",
                    "observation_space": {
                      "dtype": "dtype('float64')",
                      "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "_shape": [
                        11
                      ],
                      "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                      "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                      "low_repr": "-inf",
                      "high_repr": "inf",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "action_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True])",
                      "bounded_above": "array([ True])",
                      "_shape": [
                        1
                      ],
                      "low": "array([-1.], dtype=float32)",
                      "high": "array([1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "render_mode": "None",
                    "renderer": {
                      "no_returns_render": [
                        "human"
                      ],
                      "single_render": [
                        "single_state_pixels",
                        "single_rgb_array",
                        "single_depth_array"
                      ],
                      "mode": "None",
                      "render": {
                        "$type": "functools.partial"
                      },
                      "render_list": [],
                      "$type": "gym.utils.renderer.Renderer"
                    },
                    "_ezpickle_args": [],
                    "_ezpickle_kwargs": {},
                    "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "checked_reset": false,
                  "checked_step": false,
                  "checked_render": false,
                  "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": true,
              "_has_reset": false,
              "_disable_render_order_enforcing": false,
              "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": false,
            "_max_episode_steps": 1000,
            "_elapsed_steps": "None",
            "$type": "gym.wrappers.time_limit.TimeLimit"
          },
          "_max_episode_length": 1000,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array",
            "single_rgb_array",
            "single_depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        "_env_steps": [],
        "_observations": [],
        "_last_observations": [],
        "_agent_infos": {},
        "_lengths": [],
        "_prev_obs": "None",
        "_eps_length": 0,
        "_episode_infos": {},
        "$type": "garage.sampler.default_worker.DefaultWorker"
      },
      {
        "_seed": "None",
        "_max_episode_length": 200,
        "_worker_number": 23,
        "agent": {
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "training": true,
          "_parameters": {
            "_init_std": {
              "$type": "torch.nn.parameter.Parameter"
            }
          },
          "_buffers": {
            "min_std_param": {
              "$type": "torch.Tensor"
            }
          },
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_mean_module": {
              "training": true,
              "_parameters": {},
              "_buffers": {},
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_layers": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "0": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 11.0,
                          "out_features": 32,
                          "$type": "torch.nn.modules.linear.Linear"
                        },
                        "non_linearity": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                          "$type": "garage.torch._functions.NonLinearity"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    },
                    "1": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 32,
                          "out_features": 32,
                          "$type": "torch.nn.modules.linear.Linear"
                        },
                        "non_linearity": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                          "$type": "garage.torch._functions.NonLinearity"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    }
                  },
                  "$type": "torch.nn.modules.container.ModuleList"
                },
                "_output_layers": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "0": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 32,
                          "out_features": 1.0,
                          "$type": "torch.nn.modules.linear.Linear"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    }
                  },
                  "$type": "torch.nn.modules.container.ModuleList"
                }
              },
              "_output_dim": 1.0,
              "$type": "garage.torch.modules.mlp_module.MLPModule"
            }
          },
          "_input_dim": 11.0,
          "_hidden_sizes": [
            32,
            32
          ],
          "_learn_std": true,
          "_std_hidden_sizes": [
            32,
            32
          ],
          "_min_std": 1e-06,
          "_max_std": "None",
          "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
          "_std_hidden_w_init": {
            "$type": "builtins.function"
          },
          "_std_hidden_b_init": {
            "$type": "builtins.function"
          },
          "_std_output_nonlinearity": "None",
          "_std_output_w_init": {
            "$type": "builtins.function"
          },
          "_std_parameterization": "exp",
          "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
          "_hidden_w_init": {
            "$type": "builtins.function"
          },
          "_hidden_b_init": {
            "$type": "builtins.function"
          },
          "_output_nonlinearity": "None",
          "_output_w_init": {
            "$type": "builtins.function"
          },
          "_output_b_init": {
            "$type": "builtins.function"
          },
          "_layer_normalization": false,
          "_norm_dist_class": {
            "$typename": "torch.distributions.normal.Normal"
          },
          "_min_std_param": {
            "$type": "torch.Tensor"
          },
          "_max_std_param": "None",
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "$type": "Policy.GaussianMLPPolicy.GaussianMLPPolicy"
        },
        "env": {
          "_env": {
            "env": {
              "env": {
                "env": {
                  "env": {
                    "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                    "model": "<mujoco._structs.MjModel object at 0x7f904d5a1b30>",
                    "data": "<mujoco._structs.MjData object at 0x7f904d5a1eb0>",
                    "init_qpos": "array([0., 0., 0.])",
                    "init_qvel": "array([0., 0., 0.])",
                    "_viewers": {},
                    "frame_skip": 5,
                    "viewer": "None",
                    "observation_space": {
                      "dtype": "dtype('float64')",
                      "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "_shape": [
                        11
                      ],
                      "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                      "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                      "low_repr": "-inf",
                      "high_repr": "inf",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "action_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True])",
                      "bounded_above": "array([ True])",
                      "_shape": [
                        1
                      ],
                      "low": "array([-1.], dtype=float32)",
                      "high": "array([1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "render_mode": "None",
                    "renderer": {
                      "no_returns_render": [
                        "human"
                      ],
                      "single_render": [
                        "single_state_pixels",
                        "single_rgb_array",
                        "single_depth_array"
                      ],
                      "mode": "None",
                      "render": {
                        "$type": "functools.partial"
                      },
                      "render_list": [],
                      "$type": "gym.utils.renderer.Renderer"
                    },
                    "_ezpickle_args": [],
                    "_ezpickle_kwargs": {},
                    "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "checked_reset": false,
                  "checked_step": false,
                  "checked_render": false,
                  "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": true,
              "_has_reset": false,
              "_disable_render_order_enforcing": false,
              "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": false,
            "_max_episode_steps": 1000,
            "_elapsed_steps": "None",
            "$type": "gym.wrappers.time_limit.TimeLimit"
          },
          "_max_episode_length": 1000,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array",
            "single_rgb_array",
            "single_depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        "_env_steps": [],
        "_observations": [],
        "_last_observations": [],
        "_agent_infos": {},
        "_lengths": [],
        "_prev_obs": "None",
        "_eps_length": 0,
        "_episode_infos": {},
        "$type": "garage.sampler.default_worker.DefaultWorker"
      },
      {
        "_seed": "None",
        "_max_episode_length": 200,
        "_worker_number": 24,
        "agent": {
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "training": true,
          "_parameters": {
            "_init_std": {
              "$type": "torch.nn.parameter.Parameter"
            }
          },
          "_buffers": {
            "min_std_param": {
              "$type": "torch.Tensor"
            }
          },
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_mean_module": {
              "training": true,
              "_parameters": {},
              "_buffers": {},
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_layers": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "0": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 11.0,
                          "out_features": 32,
                          "$type": "torch.nn.modules.linear.Linear"
                        },
                        "non_linearity": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                          "$type": "garage.torch._functions.NonLinearity"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    },
                    "1": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 32,
                          "out_features": 32,
                          "$type": "torch.nn.modules.linear.Linear"
                        },
                        "non_linearity": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                          "$type": "garage.torch._functions.NonLinearity"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    }
                  },
                  "$type": "torch.nn.modules.container.ModuleList"
                },
                "_output_layers": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "0": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 32,
                          "out_features": 1.0,
                          "$type": "torch.nn.modules.linear.Linear"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    }
                  },
                  "$type": "torch.nn.modules.container.ModuleList"
                }
              },
              "_output_dim": 1.0,
              "$type": "garage.torch.modules.mlp_module.MLPModule"
            }
          },
          "_input_dim": 11.0,
          "_hidden_sizes": [
            32,
            32
          ],
          "_learn_std": true,
          "_std_hidden_sizes": [
            32,
            32
          ],
          "_min_std": 1e-06,
          "_max_std": "None",
          "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
          "_std_hidden_w_init": {
            "$type": "builtins.function"
          },
          "_std_hidden_b_init": {
            "$type": "builtins.function"
          },
          "_std_output_nonlinearity": "None",
          "_std_output_w_init": {
            "$type": "builtins.function"
          },
          "_std_parameterization": "exp",
          "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
          "_hidden_w_init": {
            "$type": "builtins.function"
          },
          "_hidden_b_init": {
            "$type": "builtins.function"
          },
          "_output_nonlinearity": "None",
          "_output_w_init": {
            "$type": "builtins.function"
          },
          "_output_b_init": {
            "$type": "builtins.function"
          },
          "_layer_normalization": false,
          "_norm_dist_class": {
            "$typename": "torch.distributions.normal.Normal"
          },
          "_min_std_param": {
            "$type": "torch.Tensor"
          },
          "_max_std_param": "None",
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "$type": "Policy.GaussianMLPPolicy.GaussianMLPPolicy"
        },
        "env": {
          "_env": {
            "env": {
              "env": {
                "env": {
                  "env": {
                    "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                    "model": "<mujoco._structs.MjModel object at 0x7f904d607330>",
                    "data": "<mujoco._structs.MjData object at 0x7f904d6074f0>",
                    "init_qpos": "array([0., 0., 0.])",
                    "init_qvel": "array([0., 0., 0.])",
                    "_viewers": {},
                    "frame_skip": 5,
                    "viewer": "None",
                    "observation_space": {
                      "dtype": "dtype('float64')",
                      "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "_shape": [
                        11
                      ],
                      "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                      "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                      "low_repr": "-inf",
                      "high_repr": "inf",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "action_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True])",
                      "bounded_above": "array([ True])",
                      "_shape": [
                        1
                      ],
                      "low": "array([-1.], dtype=float32)",
                      "high": "array([1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "render_mode": "None",
                    "renderer": {
                      "no_returns_render": [
                        "human"
                      ],
                      "single_render": [
                        "single_state_pixels",
                        "single_rgb_array",
                        "single_depth_array"
                      ],
                      "mode": "None",
                      "render": {
                        "$type": "functools.partial"
                      },
                      "render_list": [],
                      "$type": "gym.utils.renderer.Renderer"
                    },
                    "_ezpickle_args": [],
                    "_ezpickle_kwargs": {},
                    "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "checked_reset": false,
                  "checked_step": false,
                  "checked_render": false,
                  "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": true,
              "_has_reset": false,
              "_disable_render_order_enforcing": false,
              "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": false,
            "_max_episode_steps": 1000,
            "_elapsed_steps": "None",
            "$type": "gym.wrappers.time_limit.TimeLimit"
          },
          "_max_episode_length": 1000,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array",
            "single_rgb_array",
            "single_depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        "_env_steps": [],
        "_observations": [],
        "_last_observations": [],
        "_agent_infos": {},
        "_lengths": [],
        "_prev_obs": "None",
        "_eps_length": 0,
        "_episode_infos": {},
        "$type": "garage.sampler.default_worker.DefaultWorker"
      },
      {
        "_seed": "None",
        "_max_episode_length": 200,
        "_worker_number": 25,
        "agent": {
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "training": true,
          "_parameters": {
            "_init_std": {
              "$type": "torch.nn.parameter.Parameter"
            }
          },
          "_buffers": {
            "min_std_param": {
              "$type": "torch.Tensor"
            }
          },
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_mean_module": {
              "training": true,
              "_parameters": {},
              "_buffers": {},
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_layers": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "0": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 11.0,
                          "out_features": 32,
                          "$type": "torch.nn.modules.linear.Linear"
                        },
                        "non_linearity": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                          "$type": "garage.torch._functions.NonLinearity"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    },
                    "1": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 32,
                          "out_features": 32,
                          "$type": "torch.nn.modules.linear.Linear"
                        },
                        "non_linearity": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                          "$type": "garage.torch._functions.NonLinearity"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    }
                  },
                  "$type": "torch.nn.modules.container.ModuleList"
                },
                "_output_layers": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "0": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 32,
                          "out_features": 1.0,
                          "$type": "torch.nn.modules.linear.Linear"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    }
                  },
                  "$type": "torch.nn.modules.container.ModuleList"
                }
              },
              "_output_dim": 1.0,
              "$type": "garage.torch.modules.mlp_module.MLPModule"
            }
          },
          "_input_dim": 11.0,
          "_hidden_sizes": [
            32,
            32
          ],
          "_learn_std": true,
          "_std_hidden_sizes": [
            32,
            32
          ],
          "_min_std": 1e-06,
          "_max_std": "None",
          "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
          "_std_hidden_w_init": {
            "$type": "builtins.function"
          },
          "_std_hidden_b_init": {
            "$type": "builtins.function"
          },
          "_std_output_nonlinearity": "None",
          "_std_output_w_init": {
            "$type": "builtins.function"
          },
          "_std_parameterization": "exp",
          "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
          "_hidden_w_init": {
            "$type": "builtins.function"
          },
          "_hidden_b_init": {
            "$type": "builtins.function"
          },
          "_output_nonlinearity": "None",
          "_output_w_init": {
            "$type": "builtins.function"
          },
          "_output_b_init": {
            "$type": "builtins.function"
          },
          "_layer_normalization": false,
          "_norm_dist_class": {
            "$typename": "torch.distributions.normal.Normal"
          },
          "_min_std_param": {
            "$type": "torch.Tensor"
          },
          "_max_std_param": "None",
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "$type": "Policy.GaussianMLPPolicy.GaussianMLPPolicy"
        },
        "env": {
          "_env": {
            "env": {
              "env": {
                "env": {
                  "env": {
                    "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                    "model": "<mujoco._structs.MjModel object at 0x7f904d64e4b0>",
                    "data": "<mujoco._structs.MjData object at 0x7f904d64e470>",
                    "init_qpos": "array([0., 0., 0.])",
                    "init_qvel": "array([0., 0., 0.])",
                    "_viewers": {},
                    "frame_skip": 5,
                    "viewer": "None",
                    "observation_space": {
                      "dtype": "dtype('float64')",
                      "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "_shape": [
                        11
                      ],
                      "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                      "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                      "low_repr": "-inf",
                      "high_repr": "inf",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "action_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True])",
                      "bounded_above": "array([ True])",
                      "_shape": [
                        1
                      ],
                      "low": "array([-1.], dtype=float32)",
                      "high": "array([1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "render_mode": "None",
                    "renderer": {
                      "no_returns_render": [
                        "human"
                      ],
                      "single_render": [
                        "single_state_pixels",
                        "single_rgb_array",
                        "single_depth_array"
                      ],
                      "mode": "None",
                      "render": {
                        "$type": "functools.partial"
                      },
                      "render_list": [],
                      "$type": "gym.utils.renderer.Renderer"
                    },
                    "_ezpickle_args": [],
                    "_ezpickle_kwargs": {},
                    "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "checked_reset": false,
                  "checked_step": false,
                  "checked_render": false,
                  "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": true,
              "_has_reset": false,
              "_disable_render_order_enforcing": false,
              "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": false,
            "_max_episode_steps": 1000,
            "_elapsed_steps": "None",
            "$type": "gym.wrappers.time_limit.TimeLimit"
          },
          "_max_episode_length": 1000,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array",
            "single_rgb_array",
            "single_depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        "_env_steps": [],
        "_observations": [],
        "_last_observations": [],
        "_agent_infos": {},
        "_lengths": [],
        "_prev_obs": "None",
        "_eps_length": 0,
        "_episode_infos": {},
        "$type": "garage.sampler.default_worker.DefaultWorker"
      },
      {
        "_seed": "None",
        "_max_episode_length": 200,
        "_worker_number": 26,
        "agent": {
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "training": true,
          "_parameters": {
            "_init_std": {
              "$type": "torch.nn.parameter.Parameter"
            }
          },
          "_buffers": {
            "min_std_param": {
              "$type": "torch.Tensor"
            }
          },
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_mean_module": {
              "training": true,
              "_parameters": {},
              "_buffers": {},
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_layers": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "0": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 11.0,
                          "out_features": 32,
                          "$type": "torch.nn.modules.linear.Linear"
                        },
                        "non_linearity": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                          "$type": "garage.torch._functions.NonLinearity"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    },
                    "1": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 32,
                          "out_features": 32,
                          "$type": "torch.nn.modules.linear.Linear"
                        },
                        "non_linearity": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                          "$type": "garage.torch._functions.NonLinearity"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    }
                  },
                  "$type": "torch.nn.modules.container.ModuleList"
                },
                "_output_layers": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "0": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 32,
                          "out_features": 1.0,
                          "$type": "torch.nn.modules.linear.Linear"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    }
                  },
                  "$type": "torch.nn.modules.container.ModuleList"
                }
              },
              "_output_dim": 1.0,
              "$type": "garage.torch.modules.mlp_module.MLPModule"
            }
          },
          "_input_dim": 11.0,
          "_hidden_sizes": [
            32,
            32
          ],
          "_learn_std": true,
          "_std_hidden_sizes": [
            32,
            32
          ],
          "_min_std": 1e-06,
          "_max_std": "None",
          "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
          "_std_hidden_w_init": {
            "$type": "builtins.function"
          },
          "_std_hidden_b_init": {
            "$type": "builtins.function"
          },
          "_std_output_nonlinearity": "None",
          "_std_output_w_init": {
            "$type": "builtins.function"
          },
          "_std_parameterization": "exp",
          "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
          "_hidden_w_init": {
            "$type": "builtins.function"
          },
          "_hidden_b_init": {
            "$type": "builtins.function"
          },
          "_output_nonlinearity": "None",
          "_output_w_init": {
            "$type": "builtins.function"
          },
          "_output_b_init": {
            "$type": "builtins.function"
          },
          "_layer_normalization": false,
          "_norm_dist_class": {
            "$typename": "torch.distributions.normal.Normal"
          },
          "_min_std_param": {
            "$type": "torch.Tensor"
          },
          "_max_std_param": "None",
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "$type": "Policy.GaussianMLPPolicy.GaussianMLPPolicy"
        },
        "env": {
          "_env": {
            "env": {
              "env": {
                "env": {
                  "env": {
                    "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                    "model": "<mujoco._structs.MjModel object at 0x7f904d557ab0>",
                    "data": "<mujoco._structs.MjData object at 0x7f904d557c70>",
                    "init_qpos": "array([0., 0., 0.])",
                    "init_qvel": "array([0., 0., 0.])",
                    "_viewers": {},
                    "frame_skip": 5,
                    "viewer": "None",
                    "observation_space": {
                      "dtype": "dtype('float64')",
                      "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "_shape": [
                        11
                      ],
                      "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                      "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                      "low_repr": "-inf",
                      "high_repr": "inf",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "action_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True])",
                      "bounded_above": "array([ True])",
                      "_shape": [
                        1
                      ],
                      "low": "array([-1.], dtype=float32)",
                      "high": "array([1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "render_mode": "None",
                    "renderer": {
                      "no_returns_render": [
                        "human"
                      ],
                      "single_render": [
                        "single_state_pixels",
                        "single_rgb_array",
                        "single_depth_array"
                      ],
                      "mode": "None",
                      "render": {
                        "$type": "functools.partial"
                      },
                      "render_list": [],
                      "$type": "gym.utils.renderer.Renderer"
                    },
                    "_ezpickle_args": [],
                    "_ezpickle_kwargs": {},
                    "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "checked_reset": false,
                  "checked_step": false,
                  "checked_render": false,
                  "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": true,
              "_has_reset": false,
              "_disable_render_order_enforcing": false,
              "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": false,
            "_max_episode_steps": 1000,
            "_elapsed_steps": "None",
            "$type": "gym.wrappers.time_limit.TimeLimit"
          },
          "_max_episode_length": 1000,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array",
            "single_rgb_array",
            "single_depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        "_env_steps": [],
        "_observations": [],
        "_last_observations": [],
        "_agent_infos": {},
        "_lengths": [],
        "_prev_obs": "None",
        "_eps_length": 0,
        "_episode_infos": {},
        "$type": "garage.sampler.default_worker.DefaultWorker"
      },
      {
        "_seed": "None",
        "_max_episode_length": 200,
        "_worker_number": 27,
        "agent": {
          "_obs_dim": 11.0,
          "_action_dim": 1.0,
          "training": true,
          "_parameters": {
            "_init_std": {
              "$type": "torch.nn.parameter.Parameter"
            }
          },
          "_buffers": {
            "min_std_param": {
              "$type": "torch.Tensor"
            }
          },
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_mean_module": {
              "training": true,
              "_parameters": {},
              "_buffers": {},
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_layers": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "0": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 11.0,
                          "out_features": 32,
                          "$type": "torch.nn.modules.linear.Linear"
                        },
                        "non_linearity": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                          "$type": "garage.torch._functions.NonLinearity"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    },
                    "1": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 32,
                          "out_features": 32,
                          "$type": "torch.nn.modules.linear.Linear"
                        },
                        "non_linearity": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "module": "<built-in method tanh of type object at 0x7f90ee3965a0>",
                          "$type": "garage.torch._functions.NonLinearity"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    }
                  },
                  "$type": "torch.nn.modules.container.ModuleList"
                },
                "_output_layers": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "0": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 32,
                          "out_features": 1.0,
                          "$type": "torch.nn.modules.linear.Linear"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    }
                  },
                  "$type": "torch.nn.modules.container.ModuleList"
                }
              },
              "_output_dim": 1.0,
              "$type": "garage.torch.modules.mlp_module.MLPModule"
            }
          },
          "_input_dim": 11.0,
          "_hidden_sizes": [
            32,
            32
          ],
          "_learn_std": true,
          "_std_hidden_sizes": [
            32,
            32
          ],
          "_min_std": 1e-06,
          "_max_std": "None",
          "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
          "_std_hidden_w_init": {
            "$type": "builtins.function"
          },
          "_std_hidden_b_init": {
            "$type": "builtins.function"
          },
          "_std_output_nonlinearity": "None",
          "_std_output_w_init": {
            "$type": "builtins.function"
          },
          "_std_parameterization": "exp",
          "_hidden_nonlinearity": "<built-in method tanh of type object at 0x7f90ee3965a0>",
          "_hidden_w_init": {
            "$type": "builtins.function"
          },
          "_hidden_b_init": {
            "$type": "builtins.function"
          },
          "_output_nonlinearity": "None",
          "_output_w_init": {
            "$type": "builtins.function"
          },
          "_output_b_init": {
            "$type": "builtins.function"
          },
          "_layer_normalization": false,
          "_norm_dist_class": {
            "$typename": "torch.distributions.normal.Normal"
          },
          "_min_std_param": {
            "$type": "torch.Tensor"
          },
          "_max_std_param": "None",
          "_env_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "$type": "Policy.GaussianMLPPolicy.GaussianMLPPolicy"
        },
        "env": {
          "_env": {
            "env": {
              "env": {
                "env": {
                  "env": {
                    "fullpath": "/home/lw/.local/lib/python3.8/site-packages/gym/envs/mujoco/assets/inverted_double_pendulum.xml",
                    "model": "<mujoco._structs.MjModel object at 0x7f904d6183b0>",
                    "data": "<mujoco._structs.MjData object at 0x7f904d6183f0>",
                    "init_qpos": "array([0., 0., 0.])",
                    "init_qvel": "array([0., 0., 0.])",
                    "_viewers": {},
                    "frame_skip": 5,
                    "viewer": "None",
                    "observation_space": {
                      "dtype": "dtype('float64')",
                      "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
                      "_shape": [
                        11
                      ],
                      "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf])",
                      "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])",
                      "low_repr": "-inf",
                      "high_repr": "inf",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "action_space": {
                      "dtype": "dtype('float32')",
                      "bounded_below": "array([ True])",
                      "bounded_above": "array([ True])",
                      "_shape": [
                        1
                      ],
                      "low": "array([-1.], dtype=float32)",
                      "high": "array([1.], dtype=float32)",
                      "low_repr": "-1.0",
                      "high_repr": "1.0",
                      "_np_random": "None",
                      "$type": "gym.spaces.box.Box"
                    },
                    "render_mode": "None",
                    "renderer": {
                      "no_returns_render": [
                        "human"
                      ],
                      "single_render": [
                        "single_state_pixels",
                        "single_rgb_array",
                        "single_depth_array"
                      ],
                      "mode": "None",
                      "render": {
                        "$type": "functools.partial"
                      },
                      "render_list": [],
                      "$type": "gym.utils.renderer.Renderer"
                    },
                    "_ezpickle_args": [],
                    "_ezpickle_kwargs": {},
                    "$type": "gym.envs.mujoco.inverted_double_pendulum_v4.InvertedDoublePendulumEnv"
                  },
                  "_action_space": "None",
                  "_observation_space": "None",
                  "_reward_range": "None",
                  "_metadata": "None",
                  "new_step_api": true,
                  "checked_reset": false,
                  "checked_step": false,
                  "checked_render": false,
                  "$type": "gym.wrappers.env_checker.PassiveEnvChecker"
                },
                "_action_space": "None",
                "_observation_space": "None",
                "_reward_range": "None",
                "_metadata": "None",
                "new_step_api": false,
                "$type": "gym.wrappers.step_api_compatibility.StepAPICompatibility"
              },
              "_action_space": "None",
              "_observation_space": "None",
              "_reward_range": "None",
              "_metadata": "None",
              "new_step_api": true,
              "_has_reset": false,
              "_disable_render_order_enforcing": false,
              "$type": "gym.wrappers.order_enforcing.OrderEnforcing"
            },
            "_action_space": "None",
            "_observation_space": "None",
            "_reward_range": "None",
            "_metadata": "None",
            "new_step_api": false,
            "_max_episode_steps": 1000,
            "_elapsed_steps": "None",
            "$type": "gym.wrappers.time_limit.TimeLimit"
          },
          "_max_episode_length": 1000,
          "_render_modes": [
            "human",
            "rgb_array",
            "depth_array",
            "single_rgb_array",
            "single_depth_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "_shape": [
              1
            ],
            "low": "array([-1.], dtype=float32)",
            "high": "array([1.], dtype=float32)",
            "low_repr": "-1.0",
            "high_repr": "1.0",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
            "_shape": [
              11
            ],
            "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
            "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
            "low_repr": "-inf",
            "high_repr": "inf",
            "_np_random": "None",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 1000,
            "input_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "_shape": [
                1
              ],
              "low": "array([-1.], dtype=float32)",
              "high": "array([1.], dtype=float32)",
              "low_repr": "-1.0",
              "high_repr": "1.0",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "bounded_below": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "bounded_above": "array([False, False, False, False, False, False, False, False, False,\n       False, False])",
              "_shape": [
                11
              ],
              "low": "array([-inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf],\n      dtype=float32)",
              "high": "array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf],\n      dtype=float32)",
              "low_repr": "-inf",
              "high_repr": "inf",
              "_np_random": "None",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        "_env_steps": [],
        "_observations": [],
        "_last_observations": [],
        "_agent_infos": {},
        "_lengths": [],
        "_prev_obs": "None",
        "_eps_length": 0,
        "_episode_infos": {},
        "$type": "garage.sampler.default_worker.DefaultWorker"
      }
    ],
    "total_env_steps": 0,
    "$type": "garage.sampler.local_sampler.LocalSampler"
  },
  "_plotter": "None",
  "_start_time": "None",
  "_itr_start_time": "None",
  "step_itr": "None",
  "step_episode": "None",
  "enable_logging": true,
  "_n_workers": "None",
  "_worker_class": "None",
  "_worker_args": "None",
  "$type": "garage.trainer.Trainer"
}